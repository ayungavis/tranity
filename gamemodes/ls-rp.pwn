/*============================================================================
							   Trans Unity Roleplay
						   Script developed by DamianC
						   Based on Public Enemy Gamemode
							    Edited by unicorn
									  2017

  This script is specifically developed for personal use,
  on any server wants DamianC and cannot be used by another person
  without authorization (FoCo/DamianC). Gamemode owns a main characteristic of the system access-ul
  the script only one who knows your passphrase.

  TERMS OF USE:
  This Gamemode, the Hosting Service may be FoCo used only if
  the company has been privileged by the owner of the site mentioned above.
  Gamemode was scripted first for its use on
  owned by the DamianC servers or servers with authorization.

  Disclaimer:
  Please respect the terms above and leave credits from script
  in the place in which it lies.

  Information:
  This gamemode contains 40,000 lines, in which only 10,000 lines
  mapping objects (generated using the SA: MP Map Editor), the rest being just
  commands, variables, textdraw, stock and other types of scripting.
  In this gamemode will find PHP code-s which were written with the help of
  a includes found in directory (forum.) to mp.com. Thank you creator.

  USER CONTROL PANEL (aka CPU):
  It did so as UCP and GAMEMODE to be connected
  in order to have supreme command via the UCP Interface. UCP-ul
  owns a system so highly advanced that can help the players, and it's
  developed by ValentinScripting.com (V)
==============================================================================*/
  
#include <a_samp>
#include <a_mysql>
#include <zcmd>
#include <dini>
#include <sscanf2>
#include <foreach>
#include <streamer>
#include <easydialog>
#include <a_pause>
#include <mSelection>
#include <messagebox>
#include <serverobjects>
#include <progress>
#include <h_colors>
#include <OPSP>
#include <PlayerToPlayer>
#include <cuffs>
#include <strlib>
#include <YSI\y_va>
#pragma tabsize 0

//Anti DE-AMX - Added by Valentin
AntiDeAMX()
{
	new a[][] =
	{
		"Unarmed (Fist)",
		"Brass K"
	};
	#pragma unused a
}

//Global Variables for querys & format messages
new msg[256], query[500];
//Global Variables for querys & format messages

native IsValidVehicle(vehicleid);
native SetVehicleParamsCarWindows(vehicleid, driver, passenger, backleft, backright);
native GetVehicleParamsCarWindows(vehicleid, &driver, &passenger, &backleft, &backright); //This hasn't been added in 0.3x.. so I added it manual.

/*
Used CheckPoints & Race CheckPoints
-----------------------------------
1-14 - License Exam.
15-24 - Flying Exam.
25 - Owned player vehicle found, or when spawn.
26 - Trucking job (Loading).
27 - Trucking job (Dropping).
28 - Trucking job (Returning).
-----------------------------------
*/
//=========Remove========//
#if !defined MAX_REMOVED_OBJECTS
	#define MAX_REMOVED_OBJECTS 1000
#endif

enum ObiecteSterseENUM {_model, Float:_oX, Float:_oY, Float:_oZ, Float:_orX, Float:_orY, Float:_orZ, Float:_oRadius, restored}
new ObiecteSterse[MAX_REMOVED_OBJECTS][ObiecteSterseENUM];
//=========Texture=======//
new cantexture[MAX_PLAYERS] = 0;
//=========Badge=========//
new doesbadge[MAX_PLAYERS] = 0;
//=========Calls=========//
new Text3D:veicolo_callsign_testo[MAX_VEHICLES];
new veicolo_callsign_status[MAX_VEHICLES];
new vehicle_plate[128][MAX_VEHICLES];
//=========Damage========//

//      DIALOGS
#define MAX_BODY_PARTS 10
#define MAX_WEAPONS 55

new Damage[MAX_PLAYERS][MAX_BODY_PARTS][MAX_WEAPONS];
#define DEATH_RESET false
new Text3D:DamageShot[MAX_PLAYERS];
new Text3D:Injured[MAX_PLAYERS];

#define Format:%0(%1) format(%0, sizeof(%0), %1)
#define SetPlayerSpeedCap(%0,%1) CallRemoteFunction( "SetPlayerSpeedCap", "if", %0, %1 )
#define DisablePlayerSpeedCap(%0) CallRemoteFunction( "DisablePlayerSpeedCap", "i", %0 )

#define D_DAMAGES 41879654

#define BODY_PART_TORSO 3
#define BODY_PART_GROIN 4
#define BODY_PART_RIGHT_ARM 5
#define BODY_PART_LEFT_ARM 6
#define BODY_PART_RIGHT_LEG 7
#define BODY_PART_LEFT_LEG 8
#define BODY_PART_HEAD 9

#include <bodyparts>
//=========Graff=========//
#define COL_WHITE "{FFFFFF}"
#define COL_RED "{F81414}"
#define COL_GREEN "{008000}"
#define COL_LIGHTBLUE "{00CED1}"

#define SPRAYCANSOUND "http://k003.kiwi6.com/hotlink/bfd89n1rw9/spray_sound_effect_-_odg_os_sprayu_-_bruit_spray_-_spray_noise.mp3"
#define COLOR_LIGHTRED 0xFF8080FF
#define COLOR_VALENTINYELLOW 0xF8CB30FF
#define COLOR_GOVCHAT 0x9189EFFF

#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))


#define DIALOG_WELCOME 075
#define DIALOG_SELECT 076
#define DIALOG_INPUTGRAFF 077
#define DIALOG_COLOR 078
#define DIALOG_HAPPY 079
#define DIALOG_LIST 080
#define DIALOG_FONT 081
#define COL_GREY "{C3C3C3}" // 1
#define COL_WHITE "{FFFFFF}" // 2
#define COL_RED "{F81414}" // 3
#define COL_GREEN "{008000}" // 4
#define COL_LIGHTBLUE "{00CED1}" // 5
#define COL_ORANGE "{FF9900}" // 6
#define COL_BLACK "{000000}"
#define COLOR_DOC "0x9966FF"

#define GRAFFDIALOG ShowDialog(playerid, Show:<DIALOG_SELECT>, DIALOG_STYLE_LIST, "Menu", "Create a tag", "Select", "Exit");
#define GRAFFINPUT ShowDialog(playerid, Show:<DIALOG_INPUTGRAFF>, DIALOG_STYLE_INPUT, "Create", "Enter text to proceed", "Continue", "Cancel");
#define GRAFFINPUTER ShowDialog(playerid, Show:<DIALOG_INPUTGRAFF>, DIALOG_STYLE_INPUT, ""COL_WHITE"Create", ""COL_RED"ERROR: You have not entered anything \nPlease try again!", "Continue", "Cancel");
#define GRAFFCOLOR ShowDialog(playerid, Show:<DIALOG_COLOR>, DIALOG_STYLE_LIST, "Colors", "{000000}Black\n{FFFFFF}White\n{F81414}Red\n{00FF22}Green\n{00CED1}Blue\n{C3C3C3}Gray", "Select", "Exit");
#define GRAFFHAPPY ShowDialog(playerid, Show:<DIALOG_HAPPY>, DIALOG_STYLE_MSGBOX, "Menu", "Please enter text here", "Continue", "Cancel");
#define GRAFFLIST ShowDialog(playerid, Show:<DIALOG_LIST>,DIALOG_STYLE_LIST,"List",string,"Ok","Cancel");
#define GRAFFFONT ShowDialog(playerid, Show:<DIALOG_FONT>,DIALOG_STYLE_LIST,"Font","Comic Sans\nLevi Brush\nDripping\nDiploma","Ok","Cancel");

#define MAXGRAFFS 50
#define Graffitis "/Graffitis/%d.ini"
/*-------END OF INCLUDES/DEFINES-----------*/
new Float:g_fSpeedCap[ MAX_PLAYERS ] = { 0.0, ... };
new sprayammount[MAX_PLAYERS];
new old_vehicle[MAX_PLAYERS];
new NameTagHide[MAX_PLAYERS];
new InjuredMSG[MAX_PLAYERS];
new old_veh_seat[MAX_PLAYERS];
new timergate[MAX_PLAYERS];
new POBJECT[MAX_PLAYERS];
new POBJECTN[MAX_PLAYERS][96];
new PLights[MAX_PLAYERS];
new TLI, TLI2;
new Death[MAX_PLAYERS];
new InjuredTimer[MAX_PLAYERS];
new POBJECTC[MAX_PLAYERS][24];
new POBJECTF[MAX_PLAYERS][128];
new Float:XYZ[MAX_PLAYERS][6];
new objectids[MAX_VEHICLES];
new Text:crosshair[MAX_PLAYERS];
new playerveh[MAX_PLAYERS];
new GRAVEH[MAX_PLAYERS];
new spraytimer[MAX_PLAYERS];
new sprayammountch[MAX_PLAYERS];
new isveh[MAX_PLAYERS] = 0;
//new TimerLow[MAX_PLAYERS];
//new ValiLow[MAX_PLAYERS];
/*new RentBrowsingInt[MAX_PLAYERS];*/
new sprays = 0;
new servicepecosud;
//new newsgate;
//new	newsgatestatus = 0;
new graffmenup[MAX_PLAYERS] = 0;
new creator[MAX_PLAYERS][MAX_PLAYER_NAME];
new gammount;
new spraytimerx[MAX_PLAYERS];

/*-------END OF NEWS-----------*/

//****ENUM****

enum graffInfo
{
        graffcreator[MAX_PLAYER_NAME],graffname[96],Float:Xpos,Float:Ypos,Float:Zpos,Float:XYpos,Float:YYpos,Float:ZYpos,OBJECTID,grafont
}
new gInfo[MAXGRAFFS][graffInfo];

//=========Drugs=========//
#define DRUG_CRACK 1
#define DRUG_COCAINE 2
#define DRUG_MARIJUANA 3
#define DRUG_HEROIN 4
//=========Drugs=========//

//=========Check Points=========//
#define CAREXAM1 1
#define CAREXAM2 2
#define CAREXAM3 3
#define CAREXAM4 4
#define CAREXAM5 5
#define CAREXAM6 6
#define CAREXAM7 7
#define CAREXAM8 8
#define CAREXAM9 9
#define CAREXAM10 10
#define CAREXAM11 11
#define CAREXAM12 12
#define CAREXAM13 13
#define CAREXAM14 14
#define FLYEXAM1 15
#define FLYEXAM2 16
#define FLYEXAM3 17
#define FLYEXAM4 18
#define FLYEXAM5 19
#define FLYEXAM6 20
#define FLYEXAM7 21
#define FLYEXAM8 22
#define FLYEXAM9 23
#define FLYEXAM10 24
#define FINEVEH 25
#define TRUCKLOAD 26
#define TRUCKDROP 27
#define TRUCKRETURN 28
#define COMPSPOT 29
#define FISH 30
//=========Check Points=========//

//=========Factions=========//
#define LSPD 1
#define LSFD 2
#define SASD 3
#define DOCS 4
#define GOV 5
#define NEWS 6
#define TRANSC 7
//Types
#define FACTION_LEGAL 1
#define FACTION_ILLEGAL 2
//=========Factions=========//

//=========Jobs=========//
#define JOBLESS 0
#define TRUCKER 1
#define MECHANIC 2
#define TAXI 3
#define SWEEPER 4
#define DRUGDEALER 5
//=========Jobs=========//

//=========Truck Defines=========//
#define TRUCKER_RANK1 1
#define TRUCKER_RANK2 2
#define TRUCKER_RANK3 3
#define TRUCKER_RANK4 4
#define SWEEPER_RANK1 1
//=====================
#define BOBCAT_COMPS 3500
#define SADLER_COMPS 3500
#define YOSEMITE_COMPS 4000
#define BOXVILLE_COMPS 7000
#define YANKEE_COMPS 10000
#define LINERUNNER_COMPS 13000
//=====================
#define TRUCKER_1_PAYCHECK 400
#define TRUCKER_2_PAYCHECK 800
#define TRUCKER_3_PAYCHECK 1200
#define TRUCKER_4_PAYCHECK 1600
#define SWEEPER_1_PAYCHECK 800
//=====================
#define TRUCKER_TORANK_2 25
#define TRUCKER_TORANK_3 50
#define TRUCKER_TORANK_4 70
//=========Truck Defines=========//

#define KEY_HORN 2
#define KEY_ENTER 16
new Kevlar[MAX_PLAYERS];
//=========Food Stall Menu Menus=========//
new Menu:FoodStallMenu;
#define NOODLES_PRICE 50
#define PIZZA_PRICE 25
#define CHICKEN_PRICE 80
#define HOTDOG_PRICE 40
//=========Food Stall Menu Menus=========//

//=========Weapon Damages=========//
#define SDPistolDMG 10.0
#define DeagleDMG 0.5
#define ShotgunDMG 20.0
#define UziDMG 15.0
#define MP5DMG 15.0
#define AK47DMG 20.0
#define M4A1DMG 20.0
#define Tec9DMG 15.0
#define CountryRifleDMG 40.0
#define SniperRifleDMG 100.0
//=========Weapon Damages=========//

new storeitems[] = "1.Phone - $250\n2.Tool kit - $100\n3.Radio - $1500\n4.Mask - $100\n5.Cigarette lighter(40 uses) - $1\n6.Cigarette(20) - $10\n7.Zar - $5\n8.Canister - $75\n9.Pix - $5\n10.Baseball bat- $25\n11.Camera - $150";

//24/7 prices
#define CELLPRICE 250
#define TOOLPRICE 100
#define RADIOPRICE 1500
#define MASKPRICE 100
#define LIGHTERPRICE 1
#define CIGARPRICE 10
#define DICEPRICE 5
#define CANPRICE 75
#define PENPRICE 5
#define BATPRICE 25
#define CAMPRICE 150
//24/7 prices

//MySQL Information
new dbHandle;

#define SQL_HOST "localhost"
#define SQL_USER "ayungavis"
#define SQL_PASS "@Varius298641"
#define SQL_DB   "transunity"

//MySQL Information
#define INVALID_WEAPON_SLOT_ID -1
#define MAX_ZONE_NAME 28
#define MAXLEN 80
#define MAX_RANK_NAME 24
#define VEHICLES_GAS_TIMER 180000
#define HOSPITAL_WAIT 60000
//-------------------------
#define REPAIR_DEAD 0
#define REPAIR_ENGINE 1
#define REPAIR_BODY 2
#define REPAIR_PAINT 3
//-------------------------
#define BOOMBOX_PRICE 5000
//-------------------------
#define VEHICLE_RENT_COST 100
#define BIKE_RENT_COST 50
#define CARLIC_PRICE 150
#define FLYLIC_PRICE 1500
//==============Dynamic Vehicle Types==============//
#define RENT_VEHICLE 1
#define DMV_VEHICLE 2
#define RENT_BIKE 3
#define DMV_HELICOPTER 4
#define POLICE_CAR 5
#define POLICE_TOWTRUCK 6
#define LSFD_CAR 7
#define TRUCKER_CAR 8
#define GOV_CAR 9
#define SWEEP_CAR 10
//==============Dynamic Vehicle Types==============//
//==Admin-Levels==//
#define ADMIN_LEVEL_1 1
#define ADMIN_LEVEL_2 2
#define ADMIN_LEVEL_3 3
#define ADMIN_LEVEL_4 4
#define ADMIN_LEVEL_5 5
#define HIGH_ADMIN_LEVEL 2014
//==Admin-Levels==//

#define PreloadAnimLib(%1,%2)	ApplyAnimation(%1,%2,"null",0.0,0,0,0,0,0)

//Updating PVars - Very useful
#define UpdateIntVar(%0,%1,%2) SetIntVar(%0, %1, (GetIntVar(%0, %1) + %2))
#define UpdateFloarVar(%0,%1,%2) SetFloatVar(%0, %1, (GetFloatVar(%0, %1) + %2))
//Updating PVars - Very useful

#define HOLDING(%0) \
	((newkeys & (%0)) == (%0))

#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

#define toupper(%0) \
  (((%0) >= 'a' && (%0) <= 'z') ? ((%0) & ~0x20) : (%0))

#define tolower(%0) \
  (((%0) >= 'A' && (%0) <= 'Z') ? ((%0) | 0x20) : (%0))

#define SetPlayerHoldingObject(%1,%2,%3,%4,%5,%6,%7,%8,%9) SetPlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1,%2,%3,%4,%5,%6,%7,%8,%9)
#define StopPlayerHoldingObject(%1) RemovePlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define IsPlayerHoldingObject(%1) IsPlayerAttachedObjectSlotUsed(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)

#define WelcomeMSG ""EMBED_WHITE"SERVER: Welcome back to "ServerName"."
#define GameModeText "Trans RP "GameModeVersion""
#define GameModeVersion "1.0"
#define ServerName "Trans Unity Roleplay"
#define ServerWebsite "www.trans-unity.com"
#define ServerNick "Trans RP"
#define MAP_NAME "Los Santos"

#define ShowTextDraw TextDrawShowForPlayer
#define HideTextDraw TextDrawHideForPlayer

#define SCM SendClientMessage
#define SCMALL SendClientMessageToAll

#define F_BOXING FIGHT_STYLE_BOXING
#define F_KUNGFU FIGHT_STYLE_KUNGFU
#define F_GRABKICK FIGHT_STYLE_GRABKICK
#define F_KNEEHEAD FIGHT_STYLE_KNEEHEAD
#define F_ELBOW FIGHT_STYLE_ELBOW
#define F_NORMAL FIGHT_STYLE_NORMAL

//====Defines====
#define MAX_LABELS 50
#define MAX_JOBS 5
#define MAX_DOORS 50
#define MAX_INFOS 50
#define MAX_INTERIORS 100
#define MAX_BANKS 10
#define MAX_ATMS 50
#define MAX_GAS_STATIONS 20
#define MAX_HOUSES 700
#define MAX_BIZ 50
#define MAX_COMPLEX 30
#define MAX_FINES 10
#define MAX_WANTEDS 10
#define MAX_FURNITURE 50
#define MAX_HOUSE_WEAPONS 10
#define MAX_VEHICLE_WEAPONS 10
#define MAX_FOOD_STANDS 50
#define MAX_WEP_DROPS 200
#define MAX_RADIO_SLOTS 3
#define MAX_DEALERSHIPS 5
#define MAX_PARK_METERS 30
#define MAX_APBS 1000
#define MAX_FACTIONS 11
#define MAX_FACTION_DOORS 60
#define MAX_CAR_TICKETS 10
#define MAX_PLAYER_TICKETS 10
#define MAX_OWNED_VEHICLES 5
#define MAX_DRUGS 21
#define MAX_PLANTS 1000
#undef MAX_OBJECTS
#define MAX_OBJECTS 10000
#define MAX_RADIOS 1000
#define MAX_GARAGES 100
//====Defines====

new skinlist = mS_INVALID_LISTID;
new vehiclelist = mS_INVALID_LISTID;
new weaponlist = mS_INVALID_LISTID;
new buyable = mS_INVALID_LISTID;
new rentablecar = mS_INVALID_LISTID;
//===========Phone===========//
new PlayerText:phone0[MAX_PLAYERS];
new PlayerText:phone1[MAX_PLAYERS];
new PlayerText:phone2[MAX_PLAYERS];
new PlayerText:phone3[MAX_PLAYERS];
new PlayerText:phone4[MAX_PLAYERS];
new PlayerText:phone5[MAX_PLAYERS];
new PlayerText:phone6[MAX_PLAYERS];
new PlayerText:phone7[MAX_PLAYERS];
new PlayerText:phone8[MAX_PLAYERS];
new PlayerText:phone9[MAX_PLAYERS];
new PlayerText:phone10[MAX_PLAYERS];
new PlayerText:phone11[MAX_PLAYERS];
new PlayerText:phone12[MAX_PLAYERS];
new PlayerText:phone13[MAX_PLAYERS];
new PlayerText:phone14[MAX_PLAYERS];
new PlayerText:phone15[MAX_PLAYERS];
new PlayerText:phone16[MAX_PLAYERS];
//===========TextDraws===========//
new Text:ClothesText;
new PlayerText:RadioDraw[MAX_PLAYERS];
new PlayerText:ChannelDraw[MAX_PLAYERS];
new PlayerText:SlotDraw[MAX_PLAYERS];
new PlayerText:PrevButton[MAX_PLAYERS];
new PlayerText:NextButton[MAX_PLAYERS];
new PlayerText:WearButton[MAX_PLAYERS];
new PlayerText:Dusule1[MAX_PLAYERS];
new PlayerText:Dusule2[MAX_PLAYERS];
new PlayerText:Dusule3[MAX_PLAYERS];
new PlayerText:Captcha[40], TextArray[] = "POIUYTREWQWLKJHGFDSAMNBVCXZ123456789";
new Text:TruckerDraw[MAX_PLAYERS];
new PlayerText:FPSPingPacket[MAX_PLAYERS];
//new Text:HungerDraw[MAX_PLAYERS];
new Text:errormsg[MAX_PLAYERS];
new Text:jail_timeleft[MAX_PLAYERS];
new Text:hospital_timeleft[MAX_PLAYERS];
new Text:infotxt[MAX_PLAYERS];
new Text:ModText[MAX_PLAYERS];
new Text:STextdraw[MAX_PLAYERS];
new Text:Zones[MAX_PLAYERS];
new Text:TimeTD[MAX_PLAYERS];
new Text:NewsTD[MAX_PLAYERS];
//===========TextDraws===========//

/*new pAccessingRent[MAX_PLAYERS];*/

//Admin stuff

//Global stuff
new engine,lights,alarm,doors,bonnet,boot,objective;
new checkgastimer;
new onemintimer;
new paydaytimer;
new checkstatus;
//Advert System
new AdvertWait = 0;
new VehSpawned = 0;
//Advert System

//PayDay System
new ghour = 0;
new gminute = 0;
new gsecond = 0;
new timeshift = 0;
new shifthour;
//PayDay System

new bool:noooc = true;

//Player stuff
new levelexp = 4; //Adding 4 exp every level.

/*
	##############################################################
	######################## DEFINE'S ############################
	##############################################################
*/

// ######### Config's #########
#define 	SPRAYTAG_FOLDER 			"spraytags/%s.ini"

#define 	MAX_PLAYERS_TAGS 			(5) 					// Maximum spray tags created by player.
#define 	SPRAY_TAG_TIMER 			(4) 					// Seconds to create the spray tag.
#define 	SPRAY_TAG_OBJECT 			(19353) 				// Spray Tag Object ID
#define 	SPRAY_TAG_OBJECT_DISTANCE 	(200.0) 				// Distance that can be seen the spray tag.

// ######### Custom Dialog's Type #########
#define 	TYPE_LIST_MENU 				(0)
#define 	TYPE_LIST_EDIT 				(1)
#define 	TYPE_LIST_CREATE 			(2)
#define 	TYPE_LIST_TAGS 				(3)
#define 	TYPE_LIST_TAGS_DELETE 		(4)
#define 	TYPE_LIST_TAGS_CREATE 		(5)
#define 	TYPE_LIST_TAGS_FIND 		(6)
/*#define 	RENT_CAR     				(7)*/

// ######### Dialog's ID #########
#define 	SPRAYTAG_MENU 				(9800)
#define 	SPRAYTAG_DELETE 			(9801)
#define 	SPRAYTAG_CREATE 			(9802)
#define 	SPRAYTAG_CREATE_MAIN 		(9803)
#define 	SPRAYTAG_CREATE_TEXT 		(9804)
#define 	SPRAYTAG_CREATE_FONT 		(9805)
#define 	SPRAYTAG_CREATE_SIZE 		(9806)
#define 	SPRAYTAG_CREATE_COLOR 		(9807)
#define 	SPRAYTAG_CREATE_FINISH 		(9808)
#define 	SPRAYTAG_EDIT_MAIN 			(9809)
#define 	SPRAYTAG_EDIT_TEXT 			(9810)
#define 	SPRAYTAG_EDIT_FONT 			(9811)
#define 	SPRAYTAG_EDIT_SIZE 			(9812)
#define 	SPRAYTAG_EDIT_COLOR 		(9813)
#define 	SPRAYTAG_EDIT_FINISH 		(9814)
#define 	SPRAYTAG_EDIT_LIST 			(9815)
#define 	SPRAYTAG_FIND				(9816)
#define 	SPRAYTAG_DIALOG_RETURN		(9817)

/*
	##############################################################
	########################## VAR'S #############################
	##############################################################
*/

enum SPRAYTAG_DATA
{
	_spObject,
	_spText[50],
	_spFontColor,
	_spBold,
	_spFontSize,
	_spFont[50],
	Float:_spPosX,
	Float:_spPosY,
	Float:_spPosZ,
	Float:_spPosRX,
	Float:_spPosRY,
	Float:_spPosRZ,
	_spVW,
	_spInt
}

/*
	##############################################################
	######################### PUBLIC'S ###########################
	##############################################################
*/

enum RADIOS_INFO
{
	radioID,
	radioChannel,
	radioOwner[128],
	radioPass[128],
	radioOn
}
new RadiosInfo[MAX_RADIOS][RADIOS_INFO];

enum GARAGES_INFO
{
	garageID,
	garageType,
	garageOwner[128],
	garageStatus,
	garageDescribe[255]
}
new GaragesInfo[MAX_GARAGES][GARAGES_INFO];

//============================Tolls============================//
// Main configuration
#define TollCost (50) 					// How much it costs to pass the tolls
#define TollDelayCop (4) 				// The timespace in seconds between each /toll command for all cops (To avoid spam)
#define TollOpenDistance (4.0) 			// The distance in units the player can be from the icon to open the toll

// Other defines
#define MAX_TOLLS (5) // Amount of tolls
#define INVALID_TOLL_ID (-1)
#define RichmanToll (0)
#define FlintToll (1)
#define LVToll (2)
#define BlueberryTollR (3)
#define BlueberryTollL (4)

#define L_sz_TollStringLocked ("Toll guard says: Sorry but barrier is closed temporary, please come later.")
#define L_sz_TollStringNoMoney ("You don't have the money to past.")
#define L_sz_TollStringBye ("Toll guard says: Thank you, drive safe.")
#define L_sz_TollStringHurryUp ("You have 6 seconds to get past the barrier, make sure you don't get stuck")
//============================Tolls============================//

//Tolls
new L_a_RequestAllowedCop, // The same timer for all /toll changes
	L_a_TollObject[MAX_TOLLS*2]; // 0 & 1 = Richhman, 2 & 3 = Flint, 4 & 5 = LV, 6 & 7 = BlueBerry right
//Tolls

new FinesID;

//Trucking variables
new bool:Trucking[MAX_PLAYERS char],
	LoadingTruck[MAX_PLAYERS char],
	bool:DroppingOff[MAX_PLAYERS char],
	TruckVehicle[MAX_PLAYERS],
	TruckingMoney[MAX_PLAYERS],
	TruckTrailer[MAX_PLAYERS],
	Float:GatherX[MAX_PLAYERS],
	Float:GatherY[MAX_PLAYERS],
	Float:GatherZ[MAX_PLAYERS],
	Float:DropOffX[MAX_PLAYERS],
	Float:DropOffY[MAX_PLAYERS],
	Float:DropOffZ[MAX_PLAYERS];

new TruckComps[MAX_VEHICLES];
//Trucking variables

//Mechanic variables
new RepairOffer[MAX_PLAYERS],
	VehicleToRepair[MAX_PLAYERS],
	OldVehicle[MAX_PLAYERS],
	RepairService[MAX_PLAYERS][4],
	RepairTime[MAX_PLAYERS char],
	bool:GettingRepair[MAX_PLAYERS char],
	RefillPrice[MAX_PLAYERS],
	RefillOffer[MAX_PLAYERS];
//Mechanic variables

//Taxi variables
new bool:TaxiDuty[MAX_PLAYERS char],
	TaxiFare[MAX_PLAYERS char],
	bool:TaxiStart[MAX_PLAYERS char],
	TaxiMoney[MAX_PLAYERS],
	TaxiMade[MAX_PLAYERS];
//Taxi variables

new
	bool:gOOC[MAX_PLAYERS char],
	DoorEntered[MAX_PLAYERS],
    ComplexEntered[MAX_PLAYERS],
	HouseEntered[MAX_PLAYERS],
	BizEntered[MAX_PLAYERS],
	bool:maskOn[MAX_PLAYERS char],
	bool:Mask[MAX_PLAYERS char],
	Painting[MAX_PLAYERS char],
	VehColor1[MAX_PLAYERS char],
	VehColor2[MAX_PLAYERS char],
	HospitalWait[MAX_PLAYERS char],
	infotxt_expire[MAX_PLAYERS char],
	pToAccept[MAX_PLAYERS],
	vToAccept[MAX_PLAYERS],
	prToAccept[MAX_PLAYERS],
	spawnVehicle[MAX_PLAYERS],
	bool:ToolKit[MAX_PLAYERS char],
	JackingEngine[MAX_PLAYERS],
	JackingLock[MAX_PLAYERS],
	DoorJacking[MAX_PLAYERS],
	bool:IsSmoking[MAX_PLAYERS char],
	bool:IsModding[MAX_PLAYERS char],
	bool:BuyingPaintJob[MAX_PLAYERS char],
	bool:CheckingBot[MAX_PLAYERS char],
	bool:TesterChat[MAX_PLAYERS char],
	bool:OnAnim[MAX_PLAYERS char],
	SkinSlot[MAX_PLAYERS],
	Seatbelt[MAX_PLAYERS],
	togpms[MAX_PLAYERS],
	Screenshot[MAX_PLAYERS],
	//Newspaper[MAX_PLAYERS],
	SweepTura[MAX_PLAYERS],
	radar[MAX_PLAYERS],
	FriskApprove[MAX_PLAYERS],
	Mealeat[MAX_PLAYERS],
    //TimerDeath[MAX_PLAYERS],
    TimerDeath1[MAX_PLAYERS],
	Sweep[MAX_PLAYERS],
	CPSweep[MAX_PLAYERS],
    Tagcolor[MAX_PLAYERS],
    CarLicDmv[MAX_PLAYERS],
    FlyLicDmv[MAX_PLAYERS],
	HireRequester[MAX_PLAYERS],
	FactionRequest[MAX_PLAYERS],
	JustCasinoed[MAX_PLAYERS],
	DrunkLevel[MAX_PLAYERS],
	bool:GasCan[MAX_PLAYERS char],
	bool:CopDuty[MAX_PLAYERS char],
	bool:TransDuty[MAX_PLAYERS char],
	bool:GovDuty[MAX_PLAYERS char],
	bool:NewsDuty[MAX_PLAYERS char],
	bool:DeputyDuty[MAX_PLAYERS char],
	bool:DocDuty[MAX_PLAYERS char],
	bool:MedicDuty[MAX_PLAYERS char],
	bool:SwatDuty[MAX_PLAYERS char],
	bool:Cuffed[MAX_PLAYERS char],
	bool:TazerActive[MAX_PLAYERS char],
	bool:BeanbagActive[MAX_PLAYERS char],
	bool:Tazed[MAX_PLAYERS char],
	bool:Beanbag[MAX_PLAYERS char],
	bool:OnCCTV[MAX_PLAYERS char],
	MDCAdd[MAX_PLAYERS],
	TowingCar[MAX_PLAYERS],
	RoadBlocks[MAX_PLAYERS][11],
	PoliceLines[MAX_PLAYERS][20],
	bool:isAFK[MAX_PLAYERS char],
	PickingTime[MAX_PLAYERS char],
	PlantingTime[MAX_PLAYERS char],
	AFKTime[MAX_PLAYERS],
	PoliceObjects[MAX_PLAYERS][MAX_PLAYER_ATTACHED_OBJECTS];

//Cellphone System
new
	cellOn[MAX_PLAYERS char],
	cellRingTime[MAX_PLAYERS char];
//Cellphone System
new factionon[MAX_PLAYERS char];

//Player timers
new LoginTimer[MAX_PLAYERS char] = 0;
//Player timers
/*//RENTCAR
new Text:Textdraw0[MAX_PLAYERS];
new Text:Textdraw1[MAX_PLAYERS];
new Text:Textdraw2[MAX_PLAYERS];
new Text:Textdraw3[MAX_PLAYERS];
new Text:Textdraw4[MAX_PLAYERS];
new Text:Textdraw5[MAX_PLAYERS];
new Text:Textdraw6[MAX_PLAYERS];
new Text:Textdraw7[MAX_PLAYERS];
new Text:Textdraw8[MAX_PLAYERS];
new Text:Textdraw9[MAX_PLAYERS];
new Text:Textdraw10[MAX_PLAYERS];
new Text:Textdraw11[MAX_PLAYERS];
new Text:Textdraw12[MAX_PLAYERS];
new Text:Textdraw13[MAX_PLAYERS];
new Text:Textdraw14[MAX_PLAYERS];
new Text:Textdraw15[MAX_PLAYERS];
new Text:Textdraw16[MAX_PLAYERS];
new Text:Textdraw17[MAX_PLAYERS];
new Text:Textdraw18[MAX_PLAYERS];
new Text:Textdraw19[MAX_PLAYERS];
new Text:Textdraw20[MAX_PLAYERS];
new Text:Textdraw21[MAX_PLAYERS];
new Text:Textdraw22[MAX_PLAYERS];
new Text:Textdraw23[MAX_PLAYERS];*/
//RENTCAR
//Fuel & Speedo
new Text:SpeedText[MAX_PLAYERS];
new Text:FuelText[MAX_PLAYERS];
new Gas[MAX_VEHICLES char];

//Fuel & Speedo

//Vehicle's stuff
new bool:engineOn[MAX_VEHICLES char];
new vLocked[MAX_VEHICLES char];
new bool:adminVeh[MAX_VEHICLES char];
new Siren[MAX_VEHICLES];
new Siren2[MAX_VEHICLES];
//Vehicle's stuff

//Server-Sidefd Weapons
new Weapons[MAX_PLAYERS][47];
//Server-Sided Weapons

//=================Includes=================//
#include "/transunity/Enums.inc" // PlayerInfo's and 'new' stuff
#include "/transunity/Forwards.inc" // Forward's for publics
//=================Includes=================//

enum SAZONE_MAIN {
	SAZONE_NAME[28],
	Float:SAZONE_AREA[6]
};

static const gSAZones[][SAZONE_MAIN] = {
	//	NAME                            AREA (Xmin,Ymin,Zmin,Xmax,Ymax,Zmax)
	{"The Big Ear",	                {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
	{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
	{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
	{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
	{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
	{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
	{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
	{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
	{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
	{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
	{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
	{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
	{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
	{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
	{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
	{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
	{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
	{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
	{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
	{"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
	{"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
	{"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
	{"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
	{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
	{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
	{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
	{"Pershing Apartments",         {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
	{"Pershing Apartments",         {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
	{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
	{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
	{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
	{"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
	{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
	{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
	{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
	{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
	{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
	{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
	{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
	{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
	{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
	{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
	{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
	{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
	{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
	{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
	{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
	{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
	{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
	{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
	{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
	{"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
	{"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
	{"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
	{"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
	{"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
	{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
	{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
	{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
	{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
	{"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
	{"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
	{"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
	{"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
	{"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
	{"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
	{"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
	{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
	{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
	{"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
	{"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
	{"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
	{"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
	{"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
	{"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
	{"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
	{"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
	{"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
	{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
	{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
	{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
	{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
	{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
	{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
	{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
	{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
	{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
	{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
	{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
	{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
	{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
	{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
	{"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
	{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
	{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
	{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
	{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
	{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
	{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
	{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
	{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
	{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
	{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
	{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
	{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
	{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
	{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
	{"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
	{"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
	{"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
	{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
	{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
	{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
	{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
	{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
	{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
	{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
	{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
	{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
	{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
	{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
	{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
	{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
	{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
	{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
	{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
	{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
	{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
	{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
	{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
	{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
	{"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
	{"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
	{"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
	{"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
	{"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
	{"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
	{"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
	{"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
	{"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
	{"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
	{"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
	{"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
	{"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
	{"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
	{"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
	{"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
	{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
	{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
	{"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
	{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
	{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
	{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
	{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
	{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
	{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
	{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
	{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
	{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
	{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
	{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
	{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
	{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
	{"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
	{"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
	{"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
	{"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
	{"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
	{"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
	{"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
	{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
	{"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
	{"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
	{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
	{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
	{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
	{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
	{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
	{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
	{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
	{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
	{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
	{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
	{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
	{"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
	{"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
	{"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
	{"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
	{"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
	{"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
	{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
	{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
	{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
	{"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
	{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
	{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
	{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
	{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
	{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
	{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
	{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
	{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
	{"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
	{"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
	{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
	{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
	{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
	{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
	{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
	{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
	{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
	{"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
	{"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
	{"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
	{"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
	{"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
	{"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
	{"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
	{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
	{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
	{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
	{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
	{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
	{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
	{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
	{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
	{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
	{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
	{"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
	{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
	{"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
	{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
	{"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
	{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
	{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
	{"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
	{"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
	{"Playa Del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
	{"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
	{"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
	{"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
	{"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
	{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
	{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
	{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
	{"Randolph Industrial Estate",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
	{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
	{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
	{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
	{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
	{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
	{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
	{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
	{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
	{"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
	{"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
	{"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
	{"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
	{"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
	{"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
	{"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
	{"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
	{"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
	{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
	{"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
	{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
	{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
	{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
	{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
	{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
	{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
	{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
	{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
	{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
	{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
	{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
	{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
	{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
	{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
	{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
	{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
	{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
	{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
	{"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
	{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
	{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
	{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
	{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
	{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
	{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
	{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
	{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
	{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
	{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
	{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
	{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
	{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
	{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
	{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
	{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
	{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
	{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
	{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
	{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
	{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
	{"The Four Dragons Casino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
	{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
	{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
	{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
	{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
	{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
	{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
	{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
	{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
	{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
	{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
	{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
	{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
	{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
	{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
	{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
	{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
	{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
	{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
	{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
	{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
	{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
	{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
	{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
	{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
	{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
	{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
	{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
	{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
	{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
	{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
	{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
	{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
	{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
	{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
	{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
	{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},

	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

stock ConnectMySQL()
{
	dbHandle = mysql_connect(SQL_HOST, SQL_USER, SQL_DB, SQL_PASS);
	mysql_log(LOG_ERROR, LOG_TYPE_HTML);
	/*if(mysql_ping() == -1)
	{
	    printf("ERROR :Nu s-a putut conecta la baza de date.");
	    //printf("Ai futut iara Gamemode-ul.");
	    //printf("Prost esti. CTRL+Z");
	} else {
		printf("Conectat la "SQL_HOST". Username: "SQL_USER"");
	}*/
	return 1;
}

main()
{
	new sendcmd[128];
	print("\n----------------------------------");
	print(" "GameModeText"");
	print("----------------------------------\n");
	format(sendcmd, sizeof(sendcmd), "mapname %s", MAP_NAME);
	SendRconCommand(sendcmd);
}


public OnGameModeInit()
{
    AntiDeAMX();
	ConnectMySQL();
	AddLabelsFromFile();
	AddDoorsFromFile();
	AddFactionDoors();
	AddDynamicGates();
	AddATMFromFile();
	AddAdminTeleports();
	AddDynamicObjects();
	AddDynamicInfos();
	AddDynamicGasStations();
	AddDynamicBanks();
	AddDynamicVehicles();
	AddDynamicHouses();
	AddDynamicComplexs();
	AddDynamicBiz();
	AddDynamicStands();
	AddDynamicMeters();
	LoadApbs();
	AddDynamicFactions();
	AddDynamicJobs();
	AddRadios();
	AddMoveDoorsFromFile();
	AddDynamicCCTV();
	LoadDealerShips();
	TextDraws_Init();
	SetCurrentTime();
	CreateAllMenus();
	AddTolls();
	AddObjectsServer();
	AddPlants();
	LoadGraffitis();
	loadgraffs();
	foreach(Player, i)
	{
	    killgr(i);
	}
	DisableInteriorEnterExits();
	ManualVehicleEngineAndLights();
	AllowInteriorWeapons(1);
	EnableStuntBonusForAll(0);
	ShowPlayerMarkers(0);
	SetNameTagDrawDistance(25.0);
	SetGameModeText(GameModeText);
	AddPlayerClass(0, 1958.3783, 1343.1572, 15.3746, 269.1425, 0, 0, 0, 0, 0, 0);
	CreateDynamicPickup(1314, 1, 2041.0103,-1761.0953,13.5469, 0);
  	CreateDynamicPickup(1239, 1, 716.6247,-574.5724,-52.2113);
	//Loading model stuff to the skin menu
	skinlist = LoadModelSelectionMenu("skins.txt");
	vehiclelist = LoadModelSelectionMenu("vehicles.txt");
	weaponlist = LoadModelSelectionMenu("guns.txt");
	buyable = LoadModelSelectionMenu("buyable.txt");
	rentablecar = LoadModelSelectionMenu("rentablecar.txt");
	//Loading model stuff to the skin menu
	AddObjects();
	AddHousesInteriors();
	checkgastimer = SetTimer("CheckGas", VEHICLES_GAS_TIMER, 1);
	onemintimer = SetTimer("OneMinuteTimer", 60000, 1);
	SetTimer("GlobalSaving", 100000, 1);
	SetTimer("SavePosition", 20000, 1);
	SetTimer("OnScriptUpdate", 1000, true); // Packet
	SetTimer("Zones_Update", 500, 1); // Zones Update
	paydaytimer = SetTimer("AddPayDayTime", 240000, 1);
	checkstatus = SetTimer("CheckStatus", 1000, 1);
	//hungertimer = SetTimer("CheckHunger", 900000, 1);
	for(new c = 0; c < MAX_VEHICLES; c++)
	{
		Gas{c} = 100;
	}
	//Reseting player vehicle key & slot
	format(query, sizeof(query), "UPDATE `users` SET `carkey` = '0', `vehslot` = '0'");
	mysql_function_query(dbHandle, query, false, "", "");
	//Reseting player vehicle key & slot
	return 1;
}

public AddObjectsServer()
{
//BANCA


	new cobj110 = CreateDynamicObject(19354, 540.518982, 1412.909058, 2001.865967, 0.000000, 0.000000, 314.993988);
	SetDynamicObjectMaterial(cobj110, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(1557, 540.460022, 1412.938965, 2000.186035, 0.000000, 0.000000, 45.000000);
	CreateDynamicObject(1557, 542.596008, 1415.078979, 2000.186035, 0.000000, 0.000000, 225.000000);

	new cobj111 = CreateDynamicObject(19354, 542.784973, 1415.172974, 2001.865967, 0.000000, 0.000000, 314.993988);
	SetDynamicObjectMaterial(cobj111, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj112 = CreateDynamicObject(19462, 540.252991, 1415.026001, 2003.667969, 0.000000, 90.000000, 314.993988);
	SetDynamicObjectMaterial(cobj112, 0, 18031, "cj_exp", "mp_furn_floor");

	CreateDynamicObject(1704, 541.614014, 1414.843018, 2003.755005, 0.000000, 0.000000, 225.000000);
	CreateDynamicObject(1704, 540.346008, 1413.546997, 2003.755005, 0.000000, 0.000000, 225.000000);

	new cobj113 = CreateDynamicObject(19358, 541.442017, 1411.781006, 2001.270020, 90.000000, 0.000000, 225.000000);
	SetDynamicObjectMaterial(cobj113, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj114 = CreateDynamicObject(19358, 542.598999, 1412.948975, 2002.786011, 0.000000, 90.000000, 135.000000);
	SetDynamicObjectMaterial(cobj114, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(14892, 542.939026, 1414.255005, 2003.156006, 0.000000, 0.000000, 90.000000);

	new cobj115 = CreateDynamicObject(19377, 538.750000, 1416.475952, 2000.098999, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj115, 0, 4829, "airport_las", "LASLACMA6");


	new cobj116 = CreateDynamicObject(19358, 543.783997, 1414.071045, 2001.275024, 90.000000, 0.000000, 225.000000);
	SetDynamicObjectMaterial(cobj116, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj117 = CreateDynamicObject(19360, 541.658997, 1411.708984, 2000.260010, 0.000000, 90.000000, 314.993988);
	SetDynamicObjectMaterial(cobj117, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj118 = CreateDynamicObject(19360, 543.943970, 1413.995972, 2000.260010, 0.000000, 90.000000, 314.993988);
	SetDynamicObjectMaterial(cobj118, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(1704, 542.940002, 1416.167969, 2003.755005, 0.000000, 0.000000, 225.000000);

	new cobj119 = CreateDynamicObject(19354, 540.518982, 1412.907959, 2005.359009, 0.000000, 0.000000, 314.993988);
	SetDynamicObjectMaterial(cobj119, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj1110 = CreateDynamicObject(19354, 542.784973, 1415.172974, 2005.359009, 0.000000, 0.000000, 314.993988);
	SetDynamicObjectMaterial(cobj1110, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj1111 = CreateDynamicObject(19462, 537.788025, 1417.489014, 2003.666992, 0.000000, 90.000000, 314.993988);
	SetDynamicObjectMaterial(cobj1111, 0, 18031, "cj_exp", "mp_furn_floor");

	CreateDynamicObject(19171, 541.046997, 1413.576050, 2006.365967, 90.000000, 270.000000, 315.000000);
	CreateDynamicObject(19170, 542.106995, 1414.636963, 2006.365967, 90.000000, 270.000000, 315.000000);

	new cobj1112 = CreateDynamicObject(2168, 536.252014, 1417.213989, 2000.186035, 0.000000, 0.000000, 45.000000);
	SetDynamicObjectMaterial(cobj1112, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(2942, 537.226013, 1418.697021, 2000.828003, 0.000000, 0.000000, 44.993999);
	CreateDynamicObject(2942, 536.604004, 1418.072021, 2000.828003, 0.000000, 0.000000, 44.993999);
	CreateDynamicObject(2942, 537.854004, 1419.322021, 2000.828003, 0.000000, 0.000000, 44.993999);
	CreateDynamicObject(2942, 535.986023, 1417.451050, 2000.828003, 0.000000, 0.000000, 45.000000);

	new cobj1113 = CreateDynamicObject(2168, 538.783997, 1419.739990, 2000.186035, 0.000000, 0.000000, 44.993999);
	SetDynamicObjectMaterial(cobj1113, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(1704, 536.182007, 1416.703003, 2003.755005, 0.000000, 0.000000, 135.000000);

	new cobj1114 = CreateDynamicObject(19452, 540.088013, 1410.318970, 2004.909058, 90.000000, 0.000000, 25.000000);
	SetDynamicObjectMaterial(cobj1114, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1115 = CreateDynamicObject(19446, 536.765991, 1418.826050, 2001.865967, 0.000000, 0.000000, 314.993988);
	SetDynamicObjectMaterial(cobj1115, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(2747, 537.236023, 1418.422974, 2004.166016, 0.000000, 0.000000, 45.000000);

	new cobj1116 = CreateDynamicObject(19452, 545.440002, 1415.750000, 2004.909058, 90.000000, 0.000000, 70.000000);
	SetDynamicObjectMaterial(cobj1116, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1117 = CreateDynamicObject(19452, 536.765991, 1418.810059, 1998.598022, 0.000000, 0.000000, 314.993988);
	SetDynamicObjectMaterial(cobj1117, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1118 = CreateDynamicObject(19452, 536.760010, 1418.828979, 1998.598022, 0.000000, 0.000000, 314.993988);
	SetDynamicObjectMaterial(cobj1118, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1119 = CreateDynamicObject(19443, 543.216003, 1420.000000, 2003.666992, 0.000000, 90.000000, 314.993988);
	SetDynamicObjectMaterial(cobj1119, 0, 18031, "cj_exp", "mp_furn_floor");

	CreateDynamicObject(2195, 536.984009, 1419.875000, 2000.753052, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1704, 536.614014, 1419.505981, 2000.186035, 0.000000, 0.000000, 225.000000);
	CreateDynamicObject(2195, 535.583008, 1418.546021, 2000.753052, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1704, 538.320007, 1420.161011, 2003.755005, 0.000000, 0.000000, 315.000000);
	CreateDynamicObject(1704, 535.309021, 1418.193970, 2000.186035, 0.000000, 0.000000, 225.000000);

	new cobj1120 = CreateDynamicObject(19427, 534.239014, 1415.698975, 2001.865967, 0.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(cobj1120, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj1121 = CreateDynamicObject(19384, 534.239014, 1413.296997, 2001.865967, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj1121, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(19169, 541.046997, 1413.576050, 2007.865967, 90.000000, 270.000000, 315.000000);

	new cobj1122 = CreateDynamicObject(19446, 534.674988, 1411.785034, 2001.865967, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj1122, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj1123 = CreateDynamicObject(19427, 539.820007, 1421.284058, 2001.865967, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj1123, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj1124 = CreateDynamicObject(19360, 541.674011, 1411.728027, 2007.286011, 0.000000, 90.000000, 314.993988);
	SetDynamicObjectMaterial(cobj1124, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(19168, 542.106995, 1414.636963, 2007.865967, 90.000000, 270.000000, 315.000000);

	new cobj1125 = CreateDynamicObject(19443, 534.809021, 1412.524048, 2003.666016, 0.000000, 90.000000, 314.993988);
	SetDynamicObjectMaterial(cobj1125, 0, 18031, "cj_exp", "mp_furn_floor");

	CreateDynamicObject(2251, 537.130005, 1418.520020, 2005.432007, 0.000000, 0.000000, 0.000000);

	new cobj1126 = CreateDynamicObject(19384, 542.224976, 1421.282959, 2001.865967, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj1126, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(3850, 535.450012, 1417.583008, 2004.300049, 0.000000, 0.000000, -44.988998);

	new cobj1127 = CreateDynamicObject(19360, 543.942993, 1413.994995, 2007.286011, 0.000000, 90.000000, 314.993988);
	SetDynamicObjectMaterial(cobj1127, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(3850, 537.895020, 1420.030029, 2004.300049, 0.000000, 0.000000, -44.988998);
	CreateDynamicObject(1704, 538.012024, 1420.883057, 2000.186035, 0.000000, 0.000000, 225.000000);

	new cobj1128 = CreateDynamicObject(19433, 534.250000, 1414.827026, 1998.598022, 0.000000, 0.000000, 179.988998);
	SetDynamicObjectMaterial(cobj1128, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1129 = CreateDynamicObject(19433, 534.229004, 1414.827026, 1998.598022, 0.000000, 0.000000, 179.983002);
	SetDynamicObjectMaterial(cobj1129, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1130 = CreateDynamicObject(19446, 543.898987, 1421.004028, 2001.865967, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1130, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj1131 = CreateDynamicObject(19433, 540.698975, 1421.271973, 1998.598022, 0.000000, 0.000000, 269.989014);
	SetDynamicObjectMaterial(cobj1131, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1132 = CreateDynamicObject(19433, 540.700012, 1421.291016, 1998.598022, 0.000000, 0.000000, 269.989014);
	SetDynamicObjectMaterial(cobj1132, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(15038, 543.476013, 1420.676025, 2004.369995, 0.000000, 0.000000, 20.000000);

	new cobj1133 = CreateDynamicObject(19433, 534.250000, 1411.733032, 1998.598022, 0.000000, 0.000000, 179.983002);
	SetDynamicObjectMaterial(cobj1133, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1134 = CreateDynamicObject(19433, 534.229004, 1411.734009, 1998.598022, 0.000000, 0.000000, 179.983002);
	SetDynamicObjectMaterial(cobj1134, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1135 = CreateDynamicObject(19452, 534.674988, 1410.130005, 2000.260010, 0.000000, 90.000000, 90.000000);
	SetDynamicObjectMaterial(cobj1135, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1136 = CreateDynamicObject(19433, 543.789001, 1421.271973, 1998.598022, 0.000000, 0.000000, 269.993988);
	SetDynamicObjectMaterial(cobj1136, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1137 = CreateDynamicObject(19433, 543.789001, 1421.291016, 1998.598022, 0.000000, 0.000000, 269.989014);
	SetDynamicObjectMaterial(cobj1137, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(15038, 534.067017, 1412.276001, 2004.370972, 0.000000, 0.000000, 19.995001);

	new cobj1138 = CreateDynamicObject(19443, 544.250000, 1421.187988, 2003.666992, 0.000000, 90.000000, 314.993988);
	SetDynamicObjectMaterial(cobj1138, 0, 18031, "cj_exp", "mp_furn_floor");


	new cobj1139 = CreateDynamicObject(19354, 540.518982, 1412.907959, 2008.854004, 0.000000, 0.000000, 314.993988);
	SetDynamicObjectMaterial(cobj1139, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj1140 = CreateDynamicObject(19443, 534.517029, 1410.594971, 2003.666992, 0.000000, 90.000000, 314.993988);
	SetDynamicObjectMaterial(cobj1140, 0, 18031, "cj_exp", "mp_furn_floor");


	new cobj1141 = CreateDynamicObject(19446, 534.674988, 1411.785034, 2005.359009, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj1141, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj1142 = CreateDynamicObject(19354, 542.784973, 1415.172974, 2008.854004, 0.000000, 0.000000, 314.993988);
	SetDynamicObjectMaterial(cobj1142, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj1143 = CreateDynamicObject(19452, 545.549011, 1421.005005, 2000.260010, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1143, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1144 = CreateDynamicObject(19446, 543.898987, 1421.004028, 2005.359009, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1144, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(2921, 538.671997, 1421.473022, 2005.550049, 0.000000, 350.000000, 0.000000);

	new cobj1145 = CreateDynamicObject(19370, 532.380981, 1414.067993, 2003.667969, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1145, 0, 18031, "cj_exp", "mp_furn_floor");


	new cobj1146 = CreateDynamicObject(19377, 538.668030, 1416.620972, 2009.774048, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1146, 0, 14533, "pleas_dome", "ornate_ceiling1_sfw");

	CreateDynamicObject(3850, 539.927002, 1423.238037, 2004.300049, 0.000000, 0.000000, 0.000000);

	new cobj1147 = CreateDynamicObject(19370, 532.380981, 1410.859009, 2003.667969, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1147, 0, 18031, "cj_exp", "mp_furn_floor");


	new cobj1148 = CreateDynamicObject(19452, 534.674988, 1410.130005, 2007.286011, 0.000000, 90.000000, 90.000000);
	SetDynamicObjectMaterial(cobj1148, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(3850, 531.426025, 1415.625000, 2004.300049, 0.000000, 0.000000, 90.000000);

	new cobj1149 = CreateDynamicObject(19452, 545.549011, 1421.004028, 2007.286011, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1149, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(3034, 543.835999, 1422.977051, 2005.828979, 0.000000, 0.000000, 270.000000);

	new cobj1150 = CreateDynamicObject(19446, 534.674988, 1411.785034, 2008.854004, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj1150, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj1151 = CreateDynamicObject(19446, 543.898987, 1421.004028, 2008.854004, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1151, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj1152 = CreateDynamicObject(19462, 541.617004, 1425.489990, 2003.667969, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1152, 0, 18031, "cj_exp", "mp_furn_floor");

	CreateDynamicObject(1811, 542.833008, 1425.328003, 2004.380005, 0.000000, 0.000000, 269.989014);

	new cobj1153 = CreateDynamicObject(19377, 538.750000, 1426.098999, 2000.098999, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1153, 0, 4829, "airport_las", "LASLACMA6");


	new cobj1154 = CreateDynamicObject(19462, 545.109009, 1425.489990, 2003.667969, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1154, 0, 18031, "cj_exp", "mp_furn_floor");


	new cobj1155 = CreateDynamicObject(19370, 528.883972, 1414.067993, 2003.666992, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1155, 0, 18031, "cj_exp", "mp_furn_floor");


	new cobj1156 = CreateDynamicObject(19427, 528.677979, 1415.698975, 2001.865967, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj1156, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj1157 = CreateDynamicObject(19384, 528.677979, 1413.296997, 2001.865967, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj1157, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj1158 = CreateDynamicObject(19433, 529.416992, 1410.130005, 2000.260010, 0.000000, 90.000000, 90.000000);
	SetDynamicObjectMaterial(cobj1158, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1159 = CreateDynamicObject(19433, 528.684021, 1414.833984, 1998.598022, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj1159, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(3850, 539.927002, 1426.699951, 2004.300049, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(2921, 529.085022, 1416.901001, 2005.550049, 0.000000, 349.996002, 260.000000);

	new cobj1160 = CreateDynamicObject(19433, 528.684021, 1411.723022, 1998.598022, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj1160, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1161 = CreateDynamicObject(19370, 528.883972, 1410.859009, 2003.666992, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1161, 0, 18031, "cj_exp", "mp_furn_floor");


	new cobj1162 = CreateDynamicObject(19377, 528.250000, 1416.475952, 2000.098999, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1162, 0, 4829, "airport_las", "LASLACMA6");

	CreateDynamicObject(2008, 543.359009, 1426.827026, 2003.755005, 0.000000, 0.000000, 179.994003);

	new cobj1163 = CreateDynamicObject(19427, 529.057007, 1411.785034, 2005.359009, 0.000000, 0.000000, 89.994003);
	SetDynamicObjectMaterial(cobj1163, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj1164 = CreateDynamicObject(19427, 528.427002, 1417.442017, 1999.484985, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj1164, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj1165 = CreateDynamicObject(2231, 528.513000, 1417.463013, 2003.550049, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj1165, 768, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1166 = CreateDynamicObject(19427, 528.677979, 1415.697998, 2005.359009, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj1166, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj1167 = CreateDynamicObject(19384, 528.677979, 1413.296997, 2005.359009, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj1167, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj1168 = CreateDynamicObject(19433, 528.437012, 1417.442017, 1998.598022, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj1168, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1169 = CreateDynamicObject(2231, 528.513000, 1417.963013, 2003.550049, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj1169, 768, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1170 = CreateDynamicObject(19354, 528.427002, 1418.224976, 2002.979004, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1170, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(2773, 529.700012, 1421.384033, 2000.703003, 0.000000, 0.000000, 87.994003);
	CreateDynamicObject(1808, 539.379028, 1427.530029, 2000.186035, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1731, 543.640015, 1426.667969, 2005.338989, 0.000000, 0.000000, 0.000000);

	new cobj1171 = CreateDynamicObject(2774, 534.028015, 1416.104980, 2012.395996, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1171, 256, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(19435, 527.866028, 1415.307007, 2003.661011, 0.000000, 90.000000, 270.000000);
	CreateDynamicObject(19435, 527.867004, 1415.307007, 2003.670044, 0.000000, 90.000000, 270.000000);

	new cobj1172 = CreateDynamicObject(2774, 539.439026, 1421.459961, 2012.395996, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1172, 256, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1173 = CreateDynamicObject(19427, 528.426025, 1417.442993, 2005.359009, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj1173, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(3850, 542.057007, 1428.161987, 2000.832031, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(19172, 528.546021, 1420.312988, 2003.180054, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(1671, 542.731018, 1427.854980, 2004.213989, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(2191, 527.846008, 1419.386963, 2000.186035, 0.000000, 0.000000, 270.000000);

	new cobj1174 = CreateDynamicObject(19433, 529.070007, 1410.130005, 2007.286011, 0.000000, 90.000000, 90.000000);
	SetDynamicObjectMaterial(cobj1174, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(19362, 526.979004, 1413.208008, 2003.661987, 0.000000, 90.000000, 0.000000);
	CreateDynamicObject(19362, 526.979004, 1413.208008, 2003.667969, 0.000000, 90.000000, 0.000000);

	new cobj1175 = CreateDynamicObject(19354, 528.427002, 1421.432983, 2002.979004, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1175, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj1176 = CreateDynamicObject(19452, 527.590027, 1410.680054, 2004.909058, 90.000000, 0.000000, 315.000000);
	SetDynamicObjectMaterial(cobj1176, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1177 = CreateDynamicObject(19427, 528.677979, 1415.697021, 2008.854004, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj1177, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj1178 = CreateDynamicObject(19354, 528.677979, 1413.298950, 2008.854004, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1178, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(2191, 527.846008, 1421.244019, 2000.186035, 0.000000, 0.000000, 270.000000);

	new cobj1179 = CreateDynamicObject(19377, 538.668030, 1426.255005, 2009.774048, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1179, 0, 14533, "pleas_dome", "ornate_ceiling1_sfw");

	CreateDynamicObject(2186, 526.648010, 1418.727051, 2000.186035, 0.000000, 0.000000, 180.000000);

	new cobj1180 = CreateDynamicObject(19427, 528.426025, 1417.442017, 2008.854004, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj1180, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(19362, 526.276978, 1416.418945, 2003.667969, 0.000000, 90.000000, 0.000000);
	CreateDynamicObject(19362, 526.276001, 1416.420044, 2003.661987, 0.000000, 90.000000, 0.000000);

	new cobj1181 = CreateDynamicObject(19354, 528.255005, 1411.785034, 2008.854004, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj1181, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj1182 = CreateDynamicObject(19446, 528.427002, 1423.027954, 1999.484985, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1182, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(2609, 527.981018, 1422.535034, 2000.916992, 0.000000, 0.000000, 270.000000);

	new cobj1183 = CreateDynamicObject(19433, 527.030029, 1415.697021, 2007.286011, 0.000000, 90.000000, 179.994003);
	SetDynamicObjectMaterial(cobj1183, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1184 = CreateDynamicObject(19360, 527.030029, 1413.298950, 2007.286011, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1184, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1185 = CreateDynamicObject(19452, 528.437012, 1423.027954, 1998.598022, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1185, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(19354, 525.619019, 1416.244995, 2001.865967, 0.000000, 0.000000, 180.000000);

	new cobj1186 = CreateDynamicObject(1897, 528.405029, 1423.614990, 2002.655029, 90.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1186, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1187 = CreateDynamicObject(19377, 528.168030, 1416.620972, 2009.774048, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1187, 0, 14533, "pleas_dome", "ornate_ceiling1_sfw");

	CreateDynamicObject(19466, 528.427002, 1423.560059, 2003.703979, 0.000000, 0.000000, 0.000000);

	new cobj1188 = CreateDynamicObject(19433, 526.776001, 1417.442017, 2007.286011, 0.000000, 90.000000, 179.994003);
	SetDynamicObjectMaterial(cobj1188, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(3850, 525.265015, 1413.000000, 2004.300049, 0.000000, 0.000000, 0.000000);

	new cobj1189 = CreateDynamicObject(19446, 525.049011, 1411.785034, 2001.865967, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj1189, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(3850, 539.927002, 1430.469971, 2004.300049, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(2198, 527.830017, 1424.258057, 2000.170044, 0.000000, 0.000000, 270.000000);

	new cobj1190 = CreateDynamicObject(19446, 543.898987, 1430.639038, 2001.865967, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1190, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj1191 = CreateDynamicObject(2774, 528.841980, 1416.104980, 2012.395996, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1191, 256, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(2773, 529.698975, 1427.035034, 2000.703003, 0.000000, 0.000000, 87.988998);

	new cobj1192 = CreateDynamicObject(19452, 526.776001, 1418.134033, 2009.536011, 90.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj1192, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1193 = CreateDynamicObject(16101, 528.432007, 1423.024048, 1993.734009, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj1193, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1194 = CreateDynamicObject(19452, 545.549011, 1430.639038, 2000.260010, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1194, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj1195 = CreateDynamicObject(1897, 528.429016, 1425.839966, 2002.655029, 90.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(cobj1195, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(1811, 540.533997, 1431.395996, 2000.972046, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(2206, 541.648010, 1431.369019, 2000.344971, 0.000000, 0.000000, 90.000000);

	new cobj1196 = CreateDynamicObject(19446, 543.898987, 1430.639038, 2005.359009, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1196, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(19466, 528.427002, 1425.798950, 2003.703979, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19354, 523.929016, 1414.728027, 2001.967041, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(2186, 524.421021, 1418.727051, 2000.186035, 0.000000, 0.000000, 179.994003);
	CreateDynamicObject(1811, 542.801025, 1431.203979, 2004.380005, 0.000000, 0.000000, 269.989014);
	CreateDynamicObject(14877, 523.867004, 1413.219971, 2000.010986, 0.000000, 0.000000, 180.000000);
	CreateDynamicObject(2356, 526.408020, 1423.651001, 2000.186035, 0.000000, 0.000000, 280.000000);
	CreateDynamicObject(14877, 523.859009, 1416.314941, 2001.661987, 0.000000, 0.000000, 359.989014);

	new cobj1197 = CreateDynamicObject(19377, 528.250000, 1426.098999, 2000.098999, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj1197, 0, 4829, "airport_las", "LASLACMA6");

	CreateDynamicObject(19446, 523.791016, 1411.798950, 2001.865967, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(19446, 523.606995, 1417.000000, 2001.865967, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(2198, 527.830017, 1426.119019, 2000.170044, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(2183, 525.231018, 1422.378052, 2000.186035, 0.000000, 0.000000, 180.000000);

	new cobj1198 = CreateDynamicObject(19446, 523.638977, 1418.156982, 2001.865967, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj1198, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj1199 = CreateDynamicObject(19427, 528.427002, 1427.050049, 2002.979004, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj1199, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(2609, 527.981018, 1426.833008, 2000.916992, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(19446, 523.791016, 1411.798950, 2005.359009, 0.000000, 0.000000, 90.000000);

	new cobj11100 = CreateDynamicObject(19452, 545.549011, 1430.639038, 2007.286011, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11100, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(1671, 542.986023, 1432.280029, 2000.806030, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(19446, 523.606018, 1417.000000, 2005.359009, 0.000000, 0.000000, 90.000000);

	new cobj11101 = CreateDynamicObject(2774, 539.439026, 1428.526001, 2012.395996, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11101, 256, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11102 = CreateDynamicObject(19446, 523.638977, 1418.156006, 2005.359009, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj11102, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11103 = CreateDynamicObject(19446, 543.898010, 1430.639038, 2008.854004, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11103, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(2609, 527.981018, 1427.323975, 2000.916992, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(2356, 526.408020, 1425.637939, 2000.186035, 0.000000, 0.000000, 270.000000);

	new cobj11104 = CreateDynamicObject(19452, 523.705994, 1416.504028, 2007.286011, 0.000000, 90.000000, 90.000000);
	SetDynamicObjectMaterial(cobj11104, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11105 = CreateDynamicObject(19452, 540.395020, 1432.973022, 2000.260010, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11105, 0, 18031, "cj_exp", "mp_furn_floor");

	CreateDynamicObject(2008, 543.351013, 1432.781006, 2003.755005, 0.000000, 0.000000, 180.000000);

	new cobj11106 = CreateDynamicObject(16101, 528.432007, 1426.239014, 1993.734009, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj11106, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11107 = CreateDynamicObject(1897, 528.405029, 1428.339966, 2002.655029, 90.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11107, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(19377, 523.255005, 1413.298950, 2007.124023, 0.000000, 90.000000, 0.000000);
	CreateDynamicObject(1811, 540.572021, 1433.203979, 2000.972046, 0.000000, 0.000000, 89.995003);

	new cobj11108 = CreateDynamicObject(19452, 543.888977, 1432.972046, 2000.260010, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11108, 0, 18031, "cj_exp", "mp_furn_floor");

	CreateDynamicObject(19466, 528.427002, 1428.331055, 2003.703979, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1731, 543.640015, 1432.739014, 2005.338989, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(2186, 522.210999, 1418.725952, 2000.186035, 0.000000, 0.000000, 179.994003);

	new cobj11109 = CreateDynamicObject(19446, 523.638977, 1418.156006, 2008.854004, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj11109, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11110 = CreateDynamicObject(19377, 528.168030, 1426.255005, 2009.774048, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11110, 0, 14533, "pleas_dome", "ornate_ceiling1_sfw");

	CreateDynamicObject(19362, 521.450012, 1413.292969, 2002.010010, 0.000000, 90.000000, 0.000000);
	CreateDynamicObject(2198, 527.828979, 1429.024048, 2000.170044, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(19362, 521.448975, 1416.500000, 2002.010010, 0.000000, 90.000000, 0.000000);
	CreateDynamicObject(1671, 542.830017, 1433.817017, 2004.213989, 0.000000, 0.000000, 0.000000);

	new cobj11111 = CreateDynamicObject(16101, 528.432007, 1427.838989, 1993.734009, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj11111, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(3850, 539.927002, 1433.930054, 2004.300049, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(2356, 526.408020, 1428.374023, 2000.186035, 0.000000, 0.000000, 269.993988);

	new cobj11112 = CreateDynamicObject(1897, 528.429016, 1430.537964, 2002.655029, 90.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11112, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11113 = CreateDynamicObject(19362, 521.249023, 1419.745972, 2000.098999, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11113, 0, 4829, "airport_las", "LASLACMA6");

	CreateDynamicObject(19466, 528.427002, 1430.571045, 2003.703979, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(2183, 524.716980, 1427.046021, 2000.186035, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(19446, 520.359009, 1413.162964, 2001.865967, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(2773, 529.698975, 1431.843018, 2000.703003, 0.000000, 0.000000, 87.988998);
	CreateDynamicObject(2634, 531.400024, 1428.423950, 1989.284058, 0.000000, 0.000000, 0.000000);

	new cobj11114 = CreateDynamicObject(19446, 520.317993, 1416.515015, 2001.865967, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11114, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11115 = CreateDynamicObject(19462, 541.617004, 1435.119995, 2003.667969, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11115, 0, 18031, "cj_exp", "mp_furn_floor");

	CreateDynamicObject(2198, 527.828979, 1430.899048, 2000.170044, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(19446, 520.359009, 1413.162964, 2005.359009, 0.000000, 0.000000, 0.000000);

	new cobj11116 = CreateDynamicObject(19446, 520.317017, 1416.515015, 2005.359009, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11116, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(2608, 520.658997, 1420.567017, 2001.998047, 0.000000, 0.000000, 90.000000);

	new cobj11117 = CreateDynamicObject(19462, 545.109009, 1435.119995, 2003.667969, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11117, 0, 18031, "cj_exp", "mp_furn_floor");


	new cobj11118 = CreateDynamicObject(19377, 538.750000, 1435.733032, 2000.098999, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11118, 0, 4829, "airport_las", "LASLACMA6");


	new cobj11119 = CreateDynamicObject(19362, 521.249023, 1422.956055, 2000.098999, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11119, 0, 4829, "airport_las", "LASLACMA6");

	CreateDynamicObject(2609, 527.981018, 1431.612061, 2000.916992, 0.000000, 0.000000, 270.000000);

	new cobj11120 = CreateDynamicObject(19427, 528.427002, 1431.863037, 2002.979004, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11120, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(2356, 526.408020, 1430.389038, 2000.186035, 0.000000, 0.000000, 269.993988);
	CreateDynamicObject(2609, 527.981018, 1432.130005, 2000.916992, 0.000000, 0.000000, 270.000000);

	new cobj11121 = CreateDynamicObject(16101, 528.432007, 1431.046997, 1993.734009, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj11121, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11122 = CreateDynamicObject(19446, 528.427002, 1432.659058, 1999.484985, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11122, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11123 = CreateDynamicObject(19362, 521.166016, 1419.673950, 2009.774048, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11123, 0, 14533, "pleas_dome", "ornate_ceiling1_sfw");


	new cobj11124 = CreateDynamicObject(19452, 528.437012, 1432.659058, 1998.598022, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11124, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(2163, 520.385010, 1422.920044, 2001.724976, 0.000000, 0.000000, 90.000000);

	new cobj11125 = CreateDynamicObject(19452, 519.205017, 1417.068970, 2004.935059, 90.000000, 0.000000, 315.000000);
	SetDynamicObjectMaterial(cobj11125, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11126 = CreateDynamicObject(1897, 528.405029, 1433.214966, 2002.655029, 90.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11126, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(19273, 527.817017, 1428.339966, 1989.098022, 0.000000, 0.000000, 180.000000);

	new cobj11127 = CreateDynamicObject(19354, 520.317993, 1419.725952, 2008.854004, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11127, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(19466, 528.427002, 1433.201050, 2003.703979, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1811, 542.921021, 1436.906006, 2004.380005, 0.000000, 0.000000, 269.989014);
	CreateDynamicObject(2369, 527.442017, 1432.963013, 2000.962036, 0.000000, 0.000000, 359.993988);

	new cobj11128 = CreateDynamicObject(19362, 521.249023, 1426.166016, 2000.098999, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11128, 0, 4829, "airport_las", "LASLACMA6");

	CreateDynamicObject(2162, 520.400024, 1424.711060, 2001.724976, 0.000000, 0.000000, 90.000000);

	new cobj11129 = CreateDynamicObject(19360, 518.671997, 1419.725952, 2003.659058, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11129, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11130 = CreateDynamicObject(19362, 521.166016, 1422.879028, 2009.774048, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11130, 0, 14533, "pleas_dome", "ornate_ceiling1_sfw");


	new cobj11131 = CreateDynamicObject(19377, 538.668030, 1435.889038, 2009.774048, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11131, 0, 14533, "pleas_dome", "ornate_ceiling1_sfw");


	new cobj11132 = CreateDynamicObject(16101, 528.432007, 1432.651001, 1993.734009, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj11132, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11133 = CreateDynamicObject(19433, 521.294983, 1427.040039, 2001.865967, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11133, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11134 = CreateDynamicObject(19427, 521.299011, 1427.048950, 2001.865967, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11134, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11135 = CreateDynamicObject(19433, 521.294983, 1427.058960, 2001.865967, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11135, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(2166, 527.869019, 1433.837036, 2000.186035, 0.000000, 0.000000, 180.000000);
	CreateDynamicObject(3850, 539.927002, 1437.738037, 2004.300049, 0.000000, 0.000000, 0.000000);

	new cobj11136 = CreateDynamicObject(19427, 520.538025, 1426.337036, 2001.865967, 0.000000, 0.000000, 269.989014);
	SetDynamicObjectMaterial(cobj11136, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11137 = CreateDynamicObject(19433, 521.294983, 1427.040039, 2005.359009, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11137, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11138 = CreateDynamicObject(19427, 521.299011, 1427.048950, 2005.359009, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11138, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11139 = CreateDynamicObject(19433, 521.294983, 1427.058960, 2005.359009, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11139, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11140 = CreateDynamicObject(19360, 518.671997, 1419.725952, 2007.286011, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11140, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11141 = CreateDynamicObject(19446, 520.317993, 1426.149048, 2001.865967, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11141, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(2356, 526.710022, 1433.697021, 2000.186035, 0.000000, 0.000000, 269.993011);

	new cobj11142 = CreateDynamicObject(19427, 520.536987, 1426.336060, 2005.359009, 0.000000, 0.000000, 269.989014);
	SetDynamicObjectMaterial(cobj11142, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11143 = CreateDynamicObject(19446, 520.317993, 1426.149048, 2005.359009, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11143, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(1811, 540.741028, 1438.510010, 2000.972046, 0.000000, 0.000000, 269.993988);
	CreateDynamicObject(2206, 541.648010, 1438.534058, 2000.344971, 0.000000, 0.000000, 90.000000);

	new cobj11144 = CreateDynamicObject(2774, 539.439026, 1435.884033, 2012.395996, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11144, 256, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(2008, 543.343018, 1438.505005, 2003.755005, 0.000000, 0.000000, 179.994003);

	new cobj11145 = CreateDynamicObject(19427, 520.536987, 1427.761963, 2001.865967, 0.000000, 0.000000, 269.989014);
	SetDynamicObjectMaterial(cobj11145, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11146 = CreateDynamicObject(1897, 528.429016, 1435.411987, 2002.655029, 90.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11146, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11147 = CreateDynamicObject(19362, 521.166016, 1426.088989, 2009.774048, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11147, 0, 14533, "pleas_dome", "ornate_ceiling1_sfw");

	CreateDynamicObject(1731, 543.640015, 1438.411987, 2005.338989, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19466, 528.427002, 1435.438965, 2003.703979, 0.000000, 0.000000, 0.000000);

	new cobj11148 = CreateDynamicObject(19433, 521.294983, 1427.040039, 2008.854004, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11148, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11149 = CreateDynamicObject(19427, 521.299011, 1427.048950, 2008.854004, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11149, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11150 = CreateDynamicObject(19433, 521.294983, 1427.058960, 2008.854004, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11150, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11151 = CreateDynamicObject(19452, 519.646973, 1426.339966, 2004.935059, 90.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11151, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11152 = CreateDynamicObject(19427, 520.536987, 1427.761963, 2005.359009, 0.000000, 0.000000, 269.989014);
	SetDynamicObjectMaterial(cobj11152, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11153 = CreateDynamicObject(19362, 521.249023, 1429.375000, 2000.098999, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11153, 0, 4829, "airport_las", "LASLACMA6");

	CreateDynamicObject(2773, 529.705994, 1436.536011, 2000.703003, 0.000000, 0.000000, 87.988998);

	new cobj11154 = CreateDynamicObject(19377, 528.250000, 1435.733032, 2000.098999, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11154, 0, 4829, "airport_las", "LASLACMA6");

	CreateDynamicObject(14576, 529.482971, 1435.776001, 1995.785034, 0.000000, 0.000000, 179.994003);

	new cobj11155 = CreateDynamicObject(19427, 520.536987, 1426.336060, 2008.854004, 0.000000, 0.000000, 269.989014);
	SetDynamicObjectMaterial(cobj11155, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11156 = CreateDynamicObject(19433, 519.648987, 1427.040039, 2003.659058, 0.000000, 90.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11156, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11157 = CreateDynamicObject(19433, 519.648987, 1427.058960, 2003.659058, 0.000000, 90.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11157, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11158 = CreateDynamicObject(19446, 520.317993, 1426.149048, 2008.854004, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11158, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(2164, 520.414001, 1428.626953, 2000.186035, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(1671, 542.986023, 1439.421021, 2000.806030, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(2356, 526.778015, 1435.250000, 2000.186035, 0.000000, 0.000000, 229.994003);

	new cobj11159 = CreateDynamicObject(19452, 519.205017, 1426.667969, 2004.935059, 90.000000, 0.000000, 315.000000);
	SetDynamicObjectMaterial(cobj11159, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11160 = CreateDynamicObject(19452, 518.671997, 1426.149048, 2003.659058, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11160, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11161 = CreateDynamicObject(19452, 519.646973, 1427.750000, 2004.935059, 90.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11161, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11162 = CreateDynamicObject(19433, 519.650024, 1427.040039, 2007.286011, 0.000000, 90.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11162, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11163 = CreateDynamicObject(19433, 519.648987, 1427.058960, 2007.286011, 0.000000, 90.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11163, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(1671, 542.906006, 1439.633057, 2004.213989, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19427, 520.536987, 1427.761963, 2008.854004, 0.000000, 0.000000, 269.989014);

	new cobj11164 = CreateDynamicObject(19427, 528.427002, 1436.668945, 2002.979004, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11164, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(2166, 526.916016, 1435.805054, 2000.186035, 0.000000, 0.000000, 270.000000);

	new cobj11165 = CreateDynamicObject(19452, 519.231018, 1427.430054, 2004.935059, 90.000000, 0.000000, 44.993999);
	SetDynamicObjectMaterial(cobj11165, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(2609, 527.979004, 1436.552002, 2000.916992, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(2369, 526.632019, 1435.719971, 2000.962036, 0.000000, 0.000000, 180.000000);

	new cobj11166 = CreateDynamicObject(16101, 528.432007, 1435.857056, 1993.734009, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj11166, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11167 = CreateDynamicObject(19452, 518.671997, 1426.149048, 2007.286011, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11167, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(1811, 540.776001, 1440.333984, 2000.972046, 0.000000, 0.000000, 89.994003);
	CreateDynamicObject(19273, 528.463013, 1437.223999, 2001.685059, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(14629, 535.158020, 1438.581055, 2008.899048, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(2167, 520.408020, 1430.400024, 2000.186035, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(19273, 528.369019, 1437.258057, 2001.685059, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(2161, 521.408997, 1431.687988, 2001.620972, 0.000000, 0.000000, 90.000000);

	new cobj11168 = CreateDynamicObject(19446, 543.898987, 1440.272949, 2001.865967, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11168, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11169 = CreateDynamicObject(19362, 521.166016, 1429.298950, 2009.774048, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11169, 0, 14533, "pleas_dome", "ornate_ceiling1_sfw");


	new cobj11170 = CreateDynamicObject(19427, 521.299011, 1431.863037, 2001.865967, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11170, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11171 = CreateDynamicObject(19433, 521.294983, 1431.859009, 2001.865967, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11171, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11172 = CreateDynamicObject(19433, 521.294983, 1431.869019, 2001.865967, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11172, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11173 = CreateDynamicObject(19427, 520.538025, 1431.151001, 2001.865967, 0.000000, 0.000000, 269.989014);
	SetDynamicObjectMaterial(cobj11173, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11174 = CreateDynamicObject(19446, 543.898010, 1440.271973, 2005.359009, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11174, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11175 = CreateDynamicObject(19377, 528.169006, 1435.890015, 2009.774048, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11175, 0, 14533, "pleas_dome", "ornate_ceiling1_sfw");


	new cobj11176 = CreateDynamicObject(19433, 521.294983, 1431.858032, 2005.359009, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11176, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11177 = CreateDynamicObject(19427, 521.299011, 1431.863037, 2005.359009, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11177, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11178 = CreateDynamicObject(19433, 521.294983, 1431.869019, 2005.359009, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11178, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11179 = CreateDynamicObject(1897, 528.403992, 1437.928955, 2002.588989, 90.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11179, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11180 = CreateDynamicObject(19427, 520.536987, 1431.150024, 2005.359009, 0.000000, 0.000000, 269.989014);
	SetDynamicObjectMaterial(cobj11180, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(19466, 528.427002, 1437.899048, 2003.688965, 0.000000, 0.000000, 0.000000);

	new cobj11181 = CreateDynamicObject(19362, 521.249023, 1432.586060, 2000.098999, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11181, 0, 4829, "airport_las", "LASLACMA6");

	CreateDynamicObject(3850, 539.927002, 1441.199951, 2004.300049, 0.000000, 0.000000, 0.000000);

	new cobj11182 = CreateDynamicObject(19452, 545.549011, 1440.260986, 2007.286011, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11182, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11183 = CreateDynamicObject(19446, 543.898010, 1440.271973, 2008.854004, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11183, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11184 = CreateDynamicObject(19427, 520.536987, 1432.576050, 2001.865967, 0.000000, 0.000000, 269.989014);
	SetDynamicObjectMaterial(cobj11184, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11185 = CreateDynamicObject(19452, 519.646973, 1431.156006, 2004.935059, 90.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11185, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11186 = CreateDynamicObject(19433, 521.294983, 1431.858032, 2008.854004, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11186, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11187 = CreateDynamicObject(19427, 521.299011, 1431.863037, 2008.854004, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11187, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11188 = CreateDynamicObject(19433, 521.294983, 1431.869019, 2008.854004, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11188, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11189 = CreateDynamicObject(19427, 520.536987, 1431.150024, 2008.854004, 0.000000, 0.000000, 269.989014);
	SetDynamicObjectMaterial(cobj11189, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(3089, 528.400024, 1438.969971, 2001.280029, 0.000000, 0.000000, -90.000000);

	new cobj11190 = CreateDynamicObject(19433, 519.648987, 1431.852051, 2003.659058, 0.000000, 90.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11190, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11191 = CreateDynamicObject(19427, 520.536987, 1432.576050, 2005.359009, 0.000000, 0.000000, 269.989014);
	SetDynamicObjectMaterial(cobj11191, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11192 = CreateDynamicObject(19433, 519.648987, 1431.869019, 2003.659058, 0.000000, 90.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11192, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11193 = CreateDynamicObject(1897, 528.408020, 1439.103027, 2001.605957, 180.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11193, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(1808, 538.947021, 1441.999023, 2000.344971, 0.000000, 0.000000, 0.000000);

	new cobj11194 = CreateDynamicObject(19452, 519.223022, 1431.477051, 2004.935059, 90.000000, 0.000000, 315.000000);
	SetDynamicObjectMaterial(cobj11194, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(2200, 520.479004, 1433.619019, 2000.186035, 0.000000, 0.000000, 90.000000);

	new cobj11195 = CreateDynamicObject(19362, 521.166016, 1432.509033, 2009.774048, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11195, 0, 14533, "pleas_dome", "ornate_ceiling1_sfw");


	new cobj11196 = CreateDynamicObject(19433, 519.648987, 1431.852051, 2007.286011, 0.000000, 90.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11196, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11197 = CreateDynamicObject(19433, 519.648987, 1431.869019, 2007.286011, 0.000000, 90.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11197, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11198 = CreateDynamicObject(19452, 519.646973, 1432.562988, 2004.935059, 90.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11198, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11199 = CreateDynamicObject(19452, 540.395020, 1442.598999, 2000.260010, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11199, 0, 18031, "cj_exp", "mp_furn_floor");

	CreateDynamicObject(2921, 538.929016, 1442.224976, 2005.550049, 0.000000, 349.990997, 89.996002);

	new cobj11200 = CreateDynamicObject(19452, 519.231018, 1432.239014, 2004.935059, 90.000000, 0.000000, 44.993999);
	SetDynamicObjectMaterial(cobj11200, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11201 = CreateDynamicObject(19427, 520.536987, 1432.576050, 2008.854004, 0.000000, 0.000000, 269.989014);
	SetDynamicObjectMaterial(cobj11201, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11202 = CreateDynamicObject(19452, 543.888977, 1442.598999, 2000.260010, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11202, 0, 18031, "cj_exp", "mp_furn_floor");

	CreateDynamicObject(2010, 538.172974, 1443.062012, 2000.161987, 0.000000, 0.000000, 0.000000);

	new cobj11203 = CreateDynamicObject(19354, 528.427002, 1440.569946, 1999.484985, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11203, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11204 = CreateDynamicObject(19354, 528.427002, 1440.569946, 2002.979004, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11204, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11205 = CreateDynamicObject(19362, 521.249023, 1435.796021, 2000.098999, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11205, 0, 4829, "airport_las", "LASLACMA6");


	new cobj11206 = CreateDynamicObject(19360, 528.437012, 1440.569946, 1998.598022, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11206, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(1723, 535.302979, 1443.213013, 2000.186035, 0.000000, 0.000000, 0.000000);

	new cobj11207 = CreateDynamicObject(19446, 539.109009, 1443.791992, 2001.865967, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11207, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11208 = CreateDynamicObject(19433, 538.900024, 1443.781006, 1998.598022, 0.000000, 0.000000, 269.993988);
	SetDynamicObjectMaterial(cobj11208, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11209 = CreateDynamicObject(19427, 520.536987, 1435.957031, 2001.865967, 0.000000, 0.000000, 269.989014);
	SetDynamicObjectMaterial(cobj11209, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11210 = CreateDynamicObject(19427, 521.299011, 1436.668945, 2001.865967, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11210, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11211 = CreateDynamicObject(19433, 521.286987, 1436.659058, 2001.865967, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11211, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11212 = CreateDynamicObject(19433, 521.294983, 1436.677002, 2001.865967, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11212, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11213 = CreateDynamicObject(19446, 520.317993, 1435.779053, 2001.865967, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11213, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(2195, 533.650024, 1443.199951, 2000.753052, 0.000000, 0.000000, 0.000000);

	new cobj11214 = CreateDynamicObject(19384, 542.539001, 1443.791992, 2005.359009, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11214, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(1491, 543.320007, 1443.958984, 2003.598999, 0.000000, 0.000000, 180.000000);

	new cobj11215 = CreateDynamicObject(19390, 542.539001, 1443.968994, 2005.359009, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11215, 0, 13007, "sw_bankint", "bank_wall1");


	new cobj11216 = CreateDynamicObject(19427, 520.536987, 1435.957031, 2005.359009, 0.000000, 0.000000, 269.989014);
	SetDynamicObjectMaterial(cobj11216, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11217 = CreateDynamicObject(19433, 521.294983, 1436.659058, 2005.359009, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11217, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11218 = CreateDynamicObject(19427, 521.299011, 1436.668945, 2005.359009, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11218, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11219 = CreateDynamicObject(19433, 521.294983, 1436.677002, 2005.359009, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11219, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11220 = CreateDynamicObject(19446, 520.317993, 1435.779053, 2005.359009, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11220, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11221 = CreateDynamicObject(19446, 536.119019, 1443.791992, 2005.359009, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11221, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11222 = CreateDynamicObject(19453, 536.119019, 1443.968994, 2005.359009, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11222, 0, 13007, "sw_bankint", "bank_wall1");


	new cobj11223 = CreateDynamicObject(19362, 521.166016, 1435.718994, 2009.774048, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11223, 0, 14533, "pleas_dome", "ornate_ceiling1_sfw");


	new cobj11224 = CreateDynamicObject(19354, 542.539001, 1443.791992, 2008.854004, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj11224, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11225 = CreateDynamicObject(19452, 533.286011, 1443.781006, 1998.598022, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11225, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11226 = CreateDynamicObject(19462, 541.617004, 1444.753052, 2003.667969, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11226, 0, 18031, "cj_exp", "mp_furn_floor");


	new cobj11227 = CreateDynamicObject(19354, 532.814026, 1443.791016, 2001.865967, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11227, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11228 = CreateDynamicObject(19452, 519.646973, 1435.963013, 2004.935059, 90.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11228, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11229 = CreateDynamicObject(19325, 533.150024, 1443.682983, 2005.405029, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj11229, 1, 1370, "", "");


	new cobj11230 = CreateDynamicObject(19427, 520.536987, 1435.957031, 2008.854004, 0.000000, 0.000000, 269.989014);
	SetDynamicObjectMaterial(cobj11230, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11231 = CreateDynamicObject(19433, 521.294983, 1436.659058, 2008.854004, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11231, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11232 = CreateDynamicObject(19427, 521.299011, 1436.668945, 2008.854004, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11232, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11233 = CreateDynamicObject(19433, 521.296021, 1436.677002, 2008.854004, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11233, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11234 = CreateDynamicObject(19446, 520.317993, 1435.779053, 2008.854004, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11234, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11235 = CreateDynamicObject(19427, 520.536987, 1437.381958, 2001.865967, 0.000000, 0.000000, 269.989014);
	SetDynamicObjectMaterial(cobj11235, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(2921, 521.041016, 1437.447998, 2005.550049, 0.000000, 349.990997, 259.996002);

	new cobj11236 = CreateDynamicObject(19446, 536.119019, 1443.791992, 2008.854004, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11236, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11237 = CreateDynamicObject(19462, 545.109009, 1444.753052, 2003.667969, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11237, 0, 18031, "cj_exp", "mp_furn_floor");


	new cobj11238 = CreateDynamicObject(2774, 539.439026, 1443.000000, 2012.395996, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11238, 256, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(1723, 530.000000, 1443.213013, 2000.186035, 0.000000, 0.000000, 0.000000);

	new cobj11239 = CreateDynamicObject(19433, 519.648010, 1436.665039, 2003.659058, 0.000000, 90.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11239, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11240 = CreateDynamicObject(19433, 519.648010, 1436.672974, 2003.659058, 0.000000, 90.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11240, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11241 = CreateDynamicObject(19452, 518.671997, 1435.779053, 2003.659058, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11241, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11242 = CreateDynamicObject(19427, 520.536987, 1437.381958, 2005.359009, 0.000000, 0.000000, 269.989014);
	SetDynamicObjectMaterial(cobj11242, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11243 = CreateDynamicObject(19452, 544.999023, 1444.880005, 2004.909058, 90.000000, 0.000000, 315.000000);
	SetDynamicObjectMaterial(cobj11243, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11244 = CreateDynamicObject(19452, 519.205017, 1436.286987, 2004.935059, 90.000000, 0.000000, 315.000000);
	SetDynamicObjectMaterial(cobj11244, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(2010, 529.143005, 1443.145996, 2000.136963, 0.000000, 0.000000, 0.000000);

	new cobj11245 = CreateDynamicObject(19377, 538.750000, 1445.368042, 2000.098999, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11245, 0, 4829, "airport_las", "LASLACMA6");


	new cobj11246 = CreateDynamicObject(19427, 528.427002, 1442.963989, 1999.484985, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11246, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11247 = CreateDynamicObject(19427, 528.427002, 1442.963989, 2002.979004, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11247, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(2614, 532.833008, 1443.666016, 2008.567017, 0.000000, 0.000000, 0.000000);

	new cobj11248 = CreateDynamicObject(19433, 528.437012, 1442.963989, 1998.598022, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11248, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11249 = CreateDynamicObject(2231, 528.513000, 1443.066040, 2003.550049, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj11249, 768, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11250 = CreateDynamicObject(19433, 519.650024, 1436.665039, 2007.286011, 0.000000, 90.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11250, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11251 = CreateDynamicObject(19433, 519.648987, 1436.672974, 2007.286011, 0.000000, 90.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11251, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11252 = CreateDynamicObject(19354, 529.713989, 1443.791992, 2001.865967, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11252, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11253 = CreateDynamicObject(19452, 518.671997, 1435.779053, 2007.286011, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11253, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11254 = CreateDynamicObject(19362, 521.249023, 1439.008057, 2000.098999, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11254, 0, 4829, "airport_las", "LASLACMA6");


	new cobj11255 = CreateDynamicObject(19452, 519.648010, 1437.371948, 2004.935059, 90.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11255, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11256 = CreateDynamicObject(19452, 519.231018, 1437.042969, 2004.935059, 90.000000, 0.000000, 45.000000);
	SetDynamicObjectMaterial(cobj11256, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11257 = CreateDynamicObject(19427, 520.536987, 1437.381958, 2008.854004, 0.000000, 0.000000, 269.989014);
	SetDynamicObjectMaterial(cobj11257, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11258 = CreateDynamicObject(19452, 539.107971, 1445.444946, 2007.286011, 0.000000, 90.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11258, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11259 = CreateDynamicObject(19354, 529.713989, 1443.791992, 2005.359009, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11259, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11260 = CreateDynamicObject(2231, 528.513000, 1443.567017, 2003.550049, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj11260, 768, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11261 = CreateDynamicObject(19361, 529.739014, 1443.968994, 2005.359009, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11261, 0, 13007, "sw_bankint", "bank_wall1");


	new cobj11262 = CreateDynamicObject(19354, 529.713989, 1443.791992, 2008.854004, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11262, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(1491, 538.312012, 1446.572021, 2003.613037, 0.000000, 0.000000, 359.993988);

	new cobj11263 = CreateDynamicObject(19377, 538.668030, 1445.524048, 2009.774048, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11263, 0, 14533, "pleas_dome", "ornate_ceiling1_sfw");


	new cobj11264 = CreateDynamicObject(19361, 542.306030, 1446.569946, 2005.359009, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj11264, 0, 13007, "sw_bankint", "bank_wall1");

	CreateDynamicObject(2204, 543.239014, 1446.682007, 2003.755005, 0.000000, 0.000000, 180.000000);

	new cobj11265 = CreateDynamicObject(19390, 539.093994, 1446.569946, 2005.359009, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj11265, 0, 13007, "sw_bankint", "bank_wall1");

	CreateDynamicObject(1808, 540.554016, 1446.916992, 2003.755005, 0.000000, 0.000000, 180.000000);

	new cobj11266 = CreateDynamicObject(19362, 521.166016, 1438.928955, 2009.774048, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11266, 0, 14533, "pleas_dome", "ornate_ceiling1_sfw");


	new cobj11267 = CreateDynamicObject(19360, 532.812988, 1445.444946, 2007.286011, 0.000000, 90.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11267, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(19354, 543.898010, 1446.691040, 2005.359009, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1808, 537.192017, 1446.875977, 2003.755005, 0.000000, 0.000000, 179.994003);

	new cobj11268 = CreateDynamicObject(19361, 535.888000, 1446.571045, 2005.359009, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj11268, 0, 13007, "sw_bankint", "bank_wall1");

	CreateDynamicObject(2253, 541.002014, 1446.921021, 2005.823975, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(2226, 541.853027, 1447.000977, 2005.545044, 0.000000, 0.000000, 180.000000);
	CreateDynamicObject(19174, 535.408997, 1446.656006, 2006.097046, 0.000000, 0.000000, 180.000000);

	new cobj11269 = CreateDynamicObject(19377, 528.250000, 1445.366943, 2000.098999, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11269, 0, 4829, "airport_las", "LASLACMA6");


	new cobj11270 = CreateDynamicObject(19390, 532.677979, 1446.569946, 2005.359009, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj11270, 0, 13007, "sw_bankint", "bank_wall1");

	CreateDynamicObject(1491, 531.895996, 1446.572021, 2003.613037, 0.000000, 0.000000, 359.989014);

	new cobj11271 = CreateDynamicObject(19360, 529.705017, 1445.444946, 2007.286011, 0.000000, 90.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11271, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11272 = CreateDynamicObject(19443, 528.926025, 1445.671021, 2003.666992, 0.000000, 90.000000, 90.000000);
	SetDynamicObjectMaterial(cobj11272, 0, 18031, "cj_exp", "mp_furn_floor");


	new cobj11273 = CreateDynamicObject(19361, 528.369019, 1445.432007, 2005.359009, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11273, 0, 13007, "sw_bankint", "bank_wall1");


	new cobj11274 = CreateDynamicObject(19354, 528.197998, 1445.432007, 2005.359009, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11274, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11275 = CreateDynamicObject(19361, 537.492004, 1448.259033, 2005.359009, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11275, 0, 13007, "sw_bankint", "bank_wall1");

	CreateDynamicObject(1663, 534.416016, 1447.942017, 2004.213989, 0.000000, 0.000000, 119.998001);
	CreateDynamicObject(2169, 535.664001, 1448.243042, 2003.755005, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(1663, 540.947021, 1448.604004, 2004.213989, 0.000000, 0.000000, 179.994003);
	CreateDynamicObject(1663, 540.322021, 1448.613037, 2004.213989, 0.000000, 0.000000, 179.994003);

	new cobj11276 = CreateDynamicObject(19354, 528.197998, 1445.432007, 2008.854004, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11276, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(2205, 541.760010, 1448.703003, 2003.755005, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(2190, 541.247009, 1448.734009, 2004.692017, 0.000000, 0.000000, 90.000000);

	new cobj11277 = CreateDynamicObject(19452, 528.203003, 1445.446045, 2009.462036, 90.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11277, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(2190, 535.445007, 1448.359009, 2004.546021, 0.000000, 0.000000, 94.250000);

	new cobj11278 = CreateDynamicObject(19354, 520.317993, 1442.198975, 2001.865967, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11278, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(3850, 526.299988, 1445.640991, 2004.306030, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(16780, 540.367004, 1448.457031, 2007.317017, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1893, 535.723022, 1448.087036, 2007.426025, 0.000000, 0.000000, 90.000000);

	new cobj11279 = CreateDynamicObject(19453, 543.812012, 1448.692017, 2005.359009, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11279, 0, 13007, "sw_bankint", "bank_wall1");

	CreateDynamicObject(1714, 537.083008, 1448.786011, 2003.755005, 0.000000, 0.000000, 270.000000);

	new cobj11280 = CreateDynamicObject(19377, 528.168030, 1445.524048, 2009.774048, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11280, 0, 14533, "pleas_dome", "ornate_ceiling1_sfw");

	CreateDynamicObject(19172, 543.726013, 1448.759033, 2006.040039, 0.000000, 0.000000, 270.000000);

	new cobj11281 = CreateDynamicObject(19379, 534.624023, 1448.625000, 2003.667969, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11281, 0, 18031, "cj_exp", "mp_furn_floor");

	CreateDynamicObject(19377, 543.989014, 1448.615967, 2007.098022, 0.000000, 90.000000, 0.000000);
	CreateDynamicObject(2224, 538.190002, 1449.264038, 2003.755005, 0.000000, 0.000000, 29.997999);
	CreateDynamicObject(1714, 543.304016, 1449.312012, 2003.755005, 0.000000, 0.000000, 270.000000);

	new cobj11282 = CreateDynamicObject(19362, 521.166016, 1442.139038, 2009.774048, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11282, 0, 14533, "pleas_dome", "ornate_ceiling1_sfw");

	CreateDynamicObject(1893, 532.697021, 1448.087036, 2007.426025, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(14410, 521.231018, 1443.718994, 2000.568970, 0.000000, 0.000000, 0.000000);

	new cobj11283 = CreateDynamicObject(19361, 531.161987, 1448.259033, 2005.359009, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11283, 0, 13007, "sw_bankint", "bank_wall1");

	CreateDynamicObject(19377, 533.495972, 1448.615967, 2007.098022, 0.000000, 90.000000, 0.000000);

	new cobj11284 = CreateDynamicObject(19446, 523.276001, 1445.269043, 2001.990967, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11284, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11285 = CreateDynamicObject(19446, 523.283997, 1445.260010, 1998.615967, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11285, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(1663, 540.333008, 1450.098999, 2004.213989, 0.000000, 0.000000, 359.989014);
	CreateDynamicObject(2186, 531.664001, 1448.963013, 2003.755005, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(2596, 531.562012, 1448.645020, 2006.369019, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(1663, 534.359009, 1449.541016, 2004.213989, 0.000000, 0.000000, 70.000000);
	CreateDynamicObject(19354, 543.898010, 1449.900024, 2005.359009, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1663, 540.931030, 1450.161011, 2004.213989, 0.000000, 0.000000, 359.998993);
	CreateDynamicObject(2195, 523.900024, 1445.900024, 2004.369995, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(2967, 541.809021, 1450.162964, 2004.692017, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(2828, 542.268005, 1450.243042, 2006.076050, 0.000000, 0.000000, 170.000000);
	CreateDynamicObject(2332, 543.278015, 1450.515015, 2004.218018, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1744, 541.906006, 1450.552002, 2005.734985, 0.000000, 0.000000, 0.000000);

	new cobj11286 = CreateDynamicObject(19446, 528.197998, 1448.614014, 2001.865967, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11286, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11287 = CreateDynamicObject(19453, 542.658997, 1450.639038, 2005.359009, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11287, 0, 13007, "sw_bankint", "bank_wall1");

	CreateDynamicObject(2164, 536.111023, 1450.552002, 2003.749023, 0.000000, 0.000000, 0.000000);

	new cobj11288 = CreateDynamicObject(19360, 529.848999, 1448.797974, 2007.286011, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11288, 0, 1730, "cj_furniture", "CJ_WOOD5");


	new cobj11289 = CreateDynamicObject(19434, 537.492004, 1450.659058, 2005.359009, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11289, 0, 13007, "sw_bankint", "bank_wall1");


	new cobj11290 = CreateDynamicObject(19390, 528.369019, 1448.640015, 2005.359009, 0.000000, 0.000000, 180.000000);
	SetDynamicObjectMaterial(cobj11290, 0, 13007, "sw_bankint", "bank_wall1");


	new cobj11291 = CreateDynamicObject(19384, 528.197998, 1448.639038, 2005.359009, 0.000000, 0.000000, 179.994003);
	SetDynamicObjectMaterial(cobj11291, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11292 = CreateDynamicObject(19370, 541.617004, 1451.175049, 2003.667969, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11292, 0, 18031, "cj_exp", "mp_furn_floor");


	new cobj11293 = CreateDynamicObject(19370, 545.109009, 1451.173950, 2003.667969, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11293, 0, 18031, "cj_exp", "mp_furn_floor");


	new cobj11294 = CreateDynamicObject(19354, 520.317993, 1445.410034, 2001.865967, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11294, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(1491, 528.299011, 1449.384033, 2003.613037, 0.000000, 0.000000, 269.989014);

	new cobj11295 = CreateDynamicObject(19354, 528.197998, 1448.640991, 2008.854004, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11295, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11296 = CreateDynamicObject(19453, 533.028015, 1450.639038, 2005.359009, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11296, 0, 13007, "sw_bankint", "bank_wall1");


	new cobj11297 = CreateDynamicObject(19446, 520.317993, 1445.409058, 2005.359009, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11297, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11298 = CreateDynamicObject(19362, 521.166016, 1445.348999, 2009.774048, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11298, 0, 14533, "pleas_dome", "ornate_ceiling1_sfw");


	new cobj11299 = CreateDynamicObject(19434, 531.161987, 1450.657959, 2005.359009, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11299, 0, 13007, "sw_bankint", "bank_wall1");


	new cobj11300 = CreateDynamicObject(19446, 520.317993, 1445.409058, 2008.854004, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11300, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11301 = CreateDynamicObject(19452, 518.671997, 1445.409058, 2003.659058, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11301, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(2604, 523.789001, 1448.619995, 2000.983032, 0.000000, 0.000000, 90.000000);

	new cobj11302 = CreateDynamicObject(19427, 528.304016, 1450.540039, 2001.865967, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj11302, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11303 = CreateDynamicObject(19452, 518.671997, 1445.409058, 2007.286011, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11303, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(19435, 526.833008, 1450.511963, 2000.098022, 0.000000, 90.000000, 0.000000);
	CreateDynamicObject(3089, 526.630005, 1450.478760, 2001.280029, 0.000000, 0.000000, 180.000000);

	new cobj11304 = CreateDynamicObject(19434, 528.369019, 1451.047974, 2005.359009, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11304, 0, 13007, "sw_bankint", "bank_wall1");


	new cobj11305 = CreateDynamicObject(19384, 525.905029, 1450.540039, 2001.865967, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj11305, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(14638, 526.163025, 1450.541992, 1995.989014, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(1506, 526.164001, 1450.526001, 1995.811035, 0.000000, 0.000000, 180.000000);

	new cobj11306 = CreateDynamicObject(19379, 524.125000, 1450.380005, 2003.667969, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11306, 0, 18031, "cj_exp", "mp_furn_floor");

	CreateDynamicObject(19385, 527.432007, 1452.068970, 2001.943970, 0.000000, 0.000000, 0.000000);

	new cobj11307 = CreateDynamicObject(19446, 523.466980, 1450.198975, 2005.359009, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11307, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11308 = CreateDynamicObject(19427, 523.500000, 1450.540039, 2001.865967, 0.000000, 0.000000, 90.000000);
	SetDynamicObjectMaterial(cobj11308, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(19435, 523.366028, 1450.613037, 2000.098022, 0.000000, 90.000000, 0.000000);

	new cobj11309 = CreateDynamicObject(19362, 521.166016, 1448.558960, 2009.774048, 0.000000, 90.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11309, 0, 14533, "pleas_dome", "ornate_ceiling1_sfw");


	new cobj11310 = CreateDynamicObject(19427, 523.276001, 1450.886963, 2001.865967, 0.000000, 0.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11310, 0, 18031, "cj_exp", "mp_cloth_wall");


	new cobj11311 = CreateDynamicObject(19446, 523.466980, 1450.198975, 2008.854004, 0.000000, 0.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11311, 0, 18031, "cj_exp", "mp_cloth_wall");

	CreateDynamicObject(2949, 527.379028, 1452.807983, 2000.188965, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(14638, 523.789001, 1451.560059, 1995.989014, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1506, 523.731995, 1451.592041, 1995.998047, 0.000000, 0.000000, 90.000000);

	new cobj11312 = CreateDynamicObject(19452, 523.645020, 1451.848999, 2007.286011, 0.000000, 90.000000, 270.000000);
	SetDynamicObjectMaterial(cobj11312, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(19435, 523.270020, 1452.076050, 1995.901978, 0.000000, 90.000000, 90.000000);
	CreateDynamicObject(19435, 523.046021, 1453.211060, 1997.530029, 0.000000, 0.000000, 90.000000);

	new cobj11313 = CreateDynamicObject(19452, 519.216003, 1451.296021, 2008.385010, 90.000000, 45.000000, 0.000000);
	SetDynamicObjectMaterial(cobj11313, 0, 1730, "cj_furniture", "CJ_WOOD5");

	CreateDynamicObject(14892, 512.007996, 1451.208008, 2008.723022, 0.000000, 0.000000, 180.000000);
///EAST

	new cobj20 = CreateDynamicObject(2435, 1391.084717, -1.600675, 999.934021, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj20, 512, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj21 = CreateDynamicObject(2435, 1392.015991, -1.600676, 999.934021, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj21, 512, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj22 = CreateDynamicObject(2435, 1390.155029, -1.600674, 999.934021, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj22, 512, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(2101, 1389.931763, -1.850319, 1000.284302, 0.000000, 0.000000, 0.000000,0,4);

	new cobj23 = CreateDynamicObject(19426, 1392.584961, -1.931734, 1001.665405, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj23, 0, 16004, "des_teepee", "des_dustconc");


	new cobj24 = CreateDynamicObject(19377, 1393.274780, -1.298969, 999.848999, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj24, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj25 = CreateDynamicObject(19353, 1391.660034, 3.603192, 1000.764771, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj25, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj26 = CreateDynamicObject(2435, 1389.223633, -1.600674, 999.934021, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj26, 512, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj27 = CreateDynamicObject(2606, 1390.598511, -1.922115, 1002.863403, 26.100008, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj27, 0, 16004, "des_teepee", "des_dustconc");

	CreateDynamicObject(2165, 1391.990479, -2.488290, 999.914429, 0.000000, 0.000000, 270.000000,0,4);

	new cobj28 = CreateDynamicObject(2435, 1391.136597, -1.600674, 1003.478394, 0.000000, -179.899918, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj28, 512, 16004, "des_teepee", "des_dustconc");

	//CreateDynamicObject(1569, 1390.167236, 3.549746, 999.933960, 0.000000, 0.000000, 0.000000,0,4);

	new cobj29 = CreateDynamicObject(2435, 1392.057983, -1.600675, 1003.481262, 0.000000, -179.899918, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj29, 512, 16004, "des_teepee", "des_dustconc");

	//CreateDynamicObject(1569, 1393.467285, -1.910252, 999.933960, 0.000000, 0.000000, 0.000000,0,4);

	new cobj210 = CreateDynamicObject(2435, 1390.205200, -1.600674, 1003.476074, 0.000000, -179.899918, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj210, 512, 16004, "des_teepee", "des_dustconc");

	CreateDynamicObject(19325, 1389.997314, -1.847524, 1003.156860, 0.000000, 0.000000, 90.000000,0,4);

	new cobj211 = CreateDynamicObject(19377, 1393.115112, -1.298970, 1003.370850, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj211, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj212 = CreateDynamicObject(19426, 1388.700684, -1.931733, 1001.665405, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj212, 0, 16004, "des_teepee", "des_dustconc");

	//CreateDynamicObject(1569, 1393.163452, 3.558498, 999.933960, 0.000000, 0.000000, 180.000000,0,4);
	CreateDynamicObject(1663, 1390.848022, -3.204297, 1000.394775, 0.000000, 0.000000, 129.000046,0,4);
	CreateDynamicObject(1703, 1388.024902, -1.179806, 999.843994, 0.000000, 0.000000, 180.000000,0,4);

	new cobj213 = CreateDynamicObject(19448, 1393.420532, 3.604047, 1001.660706, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj213, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj214 = CreateDynamicObject(2435, 1389.284546, -1.600674, 1003.473694, 0.000000, -179.899918, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj214, 512, 16004, "des_teepee", "des_dustconc");


	new cobj215 = CreateDynamicObject(19383, 1394.241577, -1.880409, 1001.655579, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj215, 0, 16004, "des_teepee", "des_dustconc");


	new cobj216 = CreateDynamicObject(2267, 1395.640869, 0.913651, 1001.525513, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj216, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(1819, 1386.500244, 0.406575, 999.894531, 0.000000, 0.000000, 0.000000,0,4);

	new cobj217 = CreateDynamicObject(19353, 1386.998657, -1.795021, 1001.675537, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj217, 0, 16004, "des_teepee", "des_dustconc");


	new cobj218 = CreateDynamicObject(19448, 1395.761841, 2.884048, 1001.660706, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj218, 0, 16004, "des_teepee", "des_dustconc");

	CreateDynamicObject(2611, 1385.628784, 0.897955, 1001.465454, 0.000000, 0.000000, 90.000000,0,4);

	new cobj219 = CreateDynamicObject(2200, 1386.267944, -2.012742, 999.914368, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj219, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(1703, 1385.994385, 2.970192, 999.843994, 0.000000, 0.000000, 0.000000,0,4);
	CreateDynamicObject(2611, 1385.329224, 1.273971, 1001.704712, 0.000000, 0.000000, 270.000000,0,4);
	CreateDynamicObject(2164, 1385.382080, -0.440631, 999.893860, 0.000000, 0.000000, 270.000000,0,4);

	new cobj220 = CreateDynamicObject(19448, 1385.478271, 3.024047, 1001.660706, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj220, 0, 16004, "des_teepee", "des_dustconc");

	CreateDynamicObject(2165, 1384.839722, 1.846422, 999.953979, 0.000000, 0.000000, 270.000000,0,4);
	CreateDynamicObject(1533, 1398.220581, 1.141080, 999.914307, 0.000000, 0.000000, 90.000000,0,4);
	//CreateDynamicObject(1569, 1384.525879, -1.830252, 999.933960, 0.000000, 0.000000, 180.000000,0,4);

	new cobj221 = CreateDynamicObject(19448, 1398.310425, -1.305952, 1001.660706, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj221, 0, 14777, "int_casinoint3", "GB_midbar01");

	CreateDynamicObject(1663, 1391.235840, -6.855547, 1000.394775, 0.000000, 0.000000, 0.500040,0,4);
	CreateDynamicObject(1663, 1383.714600, 1.166726, 1000.393799, 0.000000, 0.000000, 92.400070,0,4);

	new cobj222 = CreateDynamicObject(19383, 1383.796631, -1.800409, 1001.655579, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj222, 0, 16004, "des_teepee", "des_dustconc");


	new cobj223 = CreateDynamicObject(19448, 1383.811523, 3.604047, 1001.660706, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj223, 0, 14777, "int_casinoint3", "GB_midbar01");

	CreateDynamicObject(1663, 1395.990967, -6.108835, 1000.394775, 0.000000, 0.000000, 0.500038,0,4);
	CreateDynamicObject(1663, 1396.705444, -5.537370, 1000.394775, 0.000000, 0.000000, 65.400024,0,4);
	CreateDynamicObject(1663, 1383.039307, 2.033135, 1000.393799, 0.000000, 0.000000, 160.200058,0,4);

	new cobj224 = CreateDynamicObject(19377, 1393.232178, -5.058875, 1006.972168, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj224, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj225 = CreateDynamicObject(19377, 1393.239624, -7.478966, 1003.480774, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj225, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(2165, 1391.960083, -8.028281, 999.914429, 0.000000, 0.000000, 180.000000,0,4);
	CreateDynamicObject(2165, 1397.741821, -5.158273, 999.914429, 0.000000, 0.000000, 270.000000,0,4);

	new cobj226 = CreateDynamicObject(19377, 1382.779785, -1.298969, 999.858337, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj226, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(2165, 1382.670776, 2.976421, 999.953979, 0.000000, 0.000000, 0.000000,0,4);

	new cobj227 = CreateDynamicObject(2257, 1382.708252, 3.502454, 1001.805237, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj227, 256, 18028, "cj_bar2", "GB_nastybar13");


	new cobj228 = CreateDynamicObject(19429, 1387.205933, -7.639161, 1001.555542, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj228, 0, 14777, "int_casinoint3", "GB_midbar01");

	CreateDynamicObject(2165, 1396.791382, -7.038276, 999.914429, 0.000000, 0.000000, 180.000000,0,4);

	new cobj229 = CreateDynamicObject(19377, 1382.631104, -2.738968, 1003.370850, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj229, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(2165, 1390.909546, -9.108283, 999.914429, 0.000000, 0.000000, 270.000000,0,4);

	new cobj230 = CreateDynamicObject(19353, 1396.619873, -7.605053, 1001.675537, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj230, 0, 16004, "des_teepee", "des_dustconc");

	CreateDynamicObject(1663, 1381.487061, 0.432638, 1000.393799, 0.000000, 0.000000, -84.299995,0,4);
	CreateDynamicObject(1663, 1381.541626, -0.737369, 1000.393799, 0.000000, 0.000000, -101.699997,0,4);
	//CreateDynamicObject(1569, 1395.107910, -8.580278, 999.893921, 0.000000, 0.000000, 360.000000,0,4);
	CreateDynamicObject(1663, 1389.839478, -9.479322, 1000.394775, 0.000000, 0.000000, 64.700066,0,4);
	CreateDynamicObject(1663, 1393.149780, -9.414587, 1000.394775, 0.000000, 0.000000, -79.899956,0,4);
	CreateDynamicObject(2164, 1388.101685, -9.050632, 999.893860, 0.000000, 0.000000, 90.000000,0,4);

	new cobj231 = CreateDynamicObject(19448, 1392.827148, -8.525979, 1005.281982, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj231, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj232 = CreateDynamicObject(2256, 1391.687744, -8.645860, 1005.357056, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj232, 0, 18028, "cj_bar2", "GB_nastybar13");


	new cobj233 = CreateDynamicObject(2414, 1385.908325, -8.194137, 999.143799, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj233, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj234 = CreateDynamicObject(2256, 1393.489380, -8.645861, 1005.357056, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj234, 0, 18028, "cj_bar2", "GB_nastybar13");


	new cobj235 = CreateDynamicObject(19383, 1395.101929, -9.300435, 1001.655579, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj235, 0, 16004, "des_teepee", "des_dustconc");


	new cobj236 = CreateDynamicObject(2414, 1385.908325, -8.524142, 999.404053, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj236, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(2165, 1391.970947, -10.108281, 999.914429, 0.000000, 0.000000, 90.000000,0,4);

	new cobj237 = CreateDynamicObject(2414, 1385.908325, -8.854147, 999.664307, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj237, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(1721, 1397.441895, -8.464205, 1000.024109, 0.000000, 0.000000, 179.499832);

	new cobj238 = CreateDynamicObject(2256, 1395.290649, -8.645860, 1005.357056, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj238, 0, 18028, "cj_bar2", "GB_nastybar13");


	new cobj239 = CreateDynamicObject(19377, 1382.630615, 6.891037, 1003.370850, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj239, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj240 = CreateDynamicObject(2257, 1380.689209, 3.502454, 1001.805237, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj240, 256, 18028, "cj_bar2", "GB_nastybar13");

	CreateDynamicObject(2165, 1380.248779, 0.651718, 999.914429, 0.000000, 0.000000, 270.000000,0,4);

	new cobj241 = CreateDynamicObject(2414, 1385.908325, -9.184154, 999.924561, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj241, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(2174, 1380.240967, -1.164418, 999.943298, 0.000000, 0.000000, 180.000000,0,4);

	new cobj242 = CreateDynamicObject(19429, 1383.573120, -7.639161, 1001.555542, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj242, 0, 14777, "int_casinoint3", "GB_midbar01");

	CreateDynamicObject(1663, 1392.318726, -10.341255, 1004.026184, 0.000000, 0.000000, 90.000000,0,4);
	CreateDynamicObject(1663, 1389.877441, -10.341255, 1004.026184, 0.000000, 0.000000, 90.000000,0,4);

	new cobj243 = CreateDynamicObject(2414, 1385.908325, -9.514161, 1000.184814, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj243, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(2163, 1380.097656, 3.440215, 999.943726, 0.000000, 0.000000, 0.000000,0,4);
	CreateDynamicObject(2164, 1388.072021, -10.333864, 1003.556335, 0.000000, 0.000000, 90.000000,0,4);

	new cobj244 = CreateDynamicObject(19377, 1393.264282, -10.928995, 999.848999, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj244, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj245 = CreateDynamicObject(2414, 1385.908325, -9.844168, 1000.445068, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj245, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(1663, 1394.648682, -10.341255, 1004.026184, 0.000000, 0.000000, 90.000000,0,4);
	CreateDynamicObject(19325, 1379.692261, -1.727525, 1001.885620, 0.000000, 0.000000, 90.000000,0,4);

	new cobj246 = CreateDynamicObject(19377, 1393.114624, -10.928972, 1003.370850, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj246, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj247 = CreateDynamicObject(2414, 1385.908325, -10.174176, 1000.705322, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj247, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj248 = CreateDynamicObject(1737, 1396.924072, -10.041290, 999.953979, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj248, 0, 964, "cj_crate_will", "CJ_FLIGHT_CASE");


	new cobj249 = CreateDynamicObject(1737, 1391.227173, -11.265630, 1003.555786, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj249, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(1663, 1392.338623, -11.141269, 1004.026184, 0.000000, 0.000000, 90.000000,0,4);
	CreateDynamicObject(1663, 1389.886963, -11.141270, 1004.026184, 0.000000, 0.000000, 90.000000,0,4);
	CreateDynamicObject(16780, 1391.442627, -11.376668, 1003.426514, 0.000000, 0.000000, 0.000000,0,4);
	CreateDynamicObject(1663, 1379.105713, -0.110136, 1000.393799, 0.000000, 0.000000, 91.900017,0,4);

	new cobj250 = CreateDynamicObject(2414, 1385.908325, -10.504182, 1000.965576, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj250, 0, 2748, "pizza_furn", "CJ_WOOD6");

	//CreateDynamicObject(1569, 1379.445190, -2.700251, 999.933960, 0.000000, 0.000000, 270.000000,0,4);

	new cobj251 = CreateDynamicObject(1737, 1393.688477, -11.355651, 1003.555786, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj251, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj252 = CreateDynamicObject(19383, 1379.424438, -3.420407, 1001.655579, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj252, 0, 16004, "des_teepee", "des_dustconc");

	CreateDynamicObject(2165, 1398.728027, -9.100524, 1003.856567, 0.000000, 0.000000, 0.000000,0,4);
	CreateDynamicObject(1663, 1394.670166, -11.141268, 1004.026184, 0.000000, 0.000000, 90.000000,0,4);

	new cobj253 = CreateDynamicObject(2414, 1385.908325, -10.834189, 1001.225830, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj253, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(1808, 1394.904297, -11.504085, 999.904541, 0.000000, 0.000000, 270.000000,0,4);

	new cobj254 = CreateDynamicObject(19353, 1378.676270, -1.795021, 1001.675537, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj254, 0, 16004, "des_teepee", "des_dustconc");


	new cobj255 = CreateDynamicObject(19426, 1395.102783, -11.711750, 1001.665405, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj255, 0, 16004, "des_teepee", "des_dustconc");


	new cobj256 = CreateDynamicObject(2414, 1385.908325, -11.164196, 1001.486084, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj256, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(1663, 1392.368286, -11.931283, 1004.026184, 0.000000, 0.000000, 90.000000,0,4);

	new cobj257 = CreateDynamicObject(2200, 1388.100098, -11.932757, 999.914368, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj257, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(1663, 1389.886597, -11.931284, 1004.026184, 0.000000, 0.000000, 90.000000,0,4);

	new cobj258 = CreateDynamicObject(2200, 1378.205566, 0.397256, 999.914368, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj258, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj259 = CreateDynamicObject(1737, 1396.070190, -11.425627, 1003.555786, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj259, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(2165, 1390.910034, -12.588300, 999.914429, 0.000000, 0.000000, 270.000000,0,4);
	CreateDynamicObject(1663, 1396.872925, -11.385493, 1000.374390, 0.000000, 0.000000, 173.999954);

	new cobj260 = CreateDynamicObject(2414, 1385.908325, -11.494202, 1001.746338, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj260, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(1663, 1394.668335, -11.931282, 1004.026184, 0.000000, 0.000000, 90.000000,0,4);

	new cobj261 = CreateDynamicObject(19448, 1378.213623, 3.004017, 1001.660706, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj261, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj262 = CreateDynamicObject(19448, 1387.956787, -12.365977, 1001.660706, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj262, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj263 = CreateDynamicObject(19448, 1378.040039, 3.074047, 1001.660706, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj263, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj264 = CreateDynamicObject(19448, 1398.319946, -10.935942, 1001.660706, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj264, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj265 = CreateDynamicObject(2414, 1385.908325, -11.824207, 1002.006592, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj265, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj266 = CreateDynamicObject(1737, 1391.226685, -12.785639, 1003.555786, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj266, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(2151, 1377.705688, 0.534839, 999.923767, 0.000000, 0.000000, 270.000000,0,4);
	CreateDynamicObject(1663, 1397.725464, -11.435372, 1000.374390, 0.000000, 0.000000, -171.000000,0,4);
	CreateDynamicObject(2151, 1377.706177, -0.835160, 999.923767, 0.000000, 0.000000, 270.000000,0,4);
	CreateDynamicObject(2151, 1377.705200, 1.904838, 999.923767, 0.000000, 0.000000, 270.000000,0,4);
	CreateDynamicObject(1663, 1392.347656, -12.741286, 1004.026184, 0.000000, 0.000000, 90.000000,0,4);
	CreateDynamicObject(1663, 1389.886108, -12.741286, 1004.026184, 0.000000, 0.000000, 90.000000,0,4);
	CreateDynamicObject(1663, 1393.044556, -13.060686, 1000.394775, 0.000000, 0.000000, -91.299934,0,4);

	new cobj267 = CreateDynamicObject(19399, 1396.646851, -12.073505, 1001.535522, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj267, 0, 16004, "des_teepee", "des_dustconc");


	new cobj268 = CreateDynamicObject(2257, 1396.619385, -12.100506, 1001.595398, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj268, 256, 18646, "matcolours", "white");


	new cobj269 = CreateDynamicObject(19448, 1386.485107, -12.395978, 1001.660706, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj269, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj270 = CreateDynamicObject(2414, 1385.908325, -12.154214, 1002.266846, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj270, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(2151, 1377.704712, 3.264836, 999.923767, 0.000000, 0.000000, 270.000000,0,4);

	new cobj271 = CreateDynamicObject(1737, 1393.688721, -12.875644, 1003.555786, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj271, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(2131, 1377.444946, 1.338892, 999.853210, 0.000000, 0.000000, 270.000000,0,4);
	CreateDynamicObject(1663, 1389.791016, -13.274700, 1000.394775, 0.000000, 0.000000, 93.400047,0,4);

	new cobj272 = CreateDynamicObject(19448, 1387.924683, -12.395977, 1005.281982, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj272, 0, 14777, "int_casinoint3", "GB_midbar01");

	CreateDynamicObject(1663, 1394.679443, -12.741286, 1004.026184, 0.000000, 0.000000, 90.000000,0,4);
	CreateDynamicObject(1886, 1397.926514, -11.694367, 1003.395081, 29.200006, 0.000000, -144.200073,0,4);

	new cobj273 = CreateDynamicObject(2414, 1385.908325, -12.484221, 1002.527100, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj273, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(2165, 1391.971436, -13.588313, 999.914429, 0.000000, 0.000000, 90.000000,0,4);

	new cobj274 = CreateDynamicObject(19377, 1382.779297, -10.928970, 999.848999, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj274, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(19325, 1379.411499, -7.527521, 1001.255920, 0.000000, 0.000000, 180.000000,0,4);
	CreateDynamicObject(1663, 1392.297485, -13.491292, 1004.026184, 0.000000, 0.000000, 90.000000,0,4);

	new cobj275 = CreateDynamicObject(19448, 1386.485107, -12.395977, 1005.151855, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj275, 0, 16004, "des_teepee", "des_dustconc");

	CreateDynamicObject(1663, 1389.895630, -13.491293, 1004.026184, 0.000000, 0.000000, 90.000000,0,4);

	new cobj276 = CreateDynamicObject(1737, 1396.069702, -12.955626, 1003.555786, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj276, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(19325, 1398.560425, -12.127523, 1000.934937, 0.000000, 0.000000, 90.000000,0,4);
	CreateDynamicObject(2615, 1400.490723, -9.855022, 1005.557129, 0.000000, 0.000000, 270.000000,0,4);
	CreateDynamicObject(2154, 1376.765015, -1.530999, 999.923584, 0.000000, 0.000000, 180.000000,0,4);

	new cobj277 = CreateDynamicObject(19448, 1384.302979, -12.395977, 1001.660706, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj277, 0, 14777, "int_casinoint3", "GB_midbar01");

	CreateDynamicObject(1663, 1394.699341, -13.491291, 1004.026184, 0.000000, 0.000000, 90.000000,0,4);
	CreateDynamicObject(2616, 1400.500732, -10.175783, 1005.417297, 0.000000, 0.000000, 270.000000,0,4);
	CreateDynamicObject(2151, 1376.663818, 3.284836, 999.923767, 0.000000, 0.000000, 0.000000,0,4);

	new cobj278 = CreateDynamicObject(19448, 1402.458862, -8.525979, 1005.281982, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj278, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj279 = CreateDynamicObject(1737, 1391.226196, -14.305636, 1003.555786, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj279, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj280 = CreateDynamicObject(2707, 1396.011475, -12.782670, 1006.166504, 0.000000, -88.899986, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj280, 256, 18028, "cj_bar2", "CJ_Black_metal");

	CreateDynamicObject(1783, 1395.632202, -12.928247, 1006.176819, 0.000000, 0.000000, 90.000000,0,4);
	CreateDynamicObject(1783, 1395.771851, -12.928247, 1006.176819, 0.000000, 0.000000, 90.000000,0,4);

	new cobj281 = CreateDynamicObject(19383, 1395.101440, -14.110468, 1001.655579, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj281, 0, 16004, "des_teepee", "des_dustconc");


	new cobj282 = CreateDynamicObject(19426, 1376.301514, -1.791734, 1001.665405, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj282, 0, 16004, "des_teepee", "des_dustconc");

	CreateDynamicObject(1663, 1392.286743, -14.311304, 1004.026184, 0.000000, 0.000000, 90.000000,0,4);
	CreateDynamicObject(1663, 1389.905151, -14.311304, 1004.026184, 0.000000, 0.000000, 90.000000,0,4);

	new cobj283 = CreateDynamicObject(19448, 1384.302979, -12.395977, 1005.161743, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj283, 0, 16004, "des_teepee", "des_dustconc");


	new cobj284 = CreateDynamicObject(19377, 1382.410400, -11.125665, 1005.495728, -24.600004, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj284, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj285 = CreateDynamicObject(1737, 1393.695801, -14.405665, 1003.555786, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj285, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj286 = CreateDynamicObject(19353, 1379.436523, -9.265039, 1001.675537, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj286, 0, 16004, "des_teepee", "des_dustconc");


	new cobj287 = CreateDynamicObject(19448, 1382.855957, -12.365960, 1001.660706, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj287, 0, 14777, "int_casinoint3", "GB_midbar01");

	CreateDynamicObject(2164, 1388.113281, -14.570640, 999.893860, 0.000000, 0.000000, 90.000000,0,4);

	//new cobj288 = CreateDynamicObject(3503, 1398.476807, -12.883493, 1003.605957, 0.000000, 0.000000, 0.000000,0,4);
	//SetDynamicObjectMaterial(cobj288, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(1663, 1394.687500, -14.311304, 1004.026184, 0.000000, 0.000000, 90.000000,0,4);
	CreateDynamicObject(3503, 1395.678833, -12.901145, 1007.538330, 0.000000, 0.000000, 0.000000,0,4);
	//CreateDynamicObject(1569, 1395.078369, -14.870292, 999.893921, 0.000000, 0.000000, 90.000000,0,4);

	new cobj289 = CreateDynamicObject(1737, 1396.069214, -14.475627, 1003.555786, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj289, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(2151, 1375.551392, 3.603115, 999.923767, 0.000000, 0.000000, -23.600002,0,4);
	CreateDynamicObject(2290, 1376.128052, -4.793985, 999.943909, 0.000000, 0.000000, 0.000000,0,4);
	CreateDynamicObject(2165, 1397.700928, -14.168293, 999.914429, 0.000000, 0.000000, 270.000000,0,4);

	//new cobj290 = CreateDynamicObject(2268, 1398.454102, -13.218757, 1005.437683, -89.999992, 0.000000, 0.000000,0,4);
	//SetDynamicObjectMaterial(cobj290, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(2611, 1388.093140, -14.749048, 1005.367371, 0.000000, 0.000000, 90.000000,0,4);

	new cobj291 = CreateDynamicObject(2257, 1390.468262, -15.687544, 1001.805237, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj291, 256, 18028, "cj_bar2", "GB_nastybar13");


	new cobj292 = CreateDynamicObject(2257, 1392.487671, -15.687545, 1001.805237, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj292, 256, 18028, "cj_bar2", "GB_nastybar13");

	CreateDynamicObject(1663, 1396.515015, -14.889245, 1000.374390, 0.000000, 0.000000, 103.599998,0,4);

	new cobj293 = CreateDynamicObject(19448, 1392.860474, -15.795957, 1001.660706, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj293, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj294 = CreateDynamicObject(19377, 1392.822266, -14.688883, 1006.972168, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj294, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj295 = CreateDynamicObject(2257, 1400.517334, -12.220417, 1005.697632, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj295, 0, 18646, "matcolours", "white");


	new cobj296 = CreateDynamicObject(19448, 1400.641235, -12.395977, 1005.281982, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj296, 0, 14777, "int_casinoint3", "GB_midbar01");

	CreateDynamicObject(1819, 1376.666748, -7.337835, 999.863403, 0.000000, 0.000000, 0.000000,0,4);

	new cobj297 = CreateDynamicObject(2123, 1374.571533, 1.739542, 1000.533875, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj297, 256, 18028, "cj_bar2", "CJ_Black_metal");

	CreateDynamicObject(2028, 1377.232178, -8.650730, 1000.774109, 0.000000, 0.000000, 180.000000,0,4);
	CreateDynamicObject(1790, 1377.242798, -8.702793, 1000.353882, 0.000000, 0.000000, 0.000000,0,4);

	new cobj298 = CreateDynamicObject(2267, 1377.261475, -8.896825, 1001.354675, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj298, 0, 18646, "matcolours", "white");

	//CreateDynamicObject(1569, 1379.454712, -11.750282, 999.933960, 0.000000, 0.000000, 270.000000,0,4);

	new cobj299 = CreateDynamicObject(19448, 1374.187988, 3.604047, 1001.660706, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj299, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj2100 = CreateDynamicObject(2257, 1400.516846, -13.530426, 1005.697632, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2100, 0, 18646, "matcolours", "white");

	CreateDynamicObject(1823, 1376.737549, -9.348458, 1000.213684, 0.000000, 0.000000, 0.000000,0,4);

	new cobj2101 = CreateDynamicObject(19383, 1379.433960, -12.460408, 1001.655579, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2101, 0, 16004, "des_teepee", "des_dustconc");


	new cobj2102 = CreateDynamicObject(19377, 1379.128418, -12.349003, 1003.370850, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2102, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj2103 = CreateDynamicObject(19377, 1393.830688, -17.098999, 1003.480774, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2103, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj2104 = CreateDynamicObject(2123, 1373.271973, 0.049543, 1000.533875, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2104, 256, 18028, "cj_bar2", "CJ_Black_metal");

	//CreateDynamicObject(1569, 1388.872437, -17.134529, 1003.506897, 0.000000, 0.000000, -90.000000,0,4);
	CreateDynamicObject(2290, 1375.216797, -7.743981, 999.943909, 0.000000, 0.000000, 90.000000,0,4);

	new cobj2105 = CreateDynamicObject(2123, 1373.320801, 2.999541, 1000.533875, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2105, 256, 18028, "cj_bar2", "CJ_Black_metal");


	new cobj2106 = CreateDynamicObject(2200, 1385.898560, -16.742752, 999.944397, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2106, 0, 18028, "cj_bar2", "CJ_Black_metal");


	new cobj2107 = CreateDynamicObject(19448, 1387.578247, -17.265991, 1001.660706, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2107, 0, 14777, "int_casinoint3", "GB_midbar01");

	CreateDynamicObject(1716, 1373.120239, -1.264461, 999.953369, 0.000000, 0.000000, 0.000000,0,4);

	new cobj2108 = CreateDynamicObject(19386, 1389.617188, -17.129162, 1005.276245, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2108, 0, 14777, "int_casinoint3", "GB_midbar01");

	CreateDynamicObject(1716, 1373.150757, -2.254460, 999.953369, 0.000000, 0.000000, 0.000000,0,4);

	new cobj2109 = CreateDynamicObject(19325, 1394.468506, -17.152477, 1004.836975, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2109, 0, 18646, "none", "none");


	new cobj2110 = CreateDynamicObject(19377, 1403.095825, -13.378982, 1003.640930, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2110, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(1663, 1400.096191, -15.446453, 1004.346497, 0.000000, 0.000000, 270.000000,0,4);

	new cobj2111 = CreateDynamicObject(19377, 1403.316406, -12.268898, 1006.972168, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2111, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj2112 = CreateDynamicObject(19426, 1387.223389, -17.120352, 1005.277405, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2112, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj2113 = CreateDynamicObject(19377, 1403.355591, -13.378981, 1003.801086, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2113, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj2114 = CreateDynamicObject(2200, 1379.216675, -14.092758, 1000.374817, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2114, 0, 18028, "cj_bar2", "CJ_Black_metal");


	new cobj2115 = CreateDynamicObject(2123, 1372.241455, 0.059542, 1000.533875, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2115, 256, 18028, "cj_bar2", "CJ_Black_metal");


	new cobj2116 = CreateDynamicObject(19377, 1372.295776, -1.298969, 999.858337, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2116, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj2117 = CreateDynamicObject(2123, 1372.300293, 2.999542, 1000.533875, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2117, 256, 18028, "cj_bar2", "CJ_Black_metal");


	new cobj2118 = CreateDynamicObject(1737, 1372.145874, 1.550039, 999.953308, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2118, 0, 18646, "matcolours", "white");

	CreateDynamicObject(1716, 1372.450562, -3.314460, 999.953369, 0.000000, 0.000000, 0.000000,0,4);

	new cobj2119 = CreateDynamicObject(19448, 1374.582397, -9.006037, 1001.660706, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2119, 0, 16004, "des_teepee", "des_dustconc");


	new cobj2120 = CreateDynamicObject(2200, 1383.727417, -17.162762, 999.944397, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2120, 0, 18028, "cj_bar2", "CJ_Black_metal");

	CreateDynamicObject(1663, 1400.096558, -16.396473, 1004.346497, 0.000000, 0.000000, 270.000000,0,4);
	CreateDynamicObject(2616, 1400.500732, -16.015799, 1005.417297, 0.000000, 0.000000, 270.000000,0,4);

	new cobj2121 = CreateDynamicObject(19377, 1383.338379, -17.088989, 1003.480774, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2121, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(2256, 1371.773193, 1.109356, 1002.004944, 0.000000, 0.000000, 90.000000,0,4);

	new cobj2122 = CreateDynamicObject(19377, 1372.138672, -2.738966, 1003.370850, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2122, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj2123 = CreateDynamicObject(1737, 1371.945190, -2.459959, 999.953308, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2123, 0, 18646, "matcolours", "white");


	new cobj2124 = CreateDynamicObject(2200, 1375.183960, -10.682735, 1000.374817, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2124, 0, 18028, "cj_bar2", "CJ_Black_metal");


	new cobj2125 = CreateDynamicObject(19448, 1371.671997, -1.295966, 1001.660706, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2125, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj2126 = CreateDynamicObject(19429, 1383.573120, -17.129162, 1005.276245, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2126, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj2127 = CreateDynamicObject(19448, 1402.454102, -15.805957, 1001.660706, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2127, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj2128 = CreateDynamicObject(2315, 1375.050171, -10.996753, 999.884155, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2128, 0, 964, "cj_crate_will", "CJ_FLIGHT_CASE");

	CreateDynamicObject(2200, 1397.405884, -18.306339, 1003.565857, 0.000000, 0.000000, 270.000000,0,4);

	new cobj2129 = CreateDynamicObject(19448, 1374.551880, -10.436050, 1001.660706, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2129, 0, 16004, "des_teepee", "des_dustconc");


	new cobj2130 = CreateDynamicObject(2200, 1385.898926, -18.972773, 999.944397, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2130, 0, 18028, "cj_bar2", "CJ_Black_metal");


	new cobj2131 = CreateDynamicObject(19377, 1372.138184, 6.891025, 1003.370850, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2131, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj2132 = CreateDynamicObject(2315, 1378.881958, -15.566802, 999.884155, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2132, 0, 964, "cj_crate_will", "CJ_FLIGHT_CASE");


	new cobj2133 = CreateDynamicObject(1742, 1371.611328, -5.391954, 999.924316, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2133, 512, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(1497, 1382.859619, -18.225046, 999.893921, 0.000000, 0.000000, 270.000000,0,4);

	new cobj2134 = CreateDynamicObject(2200, 1379.227173, -16.262775, 1000.374817, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2134, 0, 18028, "cj_bar2", "CJ_Black_metal");


//	new cobj2135 = CreateDynamicObject(3089, 1383.069214, -18.106548, 1004.675903, 0.000000, 0.000000, 270.000000,0,4);
	//SetDynamicObjectMaterial(cobj2135, 0, 18646, "matcolours", "white");


	new cobj2136 = CreateDynamicObject(2315, 1376.817749, -14.456724, 999.884155, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2136, 0, 964, "cj_crate_will", "CJ_FLIGHT_CASE");

	CreateDynamicObject(2258, 1380.896240, -17.264957, 1005.427002, 0.000000, 0.000000, 0.000000,0,4);

	new cobj2137 = CreateDynamicObject(1742, 1371.631714, -7.361958, 999.924316, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2137, 512, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj2138 = CreateDynamicObject(19383, 1382.853882, -18.960386, 1001.655579, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2138, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj2139 = CreateDynamicObject(19448, 1402.410400, -17.125935, 1005.281982, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2139, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj2140 = CreateDynamicObject(19386, 1383.066406, -18.829140, 1005.296265, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2140, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj2141 = CreateDynamicObject(2256, 1391.995972, -20.556618, 1005.587280, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2141, 0, 18028, "cj_bar2", "GB_nastybar13");


	new cobj2142 = CreateDynamicObject(19448, 1392.776245, -20.695969, 1005.281982, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2142, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj2143 = CreateDynamicObject(2256, 1393.787476, -20.556618, 1005.587280, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2143, 0, 18028, "cj_bar2", "GB_nastybar13");

	CreateDynamicObject(1727, 1379.737915, -17.815899, 1003.556091, 0.000000, 0.000000, 0.799997,0,4);

	new cobj2144 = CreateDynamicObject(19377, 1382.320557, -18.638927, 1006.972168, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2144, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj2145 = CreateDynamicObject(2961, 1382.745850, -19.944447, 1001.285278, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2145, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj2146 = CreateDynamicObject(19377, 1372.285278, -10.908967, 999.858337, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2146, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj2147 = CreateDynamicObject(2155, 1372.134888, -10.750930, 999.943604, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2147, 512, 18028, "cj_bar2", "CJ_Black_metal");


	new cobj2148 = CreateDynamicObject(2315, 1378.882446, -17.906788, 999.884155, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2148, 0, 964, "cj_crate_will", "CJ_FLIGHT_CASE");


	new cobj2149 = CreateDynamicObject(19448, 1378.174194, -17.032173, 1005.262451, 0.000000, 0.000000, 88.400002,0,4);
	SetDynamicObjectMaterial(cobj2149, 0, 18028, "cj_bar2", "CJ_Black_metal");


	new cobj2150 = CreateDynamicObject(2200, 1379.047485, -18.232784, 1000.374817, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2150, 0, 18028, "cj_bar2", "CJ_Black_metal");

	CreateDynamicObject(2518, 1372.546387, -11.834682, 1000.243591, 0.000000, 0.000000, 90.000000,0,4);
	CreateDynamicObject(2190, 1378.215576, -17.434610, 1004.356506, 0.000000, 0.000000, 0.000000,0,4);
	CreateDynamicObject(2165, 1385.602661, -21.195507, 999.903931, 0.000000, 0.000000, 270.000000,0,4);

	new cobj2151 = CreateDynamicObject(2155, 1372.134399, -11.570929, 999.943604, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2151, 512, 18028, "cj_bar2", "CJ_Black_metal");


	new cobj2152 = CreateDynamicObject(19448, 1371.661499, -10.925978, 1001.660706, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2152, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj2153 = CreateDynamicObject(19448, 1379.442139, -18.856060, 1001.660706, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2153, 0, 16004, "des_teepee", "des_dustconc");


	new cobj2154 = CreateDynamicObject(19377, 1382.778809, -20.548946, 999.848999, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2154, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(2174, 1377.496582, -17.661083, 1003.566101, 0.000000, 0.000000, 0.000000,0,4);

	new cobj2155 = CreateDynamicObject(2155, 1372.133911, -12.390936, 999.943604, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2155, 512, 18028, "cj_bar2", "CJ_Black_metal");


	new cobj2156 = CreateDynamicObject(19448, 1386.146973, -22.015972, 1001.660706, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2156, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj2157 = CreateDynamicObject(19377, 1374.216187, -15.138922, 999.868347, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2157, 0, 14777, "int_casinoint3", "GB_midbar15");


	new cobj2158 = CreateDynamicObject(19353, 1371.834351, -12.107301, 1000.603699, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2158, 0, 18646, "matcolours", "white");


	new cobj2159 = CreateDynamicObject(19426, 1371.766724, -11.979379, 1002.287231, 0.000000, -90.099991, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2159, 0, 14777, "int_casinoint3", "GB_midbar15");


	new cobj2160 = CreateDynamicObject(2315, 1378.820313, -19.026808, 999.884155, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2160, 0, 964, "cj_crate_will", "CJ_FLIGHT_CASE");


	new cobj2161 = CreateDynamicObject(2200, 1379.205688, -19.362745, 1000.374817, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2161, 0, 18028, "cj_bar2", "CJ_Black_metal");

	CreateDynamicObject(1567, 1374.270508, -15.405857, 1000.113464, 0.000000, 0.000000, 90.000000,0,4);

	new cobj2162 = CreateDynamicObject(2315, 1377.011719, -17.906788, 999.884155, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2162, 0, 964, "cj_crate_will", "CJ_FLIGHT_CASE");

	CreateDynamicObject(2518, 1372.556885, -13.414694, 1000.243591, 0.000000, 0.000000, 90.000000,0,4);
	CreateDynamicObject(1663, 1384.465576, -21.865147, 1000.364380, 0.000000, 0.000000, 90.000000,0,4);

	new cobj2163 = CreateDynamicObject(19353, 1372.724365, -13.797310, 1001.654724, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2163, 0, 6866, "vgncnstrct1", "Circus_gls_05");

	CreateDynamicObject(948, 1387.556030, -22.465324, 1003.566162, 0.000000, 0.000000, 0.000000,0,4);

	new cobj2164 = CreateDynamicObject(2200, 1377.782227, -18.682730, 1000.374817, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2164, 0, 18028, "cj_bar2", "CJ_Black_metal");

	CreateDynamicObject(1671, 1377.950195, -18.654224, 1004.006592, 0.000000, 0.000000, 153.700043,0,4);

	new cobj2165 = CreateDynamicObject(2155, 1372.133423, -13.210931, 999.943604, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2165, 512, 18028, "cj_bar2", "CJ_Black_metal");


	new cobj2166 = CreateDynamicObject(2200, 1376.876099, -18.232784, 1000.374817, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2166, 0, 18028, "cj_bar2", "CJ_Black_metal");


	new cobj2167 = CreateDynamicObject(19448, 1397.658936, -22.025997, 1005.281982, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2167, 0, 14777, "int_casinoint3", "GB_midbar01");

	CreateDynamicObject(1727, 1387.401245, -23.045116, 1003.576233, 0.000000, 0.000000, 270.000000,0,4);
	CreateDynamicObject(1663, 1380.412476, -20.784676, 1004.016174, 0.000000, 0.000000, -85.799988,0,4);

	new cobj2168 = CreateDynamicObject(19448, 1371.821167, -13.735975, 1001.660706, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2168, 0, 6866, "vgncnstrct1", "Circus_gls_05");


	new cobj2169 = CreateDynamicObject(19353, 1382.854858, -22.108368, 1001.655640, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2169, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj2170 = CreateDynamicObject(2315, 1377.069214, -19.026808, 999.884155, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2170, 0, 964, "cj_crate_will", "CJ_FLIGHT_CASE");


	new cobj2171 = CreateDynamicObject(2315, 1375.569824, -17.906788, 999.884155, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2171, 0, 964, "cj_crate_will", "CJ_FLIGHT_CASE");

	CreateDynamicObject(2514, 1372.376709, -14.632832, 999.964233, 0.000000, 0.000000, 90.000000,0,4);

	new cobj2172 = CreateDynamicObject(19325, 1386.532837, -23.396086, 1000.596069, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2172, 0, 18646, "none", "none");


	new cobj2173 = CreateDynamicObject(2315, 1378.881958, -20.496815, 999.884155, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2173, 0, 964, "cj_crate_will", "CJ_FLIGHT_CASE");


	new cobj2174 = CreateDynamicObject(19377, 1382.100464, -21.979057, 1003.370850, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2174, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj2175 = CreateDynamicObject(19353, 1372.734863, -15.487321, 1001.654724, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2175, 0, 6866, "vgncnstrct1", "Circus_gls_05");


	new cobj2176 = CreateDynamicObject(19426, 1385.972046, -23.476604, 1001.595337, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2176, 0, 16004, "des_teepee", "des_dustconc");


	new cobj2177 = CreateDynamicObject(19426, 1385.831421, -23.476604, 1001.595337, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2177, 0, 16004, "des_teepee", "des_dustconc");

	CreateDynamicObject(2164, 1382.322388, -22.344355, 1003.566223, 0.000000, 0.000000, 180.000000,0,4);

	new cobj2178 = CreateDynamicObject(2435, 1385.619507, -23.511808, 999.914185, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2178, 512, 16004, "des_teepee", "des_dustconc");


	new cobj2179 = CreateDynamicObject(2200, 1375.601685, -18.682730, 1000.374817, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2179, 0, 18028, "cj_bar2", "CJ_Black_metal");


	new cobj2180 = CreateDynamicObject(2435, 1385.590698, -23.511808, 1003.542969, 0.000000, -179.799942, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2180, 512, 16004, "des_teepee", "des_dustconc");


	new cobj2181 = CreateDynamicObject(2256, 1387.907837, -23.666599, 1005.587280, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2181, 0, 18028, "cj_bar2", "GB_nastybar13");

	CreateDynamicObject(1663, 1380.472046, -21.718746, 1004.016174, 0.000000, 0.000000, -96.899994,0,4);

	new cobj2182 = CreateDynamicObject(2435, 1384.689087, -23.511808, 999.914185, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2182, 512, 16004, "des_teepee", "des_dustconc");

	CreateDynamicObject(2169, 1378.589966, -20.850147, 1003.566101, 0.000000, 0.000000, 270.000000,0,4);

	new cobj2183 = CreateDynamicObject(2435, 1384.660278, -23.511808, 1003.544739, 0.000000, -179.799942, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2183, 512, 16004, "des_teepee", "des_dustconc");


	new cobj2184 = CreateDynamicObject(2256, 1376.108154, -18.905857, 1005.617310, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2184, 0, 18028, "cj_bar2", "GB_nastybar13");


	new cobj2185 = CreateDynamicObject(2200, 1379.206177, -21.552765, 1000.374817, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2185, 0, 18028, "cj_bar2", "CJ_Black_metal");


	new cobj2186 = CreateDynamicObject(2435, 1383.768677, -23.511808, 999.914185, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2186, 512, 16004, "des_teepee", "des_dustconc");


	new cobj2187 = CreateDynamicObject(19448, 1374.681519, -18.456070, 1001.660706, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2187, 0, 16004, "des_teepee", "des_dustconc");

	CreateDynamicObject(19325, 1383.145996, -22.934113, 1005.616638, 0.000000, 0.000000, 0.000000,0,4);
	CreateDynamicObject(1727, 1387.391724, -24.355139, 1003.576233, 0.000000, 0.000000, 270.000000,0,4);

	new cobj2188 = CreateDynamicObject(2435, 1383.740112, -23.511808, 1003.545471, 0.000000, -179.799942, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2188, 512, 16004, "des_teepee", "des_dustconc");


	new cobj2189 = CreateDynamicObject(19426, 1383.207886, -23.476604, 1001.595337, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2189, 0, 16004, "des_teepee", "des_dustconc");


	new cobj2190 = CreateDynamicObject(19426, 1383.028198, -23.476604, 1001.595337, 0.000000, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2190, 0, 16004, "des_teepee", "des_dustconc");

	CreateDynamicObject(1713, 1382.517334, -23.194521, 1003.546265, 0.000000, 0.000000, 270.000000,0,4);
	CreateDynamicObject(2162, 1376.106323, -20.079025, 1003.555847, 0.000000, 0.000000, 90.000000,0,4);
	CreateDynamicObject(2256, 1381.002319, -22.593010, 1005.587097, 0.000000, 0.000000, 0.000000,0,4);

	new cobj2191 = CreateDynamicObject(2192, 1373.461792, -18.273813, 1002.170288, -89.700081, 0.000000, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2191, 0, 964, "cj_crate_will", "CJ_FLIGHT_CASE");


	new cobj2192 = CreateDynamicObject(19353, 1373.516113, -18.357372, 1001.654724, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2192, 0, 6866, "vgncnstrct1", "Circus_gls_05");


	new cobj2193 = CreateDynamicObject(19377, 1402.019897, -22.338932, 1006.972168, 0.000000, 89.999977, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2193, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj2194 = CreateDynamicObject(19377, 1392.385864, -24.758978, 1006.972168, 0.000000, 89.999977, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2194, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj2195 = CreateDynamicObject(19353, 1373.503662, -18.487316, 1001.654724, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2195, 0, 6866, "vgncnstrct1", "Circus_gls_05");

	CreateDynamicObject(1520, 1380.193237, -22.758543, 1004.536682, 0.000000, 0.000000, 21.499998,0,4);
	CreateDynamicObject(1671, 1377.507568, -21.469627, 1004.006592, 0.000000, 0.000000, 104.499992,0,4);

	new cobj2196 = CreateDynamicObject(19377, 1368.646851, -12.338986, 1003.370850, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2196, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(2162, 1379.296631, -22.569052, 1003.555847, 0.000000, 0.000000, 0.000000,0,4);

	new cobj2197 = CreateDynamicObject(2315, 1376.817749, -21.296738, 999.884155, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2197, 0, 964, "cj_crate_will", "CJ_FLIGHT_CASE");


	new cobj2198 = CreateDynamicObject(2192, 1373.340088, -18.553844, 1002.168884, -89.700081, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2198, 0, 964, "cj_crate_will", "CJ_FLIGHT_CASE");


	new cobj2199 = CreateDynamicObject(2192, 1371.929932, -17.153818, 1002.176270, -89.700081, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2199, 0, 964, "cj_crate_will", "CJ_FLIGHT_CASE");


	new cobj2200 = CreateDynamicObject(2315, 1378.881470, -22.836838, 999.884155, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2200, 0, 964, "cj_crate_will", "CJ_FLIGHT_CASE");


	new cobj2201 = CreateDynamicObject(2256, 1376.108154, -20.685871, 1005.617310, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2201, 0, 18028, "cj_bar2", "GB_nastybar13");

	CreateDynamicObject(2257, 1378.703491, -22.323687, 1005.637512, 0.000000, 0.000000, 180.000000,0,4);

	new cobj2202 = CreateDynamicObject(19448, 1388.037964, -25.426022, 1005.281982, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2202, 0, 14777, "int_casinoint3", "GB_midbar01");

	CreateDynamicObject(1727, 1387.382202, -25.625164, 1003.576233, 0.000000, 0.000000, 270.000000,0,4);

	new cobj2203 = CreateDynamicObject(2256, 1387.907837, -25.456612, 1005.587280, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2203, 0, 18028, "cj_bar2", "GB_nastybar13");


	new cobj2204 = CreateDynamicObject(19448, 1378.323730, -22.465939, 1005.151306, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2204, 0, 18028, "cj_bar2", "CJ_Black_metal");


	new cobj2205 = CreateDynamicObject(19377, 1372.253174, -17.338953, 1006.972168, 0.000000, 89.999977, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2205, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(2164, 1377.532349, -22.604361, 1003.566223, 0.000000, 0.000000, 0.000000,0,4);
	CreateDynamicObject(2833, 1381.519043, -24.547544, 1003.576477, 0.000000, 0.000000, 99.099998,0,4);

	new cobj2206 = CreateDynamicObject(19383, 1382.853394, -25.170443, 1001.655579, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2206, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj2207 = CreateDynamicObject(19448, 1375.982910, -22.025997, 1005.262451, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2207, 0, 18646, "matcolours", "white");

	CreateDynamicObject(3109, 1386.127075, -26.717560, 1001.135132, 0.000000, 0.000000, 0.000000,0,4);
	//CreateDynamicObject(1569, 1382.835571, -25.930332, 999.933960, 0.000000, 0.000000, 90.000000,0,4);
	CreateDynamicObject(1663, 1380.266846, -25.067636, 1004.026245, 0.000000, 0.000000, -86.199982,0,4);

	new cobj2208 = CreateDynamicObject(19377, 1372.294800, -20.548960, 999.858337, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2208, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj2209 = CreateDynamicObject(19383, 1379.433472, -25.280411, 1001.655579, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2209, 0, 16004, "des_teepee", "des_dustconc");


	new cobj2210 = CreateDynamicObject(19377, 1383.328857, -26.729053, 1003.480774, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2210, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj2211 = CreateDynamicObject(2192, 1371.879395, -20.403860, 1002.172607, -89.700081, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2211, 0, 964, "cj_crate_will", "CJ_FLIGHT_CASE");

	CreateDynamicObject(1663, 1380.284058, -26.112532, 1004.026245, 0.000000, 0.000000, -96.599968,0,4);

	new cobj2212 = CreateDynamicObject(19386, 1383.065308, -26.989229, 1005.276245, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2212, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj2213 = CreateDynamicObject(19353, 1372.703369, -21.797316, 1001.654724, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2213, 0, 6866, "vgncnstrct1", "Circus_gls_05");


	new cobj2214 = CreateDynamicObject(19448, 1381.584961, -26.896057, 1001.660706, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2214, 0, 14777, "int_casinoint3", "GB_midbar01");

	//CreateDynamicObject(1569, 1379.404175, -26.040335, 999.933960, 0.000000, 0.000000, 90.000000,0,4);

	new cobj2215 = CreateDynamicObject(19377, 1372.829956, -21.999023, 1003.480774, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2215, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(1964, 1378.183594, -25.425188, 1004.486633, 0.000000, 0.000000, 90.000000,0,4);
	CreateDynamicObject(1567, 1374.250000, -23.395863, 1000.123474, 0.000000, 0.000000, 90.000000,0,4);

	new cobj2216 = CreateDynamicObject(19448, 1387.965576, -28.406000, 1005.281982, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2216, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj2217 = CreateDynamicObject(2256, 1376.108154, -24.315895, 1005.617310, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2217, 0, 18028, "cj_bar2", "GB_nastybar13");


	new cobj2218 = CreateDynamicObject(19377, 1372.142578, -21.968996, 1003.370850, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2218, 0, 3857, "ottos_glass", "carshowroom1");


//	new cobj2219 = CreateDynamicObject(3089, 1383.059692, -27.746536, 1004.645874, 0.000000, 0.000000, 90.000000,0,4);
//	SetDynamicObjectMaterial(cobj2219, 0, 18646, "matcolours", "white");


	new cobj2220 = CreateDynamicObject(2256, 1385.576050, -28.276646, 1005.587280, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2220, 0, 18028, "cj_bar2", "GB_nastybar13");

	CreateDynamicObject(2514, 1372.396240, -22.652840, 999.964233, 0.000000, 0.000000, 90.000000,0,4);
	CreateDynamicObject(1671, 1376.738892, -25.562775, 1004.026184, 0.000000, 0.000000, 90.000000,0,4);

	new cobj2221 = CreateDynamicObject(2184, 1378.696777, -26.694933, 1003.565979, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2221, 256, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj2222 = CreateDynamicObject(19353, 1372.713867, -23.477324, 1001.654724, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2222, 0, 6866, "vgncnstrct1", "Circus_gls_05");


	new cobj2223 = CreateDynamicObject(2315, 1376.808228, -26.266792, 999.884155, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2223, 0, 964, "cj_crate_will", "CJ_FLIGHT_CASE");


	new cobj2224 = CreateDynamicObject(19377, 1374.185669, -24.758942, 999.868347, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2224, 0, 14777, "int_casinoint3", "GB_midbar15");


	new cobj2225 = CreateDynamicObject(19377, 1382.316284, -28.248920, 1006.972168, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2225, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj2226 = CreateDynamicObject(19448, 1371.810669, -23.335979, 1001.660706, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2226, 0, 6866, "vgncnstrct1", "Circus_gls_05");


	new cobj2227 = CreateDynamicObject(2200, 1376.671753, -26.622763, 1000.374817, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2227, 0, 18028, "cj_bar2", "CJ_Black_metal");


	new cobj2228 = CreateDynamicObject(2256, 1376.108154, -26.105898, 1005.617310, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2228, 0, 18028, "cj_bar2", "GB_nastybar13");


	new cobj2229 = CreateDynamicObject(2155, 1372.114014, -23.880934, 999.943604, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2229, 512, 18028, "cj_bar2", "CJ_Black_metal");


	new cobj2230 = CreateDynamicObject(2256, 1380.388916, -28.385897, 1005.357056, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2230, 0, 18028, "cj_bar2", "GB_nastybar13");


	new cobj2231 = CreateDynamicObject(2233, 1379.767700, -28.455004, 1003.566528, 0.000000, 0.000000, 167.999893,0,4);
	SetDynamicObjectMaterial(cobj2231, 0, 16005, "des_stownmain2", "black32");

	CreateDynamicObject(2104, 1379.426025, -28.423765, 1003.566101, 0.000000, 0.000000, 180.000000,0,4);
	CreateDynamicObject(2518, 1372.557373, -25.044758, 1000.243591, 0.000000, 0.000000, 90.000000,0,4);

	new cobj2232 = CreateDynamicObject(2155, 1372.113525, -24.710924, 999.943604, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2232, 512, 18028, "cj_bar2", "CJ_Black_metal");


	new cobj2233 = CreateDynamicObject(19377, 1382.758301, -30.158997, 999.848999, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2233, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(2332, 1376.539917, -27.565289, 1004.026306, 0.000000, 0.000000, 90.000000,0,4);

	new cobj2234 = CreateDynamicObject(2233, 1378.651733, -28.625719, 1003.566528, 0.000000, 0.000000, -172.800018,0,4);
	SetDynamicObjectMaterial(cobj2234, 0, 16005, "des_stownmain2", "black32");


	new cobj2235 = CreateDynamicObject(19448, 1374.532959, -26.856108, 1001.660706, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2235, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj2236 = CreateDynamicObject(19448, 1378.197754, -28.486017, 1005.281982, 0.000000, 0.000000, 270.000000,0,4);
	SetDynamicObjectMaterial(cobj2236, 0, 14777, "int_casinoint3", "GB_midbar01");


	new cobj2237 = CreateDynamicObject(19353, 1371.813843, -25.167345, 1000.603699, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2237, 0, 18646, "matcolours", "white");


	new cobj2238 = CreateDynamicObject(19426, 1371.886353, -25.309372, 1002.263916, 0.000000, -90.099991, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2238, 0, 14777, "int_casinoint3", "GB_midbar15");


	new cobj2239 = CreateDynamicObject(2155, 1372.113037, -25.540943, 999.943604, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2239, 512, 18028, "cj_bar2", "CJ_Black_metal");

	CreateDynamicObject(2518, 1372.567871, -26.474768, 1000.243591, 0.000000, 0.000000, 90.000000,0,4);

	new cobj2240 = CreateDynamicObject(2155, 1372.112549, -26.360962, 999.943604, 0.000000, 0.000000, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2240, 512, 18028, "cj_bar2", "CJ_Black_metal");


	new cobj2241 = CreateDynamicObject(19377, 1382.099976, -31.609062, 1003.370850, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2241, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj2242 = CreateDynamicObject(19377, 1372.263672, -27.818935, 1006.972168, 0.000000, 89.999977, 90.000000,0,4);
	SetDynamicObjectMaterial(cobj2242, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj2243 = CreateDynamicObject(19448, 1375.982910, -31.656042, 1005.262451, 0.000000, 0.000000, 180.000000,0,4);
	SetDynamicObjectMaterial(cobj2243, 0, 18646, "matcolours", "white");


	new cobj2244 = CreateDynamicObject(19377, 1372.294312, -30.158960, 999.858337, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2244, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj2245 = CreateDynamicObject(19377, 1372.839600, -31.619034, 1003.480774, 0.000000, 89.999977, 0.000000,0,4);
	SetDynamicObjectMaterial(cobj2245, 0, 2748, "pizza_furn", "CJ_WOOD6");

    CreateDynamicObject(1569, 1390.18640, 3.55130, 999.92188,   0.00000, 0.00000, 0.00000,0,4);
	CreateDynamicObject(1569, 1393.14868, 3.55745, 999.92188,   0.00000, 0.00000, 180.00000,0,4);
////WEST
 	CreateDynamicObject(1660, 479.50000, -1646.00000, 17.32000,   0.00000, 90.00000, 272.57999);
	CreateDynamicObject(1660, 479.50000, -1645.75000, 17.56000,   0.00000, 90.00000, 272.57999);
	CreateDynamicObject(1660, 479.50000, -1645.50000, 17.80000,   0.00000, 90.00000, 272.57999);
	CreateDynamicObject(1660, 479.50000, -1645.25000, 18.02000,   0.00000, 90.00000, 272.57999);
	CreateDynamicObject(1660, 479.50000, -1645.00000, 18.26000,   0.00000, 90.00000, 272.57999);
	CreateDynamicObject(1660, 479.50000, -1644.75000, 18.48000,   0.00000, 90.00000, 272.57999);
	CreateDynamicObject(1660, 479.50000, -1644.50000, 18.70000,   0.00000, 90.00000, 272.57999);
	CreateDynamicObject(1660, 479.50000, -1644.25000, 18.94000,   0.00000, 90.00000, 272.57999);
	CreateDynamicObject(1660, 479.50000, -1644.00000, 19.18000,   0.00000, 90.00000, 272.57999);
	CreateDynamicObject(1660, 479.50000, -1643.75000, 19.42000,   0.00000, 90.00000, 272.57999);
	CreateDynamicObject(1660, 479.50000, -1643.50000, 19.66000,   0.00000, 90.00000, 272.57999);
	CreateDynamicObject(10834, 288.75879, -1846.58594, -4.42185,   0.00000, 0.00000, 179.71436);
	CreateDynamicObject(18663, 475.92999, -1761.59998, 6.10000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1216, 501.29999, -1762.09998, 5.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(975, 488.55429, -1735.48071, 11.82100,   0.00000, 0.00000, 348.75000);
	CreateDynamicObject(1257, 403.81866, -1778.77698, 5.58132,   0.00000, 0.00000, 270.24649);
	CreateDynamicObject(19122, 649.74841, -1658.85962, 14.34050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18647, 654.79492, -1657.89856, 16.80470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 649.62183, -1652.23853, 14.41680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18648, 654.79492, -1655.90259, 16.80470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11245, 534.35492, -1813.04639, 9.19806,   0.00000, 5.00000, 0.00000);
	CreateDynamicObject(3264, 539.36707, -1799.01855, 3.94399,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2714, 532.28949, -1812.96411, 8.56330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(4100, 533.24188, -1799.04150, 6.13120,   0.00000, 0.00000, 140.16800);
	CreateDynamicObject(1538, 532.33472, -1813.74219, 5.57750,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3264, 543.28027, -1798.97217, 3.94399,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1481, 547.64441, -1797.62671, 5.66160,   0.00000, 0.00000, 156.00000);
	CreateDynamicObject(4100, 548.77069, -1799.01184, 6.13120,   0.00000, 0.00000, 140.16800);
	CreateDynamicObject(4100, 522.96631, -1799.03394, 6.13120,   0.00000, 0.00000, 140.16800);
	CreateDynamicObject(1281, 553.26056, -1795.20996, 5.81426,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1278, 555.84412, -1798.77966, 5.08770,   0.00000, 0.00000, 222.00000);
	CreateDynamicObject(1644, 553.81659, -1790.52625, 4.97703,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3262, 556.29767, -1792.10315, 3.66158,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(4100, 556.31006, -1791.83252, 6.13120,   0.00000, 0.00000, 47.00000);
	CreateDynamicObject(1639, 545.63177, -1783.28625, 4.78700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1598, 547.95447, -1783.97278, 5.14357,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1255, 555.10052, -1788.32898, 5.49440,   357.00000, 0.00000, 229.00000);
	CreateDynamicObject(1255, 555.22760, -1786.05994, 5.49440,   357.00000, 0.00000, 229.00000);
	CreateDynamicObject(1639, 551.74585, -1783.29785, 4.78704,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4100, 509.21823, -1799.04211, 6.13120,   0.00000, 0.00000, 140.16800);
	CreateDynamicObject(2921, 544.17969, -1774.74060, 13.39740,   0.00000, 0.00000, 113.00000);
	CreateDynamicObject(978, 505.02484, -1794.22778, 5.81920,   0.00000, 0.00000, -62.00000);
	CreateDynamicObject(4100, 557.02893, -1778.12231, 6.13120,   0.00000, 0.00000, 47.00000);
	CreateDynamicObject(978, 504.93518, -1793.16504, 5.16460,   69.00000, 0.00000, -62.00000);
	CreateDynamicObject(1425, 503.43179, -1796.97375, 5.51150,   0.00000, 0.00000, 200.00000);
	CreateDynamicObject(978, 504.28516, -1793.77893, 5.81920,   0.00000, 0.00000, 113.00000);
	CreateDynamicObject(1425, 503.16422, -1795.90002, 5.51150,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(1425, 502.19849, -1796.51611, 5.51150,   0.00000, 0.00000, 200.00000);
	CreateDynamicObject(1278, 500.35440, -1798.56848, 5.08480,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(1238, 503.66580, -1788.23474, 5.28432,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, 503.79373, -1787.64856, 5.28432,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, 503.26794, -1787.43127, 5.28432,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3872, 528.76227, -1768.06091, 5.38787,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(978, 502.57446, -1787.42029, 5.81920,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(1427, 503.24426, -1785.41711, 5.36516,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(978, 502.49088, -1785.55322, 5.81920,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(1427, 503.07632, -1784.26794, 5.36520,   0.00000, 0.00000, -84.00000);
	CreateDynamicObject(4100, 495.47391, -1799.03113, 6.13120,   0.00000, 0.00000, 140.16800);
	CreateDynamicObject(11326, 528.17957, -1764.25049, 6.96194,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3262, 557.55212, -1768.11060, 3.66158,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1427, 501.80698, -1780.65991, 5.36520,   0.00000, 0.00000, -84.00000);
	CreateDynamicObject(1238, 501.71759, -1779.85181, 5.43276,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, 501.71759, -1779.85181, 5.27430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, 501.71759, -1779.85181, 5.14754,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1427, 500.47314, -1779.12720, 5.36520,   0.00000, 0.00000, 62.00000);
	CreateDynamicObject(3864, 528.98138, -1761.44202, 4.67100,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2899, 509.92151, -1768.56372, 4.94710,   2.00000, 0.00000, -11.00000);
	CreateDynamicObject(4100, 557.78156, -1764.43726, 6.13120,   0.00000, 0.00000, 47.00000);
	CreateDynamicObject(1427, 499.63370, -1778.23364, 5.36516,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2899, 508.72327, -1768.66797, 4.93819,   2.18000, -0.45500, 0.00000);
	CreateDynamicObject(1238, 498.04410, -1778.81885, 5.14754,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1333, 506.19751, -1769.34595, 5.53560,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2899, 509.47491, -1766.20349, 5.02730,   2.18000, -0.45500, 0.00000);
	CreateDynamicObject(2921, 556.91656, -1761.52905, 10.64130,   0.00000, 0.00000, 76.00000);
	CreateDynamicObject(1334, 506.19901, -1766.77112, 5.53560,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(4100, 487.30310, -1798.49536, 0.12500,   -40.00000, 90.00000, 161.00000);
	CreateDynamicObject(1332, 505.95966, -1764.69653, 5.53560,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(4100, 484.91617, -1797.01257, 0.12500,   -40.00000, 90.00000, 140.00000);
	CreateDynamicObject(3872, 497.79092, -1768.08630, 5.38787,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(4100, 483.27280, -1794.75867, 0.12500,   -40.00000, 90.00000, 116.00000);
	CreateDynamicObject(4100, 482.62717, -1792.02576, 0.12500,   -40.00000, 90.00000, 95.00000);
	CreateDynamicObject(4100, 482.30670, -1789.18042, 0.12500,   -40.00000, 90.00000, 97.50000);
	CreateDynamicObject(4100, 481.54407, -1786.44482, 0.12500,   -40.00000, 90.00000, 111.00000);
	CreateDynamicObject(3864, 497.92194, -1761.44409, 4.67100,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(4100, 480.18338, -1783.95398, 0.12500,   -40.00000, 90.00000, 123.00000);
	CreateDynamicObject(5114, 573.84741, -1756.05457, -4.79570,   0.00000, 0.00000, -6.00000);
	CreateDynamicObject(4100, 478.38260, -1781.73840, 0.12500,   -40.00000, 90.00000, 133.20000);
	CreateDynamicObject(4100, 476.18890, -1779.92664, 0.12500,   -40.00000, 90.00000, 146.20000);
	CreateDynamicObject(2921, 487.28281, -1761.45337, 10.83800,   0.00000, 0.00000, 47.00000);
	CreateDynamicObject(5114, 599.95001, -1779.75708, -4.77944,   0.00000, 0.00000, -47.00000);
	CreateDynamicObject(4100, 473.64471, -1778.59204, 0.12500,   -40.00000, 90.00000, 156.00000);
	CreateDynamicObject(5114, 510.56702, -1742.93567, -5.00510,   0.00000, 0.00000, 76.00000);
	CreateDynamicObject(4571, 526.43628, -1780.53931, -59.19511,   -0.84500, 0.00000, 0.00000);
	CreateDynamicObject(4100, 471.53201, -1776.84082, 0.12500,   -40.00000, 90.00000, 129.88000);
	CreateDynamicObject(4100, 470.82602, -1774.28748, 0.12500,   -40.50000, 90.00000, 90.00000);
	CreateDynamicObject(16375, 467.53329, -1780.71021, 5.30500,   -0.69600, -0.10000, 178.26601);
	CreateDynamicObject(4100, 470.83063, -1771.41370, 0.12500,   -40.50000, 90.00000, 90.00000);
	CreateDynamicObject(16003, 470.96066, -1768.22876, 5.93570,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3264, 470.11166, -1767.74121, 3.01642,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19425, 471.18420, -1764.40820, 4.53600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(4100, 471.99289, -1761.42480, 0.12500,   -40.50000, 90.00000, 180.00000);
	CreateDynamicObject(4571, 503.87921, -1759.56677, -59.27780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1233, 456.62021, -1770.45239, 6.16990,   0.00000, 0.00000, -142.00000);
	CreateDynamicObject(1233, 463.88461, -1755.48376, 6.16986,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(11495, 532.26782, -1913.14014, 0.23297,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1257, 374.37393, -1521.02356, 33.02085,   0.00000, 0.00000, 307.40405);
/////////////////////EST LSPD//////////////
	CreateObject(3940, 2322.14307, -1371.23938, 22.38640,   0.00000, -0.36000, 269.21680);
	CreateObject(3940, 2335.68311, -1371.39941, 22.38640,   0.00000, 0.00000, 269.21680);
	CreateObject(3940, 2327.22754, -1369.84021, 26.11920,   0.00000, 0.00000, 269.49490);
	CreateObject(1538, 2325.97754, -1374.17468, 23.01610,   0.00000, 0.00000, 0.00000);
	CreateObject(2714, 2326.72534, -1374.08374, 25.89850,   0.00000, 0.00000, 0.00000);
	CreateObject(1256, 2333.62793, -1374.96191, 23.62440,   0.00000, 0.00000, 89.43340);
	CreateObject(11245, 2330.17041, -1373.00977, 29.61960,   0.00000, -12.00000, 270.00000);
	CreateObject(3940, 2322.16309, -1364.67932, 22.40640,   0.00000, 0.00000, 270.15369);
	CreateObject(4100, 2314.24756, -1355.01587, 24.65260,   0.00000, 0.00000, 50.50800);
	CreateObject(4100, 2313.82764, -1335.83582, 24.69260,   0.00000, 0.00000, 50.86800);
	CreateObject(18284, 2325.05054, -1339.01453, 25.21610,   0.00000, 0.00000, 90.00000);
	CreateObject(3940, 2335.64307, -1364.65930, 22.20640,   0.00000, 0.00000, 268.38071);
	CreateObject(3940, 2328.52319, -1364.67932, 22.38640,   0.00000, 0.00000, 270.15369);
	CreateObject(3940, 2336.04834, -1361.36755, 26.07980,   0.00000, 0.00000, 178.87469);
	CreateObject(3940, 2330.52832, -1361.24756, 26.07980,   0.00000, 0.00000, 178.87469);
	CreateObject(3940, 2327.26758, -1367.64026, 26.07920,   0.00000, 0.00000, 269.42160);
	CreateObject(1287, 2318.45898, -1374.55640, 23.55350,   0.00000, 0.00000, 180.00000);
	CreateObject(1288, 2319.59912, -1374.55640, 23.55350,   0.00000, 0.00000, 180.00000);
	CreateObject(4100, 2337.18750, -1348.57605, 24.65260,   0.00000, 0.00000, 140.47510);
	CreateObject(3264, 2313.94458, -1342.27563, 22.74060,   0.00000, 0.00000, 270.92841);
	CreateObject(19425, 2313.89648, -1345.71008, 22.97440,   0.00000, 0.00000, 91.25110);
	CreateObject(1481, 2336.62280, -1347.90125, 24.25750,   0.00000, 0.00000, 180.00000);
	CreateObject(4100, 2337.18750, -1335.99597, 24.65260,   0.00000, 0.00000, 139.95885);
	CreateObject(620, 2338.91406, -1336.73657, 22.54660,   356.85840, 0.00000, -1.39630);
	CreateObject(14826, 2333.48291, -1340.33289, 23.66870,   0.00000, 0.00000, 90.00000);
	CreateObject(3633, 2343.22754, -1345.86719, 23.47250,   0.00000, 0.00000, 0.00000);
	CreateObject(3633, 2343.22754, -1339.56726, 23.47250,   0.00000, 0.00000, 0.00000);
	CreateObject(3633, 2343.22754, -1341.08728, 23.47250,   0.00000, 0.00000, 0.00000);
	CreateObject(3633, 2343.14746, -1344.46716, 23.47250,   0.00000, 0.00000, 0.00000);
	CreateObject(3264, 2336.77710, -1336.03308, 23.22210,   0.00000, 0.00000, 180.00000);
	CreateObject(3264, 2343.64136, -1348.49109, 23.08060,   0.00000, 0.00000, 0.60999);
	CreateObject(1679, 2337.23242, -1344.75671, 24.00720,   0.00000, 0.00000, 0.00000);
	CreateObject(2921, 2323.58130, -1364.28455, 29.89770,   0.00000, 0.00000, 326.65250);
	CreateObject(2921, 2323.76123, -1364.34448, 29.85770,   0.00000, 0.00000, 257.20389);
	CreateObject(2921, 2338.97925, -1374.54834, 26.40390,   0.00000, 0.00000, 35.24730);



	new cobj30 = CreateDynamicObject(19358, 1407.781250, -0.859787, 1008.655396, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj30, 0, 18028, "cj_bar2", "GB_nastybar13");


	new cobj31 = CreateDynamicObject(1569, 1409.278442, -0.897903, 1006.744507, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj31, 0, 18646, "none", "none");


	new cobj32 = CreateDynamicObject(1569, 1406.285156, -0.897904, 1006.744507, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj32, 0, 18646, "none", "none");


	new cobj33 = CreateDynamicObject(19436, 1405.849121, -0.377443, 1008.515808, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj33, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj34 = CreateDynamicObject(19436, 1409.910645, -0.377444, 1008.515808, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj34, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj35 = CreateDynamicObject(19431, 1405.619019, -0.367580, 1008.666016, 0.000000, 0.000000, -129.699738,1,1);
	SetDynamicObjectMaterial(cobj35, 0, 18028, "cj_bar2", "GB_nastybar13");


	new cobj36 = CreateDynamicObject(19431, 1409.986450, -0.412823, 1008.666016, 0.000000, 0.000000, 125.199837,1,1);
	SetDynamicObjectMaterial(cobj36, 0, 18028, "cj_bar2", "GB_nastybar13");


	new cobj37 = CreateDynamicObject(19358, 1407.770752, 0.355024, 1010.360046, 0.000000, -89.900032, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj37, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(2707, 1405.798340, -0.887606, 1010.265625, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(2707, 1409.829224, -0.847606, 1010.265625, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj38 = CreateDynamicObject(19447, 1405.853760, -2.715599, 1005.144287, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj38, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(19377, 1407.044922, 1.820786, 1006.799316, 0.000000, -90.000015, 0.00000000,1,1);

	new cobj39 = CreateDynamicObject(2435, 1407.024658, -5.015424, 1006.904297, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj39, 256, 3857, "ottos_glass", "carshowroom1");


	new cobj310 = CreateDynamicObject(19447, 1409.773071, -3.095592, 1005.144287, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj310, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj311 = CreateDynamicObject(2434, 1408.160156, -5.183482, 1006.904541, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj311, 256, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(2262, 1405.285889, -1.856924, 1005.024353, 0.000000, 0.000000, 270.00000000,1,1);

	new cobj312 = CreateDynamicObject(19358, 1406.059082, 0.975851, 1010.355774, 0.000000, -89.900032, 50.099941,1,1);
	SetDynamicObjectMaterial(cobj312, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj313 = CreateDynamicObject(19377, 1409.198853, 1.980793, 1006.829346, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj313, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj314 = CreateDynamicObject(19358, 1409.689697, 0.959864, 1010.359558, 0.000000, -89.900032, 124.999939,1,1);
	SetDynamicObjectMaterial(cobj314, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj315 = CreateDynamicObject(2435, 1406.094238, -5.015423, 1006.904297, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj315, 256, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(2707, 1408.339355, -4.909638, 1010.315918, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(2707, 1406.977783, -4.909637, 1010.315918, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(2161, 1405.777222, 0.530454, 1004.553955, 0.000000, 0.000000, 270.00000000,1,1);

	new cobj316 = CreateDynamicObject(19358, 1403.531616, -0.369786, 1008.655396, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj316, 0, 18028, "cj_bar2", "GB_nastybar13");


	new cobj317 = CreateDynamicObject(2435, 1405.162964, -5.015422, 1006.904297, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj317, 256, 3857, "ottos_glass", "carshowroom1");


	new cobj318 = CreateDynamicObject(19358, 1412.242310, -0.359785, 1008.655396, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj318, 0, 18028, "cj_bar2", "GB_nastybar13");


	new cobj319 = CreateDynamicObject(2435, 1408.155640, -6.115430, 1006.904297, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj319, 256, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(1671, 1405.185181, -2.138235, 1003.973450, 0.000000, 0.000000, -113.100006,1,1);
	CreateDynamicObject(2707, 1405.284912, -4.909636, 1010.315918, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj320 = CreateDynamicObject(2435, 1404.232056, -5.015421, 1006.904297, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj320, 256, 3857, "ottos_glass", "carshowroom1");


	new cobj321 = CreateDynamicObject(2406, 1405.465454, 1.797331, 1004.724060, -13.999999, 0.000000, -26.400015,1,1);
	SetDynamicObjectMaterial(cobj321, 0, 18646, "none", "none");

	CreateDynamicObject(2707, 1408.338379, -6.189650, 1010.315918, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(19325, 1404.783936, -5.174277, 1010.416199, 0.000000, 0.000000, 90.00000000,1,1);

	new cobj322 = CreateDynamicObject(19377, 1403.270874, 0.110790, 1010.379944, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj322, 0, 18646, "matcolours", "white");

	CreateDynamicObject(2611, 1404.500366, 2.024793, 1005.164490, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj323 = CreateDynamicObject(948, 1402.326172, -0.820705, 1006.905029, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj323, 256, 18646, "matcolours", "white");


	new cobj324 = CreateDynamicObject(2291, 1413.250610, -2.261188, 1006.904785, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj324, 0, 18646, "none", "none");


	new cobj325 = CreateDynamicObject(2435, 1408.156128, -7.035439, 1006.904297, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj325, 256, 3857, "ottos_glass", "carshowroom1");


	new cobj326 = CreateDynamicObject(2435, 1403.302246, -5.015420, 1006.904297, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj326, 256, 3857, "ottos_glass", "carshowroom1");


	new cobj327 = CreateDynamicObject(2291, 1413.249634, -3.201168, 1006.904785, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj327, 0, 18646, "none", "none");

	CreateDynamicObject(2707, 1403.713379, -4.909636, 1010.315918, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj328 = CreateDynamicObject(948, 1413.509399, -0.820704, 1006.905029, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj328, 256, 18646, "matcolours", "white");


	new cobj329 = CreateDynamicObject(2255, 1408.467529, -7.374572, 1008.574707, 0.000000, -90.000038, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj329, 0, 18646, "matcolours", "white");


	new cobj330 = CreateDynamicObject(2611, 1402.006104, -2.710922, 1008.755371, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj330, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(2165, 1403.843872, -2.494581, 1003.543152, 0.000000, 0.000000, 90.00000000,1,1);

	new cobj331 = CreateDynamicObject(19448, 1401.872803, -2.831140, 1008.645691, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj331, 0, 14777, "int_casinoint3", "GB_midbar06");


	new cobj332 = CreateDynamicObject(19447, 1403.732788, 2.154403, 1005.144287, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj332, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj333 = CreateDynamicObject(2291, 1413.250122, -4.141167, 1006.904785, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj333, 0, 18646, "none", "none");


	new cobj334 = CreateDynamicObject(19448, 1413.908447, -0.841129, 1008.645691, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj334, 0, 14777, "int_casinoint3", "GB_midbar06");


	new cobj335 = CreateDynamicObject(2238, 1408.029541, -7.732048, 1008.305664, 0.000000, -5.299998, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj335, 0, 18646, "matcolours", "white");


	new cobj336 = CreateDynamicObject(1510, 1407.964844, -7.734166, 1008.810974, 0.000000, 90.399803, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj336, 0, 18646, "matcolours", "red");

	CreateDynamicObject(16377, 1404.480103, 2.601241, 1004.483887, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(19377, 1409.215576, -7.639219, 1006.799316, 0.000000, -90.000015, 0.00000000,1,1);

	new cobj337 = CreateDynamicObject(19377, 1409.211060, -7.649225, 1006.829346, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj337, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj338 = CreateDynamicObject(2611, 1413.776978, -3.730921, 1008.755371, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj338, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(2102, 1402.860107, 1.895626, 1005.374146, 0.000000, 0.000000, 11.999998,1,1);

	new cobj339 = CreateDynamicObject(2435, 1402.371826, -5.015419, 1006.904297, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj339, 256, 3857, "ottos_glass", "carshowroom1");


	new cobj340 = CreateDynamicObject(2435, 1408.155640, -7.965436, 1006.904297, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj340, 256, 3857, "ottos_glass", "carshowroom1");


	new cobj341 = CreateDynamicObject(2270, 1407.659790, -8.070413, 1008.399841, -90.100037, 0.100000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj341, 0, 18646, "matcolours", "white");


	new cobj342 = CreateDynamicObject(2255, 1407.477295, -8.064577, 1008.574707, 0.000000, -90.000038, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj342, 0, 16005, "des_stownmain2", "black32");


	new cobj343 = CreateDynamicObject(19377, 1406.928833, -7.649225, 1010.431519, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj343, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(1663, 1402.331177, -1.358690, 1003.973450, 0.000000, 0.000000, 80.500015,1,1);
	CreateDynamicObject(2707, 1408.338867, -7.799658, 1010.315918, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(19325, 1408.105591, -7.234281, 1011.676575, -89.999985, 0.000000, 180.00000000,1,1);

	new cobj344 = CreateDynamicObject(1742, 1405.846069, 4.042530, 1004.353760, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj344, 0, 18646, "none", "none");

	CreateDynamicObject(1663, 1402.249756, -2.583790, 1003.973450, 0.000000, 0.000000, 96.700005,1,1);
	CreateDynamicObject(2707, 1402.201416, -4.909636, 1010.315918, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(2707, 1405.539917, 4.864654, 1006.194214, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj345 = CreateDynamicObject(19377, 1413.754761, -4.309210, 1010.379944, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj345, 0, 18646, "matcolours", "white");

	CreateDynamicObject(2672, 1407.555542, -7.935062, 1004.664063, 0.000000, 0.000000, 51.199989,1,1);

	new cobj346 = CreateDynamicObject(2435, 1408.155151, -8.805438, 1006.904297, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj346, 256, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(2200, 1413.700317, -5.850646, 1006.892822, 0.000000, 0.000000, 270.00000000,1,1);

	new cobj347 = CreateDynamicObject(2007, 1403.524902, 2.741282, 1003.553772, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj347, 0, 18646, "none", "none");


	new cobj348 = CreateDynamicObject(2007, 1404.635986, -8.341700, 1006.884399, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj348, 0, 18646, "none", "none");

	CreateDynamicObject(2616, 1401.762085, -5.440010, 1005.324402, 0.000000, 0.000000, 270.00000000,1,1);

	new cobj349 = CreateDynamicObject(19447, 1408.952637, -8.585597, 1005.144287, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj349, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj350 = CreateDynamicObject(19429, 1408.143921, -9.220145, 1008.645996, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj350, 0, 14777, "int_casinoint3", "GB_midbar06");


	new cobj351 = CreateDynamicObject(19429, 1404.050903, -8.330145, 1008.545898, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj351, 0, 14777, "int_casinoint3", "GB_midbar06");


	new cobj352 = CreateDynamicObject(19447, 1404.047363, -7.825575, 1005.164307, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj352, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(2164, 1402.280029, 2.061934, 1003.553406, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(2200, 1401.056641, -2.960666, 1003.542969, 0.000000, 0.000000, 180.00000000,1,1);
	CreateDynamicObject(1702, 1402.435913, 2.861446, 1003.543091, 0.000000, 0.000000, 180.00000000,1,1);

	new cobj353 = CreateDynamicObject(19447, 1400.153076, -3.095593, 1005.144287, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj353, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj354 = CreateDynamicObject(2000, 1409.105835, -9.771649, 1008.007202, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj354, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj355 = CreateDynamicObject(2000, 1409.105347, -9.771649, 1006.616089, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj355, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj356 = CreateDynamicObject(2414, 1402.446655, -8.012210, 1005.882141, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj356, 0, 18646, "matcolours", "white");

	CreateDynamicObject(1721, 1401.635498, -5.785142, 1003.543396, 0.000000, 0.000000, 90.00000000,1,1);

	new cobj357 = CreateDynamicObject(2291, 1413.299683, -8.181182, 1006.904785, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj357, 0, 18646, "none", "none");


	new cobj358 = CreateDynamicObject(2270, 1408.883545, -10.366471, 1007.915283, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj358, 0, 18646, "matcolours", "red");

	CreateDynamicObject(2707, 1405.539429, 6.954668, 1006.194214, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(2166, 1400.310181, -3.691484, 1003.533020, 0.000000, 0.000000, 270.00000000,1,1);

	new cobj359 = CreateDynamicObject(2414, 1402.446655, -8.342218, 1005.621887, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj359, 0, 18646, "matcolours", "white");


	new cobj360 = CreateDynamicObject(19447, 1401.885498, -7.825572, 1005.144287, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj360, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(1663, 1400.116211, -4.386166, 1003.973694, 0.000000, 0.000000, 74.899994,1,1);

	new cobj361 = CreateDynamicObject(19447, 1405.854248, 6.994400, 1005.144287, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj361, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj362 = CreateDynamicObject(19377, 1398.880859, -3.349205, 1006.839417, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj362, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(2165, 1404.127441, 5.799795, 1003.543335, 0.000000, 0.000000, 90.00000000,1,1);

	new cobj363 = CreateDynamicObject(2414, 1402.446655, -8.672225, 1005.361633, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj363, 0, 18646, "matcolours", "white");


	new cobj364 = CreateDynamicObject(19384, 1398.903931, -1.401256, 1005.174377, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj364, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj365 = CreateDynamicObject(19388, 1408.861572, -10.742952, 1008.665588, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj365, 0, 14777, "int_casinoint3", "GB_midbar06");

	CreateDynamicObject(1721, 1406.004761, -9.590317, 1003.533569, 0.000000, 0.000000, -97.600029,1,1);

	new cobj366 = CreateDynamicObject(19377, 1400.537476, 2.470779, 1003.468018, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj366, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(1721, 1408.979370, -9.741401, 1003.533569, 0.000000, 0.000000, 97.699989,1,1);

	new cobj367 = CreateDynamicObject(19447, 1409.294434, 7.364359, 1005.144287, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj367, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(2272, 1413.324585, -9.134096, 1008.134949, 0.000000, 0.000000, 270.00000000,1,1);
	CreateDynamicObject(2165, 1401.350220, -6.869655, 1003.553223, 0.000000, 0.000000, 270.00000000,1,1);

	new cobj368 = CreateDynamicObject(2291, 1413.309204, -9.141190, 1006.904785, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj368, 0, 18646, "none", "none");

	CreateDynamicObject(1671, 1405.240234, 6.744518, 1003.973450, 0.000000, 0.000000, -63.999966,1,1);
	CreateDynamicObject(1663, 1402.808472, 5.701387, 1003.984009, 0.000000, 0.000000, 108.600044,1,1);

	new cobj369 = CreateDynamicObject(2414, 1402.446655, -9.002233, 1005.101379, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj369, 0, 18646, "matcolours", "white");


	new cobj370 = CreateDynamicObject(2616, 1404.222534, 7.221117, 1005.394714, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj370, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(19325, 1404.083008, -10.569348, 1007.916687, -90.199982, 0.000000, 180.00000000,1,1);
	CreateDynamicObject(1702, 1399.516846, 1.376806, 1003.543030, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj371 = CreateDynamicObject(1737, 1407.462280, -10.371186, 1003.623718, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj371, 0, 18646, "matcolours", "white");

	CreateDynamicObject(1705, 1400.119385, 2.959151, 1003.553467, 0.000000, 0.000000, 157.699905,1,1);
	//CreateDynamicObject(1569, 1398.952637, -2.136131, 1003.413696, 0.000000, 0.000000, 90.00000000,1,1);

	new cobj372 = CreateDynamicObject(2414, 1402.446655, -9.332239, 1004.841187, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj372, 0, 18646, "matcolours", "white");


	new cobj373 = CreateDynamicObject(19377, 1402.932129, -9.869226, 1010.389954, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj373, 0, 18646, "matcolours", "white");

	//CreateDynamicObject(1569, 1408.846313, -11.517922, 1006.904663, 0.000000, 0.000000, 90.00000000,1,1);

	new cobj374 = CreateDynamicObject(19429, 1404.038208, -10.890158, 1008.662476, 89.899979, 0.000000, 0.099999,1,1);
	SetDynamicObjectMaterial(cobj374, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj375 = CreateDynamicObject(19377, 1400.537720, -7.159219, 1003.468018, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj375, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj376 = CreateDynamicObject(2414, 1402.446655, -9.662246, 1004.580933, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj376, 0, 18646, "matcolours", "white");


	new cobj377 = CreateDynamicObject(2000, 1409.104370, -11.761651, 1008.006958, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj377, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj378 = CreateDynamicObject(2000, 1409.104858, -11.761652, 1006.616089, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj378, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(1663, 1400.132446, -7.553454, 1003.973694, 0.000000, 0.000000, 85.899956,1,1);
	CreateDynamicObject(1663, 1402.777466, 6.862958, 1003.984009, 0.000000, 0.000000, 74.900024,1,1);
	CreateDynamicObject(19377, 1400.678345, 6.170788, 1006.789307, 0.000000, -90.000015, 0.00000000,1,1);

	new cobj379 = CreateDynamicObject(19325, 1398.910889, 2.263537, 1003.615540, -90.000053, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj379, 0, 18646, "none", "none");


	new cobj380 = CreateDynamicObject(2414, 1402.446655, -9.992253, 1004.320679, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj380, 0, 18646, "matcolours", "white");


	new cobj381 = CreateDynamicObject(2270, 1408.883057, -12.126475, 1007.915283, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj381, 0, 18646, "matcolours", "red");

	CreateDynamicObject(2186, 1401.318481, -8.920559, 1003.493469, 0.000000, 0.000000, 270.00000000,1,1);

	new cobj382 = CreateDynamicObject(19448, 1413.906372, -10.471129, 1008.645691, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj382, 0, 14777, "int_casinoint3", "GB_midbar06");

	CreateDynamicObject(1886, 1409.642334, -12.251408, 1006.879150, 13.399993, 0.000000, -123.999817,1,1);

	new cobj383 = CreateDynamicObject(2414, 1402.446655, -10.322261, 1004.060425, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj383, 0, 18646, "matcolours", "white");

	CreateDynamicObject(2200, 1397.757568, -3.350667, 1003.542969, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(2648, 1411.157349, -12.248665, 1007.915283, 0.000000, 0.000000, 180.00000000,1,1);
	CreateDynamicObject(2616, 1396.946655, -2.971589, 1005.124390, 0.000000, 0.000000, 180.00000000,1,1);

	new cobj384 = CreateDynamicObject(19377, 1410.617920, 9.320791, 1006.309265, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj384, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj385 = CreateDynamicObject(19447, 1410.187866, -12.225597, 1005.154297, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj385, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj386 = CreateDynamicObject(2414, 1402.446655, -10.652269, 1003.800171, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj386, 0, 18646, "matcolours", "white");

	CreateDynamicObject(2200, 1413.709839, -11.190654, 1006.892822, 0.000000, 0.000000, 270.00000000,1,1);
	CreateDynamicObject(19377, 1396.551025, -3.459218, 1006.799316, 0.000000, -90.000015, 0.00000000,1,1);

	new cobj387 = CreateDynamicObject(2259, 1410.202271, -12.653699, 1006.404236, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj387, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj388 = CreateDynamicObject(19401, 1408.537964, -12.625857, 1004.964355, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj388, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj389 = CreateDynamicObject(1651, 1408.609375, -12.599574, 1004.884277, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj389, 0, 18646, "none", "none");

	CreateDynamicObject(2612, 1401.757813, -11.006881, 1005.364624, 0.000000, 0.000000, 270.00000000,1,1);

	new cobj390 = CreateDynamicObject(1737, 1410.652954, -12.640190, 1006.804688, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj390, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj391 = CreateDynamicObject(1780, 1411.124023, -12.620088, 1007.113953, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj391, 256, 16005, "des_stownmain2", "black32");


	new cobj392 = CreateDynamicObject(19384, 1405.706177, -12.621276, 1005.154358, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj392, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj393 = CreateDynamicObject(1780, 1411.204590, -12.630088, 1007.103943, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj393, 256, 16005, "des_stownmain2", "black32");


	new cobj394 = CreateDynamicObject(2414, 1402.446655, -10.982275, 1003.539917, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj394, 0, 18646, "matcolours", "white");

	CreateDynamicObject(2164, 1408.769653, -13.213054, 1006.894592, 0.000000, 0.000000, 270.00000000,1,1);

	new cobj395 = CreateDynamicObject(19384, 1398.903442, 5.858754, 1005.174377, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj395, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(19325, 1409.896606, -12.612778, 1003.884155, 0.000000, 0.000000, 90.00000000,1,1);

	new cobj396 = CreateDynamicObject(2259, 1412.122681, -12.653700, 1006.404236, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj396, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj397 = CreateDynamicObject(2414, 1402.446655, -11.312281, 1003.279724, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj397, 0, 18646, "matcolours", "white");


	new cobj398 = CreateDynamicObject(19377, 1411.032349, -12.279236, 1003.468018, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj398, 0, 2748, "pizza_furn", "CJ_WOOD6");

	//CreateDynamicObject(1569, 1404.975342, -12.606138, 1003.413696, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(2200, 1400.235352, 7.159332, 1003.542969, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj399 = CreateDynamicObject(19429, 1402.376099, -12.560055, 1008.658569, 89.899979, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj399, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3100 = CreateDynamicObject(19429, 1402.325562, -12.540054, 1008.657593, 89.899979, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3100, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3101 = CreateDynamicObject(19447, 1399.664429, 7.364360, 1005.144287, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3101, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(2166, 1401.321655, -11.131491, 1003.533020, 0.000000, 0.000000, 180.00000000,1,1);

	new cobj3102 = CreateDynamicObject(19448, 1401.883301, -12.441141, 1008.645691, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj3102, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3103 = CreateDynamicObject(2414, 1402.446655, -11.642288, 1003.019470, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3103, 0, 18646, "matcolours", "white");

	CreateDynamicObject(1663, 1400.443237, -10.907017, 1003.973694, 0.000000, 0.000000, 47.899952,1,1);

	new cobj3104 = CreateDynamicObject(19377, 1406.982910, -13.939228, 1010.369934, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3104, 0, 18646, "matcolours", "white");


	new cobj3105 = CreateDynamicObject(19384, 1395.324707, -1.401257, 1005.174377, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3105, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3106 = CreateDynamicObject(2414, 1402.446655, -11.982295, 1002.759216, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3106, 0, 18646, "matcolours", "white");

	//CreateDynamicObject(1569, 1398.922119, 6.633876, 1003.413696, 0.000000, 0.000000, 270.00000000,1,1);
	CreateDynamicObject(1663, 1396.779907, -6.947248, 1003.973694, 0.000000, 0.000000, -68.100037,1,1);

	new cobj3107 = CreateDynamicObject(19429, 1395.319580, 1.003759, 1005.174438, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3107, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(2606, 1409.913208, -14.234308, 1006.115295, 17.800003, 0.000000, 270.00000000,1,1);
	CreateDynamicObject(1721, 1395.573853, 0.220329, 1003.543152, 0.000000, 0.000000, 270.00000000,1,1);

	new cobj3108 = CreateDynamicObject(19384, 1395.323608, -4.621256, 1005.174377, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj3108, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(2200, 1410.188110, -13.670662, 1003.542969, 0.000000, 0.000000, 270.00000000,1,1);
	CreateDynamicObject(1721, 1395.583374, 1.010328, 1003.543152, 0.000000, 0.000000, 270.00000000,1,1);

	new cobj3109 = CreateDynamicObject(19448, 1413.747070, -13.291158, 1008.645691, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3109, 0, 14777, "int_casinoint3", "GB_midbar06");

	CreateDynamicObject(2616, 1395.190918, 1.360556, 1005.124390, 0.000000, 0.000000, 270.00000000,1,1);
	//CreateDynamicObject(1569, 1395.330444, -2.136131, 1003.413696, 0.000000, 0.000000, 90.00000000,1,1);
	CreateDynamicObject(1721, 1395.592896, 1.770327, 1003.543152, 0.000000, 0.000000, 270.00000000,1,1);
	//CreateDynamicObject(1569, 1395.340942, -3.896130, 1003.413696, 0.000000, 0.000000, 270.00000000,1,1);

	new cobj3110 = CreateDynamicObject(19384, 1404.045044, -14.241260, 1005.163818, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj3110, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3111 = CreateDynamicObject(19384, 1395.324219, 3.408743, 1005.174377, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3111, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(2200, 1406.389038, -15.220660, 1006.892822, 0.000000, 0.000000, 180.00000000,1,1);

	new cobj3112 = CreateDynamicObject(19448, 1399.306885, -12.551176, 1008.515564, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3112, 0, 14777, "int_casinoint3", "GB_midbar06");

	CreateDynamicObject(1721, 1394.729248, 0.601727, 1003.542969, 0.000000, 0.000000, 7.10000000,1,1);

	new cobj3113 = CreateDynamicObject(19448, 1406.728394, -15.431179, 1008.645691, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3113, 0, 14777, "int_casinoint3", "GB_midbar06");

	CreateDynamicObject(2162, 1401.968384, -14.350065, 1008.465637, 0.000000, 0.000000, 90.00000000,1,1);
	CreateDynamicObject(2186, 1402.453491, -14.546046, 1006.904297, 0.000000, 0.000000, 90.00000000,1,1);
	CreateDynamicObject(2165, 1395.829712, -7.849656, 1003.553223, 0.000000, 0.000000, 90.00000000,1,1);
	CreateDynamicObject(2186, 1395.892090, 5.050762, 1003.513733, 0.000000, 0.000000, 90.00000000,1,1);

	new cobj3114 = CreateDynamicObject(19377, 1393.758423, -0.279202, 1010.379456, 0.000000, -90.000015, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj3114, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(2162, 1396.752930, 7.298935, 1005.034424, 0.000000, 0.000000, 0.00000000,1,1);
	//CreateDynamicObject(1569, 1395.330811, 4.183874, 1003.413696, 0.000000, 0.000000, 270.00000000,1,1);

	new cobj3115 = CreateDynamicObject(14772, 1398.592773, -12.342838, 1005.164551, 0.000000, 0.000000, 174.599976,1,1);
	SetDynamicObjectMaterial(cobj3115, 0, 18646, "none", "none");

	CreateDynamicObject(2161, 1395.246216, 5.286044, 1004.674072, 0.000000, 0.000000, 270.00000000,1,1);

	new cobj3116 = CreateDynamicObject(2007, 1398.596558, -12.096862, 1003.562988, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj3116, 0, 18646, "none", "none");

	CreateDynamicObject(2102, 1395.698364, -9.326376, 1004.954102, 0.000000, 0.000000, 79.499947,1,1);
	//CreateDynamicObject(1569, 1404.074951, -15.006146, 1003.413696, 0.000000, 0.000000, 90.00000000,1,1);

	new cobj3117 = CreateDynamicObject(19429, 1398.571533, -12.656256, 1005.014343, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj3117, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3118 = CreateDynamicObject(19325, 1398.649536, -12.649613, 1004.704224, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3118, 0, 18646, "none", "none");

	CreateDynamicObject(1721, 1393.791504, 0.565864, 1003.542969, 0.000000, 0.000000, -2.499996,1,1);

	new cobj3119 = CreateDynamicObject(2007, 1395.915894, -9.336849, 1003.562988, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3119, 0, 18646, "none", "none");

	CreateDynamicObject(1663, 1397.134766, -11.207401, 1003.973694, 0.000000, 0.000000, -68.100037,1,1);

	new cobj3120 = CreateDynamicObject(19429, 1395.338989, -9.296238, 1005.174438, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj3120, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3121 = CreateDynamicObject(19325, 1395.327271, -9.329608, 1004.704224, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj3121, 0, 18646, "none", "none");

	CreateDynamicObject(1788, 1410.032104, -16.169392, 1005.034424, 0.000000, 0.000000, -90.300034,1,1);

	new cobj3122 = CreateDynamicObject(19357, 1395.328979, 6.611739, 1004.964294, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3122, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3123 = CreateDynamicObject(2007, 1409.788452, -16.206875, 1003.562988, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj3123, 0, 18646, "none", "none");

	CreateDynamicObject(1886, 1403.795776, -16.483707, 1007.058044, 24.399998, 0.000000, -170.699921,1,1);

	new cobj3124 = CreateDynamicObject(19429, 1392.608765, 0.343760, 1005.174438, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj3124, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(2102, 1392.602539, 0.681603, 1004.954346, 0.000000, 0.000000, -171.399994,1,1);

	new cobj3125 = CreateDynamicObject(19448, 1408.868164, -17.161140, 1008.645691, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3125, 0, 14777, "int_casinoint3", "GB_midbar06");


	new cobj3126 = CreateDynamicObject(2007, 1394.784912, -9.276847, 1003.562988, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj3126, 0, 18646, "none", "none");

	CreateDynamicObject(19377, 1407.044434, -17.269236, 1006.799316, 0.000000, -90.000015, 0.00000000,1,1);

	new cobj3127 = CreateDynamicObject(19377, 1409.200317, -17.279228, 1006.829346, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3127, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(2166, 1396.850342, -12.151505, 1003.533020, 0.000000, 0.000000, 90.00000000,1,1);

	new cobj3128 = CreateDynamicObject(19377, 1417.485718, -13.939228, 1010.369934, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3128, 0, 18646, "matcolours", "white");


	new cobj3129 = CreateDynamicObject(19377, 1396.716797, -12.979211, 1006.819336, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3129, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj3130 = CreateDynamicObject(19447, 1405.310669, -17.065607, 1005.144287, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3130, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3131 = CreateDynamicObject(2007, 1392.575928, 0.903149, 1003.562988, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj3131, 0, 18646, "none", "none");

	CreateDynamicObject(1671, 1393.953735, 5.846249, 1004.003418, 0.000000, 0.000000, -172.899933,1,1);
	CreateDynamicObject(19377, 1396.550903, -13.089240, 1006.799316, 0.000000, -90.000015, 0.00000000,1,1);

	new cobj3132 = CreateDynamicObject(19325, 1391.987915, 0.340392, 1004.654480, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj3132, 0, 18646, "none", "none");

	CreateDynamicObject(2190, 1394.202393, 7.131996, 1004.333740, 0.000000, 0.000000, -15.499872,1,1);

	new cobj3133 = CreateDynamicObject(19377, 1393.758911, -9.899241, 1010.379456, 0.000000, -90.000015, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj3133, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(2166, 1393.788330, 6.789793, 1003.553589, 0.000000, 0.000000, 270.00000000,1,1);
	CreateDynamicObject(1671, 1391.627075, 1.592585, 1004.003418, 0.000000, 0.000000, -116.399979,1,1);

	new cobj3134 = CreateDynamicObject(19448, 1401.896851, -17.451168, 1008.645691, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj3134, 0, 14777, "int_casinoint3", "GB_midbar06");

	CreateDynamicObject(2166, 1391.410034, 0.959787, 1003.553589, 0.000000, 0.000000, 90.00000000,1,1);
	CreateDynamicObject(1533, 1401.416748, -16.983540, 1003.523315, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj3135 = CreateDynamicObject(19377, 1400.539307, -16.779232, 1003.468018, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3135, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj3136 = CreateDynamicObject(1510, 1398.948608, -16.994234, 1006.284973, -89.899994, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3136, 0, 18646, "matcolours", "white");

	CreateDynamicObject(1721, 1392.682495, 7.064388, 1003.542969, 0.000000, 0.000000, 177.50000000,1,1);

	new cobj3137 = CreateDynamicObject(2961, 1398.902832, -17.054403, 1006.384033, -34.999981, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3137, 0, 18646, "matcolours", "white");

	CreateDynamicObject(2616, 1389.944214, -0.798001, 1005.344604, 0.000000, 0.000000, 90.00000000,1,1);

	new cobj3138 = CreateDynamicObject(19384, 1398.885498, -17.061274, 1005.164368, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj3138, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3139 = CreateDynamicObject(19377, 1398.700073, -17.279228, 1006.829346, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3139, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj3140 = CreateDynamicObject(19384, 1389.819214, -2.961258, 1005.174377, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj3140, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3141 = CreateDynamicObject(19357, 1389.817749, 0.251744, 1004.964294, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3141, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(2190, 1390.108154, 2.193083, 1004.333740, 0.000000, 0.000000, 59.400063,1,1);

	new cobj3142 = CreateDynamicObject(19448, 1394.905884, -14.761148, 1008.645691, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj3142, 0, 14777, "int_casinoint3", "GB_midbar06");

	//CreateDynamicObject(1569, 1389.810303, -2.226130, 1003.413696, 0.000000, 0.000000, 270.00000000,1,1);

	new cobj3143 = CreateDynamicObject(19377, 1390.042358, 2.470782, 1003.468018, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3143, 0, 2748, "pizza_furn", "CJ_WOOD6");

	//CreateDynamicObject(1569, 1398.152832, -17.066158, 1003.413696, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(2186, 1397.121094, -16.520294, 1003.513000, 0.000000, 0.000000, 180.00000000,1,1);
	CreateDynamicObject(1663, 1389.145874, -0.024095, 1004.143555, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj3144 = CreateDynamicObject(19377, 1390.042847, -7.159218, 1003.468018, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3144, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(2200, 1389.415405, 1.979333, 1003.542969, 0.000000, 0.000000, 180.00000000,1,1);
	CreateDynamicObject(19377, 1390.171631, 6.170788, 1006.799316, 0.000000, -90.000015, 0.00000000,1,1);
	CreateDynamicObject(2611, 1396.507446, -16.927324, 1005.474731, 0.000000, 0.000000, 180.00000000,1,1);
	CreateDynamicObject(2162, 1390.860474, 7.285086, 1005.204529, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj3145 = CreateDynamicObject(19325, 1389.816528, -7.889608, 1004.704224, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj3145, 0, 18646, "none", "none");


	new cobj3146 = CreateDynamicObject(19448, 1395.842651, -16.731180, 1008.645691, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj3146, 0, 14777, "int_casinoint3", "GB_midbar06");


	new cobj3147 = CreateDynamicObject(19429, 1396.479126, -17.066250, 1005.184448, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3147, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(2186, 1390.670044, 6.790769, 1003.513733, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj3148 = CreateDynamicObject(19447, 1404.045410, -20.655573, 1005.164307, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3148, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(1721, 1389.175415, -6.706358, 1003.553101, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(1663, 1388.295532, -0.024095, 1004.143555, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj3149 = CreateDynamicObject(19447, 1390.031982, 7.364361, 1005.144287, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3149, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3150 = CreateDynamicObject(1737, 1388.239136, -5.103595, 1003.562988, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3150, 0, 18646, "matcolours", "white");

	CreateDynamicObject(1721, 1389.174927, -8.916366, 1003.553101, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj3151 = CreateDynamicObject(2268, 1387.355225, -0.170043, 1005.313599, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3151, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(1721, 1388.264160, -6.706357, 1003.553101, 0.000000, 0.000000, 0.00000000,1,1);
	//CreateDynamicObject(1569, 1394.841919, -17.066158, 1003.413696, 0.000000, 0.000000, 180.00000000,1,1);
	CreateDynamicObject(1663, 1387.455200, -0.024095, 1004.143555, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj3152 = CreateDynamicObject(1510, 1394.094116, -16.994234, 1006.284973, -89.899994, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3152, 0, 18646, "matcolours", "white");


	new cobj3153 = CreateDynamicObject(2961, 1394.116333, -17.054403, 1006.144287, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3153, 0, 18646, "matcolours", "white");

	CreateDynamicObject(1671, 1388.597656, 5.578813, 1004.003418, 0.000000, 0.000000, 168.800003,1,1);

	new cobj3154 = CreateDynamicObject(1737, 1388.238647, -7.353608, 1003.562988, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3154, 0, 18646, "matcolours", "white");


	new cobj3155 = CreateDynamicObject(2200, 1396.278564, -18.410686, 1003.542969, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj3155, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3156 = CreateDynamicObject(19384, 1394.073120, -17.061274, 1005.184387, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj3156, 0, 3857, "ottos_glass", "carshowroom1");

	//CreateDynamicObject(1569, 1389.824219, -12.076137, 1003.413696, 0.000000, 0.000000, 270.00000000,1,1);
	CreateDynamicObject(1721, 1388.263672, -8.916365, 1003.553101, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(1721, 1389.174438, -11.036381, 1003.553101, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj3157 = CreateDynamicObject(19384, 1389.822998, -12.811263, 1005.184387, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj3157, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3158 = CreateDynamicObject(1737, 1388.238159, -9.513625, 1003.562988, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3158, 0, 18646, "matcolours", "white");

	CreateDynamicObject(2165, 1386.967407, 2.344484, 1003.553284, 0.000000, 0.000000, 180.00000000,1,1);
	CreateDynamicObject(2165, 1388.217896, 6.754484, 1003.553284, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj3159 = CreateDynamicObject(2200, 1396.739502, -19.670715, 1003.542969, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3159, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3160 = CreateDynamicObject(2315, 1398.956421, -20.868729, 1003.492920, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3160, 0, 964, "cj_crate_will", "CJ_FLIGHT_CASE");


	new cobj3161 = CreateDynamicObject(19447, 1400.414673, -21.795601, 1005.144287, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3161, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(1886, 1390.406616, -14.598224, 1007.153015, 14.099998, 0.000000, 90.00000000,1,1);
	CreateDynamicObject(19377, 1386.047852, -3.469216, 1006.799316, 0.000000, -90.000015, 0.00000000,1,1);
	CreateDynamicObject(1721, 1390.102905, -14.039537, 1003.542969, 0.000000, 0.000000, 270.00000000,1,1);
	CreateDynamicObject(1721, 1388.303101, -11.036380, 1003.553101, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(2164, 1392.528442, -16.934999, 1003.533020, 0.000000, 0.000000, 180.00000000,1,1);
	CreateDynamicObject(2612, 1389.953491, -14.742027, 1005.414368, 0.000000, 0.000000, 90.00000000,1,1);
	CreateDynamicObject(1671, 1386.819214, 5.646811, 1004.003418, 0.000000, 0.000000, -116.399979,1,1);
	CreateDynamicObject(1721, 1390.103394, -14.759549, 1003.542969, 0.000000, 0.000000, 270.00000000,1,1);

	new cobj3162 = CreateDynamicObject(19359, 1385.372681, 0.408399, 1006.215210, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3162, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3163 = CreateDynamicObject(19429, 1391.669067, -17.066250, 1005.174438, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3163, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(2262, 1390.813721, -16.151934, 1005.194519, 0.000000, 0.000000, 135.00000000,1,1);

	new cobj3164 = CreateDynamicObject(2200, 1396.278076, -20.590681, 1003.542969, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj3164, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3165 = CreateDynamicObject(19429, 1389.821289, -15.213034, 1005.194458, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3165, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(1671, 1385.818237, 3.589957, 1004.003418, 0.000000, 0.000000, 25.700008,1,1);
	CreateDynamicObject(1721, 1390.103882, -15.479566, 1003.542969, 0.000000, 0.000000, 270.00000000,1,1);
	CreateDynamicObject(2707, 1385.341919, -6.190376, 1006.628967, 80.399918, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(2612, 1387.011475, -11.156988, 1005.214600, 0.000000, 0.000000, 180.00000000,1,1);

	new cobj3166 = CreateDynamicObject(19447, 1384.932373, 0.414360, 1005.144287, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3166, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3167 = CreateDynamicObject(2135, 1391.951050, -17.776764, 1003.553284, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj3167, 512, 18646, "matcolours", "white");


	new cobj3168 = CreateDynamicObject(19447, 1385.062012, 1.764358, 1005.144287, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3168, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(1721, 1385.673218, -6.706357, 1003.553101, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj3169 = CreateDynamicObject(19429, 1390.360352, -16.521776, 1005.174438, 0.000000, 0.000000, 225.00000000,1,1);
	SetDynamicObjectMaterial(cobj3169, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(1782, 1385.181641, -6.433338, 1006.689331, -8.999999, 0.099999, 0.00000000,1,1);

	new cobj3170 = CreateDynamicObject(19447, 1384.970093, -0.472186, 1003.623596, 0.000000, 90.000023, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3170, 0, 16407, "des_airfieldhus", "btdeck256");

	CreateDynamicObject(2611, 1385.342529, 4.259638, 1005.384338, 0.000000, 0.000000, 90.00000000,1,1);

	new cobj3171 = CreateDynamicObject(19447, 1396.512939, -21.805601, 1005.144287, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3171, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3172 = CreateDynamicObject(2200, 1396.739990, -21.860729, 1003.542969, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3172, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3173 = CreateDynamicObject(19447, 1399.153076, -23.295673, 1005.144287, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3173, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(2166, 1385.767944, 5.759784, 1003.553589, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(1721, 1385.633423, -8.916364, 1003.553101, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj3174 = CreateDynamicObject(1737, 1384.695557, -5.103593, 1003.562988, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3174, 0, 18646, "matcolours", "white");


	new cobj3175 = CreateDynamicObject(2136, 1391.948364, -18.755354, 1003.553223, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj3175, 512, 18646, "matcolours", "white");


	new cobj3176 = CreateDynamicObject(19377, 1390.042603, -16.779232, 1003.468018, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3176, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(2190, 1385.414795, 6.008917, 1004.333740, 0.000000, 0.000000, 78.3001250,1,1);
	CreateDynamicObject(1721, 1384.742065, -6.706357, 1003.553101, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj3177 = CreateDynamicObject(2315, 1394.122314, -20.868729, 1003.492920, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3177, 0, 964, "cj_crate_will", "CJ_FLIGHT_CASE");


	new cobj3178 = CreateDynamicObject(19447, 1385.212524, 6.654400, 1005.144287, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3178, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3179 = CreateDynamicObject(1737, 1384.695068, -7.373604, 1003.562988, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3179, 0, 18646, "matcolours", "white");


	new cobj3180 = CreateDynamicObject(2161, 1385.874512, -11.392500, 1004.583923, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3180, 256, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(1721, 1385.652588, -11.036379, 1003.553101, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(1721, 1384.732056, -8.916363, 1003.553101, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(19377, 1386.048340, -13.089228, 1006.799316, 0.000000, -90.000015, 0.00000000,1,1);
	CreateDynamicObject(19377, 1395.259766, -22.719282, 1006.799316, 0.000000, -90.000015, 0.00000000,1,1);

	new cobj3181 = CreateDynamicObject(1486, 1383.182129, -1.779535, 1005.010498, 174.000015, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3181, 0, 7980, "vegasairprtland", "gridchev_64HV");


	new cobj3182 = CreateDynamicObject(1737, 1384.694580, -9.513618, 1003.562988, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3182, 0, 18646, "matcolours", "white");


	new cobj3183 = CreateDynamicObject(19447, 1385.091187, -11.285644, 1005.144287, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3183, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(3004, 1383.188477, -1.936198, 1003.520203, 80.600021, 0.000000, 0.00000000,1,1);

	new cobj3184 = CreateDynamicObject(2000, 1383.197754, -1.977166, 1003.413879, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3184, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(1721, 1388.149170, -16.676504, 1003.543152, 0.000000, 0.000000, 177.199966,1,1);

	new cobj3185 = CreateDynamicObject(2138, 1391.942261, -20.744453, 1003.553040, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj3185, 256, 18646, "matcolours", "white");

	CreateDynamicObject(1721, 1384.731567, -11.036378, 1003.553101, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(19377, 1405.742676, -26.899263, 1006.799316, 0.000000, -90.000015, 0.00000000,1,1);
	CreateDynamicObject(2616, 1382.449585, 0.283607, 1005.600220, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj3186 = CreateDynamicObject(19447, 1392.550537, -21.805601, 1005.144287, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3186, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3187 = CreateDynamicObject(2230, 1384.571777, -11.382125, 1003.543152, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3187, 0, 18646, "matcolours", "white");

	CreateDynamicObject(1721, 1387.318359, -16.688932, 1003.543152, 0.000000, 0.000000, 180.00000000,1,1);

	new cobj3188 = CreateDynamicObject(2138, 1391.942749, -21.734468, 1003.553040, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj3188, 256, 18646, "matcolours", "white");

	CreateDynamicObject(2611, 1383.473877, -11.157211, 1005.214478, 0.000000, 0.000000, 180.00000000,1,1);

	new cobj3189 = CreateDynamicObject(19377, 1400.538818, -26.409264, 1003.468018, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3189, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(2162, 1381.836670, 0.346910, 1003.683228, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(1721, 1382.289917, -6.706357, 1003.553101, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj3190 = CreateDynamicObject(2414, 1386.561279, -17.066433, 1003.543213, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj3190, 0, 18646, "matcolours", "white");


	new cobj3191 = CreateDynamicObject(2133, 1383.572021, -11.721655, 1003.232666, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3191, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj3192 = CreateDynamicObject(2238, 1383.185303, -11.472627, 1004.684082, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3192, 0, 18646, "none", "none");


	new cobj3193 = CreateDynamicObject(2258, 1383.138550, -11.554443, 1004.943909, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3193, 0, 16005, "des_stownmain2", "black32");


	new cobj3194 = CreateDynamicObject(2305, 1391.958496, -22.715147, 1003.553345, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj3194, 256, 18646, "matcolours", "white");


	new cobj3195 = CreateDynamicObject(1737, 1387.193726, -18.157036, 1003.533325, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3195, 0, 18646, "matcolours", "white");

	CreateDynamicObject(1721, 1382.262329, -8.916362, 1003.553101, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(1721, 1388.190674, -19.658976, 1003.553223, 0.000000, 0.000000, -2.9000010,1,1);

	new cobj3196 = CreateDynamicObject(1737, 1381.313965, -5.103594, 1003.562988, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3196, 0, 18646, "matcolours", "white");

	CreateDynamicObject(2611, 1380.832642, -3.527195, 1005.194458, 0.000000, 0.000000, 90.00000000,1,1);
	CreateDynamicObject(1721, 1388.210693, -19.928953, 1003.553223, 0.000000, 0.000000, 180.00000000,1,1);

	new cobj3197 = CreateDynamicObject(19447, 1380.709717, -0.165602, 1005.144287, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3197, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(1721, 1381.388794, -6.706357, 1003.553101, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj3198 = CreateDynamicObject(2138, 1391.001221, -22.714476, 1003.553040, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj3198, 256, 18646, "matcolours", "white");


	new cobj3199 = CreateDynamicObject(1737, 1381.322998, -7.353609, 1003.562988, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3199, 0, 18646, "matcolours", "white");


	new cobj3200 = CreateDynamicObject(2133, 1382.721680, -11.721655, 1003.232666, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3200, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(1721, 1382.269287, -11.036377, 1003.553101, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj3201 = CreateDynamicObject(2230, 1382.359497, -11.382124, 1003.543152, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3201, 0, 18646, "matcolours", "white");

	CreateDynamicObject(1716, 1385.531494, -17.319759, 1003.533020, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(1702, 1384.029175, -14.996257, 1003.533203, 0.000000, 0.000000, 180.00000000,1,1);
	CreateDynamicObject(1721, 1387.318481, -19.678949, 1003.553223, 0.000000, 0.000000, -2.099999,1,1);
	CreateDynamicObject(1721, 1381.341064, -8.916361, 1003.553101, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(1721, 1387.349365, -19.928953, 1003.553223, 0.000000, 0.000000, 180.00000000,1,1);

	new cobj3202 = CreateDynamicObject(2414, 1386.560791, -19.056429, 1003.543213, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj3202, 0, 18646, "matcolours", "white");


	new cobj3203 = CreateDynamicObject(2140, 1390.034668, -22.716957, 1003.553711, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj3203, 0, 18646, "matcolours", "white");


	new cobj3204 = CreateDynamicObject(1737, 1381.313477, -9.523616, 1003.562988, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3204, 0, 18646, "matcolours", "white");


	new cobj3205 = CreateDynamicObject(19447, 1380.709961, -9.775604, 1005.144287, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3205, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3206 = CreateDynamicObject(1822, 1382.557861, -13.958481, 1003.543030, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3206, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(1721, 1381.297852, -11.036376, 1003.553101, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(1716, 1385.511963, -18.749765, 1003.533020, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj3207 = CreateDynamicObject(19447, 1389.520630, -23.295645, 1005.144287, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3207, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3208 = CreateDynamicObject(19447, 1386.876709, -21.395554, 1007.616089, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj3208, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3209 = CreateDynamicObject(19377, 1379.542847, 2.470779, 1003.468018, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3209, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj3210 = CreateDynamicObject(1737, 1387.193115, -21.437086, 1003.533325, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3210, 0, 18646, "matcolours", "white");


	new cobj3211 = CreateDynamicObject(19377, 1379.543335, -7.159218, 1003.468018, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3211, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj3212 = CreateDynamicObject(2414, 1386.560303, -21.046440, 1003.543213, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj3212, 0, 18646, "matcolours", "white");


	new cobj3213 = CreateDynamicObject(19447, 1386.877197, -21.395554, 1002.845520, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj3213, 0, 3857, "ottos_glass", "carshowroom1");

	CreateDynamicObject(1716, 1385.512451, -20.209799, 1003.533020, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(1721, 1388.181152, -23.018976, 1003.553223, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(1702, 1381.338013, -14.426246, 1003.533203, 0.000000, 0.000000, 90.00000000,1,1);
	CreateDynamicObject(2964, 1383.024414, -17.755186, 1003.523560, 0.000000, 0.000000, 90.00000000,1,1);
	CreateDynamicObject(1721, 1387.340820, -23.018976, 1003.553223, 0.000000, 0.000000, 0.00000000,1,1);
	CreateDynamicObject(1716, 1385.512939, -21.589834, 1003.533020, 0.000000, 0.000000, 0.00000000,1,1);

	new cobj3214 = CreateDynamicObject(2414, 1386.559814, -23.046440, 1003.543213, 0.000000, 0.000000, 270.00000000,1,1);
	SetDynamicObjectMaterial(cobj3214, 0, 18646, "matcolours", "white");

	CreateDynamicObject(2282, 1381.268799, -17.039951, 1005.044006, 0.000000, 0.000000, 90.00000000,1,1);

	new cobj3215 = CreateDynamicObject(19377, 1390.037598, -26.409357, 1003.468018, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3215, 0, 2748, "pizza_furn", "CJ_WOOD6");

	CreateDynamicObject(2264, 1384.293701, -21.782921, 1005.224243, 0.000000, 0.000000, 90.00000000,1,1);
	CreateDynamicObject(19377, 1384.758423, -22.719299, 1006.799316, 0.000000, -90.000015, 0.00000000,1,1);
	CreateDynamicObject(2281, 1381.277344, -18.752451, 1005.084045, 0.000000, 0.000000, 90.00000000,1,1);

	new cobj3216 = CreateDynamicObject(2616, 1382.064331, -20.389133, 1005.344543, 0.000000, 0.000000, 180.00000000,1,1);
	SetDynamicObjectMaterial(cobj3216, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj3217 = CreateDynamicObject(19377, 1379.547607, -16.779217, 1003.468018, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3217, 0, 2748, "pizza_furn", "CJ_WOOD6");


	new cobj3218 = CreateDynamicObject(19447, 1380.709351, -19.405603, 1005.144287, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3218, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3219 = CreateDynamicObject(19447, 1383.711792, -25.255634, 1005.144287, 0.000000, 0.000000, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3219, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3220 = CreateDynamicObject(19447, 1378.977905, -20.525587, 1005.144287, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3220, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3221 = CreateDynamicObject(19447, 1379.899292, -23.295645, 1005.144287, 0.000000, 0.000000, 90.00000000,1,1);
	SetDynamicObjectMaterial(cobj3221, 0, 3857, "ottos_glass", "carshowroom1");


	new cobj3222 = CreateDynamicObject(19377, 1379.537720, -26.409357, 1003.468018, 0.000000, -90.000015, 0.00000000,1,1);
	SetDynamicObjectMaterial(cobj3222, 0, 2748, "pizza_furn", "CJ_WOOD6");


////LSPD BIGGG
	CreateDynamicObject(2637, 1579.50000, -1657.84998, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1582.69995, -1661.50000, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1572.25806, -1651.56006, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1579.73865, -1657.26587, 1100.92542,   0.00000, 0.00000, 95.00000);
	CreateDynamicObject(1721, 1581.28796, -1658.50000, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1586.77295, -1669.68005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 1585.40002, -1664.37500, 1100.08752,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19302, 1585.50000, -1674.08997, 1090.83496,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1584.50000, -1662.19995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19302, 1585.50000, -1676.01294, 1090.83496,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1721, 1581.28796, -1657.19995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19302, 1585.50000, -1672.33997, 1090.83496,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19302, 1585.50000, -1677.76001, 1090.83496,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 1586.77197, -1667.63074, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 1584.50000, -1668.84119, 1089.50000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1586.62402, -1674.84998, 1108.93994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19302, 1585.50000, -1679.68799, 1090.83496,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1998, 1587.34998, -1681.21997, 1100.08691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1579.72437, -1654.60583, 1100.92542,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1579.50000, -1654.00000, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1581.46497, -1656.27698, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1581.46497, -1656.27698, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2637, 1582.69995, -1657.84998, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1583.01233, -1658.33826, 1100.92542,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1579.65100, -1653.49109, 1100.92542,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1584.50000, -1660.80005, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1582.73438, -1657.28101, 1100.92542,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1581.28796, -1654.69995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1586.77295, -1665.93994, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2637, 1585.69995, -1661.50000, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1584.77002, -1664.12000, 1091.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1585.94897, -1662.01855, 1100.92542,   0.00000, 0.00000, 95.00000);
	CreateDynamicObject(1721, 1584.50000, -1658.50000, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14438, 1584.00000, -1658.00000, 1105.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1581.28796, -1653.30005, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1585.96265, -1660.97241, 1100.92542,   0.00000, 0.00000, 95.00000);
	CreateDynamicObject(1721, 1584.50000, -1657.19995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1582.69995, -1654.00000, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19393, 1586.28503, -1665.38306, 1091.32996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19302, 1586.95996, -1671.34998, 1090.83496,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1582.75952, -1653.55273, 1100.92542,   0.00000, 0.00000, 110.00000);
	CreateDynamicObject(2637, 1585.69995, -1657.84998, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1581.89197, -1651.56006, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1587.50000, -1662.19995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1585.93445, -1657.84558, 1100.92542,   0.00000, 0.00000, 95.00000);
	CreateDynamicObject(1721, 1584.50000, -1654.69995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1587.50000, -1660.80005, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19304, 1587.83496, -1671.34998, 1092.70605,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1499, 1586.27502, -1664.60498, 1089.58801,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(14407, 1588.90002, -1673.43262, 1096.90002,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1721, 1584.50000, -1653.30005, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1587.50000, -1658.50000, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19410, 1587.97998, -1666.90002, 1091.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1588.84998, -1661.50000, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2737, 1586.65002, -1683.14001, 1101.73804,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19404, 1586.77295, -1682.91895, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19404, 1586.77905, -1682.91797, 1101.82898,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19302, 1585.50000, -1681.43506, 1090.83496,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1585.69995, -1654.00000, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1587.50000, -1657.19995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19404, 1586.77698, -1682.91895, 1104.00000,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1585.85840, -1654.05811, 1100.92542,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1589.78003, -1664.25000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1586.78796, -1683.55505, 1101.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2171, 1587.59998, -1666.34497, 1088.27698,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2894, 1588.76001, -1666.17004, 1090.40198,   0.00000, 0.00000, -190.00000);
	CreateDynamicObject(1811, 1586.14612, -1685.01624, 1100.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18866, 1588.85730, -1666.58508, 1090.40173,   0.00000, 0.00000, 150.00000);
	CreateDynamicObject(2637, 1588.84998, -1657.84998, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1587.50000, -1654.69995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1587.50000, -1653.30005, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1590.80005, -1662.19995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2221, 1589.30005, -1666.32446, 1090.46997,   0.00000, 0.00000, 160.00000);
	CreateDynamicObject(1810, 1588.95520, -1665.40405, 1089.57996,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(1721, 1590.80005, -1660.80005, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1999, 1589.08997, -1666.30005, 1089.58862,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2894, 1589.05005, -1654.60559, 1100.92542,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1591.30005, -1670.59998, 1100.96497,   0.00000, -60.00000, 0.00000);
	CreateDynamicObject(19450, 1591.50000, -1667.30005, 1098.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1589.67200, -1662.39404, 1091.32996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2637, 1588.84998, -1654.00000, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1591.50000, -1671.37695, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1590.80005, -1658.50000, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1591.96497, -1665.91003, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, 1591.50000, -1671.37695, 1098.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1591.96497, -1665.91003, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2894, 1589.10632, -1653.35864, 1100.92542,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1590.80005, -1657.19995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1591.50000, -1667.30005, 1094.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(986, 1591.00000, -1666.90002, 1092.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1589.80005, -1674.87634, 1108.88000,   0.00000, 70.00000, 0.00000);
	CreateDynamicObject(2637, 1592.09998, -1661.50000, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1738, 1589.40002, -1673.28015, 1090.15002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1592.25159, -1661.42175, 1100.92542,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1591.50000, -1671.37695, 1094.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2066, 1589.12000, -1680.22998, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1588.29004, -1679.62305, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1806, 1588.39990, -1681.50928, 1100.08740,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(1721, 1590.80005, -1654.69995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1590.80005, -1653.30005, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1592.09998, -1657.84998, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1591.96497, -1656.27698, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1591.96497, -1656.27698, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2637, 1592.09998, -1654.00000, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1591.52002, -1651.56006, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1593.80005, -1660.80005, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1593.80005, -1662.19995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1593.80005, -1658.50000, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1593.80005, -1657.19995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1593.80005, -1654.69995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1594.50806, -1659.34497, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1593.80005, -1653.30005, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1591.50000, -1675.48206, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1594.25000, -1666.47998, 1095.90002,   0.00000, 60.00000, 0.00000);
	CreateDynamicObject(19450, 1591.50000, -1675.48206, 1098.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1591.50000, -1675.48206, 1105.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1589.67200, -1676.28198, 1091.32996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1594.50806, -1652.92505, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1591.50000, -1675.48206, 1094.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1738, 1589.40002, -1676.94995, 1090.15002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1591.50000, -1675.48206, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1594.40002, -1667.30005, 1091.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14407, 1593.98999, -1669.34998, 1090.59998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1595.90002, -1670.69995, 1098.95996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1594.40002, -1671.37695, 1091.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1597.92004, -1667.30005, 1098.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1597.92004, -1667.30005, 1094.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 1590.13000, -1680.30005, 1100.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1591.50000, -1679.62305, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14407, 1593.50000, -1677.56836, 1103.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1591.50000, -1679.62305, 1105.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19302, 1585.50000, -1683.35999, 1090.83496,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19462, 1597.75000, -1670.75000, 1093.75000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, 1599.50000, -1670.75403, 1098.32996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1599.50000, -1670.75403, 1094.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1601.25000, -1670.75244, 1097.30005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19358, 1597.92004, -1675.48206, 1098.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1597.92004, -1675.48206, 1105.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1738, 1589.40002, -1680.62000, 1090.15002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1597.92004, -1675.48206, 1094.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1597.92004, -1675.48206, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19304, 1585.50000, -1684.23499, 1092.70605,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1587.30505, -1683.67505, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 1587.50000, -1684.50000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1594.70996, -1679.62305, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14532, 1587.25000, -1685.15002, 1101.06006,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19449, 1554.26904, -1685.52002, 1100.84998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1556.82495, -1686.94604, 1101.97498,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 1552.58997, -1685.52002, 1100.84998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1556.59998, -1687.06995, 1100.08643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 1550.91003, -1685.52002, 1100.84998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2525, 1555.14001, -1687.48999, 1100.09851,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1549.96802, -1685.17004, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2525, 1553.43994, -1687.48999, 1100.09851,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1574.30005, -1689.40002, 1101.78003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1574.30005, -1689.40002, 1101.78003,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2616, 1574.05005, -1688.69995, 1108.80005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 1551.07996, -1686.90002, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, 1571.88000, -1690.24597, 1100.08643,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2089, 1574.26001, -1689.33496, 1107.09656,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2525, 1551.73999, -1687.48999, 1100.09851,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14842, 1549.27002, -1687.86499, 1101.80005,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19447, 1551.15002, -1688.58997, 1100.01001,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(14842, 1547.21997, -1688.00000, 1101.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1554.33801, -1690.30249, 1100.08997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 1546.25000, -1689.03003, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1552.65845, -1690.30249, 1100.08997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1550.97803, -1690.30249, 1100.08997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 1555.97998, -1691.58997, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19387, 1555.94995, -1691.59204, 1101.83008,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1555.98999, -1692.34253, 1100.06995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 1551.15002, -1692.08997, 1100.01001,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2687, 1556.09998, -1693.15002, 1101.69995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2685, 1555.83496, -1693.15002, 1101.59998,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19430, 1555.95105, -1693.21997, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1571.97998, -1690.47998, 1101.97498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(14438, 1560.00000, -1693.15002, 1105.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14401, 1560.61182, -1693.19995, 1100.34998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2518, 1555.50000, -1693.33496, 1100.40002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2518, 1553.69995, -1693.33496, 1100.40002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2819, 1569.22095, -1691.80908, 1100.68005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2518, 1551.90002, -1693.33496, 1100.40002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1806, 1573.80005, -1690.35657, 1100.08667,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(2819, 1561.16492, -1693.81738, 1100.68005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, 1572.67505, -1691.00500, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1491, 1555.96997, -1694.01746, 1100.07202,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19449, 1551.07996, -1693.92505, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1551.07996, -1693.94104, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2712, 1546.61804, -1693.69995, 1100.67004,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19388, 1555.97998, -1694.80005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14401, 1567.30005, -1693.19995, 1100.34998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19379, 1549.96802, -1694.80298, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1560.46716, -1694.80298, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1549.96802, -1694.80298, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1560.46716, -1694.80298, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19358, 1544.65796, -1693.94104, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1572.09998, -1691.77002, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 1583.50000, -1681.80005, 1089.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2525, 1582.40002, -1683.00000, 1089.57996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1584.00000, -1683.67004, 1108.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1584.00000, -1683.67004, 1108.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19404, 1584.09497, -1683.67505, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1811, 1583.17688, -1685.59998, 1100.69995,   0.00000, 0.00000, -70.00000);
	CreateDynamicObject(19456, 1580.75000, -1686.07300, 1091.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 1576.95996, -1689.40100, 1101.74500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1585.22998, -1686.87012, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1586.77295, -1686.13000, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1588.23999, -1684.43994, 1108.09998,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(19450, 1577.00000, -1689.40002, 1098.42297,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1577.00000, -1689.40002, 1105.13000,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(2253, 1576.94995, -1689.84998, 1102.17004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1579.58997, -1689.40002, 1101.78003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19381, 1589.30005, -1684.52002, 1107.01001,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19302, 1585.50000, -1685.10999, 1090.83496,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1591.96497, -1684.53003, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1591.96497, -1684.53003, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 1597.31677, -1680.32703, 1106.13000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(11631, 1587.59998, -1686.69995, 1101.30005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 1583.50000, -1685.50000, 1089.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14407, 1596.50000, -1681.59998, 1103.90002,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(630, 1586.28931, -1687.26965, 1101.07996,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(19377, 1589.30005, -1684.52002, 1110.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, 1593.00000, -1684.52002, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 1588.76050, -1686.69287, 1100.08740,   0.00000, 0.00000, 70.00000);
	CreateDynamicObject(1738, 1589.40002, -1684.30005, 1090.15002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1598.94995, -1678.90002, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1598.94995, -1680.30005, 1105.32996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1599.80005, -1678.94995, 1110.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19358, 1594.70996, -1683.67505, 1105.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1594.70996, -1683.67505, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1742, 1596.72498, -1683.65002, 1107.08997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1597.92004, -1683.67505, 1105.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1742, 1599.59998, -1683.65002, 1107.08997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1742, 1598.62500, -1683.65002, 1109.13501,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1593.19397, -1685.37000, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 1593.31995, -1686.00000, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2596, 1599.40002, -1683.93005, 1109.75000,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(19450, 1601.13000, -1683.67505, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1588.29004, -1687.82495, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1589.67200, -1685.91797, 1091.32996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 1591.50000, -1687.82495, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3089, 1592.22498, -1687.82495, 1101.19995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2089, 1588.66504, -1688.50000, 1107.09656,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19450, 1589.00000, -1688.40295, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19302, 1585.50000, -1687.04004, 1090.83496,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19304, 1585.50000, -1687.91296, 1092.70605,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1585.69897, -1689.40002, 1101.78003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1585.69897, -1689.40002, 1101.78003,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2195, 1604.19995, -1684.50000, 1107.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1591.50098, -1689.40002, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1584.50000, -1688.09998, 1093.13000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19358, 1585.07996, -1689.40002, 1105.13000,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19388, 1593.19397, -1688.57996, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1585.07996, -1689.40002, 1098.42297,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2525, 1582.40002, -1686.67004, 1089.57996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2616, 1588.87500, -1689.15002, 1108.80005,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2172, 1586.18506, -1690.01001, 1100.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1738, 1589.40002, -1687.96997, 1090.15002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1579.58997, -1689.40002, 1101.78003,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2518, 1580.45996, -1687.19995, 1089.84998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19381, 1599.80005, -1688.57996, 1107.01001,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(16779, 1599.00000, -1688.17737, 1110.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2828, 1602.80005, -1688.19995, 1107.89502,   0.00000, 0.00000, 210.00000);
	CreateDynamicObject(19302, 1585.50000, -1688.79004, 1090.83496,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19380, 1584.50000, -1688.09998, 1089.50000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1806, 1585.01453, -1690.45398, 1100.08667,   0.00000, 0.00000, -80.00000);
	CreateDynamicObject(19377, 1599.80005, -1688.57996, 1110.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2684, 1602.95996, -1688.40002, 1107.92004,   -90.00000, 0.00000, 120.00000);
	CreateDynamicObject(18868, 1603.25244, -1688.29858, 1107.89807,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(19456, 1590.38403, -1689.75195, 1091.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1601.67371, -1689.23999, 1107.09741,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(2684, 1602.67004, -1688.76001, 1107.92004,   -90.00000, 0.00000, 10.00000);
	CreateDynamicObject(2894, 1603.06995, -1688.94995, 1107.89819,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(19456, 1579.86499, -1688.09998, 1091.32996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2190, 1602.50000, -1689.34998, 1107.89001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2173, 1603.00000, -1689.40002, 1107.09705,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1604.44934, -1689.06897, 1107.05005,   0.00000, 0.00000, -110.00000);
	CreateDynamicObject(1800, 1583.50000, -1689.09998, 1089.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1593.31995, -1691.69995, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2207, 1582.44995, -1690.44995, 1107.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2344, 1603.19995, -1689.44995, 1107.90002,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(19450, 1604.94995, -1688.57996, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2172, 1586.18506, -1691.98999, 1100.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2354, 1557.98279, -1659.16748, 1100.94995,   -25.30000, 23.35000, 80.00000);
	CreateDynamicObject(2415, 1558.37000, -1652.31494, 1100.08716,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2369, 1558.01660, -1654.76733, 1100.91394,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2214, 1557.89661, -1660.46472, 1100.94800,   -25.30000, 23.35000, 0.00000);
	CreateDynamicObject(2788, 1557.69995, -1658.00000, 1100.59998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1546, 1557.92371, -1661.66028, 1100.98499,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2764, 1557.69995, -1659.34998, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2764, 1557.69995, -1660.40002, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2214, 1557.92261, -1662.74939, 1100.94800,   -25.30000, 23.35000, 70.00000);
	CreateDynamicObject(2446, 1557.67004, -1654.91846, 1099.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2764, 1557.69995, -1661.44995, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2219, 1557.55981, -1660.84143, 1100.94495,   -25.30000, 23.35000, 0.00000);
	CreateDynamicObject(2764, 1557.69995, -1662.50000, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 1557.34399, -1661.32983, 1100.98499,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1557.69995, -1663.80005, 1100.59998,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19450, 1557.67505, -1664.25000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2446, 1556.67004, -1654.91846, 1099.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2451, 1556.46997, -1652.31494, 1100.08777,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2416, 1556.65002, -1654.21497, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1556.20996, -1651.56006, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1776, 1556.48499, -1656.04504, 1101.13000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1808, 1556.27002, -1657.50000, 1100.08679,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1555.97998, -1656.29004, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1556.40002, -1659.30005, 1100.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2788, 1556.40002, -1660.30005, 1100.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2788, 1556.40002, -1661.40002, 1100.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2788, 1556.40002, -1662.50000, 1100.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19171, 1558.00000, -1667.69995, 1102.16003,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(19358, 1557.67505, -1667.61804, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1555.97998, -1665.92004, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1823, 1558.80005, -1671.69995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2826, 1558.32544, -1671.20142, 1100.57410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2690, 1556.30005, -1667.93005, 1100.43005,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(2289, 1604.83496, -1688.84998, 1109.50000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19358, 1593.19397, -1691.79004, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 1573.72498, -1686.87000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1806, 1585.01453, -1692.58289, 1100.08667,   0.00000, 0.00000, -100.00000);
	CreateDynamicObject(1715, 1584.30005, -1691.87000, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19456, 1580.75000, -1689.75195, 1091.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1570.96497, -1685.17004, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1570.96497, -1685.17004, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2164, 1595.00000, -1693.50000, 1107.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1742, 1597.18994, -1693.40002, 1107.08997,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(630, 1568.40002, -1683.00000, 1101.07996,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(2195, 1604.19995, -1692.69995, 1107.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1742, 1600.06299, -1693.40002, 1107.08997,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19450, 1598.09497, -1693.38000, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1742, 1598.16504, -1693.40002, 1109.13501,   0.00000, 180.00000, 180.00000);
	CreateDynamicObject(1703, 1597.80005, -1694.00000, 1107.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1604.51794, -1693.38000, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2195, 1604.09998, -1694.23499, 1107.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19381, 1589.30005, -1694.15002, 1107.01001,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2344, 1599.55066, -1695.48242, 1107.58997,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(1649, 1589.00000, -1694.00000, 1108.50000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, 1589.00000, -1694.00000, 1108.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, 1586.18506, -1693.96997, 1100.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19358, 1593.19397, -1695.00000, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2311, 1598.05005, -1695.80005, 1107.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1586.77295, -1694.30005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1715, 1584.30005, -1692.68005, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2824, 1598.67041, -1695.77002, 1107.58398,   0.00000, 0.00000, 200.00000);
	CreateDynamicObject(1806, 1582.04980, -1692.19995, 1100.08667,   0.00000, 0.00000, -200.00000);
	CreateDynamicObject(2161, 1593.30505, -1695.19995, 1109.94995,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19377, 1589.30005, -1694.15002, 1110.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(14532, 1581.55005, -1691.50000, 1108.07495,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19404, 1589.00000, -1694.81995, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1715, 1584.30005, -1693.50000, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1806, 1585.01453, -1694.42542, 1100.08667,   0.00000, 0.00000, -70.00000);
	CreateDynamicObject(1806, 1580.28198, -1692.19995, 1100.08667,   0.00000, 0.00000, 200.00000);
	CreateDynamicObject(2191, 1576.71997, -1690.01001, 1100.08655,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1582.42212, -1693.88916, 1100.88831,   0.00000, 0.00000, -150.00000);
	CreateDynamicObject(1715, 1584.30005, -1694.59998, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2172, 1586.18506, -1695.94995, 1100.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2208, 1582.50000, -1694.00000, 1106.99500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14439, 1581.44995, -1691.94995, 1112.30005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19138, 1602.60828, -1697.70825, 1107.93005,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(19381, 1599.80005, -1698.20996, 1107.01001,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18868, 1603.15015, -1697.75598, 1107.89807,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(2190, 1581.75500, -1694.34998, 1100.88000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2190, 1581.19995, -1694.02002, 1100.88000,   0.00000, 0.00000, 140.00000);
	CreateDynamicObject(2824, 1582.33813, -1694.75500, 1100.88818,   0.00000, 0.00000, -20.00000);
	CreateDynamicObject(1715, 1578.80005, -1691.87000, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1584.30005, -1695.44995, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1806, 1585.01453, -1696.56604, 1100.08667,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(1806, 1577.89368, -1692.19995, 1100.08667,   0.00000, 0.00000, -200.00000);
	CreateDynamicObject(2953, 1603.15002, -1698.34998, 1107.89856,   0.00000, 0.00000, 100.00000);
	CreateDynamicObject(19379, 1581.46497, -1694.80298, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(16779, 1599.00000, -1698.14771, 1110.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 1593.19397, -1698.20996, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1581.46497, -1694.80298, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2190, 1580.55005, -1694.34998, 1100.88000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2190, 1581.07104, -1694.69995, 1100.88000,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(1714, 1604.32312, -1698.48865, 1107.05005,   0.00000, 0.00000, -110.00000);
	CreateDynamicObject(19377, 1599.80005, -1698.20996, 1110.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2615, 1565.46997, -1667.75000, 1102.08997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2214, 1567.69946, -1655.12756, 1100.90002,   -25.30000, 23.35000, 70.00000);
	CreateDynamicObject(19358, 1569.00000, -1681.96497, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2614, 1568.87500, -1681.80005, 1102.44995,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2219, 1567.27563, -1655.02393, 1101.19995,   -25.10000, 23.40000, -100.00000);
	CreateDynamicObject(19358, 1564.09497, -1667.61804, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, 1564.09497, -1664.25000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1564.00000, -1667.94226, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2354, 1566.83069, -1655.12256, 1100.90002,   -25.30000, 23.35000, 70.00000);
	CreateDynamicObject(2449, 1566.30603, -1654.94995, 1099.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2219, 1566.15137, -1655.04272, 1101.19995,   -25.10000, 23.40000, -100.00000);
	CreateDynamicObject(2451, 1567.69995, -1652.31494, 1100.08777,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1563.25000, -1667.97083, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2200, 1571.88000, -1688.01697, 1100.08643,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2163, 1571.97998, -1688.23999, 1101.97498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19358, 1570.51501, -1686.87000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2415, 1566.84998, -1652.31494, 1100.08716,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2214, 1563.80115, -1658.37219, 1101.36499,   -25.30000, 23.35000, 0.00000);
	CreateDynamicObject(1721, 1562.45996, -1668.00000, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2699, 1563.52002, -1658.15002, 1100.68506,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2219, 1564.95630, -1655.00989, 1101.19995,   -25.10000, 23.40000, -100.00000);
	CreateDynamicObject(2214, 1563.20410, -1657.87561, 1101.36499,   -25.30000, 23.35000, 180.00000);
	CreateDynamicObject(2420, 1561.30005, -1664.13000, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2214, 1564.33447, -1655.12341, 1101.19995,   -25.30000, 23.35000, 70.00000);
	CreateDynamicObject(19388, 1560.88501, -1667.61804, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2449, 1563.92004, -1654.94495, 1099.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1563.52002, -1655.39001, 1099.80505,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2417, 1565.84998, -1652.06006, 1100.08521,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1560.46716, -1665.91003, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1560.46716, -1665.91003, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2219, 1563.03479, -1655.14734, 1100.90002,   -25.10000, 23.40000, 70.00000);
	CreateDynamicObject(1546, 1564.72998, -1652.22876, 1101.16504,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2214, 1562.60449, -1655.16724, 1101.19995,   -25.30000, 23.35000, 70.00000);
	CreateDynamicObject(2922, 1559.80005, -1667.69995, 1101.65002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2922, 1559.77002, -1667.53503, 1101.65002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2427, 1564.69995, -1651.80005, 1101.03809,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 1564.08228, -1652.49182, 1101.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 1563.95544, -1652.46582, 1101.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 1563.83374, -1652.58386, 1101.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2354, 1562.03699, -1655.14209, 1100.90002,   -25.30000, 23.35000, 70.00000);
	CreateDynamicObject(2419, 1563.94995, -1652.31494, 1100.08691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1559.05798, -1662.50000, 1100.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2449, 1561.67004, -1654.94995, 1099.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1559.06873, -1661.40002, 1100.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1559.07947, -1660.30005, 1100.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14438, 1560.00000, -1658.50000, 1105.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1560.46716, -1656.27698, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1560.46716, -1656.27698, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2453, 1560.87402, -1655.06995, 1101.22998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1559.09021, -1659.30005, 1100.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1560.46716, -1675.53723, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1560.46716, -1675.53723, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2446, 1560.67004, -1654.91846, 1099.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1562.63000, -1651.56006, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2416, 1562.06006, -1652.31494, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2354, 1559.92834, -1655.08423, 1100.96497,   -25.30000, 23.35000, 70.00000);
	CreateDynamicObject(2615, 1565.91003, -1683.33997, 1102.08997,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2737, 1565.69995, -1683.34998, 1101.93005,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2446, 1559.67004, -1654.91846, 1099.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2219, 1560.88000, -1652.57849, 1101.08496,   -25.10000, 23.40000, 70.00000);
	CreateDynamicObject(2426, 1560.80005, -1651.90002, 1101.03699,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1569.89001, -1686.94604, 1101.97498,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1564.00000, -1683.09998, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2419, 1560.17004, -1652.31494, 1100.08691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1569.67102, -1687.06995, 1100.08643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2446, 1558.67004, -1654.91846, 1099.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1564.09497, -1683.48096, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14438, 1558.50000, -1675.50000, 1105.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1563.25000, -1683.09998, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1753, 1556.59998, -1672.19995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2163, 1567.68005, -1686.94604, 1101.97498,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1567.30505, -1686.87000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, 1567.44104, -1687.06995, 1100.08643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1562.45996, -1683.09998, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2612, 1565.90002, -1687.00000, 1101.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 1576.36206, -1692.19995, 1100.08667,   0.00000, 0.00000, 200.00000);
	CreateDynamicObject(2922, 1561.90002, -1683.41003, 1101.65002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2922, 1561.92505, -1683.56006, 1101.65002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1536, 1556.01294, -1674.04004, 1100.05005,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19450, 1555.97998, -1675.54968, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1823, 1558.80005, -1680.50000, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2816, 1558.30554, -1679.89685, 1100.57520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1536, 1556.05005, -1677.05005, 1100.05005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, 1560.88501, -1683.48096, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, 1564.09497, -1686.87000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2417, 1559.20996, -1652.06006, 1100.08521,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1753, 1556.59998, -1681.00000, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1560.46716, -1685.17004, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1560.46716, -1685.17004, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19172, 1558.07996, -1683.40002, 1102.15002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19358, 1557.67505, -1683.48096, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2163, 1561.27502, -1686.94604, 1101.97498,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1561.05505, -1687.06995, 1100.08643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 1573.80005, -1692.44739, 1100.08667,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, 1571.88000, -1692.47498, 1100.08643,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2163, 1571.97998, -1692.69995, 1101.97498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2172, 1572.67505, -1692.98596, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2690, 1556.30005, -1683.17004, 1100.43005,   0.00000, 0.00000, 125.00000);
	CreateDynamicObject(2163, 1559.05005, -1686.94604, 1101.97498,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1715, 1578.80005, -1692.68005, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2223, 1579.25696, -1693.96448, 1100.94995,   0.00000, 0.00000, -100.00000);
	CreateDynamicObject(18866, 1578.84802, -1693.98523, 1100.88855,   0.00000, 0.00000, 150.00000);
	CreateDynamicObject(2824, 1576.01208, -1693.88293, 1100.88818,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2190, 1577.26526, -1694.02002, 1100.88000,   0.00000, 0.00000, 140.00000);
	CreateDynamicObject(2190, 1577.80005, -1694.34998, 1100.88000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2190, 1576.59998, -1694.34998, 1100.88000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1715, 1578.80005, -1693.50000, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2190, 1577.09998, -1694.69995, 1100.88000,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(1806, 1573.80005, -1694.32617, 1100.08667,   0.00000, 0.00000, 130.00000);
	CreateDynamicObject(2894, 1578.23535, -1694.96082, 1100.88831,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(2221, 1575.92188, -1694.82471, 1100.95703,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(2208, 1580.60999, -1694.00000, 1106.99500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19381, 1578.80005, -1694.15002, 1107.01001,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2183, 1579.65002, -1695.00000, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2953, 1580.38635, -1695.10156, 1100.88904,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(2183, 1575.70898, -1695.00000, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1715, 1578.80005, -1694.59998, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, 1571.88000, -1694.70398, 1100.08643,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2172, 1572.67505, -1694.96594, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2163, 1571.97998, -1694.93005, 1101.97498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19450, 1573.92603, -1694.15002, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1570.96497, -1694.80298, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1715, 1578.80005, -1695.44995, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1570.96497, -1694.80298, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1578.80005, -1694.15002, 1110.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1806, 1577.89368, -1696.44995, 1100.08667,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(1806, 1580.28198, -1696.44995, 1100.08667,   0.00000, 0.00000, -20.00000);
	CreateDynamicObject(1806, 1576.36206, -1696.44995, 1100.08667,   0.00000, 0.00000, -20.00000);
	CreateDynamicObject(1806, 1582.04980, -1696.44995, 1100.08667,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(1806, 1573.80005, -1696.20947, 1100.08667,   0.00000, 0.00000, 100.00000);
	CreateDynamicObject(1715, 1578.80005, -1696.25000, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, 1572.67505, -1696.94604, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1806, 1577.60193, -1697.76770, 1100.08667,   0.00000, 0.00000, 200.00000);
	CreateDynamicObject(1806, 1575.93140, -1697.76770, 1100.08667,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1806, 1579.59998, -1697.76770, 1100.08667,   0.00000, 0.00000, 220.00000);
	CreateDynamicObject(2200, 1571.88000, -1696.93005, 1100.08643,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2163, 1571.97998, -1697.15186, 1101.97498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2208, 1580.60999, -1696.75000, 1106.99597,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1806, 1581.69592, -1697.76770, 1100.08667,   0.00000, 0.00000, 200.00000);
	CreateDynamicObject(1715, 1578.80005, -1697.40002, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 1582.50000, -1696.75000, 1106.99597,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1806, 1573.80005, -1698.29517, 1100.08667,   0.00000, 0.00000, 60.00000);
	CreateDynamicObject(1806, 1583.43494, -1697.76770, 1100.08667,   0.00000, 0.00000, 190.00000);
	CreateDynamicObject(1715, 1584.30005, -1696.25000, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2172, 1578.26599, -1698.92505, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2172, 1576.28503, -1698.92505, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19358, 1572.09998, -1698.18994, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2066, 1574.48499, -1698.88000, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2172, 1580.24695, -1698.92505, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1715, 1578.80005, -1698.23999, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2193, 1573.69995, -1698.92505, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, 1582.22705, -1698.92505, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19450, 1580.14001, -1699.50000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1806, 1585.58386, -1697.76770, 1100.08667,   0.00000, 0.00000, 150.00000);
	CreateDynamicObject(1715, 1584.30005, -1697.40002, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 1578.80005, -1699.05005, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2193, 1586.18506, -1697.91003, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2172, 1584.20703, -1698.92505, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2200, 1570.93005, -1699.13599, 1100.08643,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2163, 1570.71301, -1699.26001, 1101.97498,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1715, 1584.30005, -1698.23999, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2208, 1580.60999, -1699.55005, 1106.99500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1570.51001, -1699.50000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1578.80005, -1700.15002, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 1582.50000, -1699.55005, 1106.99500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, 1568.70105, -1699.13599, 1100.08643,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1715, 1584.30005, -1699.05005, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2200, 1558.82800, -1687.06995, 1100.08643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1568.48999, -1699.26001, 1101.97498,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19358, 1586.56494, -1699.50000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1578.80005, -1700.99902, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 1586.77295, -1699.92004, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1715, 1584.30005, -1700.15002, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2200, 1566.47302, -1699.13599, 1100.08643,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19450, 1557.67505, -1686.87000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2163, 1566.25000, -1699.26001, 1101.97498,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1715, 1578.80005, -1701.80005, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 1574.02795, -1701.15002, 1108.74500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 1584.30005, -1700.99902, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19404, 1589.00000, -1698.03003, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2208, 1580.60999, -1702.30005, 1106.99597,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1589.00000, -1698.50000, 1108.50000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, 1589.00000, -1698.50000, 1108.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, 1564.24500, -1699.13599, 1100.08643,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2208, 1582.50000, -1702.30005, 1106.99597,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1555.97998, -1685.18005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1715, 1584.30005, -1701.80005, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 1578.80005, -1702.90515, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 1555.94995, -1685.18005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1564.03003, -1699.26001, 1101.97498,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2200, 1562.01794, -1699.13599, 1100.08643,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2163, 1561.80005, -1699.26001, 1101.97498,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1715, 1578.80005, -1703.73999, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19381, 1578.80005, -1703.78503, 1107.01001,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, 1573.92603, -1703.78503, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1560.87805, -1699.50000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1578.80005, -1704.55005, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1584.30005, -1702.90515, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2200, 1559.79004, -1699.13599, 1100.08643,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19377, 1578.80005, -1703.78503, 1110.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2163, 1559.57996, -1699.26001, 1101.97498,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1715, 1584.30005, -1703.73999, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2208, 1580.60999, -1705.05005, 1106.99500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 1582.50000, -1705.05005, 1106.99500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1584.30005, -1704.55005, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2207, 1580.59998, -1706.00000, 1107.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2397, 1557.47998, -1698.84827, 1100.81006,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19162, 1557.19995, -1698.84998, 1101.59497,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19161, 1556.94397, -1698.59998, 1101.23804,   -90.00000, -90.00000, 0.00000);
	CreateDynamicObject(2597, 1556.91431, -1698.88196, 1100.90002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2397, 1556.40601, -1698.84827, 1100.81006,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2164, 1574.05005, -1707.45203, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1555.97998, -1701.19995, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2631, 1553.80005, -1700.00000, 1100.08716,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2219, 1569.95081, -1662.70264, 1100.94495,   -25.30000, 23.35000, -90.00000);
	CreateDynamicObject(2764, 1570.19995, -1662.50000, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1571.69995, -1662.50000, 1100.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1568.80005, -1662.50000, 1100.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1546, 1569.97217, -1662.14124, 1100.98499,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19462, 1556.96497, -1704.43005, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2354, 1570.65515, -1661.58813, 1100.94995,   -25.30000, 23.35000, 80.00000);
	CreateDynamicObject(2915, 1547.99646, -1695.82776, 1100.26001,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(2915, 1547.43640, -1695.33228, 1100.26001,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(2632, 1547.07056, -1695.61682, 1100.08801,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3071, 1546.51880, -1695.90173, 1100.33997,   0.00000, 90.00000, 20.00000);
	CreateDynamicObject(2629, 1546.50000, -1699.00000, 1100.08606,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2631, 1553.80005, -1703.00000, 1100.08716,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2913, 1545.95996, -1699.44495, 1101.05005,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19450, 1544.81995, -1698.80005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1556.96497, -1704.43005, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2628, 1546.50000, -1702.00000, 1100.08594,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1549.96802, -1704.43005, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1549.96802, -1704.43005, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1985, 1554.00000, -1707.00000, 1103.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2627, 1546.50000, -1704.80005, 1100.08667,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1555.97998, -1707.62000, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14438, 1547.30005, -1705.50000, 1105.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2630, 1546.50000, -1707.30005, 1100.08618,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1551.07996, -1709.06201, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2788, 1568.80005, -1661.40002, 1100.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1546, 1569.90784, -1661.30908, 1100.98499,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2764, 1570.19995, -1661.44995, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1544.81995, -1708.43005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1568.80005, -1660.30005, 1100.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2788, 1571.69995, -1661.40002, 1100.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2214, 1570.37256, -1660.63257, 1100.94800,   -25.30000, 23.35000, 0.00000);
	CreateDynamicObject(1546, 1569.86523, -1660.35339, 1100.98499,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2764, 1570.19995, -1660.40002, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1544.65796, -1709.06201, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2788, 1568.80005, -1659.30005, 1100.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2219, 1570.10120, -1659.52002, 1100.94495,   -25.30000, 23.35000, 0.00000);
	CreateDynamicObject(2788, 1571.69995, -1660.30005, 1100.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2764, 1570.19995, -1659.34998, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2699, 1568.15002, -1658.15002, 1100.68506,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2354, 1568.22986, -1658.14148, 1101.36499,   -25.30000, 23.35000, 80.00000);
	CreateDynamicObject(19439, 1574.58606, -1661.45996, 1098.80896,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19439, 1572.97998, -1660.15002, 1100.17004,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2788, 1571.69995, -1659.30005, 1100.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19439, 1572.98096, -1659.97998, 1100.28003,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19450, 1572.09998, -1659.34497, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19439, 1572.97998, -1659.80005, 1100.37000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19439, 1572.99902, -1659.62500, 1100.46997,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2788, 1570.19995, -1658.00000, 1100.59998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2055, 1572.23499, -1659.00000, 1103.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19380, 1584.50000, -1678.47498, 1089.50000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19304, 1585.50000, -1676.88306, 1092.70605,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 1583.50000, -1674.40002, 1089.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2165, 1584.31494, -1670.23096, 1100.08777,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19304, 1585.50000, -1673.20996, 1092.70605,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2684, 1584.24646, -1668.76819, 1100.90100,   -90.00000, 0.00000, 50.00000);
	CreateDynamicObject(2525, 1582.40002, -1671.96997, 1089.57996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2684, 1584.11438, -1668.37927, 1100.90100,   -90.00000, 0.00000, -50.00000);
	CreateDynamicObject(2166, 1584.29504, -1668.27502, 1100.08813,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 1585.60767, -1668.96472, 1100.08765,   0.00000, 0.00000, 110.00000);
	CreateDynamicObject(2166, 1586.19995, -1669.21997, 1100.08813,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1582.85388, -1667.46301, 1100.07996,   0.00000, 0.00000, -120.00000);
	CreateDynamicObject(19377, 1584.50000, -1668.84119, 1093.13000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1581.46497, -1665.91003, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1581.46497, -1665.91003, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2202, 1581.00000, -1664.81995, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1580.14502, -1664.25000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1583.62695, -1664.37500, 1100.08752,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2949, 1579.97998, -1666.19995, 1089.58716,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1581.28796, -1662.19995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1579.66089, -1661.53711, 1100.92542,   0.00000, 0.00000, 95.00000);
	CreateDynamicObject(2637, 1579.50000, -1661.50000, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1581.28796, -1660.80005, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2420, 1566.44995, -1664.13000, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19358, 1567.30505, -1664.25000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1575.79651, -1708.40002, 1107.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1714, 1581.50000, -1707.59998, 1107.05005,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19450, 1578.65503, -1708.51196, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19381, 1589.30005, -1703.78503, 1107.01001,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19174, 1581.50000, -1708.43005, 1109.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19450, 1589.00000, -1704.44995, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1589.30005, -1703.78503, 1110.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(14455, 1588.72498, -1705.50000, 1108.74500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1588.87000, -1706.65405, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19358, 1593.19397, -1701.42004, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 1593.30505, -1700.65002, 1109.94995,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(2164, 1595.80005, -1702.89001, 1107.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19388, 1593.19397, -1704.63000, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 1596.30005, -1703.12000, 1109.94995,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(2297, 1598.50000, -1703.40002, 1107.08997,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(19450, 1598.09497, -1703.01001, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2297, 1599.50000, -1702.63000, 1107.08997,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(2164, 1587.92200, -1708.40002, 1107.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2173, 1603.00000, -1698.80005, 1107.09705,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2684, 1603.11279, -1698.61987, 1107.92004,   -90.00000, 0.00000, 120.00000);
	CreateDynamicObject(2270, 1593.77002, -1706.65002, 1109.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1588.29004, -1708.51196, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1593.19397, -1707.83997, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2167, 1593.89502, -1708.38000, 1107.09875,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2266, 1604.37000, -1698.30005, 1109.28796,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2167, 1593.89502, -1708.38000, 1108.61499,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19431, 1593.91003, -1708.51196, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1604.94995, -1698.20996, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 1594.90002, -1708.90002, 1108.74500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2195, 1604.09998, -1702.17505, 1107.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2081, 1603.50000, -1703.80005, 1107.09839,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(19358, 1604.51794, -1703.01001, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2245, 1604.25000, -1703.80005, 1107.88000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19381, 1599.80005, -1707.83997, 1107.01001,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2184, 1602.00000, -1706.69995, 1107.09729,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19100, 1602.03162, -1706.53064, 1107.93506,   -3.00000, -86.50000, 95.00000);
	CreateDynamicObject(16779, 1599.27466, -1707.58203, 1110.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2684, 1601.98450, -1707.60449, 1107.89502,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1599.80005, -1707.83997, 1110.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2684, 1602.42297, -1707.67310, 1107.89502,   -90.00000, 0.00000, 60.00000);
	CreateDynamicObject(18868, 1602.84961, -1708.31921, 1107.87244,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(1714, 1604.07983, -1707.95313, 1107.05005,   0.00000, 0.00000, -110.00000);
	CreateDynamicObject(19450, 1604.94995, -1707.84497, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1736, 1604.53503, -1707.94995, 1109.84314,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1704, 1598.50000, -1711.94995, 1107.07996,   0.00000, 0.00000, 140.00000);
	CreateDynamicObject(1704, 1600.65002, -1711.34998, 1107.07996,   0.00000, 0.00000, -140.00000);
	CreateDynamicObject(19431, 1594.47998, -1712.55005, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2344, 1599.03809, -1711.90234, 1107.93701,   0.00000, 0.00000, 150.00000);
	CreateDynamicObject(2606, 1569.06006, -1675.56006, 1101.12000,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(19461, 1569.00000, -1675.54968, 1099.65002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19347, 1568.91003, -1675.50000, 1102.35999,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1649, 1569.00000, -1675.50000, 1103.25000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1569.00000, -1675.50000, 1103.25000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19461, 1569.00000, -1675.54968, 1104.00000,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(2684, 1569.04004, -1674.63794, 1101.43994,   -90.00000, 0.00000, 20.00000);
	CreateDynamicObject(2684, 1569.06995, -1674.22827, 1101.43994,   -90.00000, 0.00000, 80.00000);
	CreateDynamicObject(2008, 1571.92456, -1671.44995, 1100.08679,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2606, 1569.06006, -1673.57996, 1101.12000,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(2166, 1569.75000, -1672.40002, 1100.08765,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1571.76001, -1670.56995, 1100.08643,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2894, 1570.54321, -1671.42053, 1100.87805,   0.00000, 0.00000, -20.00000);
	CreateDynamicObject(1491, 1575.41296, -1668.35498, 1100.07202,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19358, 1570.53003, -1670.81995, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2606, 1569.06006, -1671.59998, 1101.12000,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(19358, 1579.09521, -1665.93994, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1569.00000, -1671.06006, 1103.25000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1569.00000, -1671.06006, 1103.25000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2200, 1572.72803, -1667.87000, 1100.08643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 1579.70435, -1665.04785, 1101.07996,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(2608, 1569.30005, -1669.19995, 1101.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2608, 1569.30005, -1669.19995, 1102.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2614, 1568.87500, -1669.25000, 1102.44995,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19358, 1569.00000, -1669.13501, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1570.50000, -1667.87000, 1100.08643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1570.51501, -1667.61804, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(630, 1568.40002, -1668.19995, 1101.07996,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(19379, 1570.96497, -1665.91003, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1570.96497, -1665.91003, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2737, 1565.69995, -1667.73999, 1101.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1594.63196, -1713.03003, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2725, 1599.21997, -1712.00000, 1107.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1599.23328, -1712.06555, 1107.94995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1600.09998, -1712.55005, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2081, 1604.30005, -1711.15002, 1107.09839,   0.00000, 0.00000, -145.00000);
	CreateDynamicObject(2245, 1604.13623, -1711.83435, 1107.88000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1583.82349, -1670.81995, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2518, 1580.45996, -1672.50000, 1089.84998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1581.28003, -1671.37695, 1091.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2202, 1573.94995, -1671.42505, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1582.85388, -1668.95374, 1100.07996,   0.00000, 0.00000, -60.00000);
	CreateDynamicObject(19388, 1579.09521, -1669.13501, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1573.74194, -1670.81995, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, 1573.98901, -1670.56995, 1100.08643,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19388, 1575.42102, -1669.13501, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1579.86499, -1668.84802, 1091.32996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 1579.17004, -1666.46179, 1102.90002,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(2922, 1572.50000, -1664.31995, 1101.65002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19388, 1573.72498, -1664.25000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2922, 1572.47998, -1664.17505, 1101.65002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1570.51501, -1664.25000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2788, 1570.19995, -1663.80005, 1100.59998,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19439, 1575.30005, -1659.62500, 1099.57996,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19439, 1574.60498, -1659.62500, 1100.46997,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2894, 1579.65210, -1658.38818, 1100.92542,   0.00000, 0.00000, 110.00000);
	CreateDynamicObject(2894, 1574.83789, -1657.66504, 1101.24121,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1811, 1573.50000, -1657.81885, 1101.09998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2169, 1574.90002, -1657.30005, 1100.44995,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2050, 1572.25000, -1657.90002, 1102.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3088, 1572.16504, -1657.80005, 1100.50000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3077, 1572.19995, -1657.84998, 1104.34998,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19439, 1575.30005, -1656.12500, 1099.57996,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19439, 1574.60498, -1656.12500, 1100.46997,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19439, 1572.99902, -1656.12500, 1100.46997,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19439, 1572.97998, -1655.94995, 1100.37000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19439, 1572.98096, -1655.75000, 1100.27002,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1570.96497, -1656.27698, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19439, 1572.97998, -1655.55005, 1100.17004,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 1570.96497, -1656.27698, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(14532, 1574.95825, -1654.86365, 1101.54004,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19439, 1574.58606, -1654.30005, 1098.80896,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(2214, 1570.09436, -1655.16296, 1100.90002,   -25.30000, 23.35000, 70.00000);
	CreateDynamicObject(1502, 1570.45996, -1655.06934, 1098.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2214, 1569.40723, -1655.13892, 1101.19995,   -25.30000, 23.35000, 70.00000);
	CreateDynamicObject(1649, 1568.15002, -1655.39001, 1099.80505,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2449, 1568.55603, -1654.94495, 1099.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1572.09998, -1652.92505, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2127, 1569.64001, -1652.16431, 1100.08813,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19304, 1585.50000, -1680.56006, 1092.70605,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 1585.90002, -1680.44800, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1584.50000, -1678.47498, 1093.13000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2525, 1582.40002, -1675.65002, 1089.57996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 1583.50000, -1678.09998, 1089.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 1586.77295, -1680.51001, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2611, 1575.29004, -1673.50000, 1101.93005,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2518, 1580.45996, -1676.19995, 1089.84998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1580.75000, -1675.05005, 1091.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1806, 1572.34424, -1672.43469, 1100.08765,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(1649, 1569.00000, -1679.93994, 1103.25000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1569.00000, -1679.93994, 1103.25000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2608, 1569.30005, -1681.84998, 1102.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1578.80005, -1684.52002, 1110.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, 1573.92603, -1684.52002, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2608, 1569.30005, -1681.84998, 1101.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2606, 1569.06006, -1679.51501, 1101.12000,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(2606, 1569.28003, -1675.56006, 1102.92749,   20.00000, 0.00000, 90.00000);
	CreateDynamicObject(2606, 1569.06006, -1677.53503, 1101.12000,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(2684, 1569.03479, -1677.02307, 1101.43994,   -90.00000, 0.00000, -40.00000);
	CreateDynamicObject(2684, 1569.04004, -1676.51428, 1101.43994,   -90.00000, 0.00000, -80.00000);
	CreateDynamicObject(2165, 1569.77002, -1675.00000, 1100.08740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1570.96497, -1675.53723, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2525, 1582.40002, -1679.32996, 1089.57996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 1570.98987, -1674.81006, 1100.08765,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(2166, 1570.77502, -1679.69995, 1100.08765,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, 1570.50000, -1680.53003, 1100.08643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 1571.09644, -1676.76233, 1100.08765,   0.00000, 0.00000, 70.00000);
	CreateDynamicObject(19379, 1570.96497, -1675.53723, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2222, 1569.65161, -1678.89661, 1100.93994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, 1569.77002, -1677.00000, 1100.08740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2518, 1580.45996, -1683.59998, 1089.84998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1581.46497, -1685.17004, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19388, 1580.88501, -1683.67505, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19404, 1577.67297, -1683.67505, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1580.75000, -1682.40002, 1091.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1580.75000, -1678.72302, 1091.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2518, 1580.45996, -1679.90002, 1089.84998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1579.86499, -1678.48206, 1091.32996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1570.53003, -1680.27795, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, 1575.42102, -1675.54968, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1581.46497, -1675.53723, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1581.46497, -1675.53723, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, 1570.51501, -1683.48096, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, 1571.76001, -1683.22998, 1100.08643,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2200, 1573.98901, -1683.22998, 1100.08643,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2200, 1572.72803, -1680.53003, 1100.08643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2008, 1573.00000, -1679.65002, 1100.08679,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1806, 1572.46826, -1678.41711, 1100.08765,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(19381, 1578.80005, -1684.52002, 1107.01001,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1649, 1576.80005, -1683.67004, 1108.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1576.80005, -1683.67004, 1108.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1578.65503, -1679.62305, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(630, 1574.80005, -1684.43994, 1108.09998,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(19358, 1574.45996, -1683.67505, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2924, 1574.00000, -1680.00000, 1108.28003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1583.06970, -1683.59998, 1100.47998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1811, 1583.17688, -1681.51770, 1100.69995,   0.00000, 0.00000, 70.00000);
	CreateDynamicObject(2894, 1582.82324, -1683.41687, 1100.90540,   0.00000, 0.00000, -120.00000);
	CreateDynamicObject(19358, 1584.00000, -1680.44849, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1580.14502, -1686.87000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1581.46240, -1685.17664, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19388, 1575.42102, -1681.96973, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1573.72998, -1680.27808, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1491, 1575.41296, -1681.19495, 1100.07202,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19358, 1575.42102, -1678.75024, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1575.42102, -1672.34363, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1580.79993, -1680.44849, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, 1579.27795, -1681.97229, 1101.83008,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1579.27795, -1685.17212, 1101.83008,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2922, 1579.20496, -1680.79797, 1101.65002,   0.00000, 0.00000, 90.00000);
//////SPITAL

	CreateDynamicObject(19445, 1183.69995, -1323.59998, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 1183.63501, -1325.09998, 1100.08594,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 1183.63196, -1322.09998, 1100.08594,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1569, 1183.63000, -1320.60803, 1100.08594,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1569, 1183.63696, -1326.59802, 1100.08594,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 1183.00000, -1327.50000, 1100.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19379, 1178.50000, -1323.59998, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1178.50000, -1323.59998, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1703, 1183.00000, -1317.50000, 1100.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2315, 1181.00000, -1317.50000, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2826, 1181.00000, -1330.30005, 1100.57495,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2826, 1181.00000, -1316.69995, 1100.57495,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1183.00000, -1331.00000, 1100.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2315, 1181.00000, -1331.00000, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 1183.00000, -1314.00000, 1100.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19445, 1183.69995, -1333.23206, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1183.69995, -1313.96802, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1178.50000, -1333.23206, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1178.50000, -1313.96997, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2010, 1183.09998, -1313.00000, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1182.00000, -1334.19995, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2010, 1183.09998, -1334.30005, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2684, 1172.00000, -1324.80005, 1101.06995,   90.00000, 0.00000, 70.00000);
	CreateDynamicObject(19377, 1178.50000, -1333.23206, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1178.50000, -1313.96997, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1703, 1179.97998, -1313.00000, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2190, 1171.80005, -1322.50000, 1101.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2684, 1171.80005, -1325.09998, 1101.06995,   90.00000, 0.00000, -70.00000);
	CreateDynamicObject(2894, 1171.50000, -1323.50000, 1101.08496,   0.00000, 0.00000, -70.00000);
	CreateDynamicObject(19353, 1182.02002, -1334.84998, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 1182.02002, -1312.34998, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1523, 1179.56250, -1334.81995, 1100.06604,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19383, 1178.81006, -1334.84998, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19383, 1178.81006, -1312.34998, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2251, 1171.00000, -1326.50000, 1101.92004,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1523, 1178.02002, -1312.38000, 1100.06604,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19513, 1170.50000, -1321.40002, 1101.07996,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(18070, 1170.00000, -1323.59998, 1100.57996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1806, 1170.00000, -1323.00000, 1100.07996,   0.00000, 0.00000, -70.00000);
	CreateDynamicObject(19353, 1180.44995, -1310.68005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1997, 1175.00000, -1334.19995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1997, 1175.00000, -1313.00000, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 1177.19995, -1310.68005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, 1177.18005, -1310.68005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1997, 1175.19995, -1311.69995, 1100.08997,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19445, 1185.30005, -1309.09998, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 1185.30005, -1338.13794, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1168.00000, -1323.59998, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1168.00000, -1323.59998, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2146, 1183.50000, -1308.44995, 1100.56995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2333, 1172.00000, -1312.90002, 1100.08997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2127, 1181.19995, -1338.75000, 1100.08337,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2417, 1185.50000, -1338.63000, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1172.39001, -1334.84998, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 1172.39001, -1312.34998, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 1172.39001, -1312.33997, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2419, 1183.50000, -1338.90002, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1798, 1173.50000, -1336.00000, 1100.08606,   0.00000, 0.00000, 990.00000);
	CreateDynamicObject(2354, 1184.50000, -1339.19995, 1101.07996,   -25.50000, 23.50000, 0.00000);
	CreateDynamicObject(2419, 1186.50000, -1308.30005, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2415, 1186.65002, -1338.93005, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2343, 1188.00000, -1308.44995, 1100.66003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2451, 1187.65002, -1338.89001, 1100.08362,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2331, 1189.30005, -1308.69995, 1100.34998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19383, 1180.44995, -1307.46997, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1180.44995, -1339.75000, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1177.22998, -1308.22205, 1100.06604,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 1172.30005, -1310.50000, 1100.01001,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2419, 1190.00000, -1338.90002, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 1191.71997, -1309.09998, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19383, 1177.19995, -1307.46997, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19387, 1177.18005, -1307.47046, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 1191.71997, -1338.13794, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 1177.19995, -1339.75000, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1180.42004, -1306.68005, 1100.06604,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19445, 1165.50000, -1323.59998, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2449, 1182.52002, -1341.00000, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2449, 1184.92395, -1341.00000, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2354, 1182.90002, -1341.19995, 1101.10803,   -25.50000, 23.50000, 72.00000);
	CreateDynamicObject(2354, 1182.90002, -1341.19995, 1101.40295,   -25.50000, 23.50000, 72.00000);
	CreateDynamicObject(2354, 1184.19995, -1341.19995, 1101.10803,   -25.50000, 23.50000, 72.00000);
	CreateDynamicObject(19379, 1168.00000, -1333.23206, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1168.00000, -1313.96997, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2354, 1184.19995, -1341.19995, 1101.40295,   -25.50000, 23.50000, 72.00000);
	CreateDynamicObject(2354, 1185.19995, -1341.19995, 1101.10803,   -25.50000, 23.50000, 72.00000);
	CreateDynamicObject(2212, 1185.19995, -1341.19995, 1101.40295,   -25.50000, 23.50000, 72.00000);
	CreateDynamicObject(19377, 1168.00000, -1333.23206, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1168.00000, -1313.96997, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3395, 1169.50000, -1311.59998, 1100.08997,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1776, 1192.50000, -1338.65002, 1101.15002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 1180.52698, -1341.25000, 1098.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2212, 1186.50000, -1341.19995, 1101.10803,   -25.50000, 23.50000, 72.00000);
	CreateDynamicObject(2354, 1186.50000, -1341.19995, 1101.40295,   -25.50000, 23.50000, 72.00000);
	CreateDynamicObject(2449, 1187.32800, -1341.00000, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1798, 1173.50000, -1339.19995, 1100.08606,   0.00000, 0.00000, 990.00000);
	CreateDynamicObject(2354, 1187.69995, -1341.19995, 1101.10803,   -25.50000, 23.50000, 72.00000);
	CreateDynamicObject(2212, 1187.69995, -1341.19995, 1101.40295,   -25.50000, 23.50000, 72.00000);
	CreateDynamicObject(19353, 1165.50000, -1330.02002, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 1165.50000, -1317.18005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2562, 1168.50000, -1335.43005, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2354, 1188.90002, -1341.19995, 1101.10803,   -25.50000, 23.50000, 72.00000);
	CreateDynamicObject(2212, 1188.90002, -1341.19995, 1101.40295,   -25.50000, 23.50000, 72.00000);
	CreateDynamicObject(2446, 1189.72998, -1340.96851, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2446, 1190.72498, -1340.96851, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2354, 1190.00000, -1341.34998, 1101.17505,   -25.50000, 23.50000, 0.00000);
	CreateDynamicObject(19449, 1172.30005, -1307.50000, 1100.00806,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2446, 1191.72498, -1340.96851, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 1184.00000, -1343.30005, 1101.42004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1178.50000, -1342.85999, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1178.50000, -1304.33997, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19383, 1165.50000, -1333.20996, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19383, 1165.50000, -1313.97998, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 1193.21997, -1306.75000, 1100.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19377, 1178.50000, -1342.85999, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1178.50000, -1304.33997, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19383, 1162.75000, -1323.59998, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 1162.76001, -1324.34302, 1100.06995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2446, 1192.72302, -1340.96851, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, 1177.18005, -1304.26001, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2212, 1192.50000, -1341.25000, 1101.17505,   -25.50000, 23.50000, 50.00000);
	CreateDynamicObject(2212, 1184.59998, -1343.69995, 1101.38794,   -25.50000, 23.50000, 90.00000);
	CreateDynamicObject(3394, 1181.19995, -1303.50000, 1100.08997,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2922, 1165.57996, -1334.19995, 1101.69995,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19353, 1165.96802, -1312.34998, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1189.00000, -1342.85999, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1189.00000, -1304.33997, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19353, 1162.75000, -1326.81006, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 1162.75000, -1320.39001, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2922, 1165.57996, -1312.80005, 1101.69995,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2922, 1165.42004, -1334.22998, 1101.69995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1189.00000, -1342.85999, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1189.00000, -1304.33997, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2922, 1165.42004, -1312.82996, 1101.69995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1190.00000, -1304.50000, 1100.07996,   0.00000, 0.00000, -100.00000);
	CreateDynamicObject(2163, 1162.62000, -1327.07996, 1101.94995,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2366, 1184.00000, -1344.00000, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2420, 1180.57996, -1344.00000, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, 1162.50000, -1326.85095, 1100.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(932, 1176.59998, -1304.00000, 1100.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2163, 1162.62000, -1319.32996, 1101.94995,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2388, 1171.00000, -1306.69995, 1099.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1999, 1191.50000, -1304.80005, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, 1162.50000, -1319.09497, 1100.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2354, 1187.80005, -1343.80005, 1101.38794,   -25.50000, 23.50000, 50.00000);
	CreateDynamicObject(2354, 1187.03003, -1344.00000, 1101.38794,   -25.50000, 23.50000, 0.00000);
	CreateDynamicObject(2366, 1187.00000, -1344.00000, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1162.62000, -1329.30005, 1101.94995,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1798, 1173.50000, -1342.40002, 1100.08606,   0.00000, 0.00000, 990.00000);
	CreateDynamicObject(2200, 1162.50000, -1329.07996, 1100.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19353, 1162.75000, -1330.02002, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1798, 1166.50000, -1336.90002, 1100.08606,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 1162.75000, -1317.18005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1162.62000, -1317.07996, 1101.94995,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3388, 1167.50000, -1308.90002, 1100.08997,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2200, 1162.50000, -1316.86597, 1100.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19449, 1172.30005, -1304.85999, 1100.01001,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1806, 1182.50000, -1302.00000, 1100.07996,   0.00000, 0.00000, -30.00000);
	CreateDynamicObject(1806, 1193.00000, -1304.30005, 1100.07996,   0.00000, 0.00000, 100.00000);
	CreateDynamicObject(3386, 1167.50000, -1307.90002, 1100.08997,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1523, 1180.42004, -1345.38000, 1100.06604,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19430, 1169.19995, -1306.30005, 1101.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19445, 1193.34998, -1342.94995, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1193.34998, -1304.19995, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 1167.50000, -1307.44995, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 1175.52002, -1344.69995, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2687, 1177.06494, -1302.00000, 1102.00000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2388, 1168.00000, -1306.69995, 1099.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1161.55298, -1331.28003, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19445, 1180.44995, -1301.09998, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19383, 1180.44995, -1346.17004, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1161.32996, -1331.40002, 1101.94995,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19445, 1162.76294, -1334.84998, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2388, 1171.00000, -1303.80005, 1099.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1798, 1166.50000, -1340.09998, 1100.08606,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 1177.19995, -1301.09998, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, 1177.18005, -1301.09998, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19383, 1177.19995, -1346.17004, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1169.19995, -1304.69995, 1101.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1808, 1193.06995, -1344.50000, 1100.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(932, 1171.59998, -1344.09998, 1100.07996,   0.00000, 0.00000, 210.00000);
	CreateDynamicObject(3396, 1183.00000, -1300.25000, 1100.08997,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 1172.31006, -1344.69995, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(937, 1186.00000, -1300.25000, 1100.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1160.52002, -1315.80005, 1101.94995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19426, 1161.96997, -1312.34998, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, 1160.29199, -1315.92004, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1177.22998, -1346.92249, 1100.06604,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2010, 1162.00000, -1311.59998, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(941, 1188.50000, -1300.30005, 1100.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2333, 1188.00000, -1300.09998, 1100.08997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2924, 1164.38000, -1308.00000, 1101.27002,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3383, 1166.50000, -1305.75000, 1102.00000,   -90.00000, 0.00000, -90.00000);
	CreateDynamicObject(19445, 1185.30005, -1299.52002, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1182.80005, -1299.38000, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19379, 1168.00000, -1342.85999, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1168.00000, -1304.33997, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1168.00000, -1342.85999, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1168.00000, -1304.33997, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19445, 1164.45105, -1307.44995, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2420, 1180.57996, -1348.00000, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 1172.30005, -1301.35999, 1100.01001,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2200, 1159.32495, -1331.28003, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19383, 1169.94995, -1344.70105, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2331, 1175.40002, -1300.00000, 1100.34998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2388, 1168.00000, -1303.80005, 1099.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1182.50000, -1348.50000, 1100.59998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2163, 1159.09998, -1331.40002, 1101.94995,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2164, 1193.21997, -1301.00000, 1100.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(936, 1185.50000, -1298.81995, 1100.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19353, 1175.52002, -1347.57996, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1523, 1169.16003, -1344.72998, 1100.06604,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1186.80005, -1348.50000, 1100.59998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1157.50000, -1323.59998, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1157.50000, -1323.59998, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2146, 1167.69995, -1344.09998, 1100.56995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, 1160.00000, -1334.92505, 1103.19995,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(14532, 1176.50000, -1298.84998, 1101.06006,   0.00000, 0.00000, 60.00000);
	CreateDynamicObject(1798, 1166.50000, -1343.30005, 1100.08606,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 1162.82996, -1339.75000, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1158.29004, -1315.80005, 1101.94995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 1191.71997, -1299.52002, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3396, 1172.00000, -1300.25000, 1100.08997,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 1162.68298, -1307.44995, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 1159.56006, -1312.34998, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2562, 1175.00000, -1298.93994, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2200, 1158.06494, -1315.92004, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1704, 1161.50000, -1338.50000, 1100.08508,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(1798, 1164.57996, -1304.94995, 1100.57996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19445, 1157.84998, -1331.53503, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 1157.84998, -1315.66504, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 1172.31006, -1347.57996, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3394, 1168.25000, -1301.80005, 1100.08997,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19449, 1172.39001, -1299.52502, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 1172.39001, -1299.52002, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2788, 1191.40002, -1348.50000, 1100.59998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2764, 1182.50000, -1350.00000, 1100.44995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1184.00000, -1350.00000, 1100.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1181.00000, -1350.00000, 1100.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19353, 1166.73999, -1344.70105, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2788, 1185.30005, -1350.00000, 1100.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2010, 1192.69995, -1298.90002, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2866, 1186.80005, -1350.00000, 1100.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2764, 1186.80005, -1350.00000, 1100.44995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2371, 1156.00000, -1323.59998, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, 1157.09802, -1331.28003, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1523, 1170.70300, -1347.55005, 1100.06604,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2146, 1172.09998, -1348.30005, 1100.56995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1798, 1173.50000, -1348.84998, 1100.08606,   0.00000, 0.00000, 990.00000);
	CreateDynamicObject(2788, 1188.30005, -1350.00000, 1100.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1156.87000, -1331.40002, 1101.94995,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19379, 1157.50000, -1333.23206, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1157.50000, -1313.96997, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1157.50000, -1333.23206, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1157.50000, -1313.96997, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19383, 1169.94995, -1347.58105, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2825, 1162.00000, -1341.19995, 1100.57996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19357, 1167.50000, -1301.04004, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1189.90002, -1350.00000, 1100.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2207, 1161.00000, -1306.86499, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 1162.00000, -1342.00000, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2354, 1191.25000, -1350.05005, 1100.92004,   -25.50000, 23.50000, 0.00000);
	CreateDynamicObject(2764, 1191.40002, -1350.00000, 1100.44995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1156.06995, -1315.80005, 1101.94995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1182.50000, -1351.50000, 1100.59998,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19353, 1164.35999, -1344.69995, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, 1155.83997, -1315.92004, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 1157.09497, -1334.83997, 1100.06995,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1157.00000, -1312.35498, 1101.19995,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1157.00000, -1312.35498, 1101.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1671, 1159.00000, -1308.50000, 1100.53003,   0.00000, 0.00000, 190.00000);
	CreateDynamicObject(3395, 1169.50000, -1298.75000, 1100.08997,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2788, 1186.80005, -1351.50000, 1100.59998,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2212, 1191.87000, -1350.34998, 1100.92004,   -25.50000, 23.50000, 70.00000);
	CreateDynamicObject(2788, 1192.90002, -1350.00000, 1100.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(932, 1168.40002, -1348.09998, 1100.07996,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(1704, 1162.09998, -1343.30005, 1100.08508,   0.00000, 0.00000, 230.00000);
	CreateDynamicObject(19383, 1156.34998, -1334.84998, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19399, 1156.34998, -1312.34998, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1523, 1177.22998, -1295.43506, 1100.06604,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 1166.73999, -1347.58105, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14532, 1159.90002, -1305.94995, 1101.06006,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, 1154.87000, -1331.28003, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19383, 1180.44995, -1294.68005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 1164.45105, -1301.04004, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1180.44995, -1352.57996, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1154.65002, -1331.40002, 1101.94995,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2788, 1191.40002, -1351.50000, 1100.59998,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19379, 1178.50000, -1352.48999, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1178.50000, -1294.70801, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1178.50000, -1352.48999, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1178.50000, -1294.70801, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19383, 1177.19995, -1294.68005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1177.19995, -1352.57996, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1189.00000, -1352.48999, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1189.00000, -1294.70801, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1999, 1191.50000, -1295.30005, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1189.00000, -1352.48999, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2010, 1163.50000, -1346.15002, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1189.00000, -1294.70801, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1721, 1190.00000, -1294.80005, 1100.07996,   0.00000, 0.00000, -100.00000);
	CreateDynamicObject(1523, 1180.42004, -1293.89001, 1100.06604,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1671, 1157.00000, -1308.50000, 1100.53003,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2788, 1182.50000, -1353.50000, 1100.59998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1798, 1173.50000, -1352.05005, 1100.08606,   0.00000, 0.00000, 990.00000);
	CreateDynamicObject(2163, 1153.83997, -1315.80005, 1101.94995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1153.61499, -1315.92004, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1186.80005, -1353.50000, 1100.59998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 1162.68298, -1301.04004, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 1164.35999, -1347.57996, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 1157.50000, -1306.91003, 1099.99500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2924, 1164.22998, -1299.59998, 1101.27002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 1193.00000, -1295.00000, 1100.07996,   0.00000, 0.00000, 100.00000);
	CreateDynamicObject(1798, 1171.19995, -1295.18005, 1100.08606,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1798, 1166.50000, -1349.80005, 1100.08606,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3386, 1167.50000, -1296.80005, 1100.08997,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19445, 1193.34998, -1352.57996, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1193.34998, -1294.56995, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1152.64294, -1331.28003, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2788, 1191.40002, -1353.50000, 1100.59998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1159.00000, -1303.50000, 1100.53003,   0.00000, 0.00000, -20.00000);
	CreateDynamicObject(2010, 1162.00000, -1300.30005, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1162.76294, -1299.52002, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2163, 1152.41003, -1331.40002, 1101.94995,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1997, 1181.09998, -1292.30005, 1100.08997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2208, 1157.50000, -1305.02502, 1099.99500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1184.00000, -1354.94995, 1100.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2212, 1182.75000, -1355.00000, 1100.92004,   -25.50000, 23.50000, 70.00000);
	CreateDynamicObject(2788, 1181.00000, -1354.94995, 1100.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2764, 1182.50000, -1355.00000, 1100.44995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1185.30005, -1354.94995, 1100.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1671, 1155.00000, -1308.50000, 1100.53003,   0.00000, 0.00000, 210.00000);
	CreateDynamicObject(2764, 1186.80005, -1355.00000, 1100.44995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 1153.15002, -1334.84998, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2354, 1187.00000, -1355.00000, 1100.92004,   -25.50000, 23.50000, 50.00000);
	CreateDynamicObject(19383, 1153.15002, -1312.34998, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1157.50000, -1342.85999, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1157.50000, -1304.33997, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2788, 1188.30005, -1354.94995, 1100.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1157.50000, -1342.85999, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1157.50000, -1304.33997, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2164, 1161.50000, -1347.44995, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1158.00000, -1344.00000, 1100.07996,   0.00000, 0.00000, 190.00000);
	CreateDynamicObject(2163, 1151.60999, -1315.80005, 1101.94995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1189.90002, -1354.94995, 1100.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19353, 1180.44995, -1291.47998, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1151.39001, -1315.92004, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 1151.43994, -1331.53503, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 1151.43994, -1315.66504, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1491, 1152.36694, -1312.35999, 1100.06995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1168.00000, -1352.48999, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1168.00000, -1294.70801, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1168.00000, -1352.48999, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1168.00000, -1294.70801, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19445, 1162.82996, -1349.34998, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2764, 1191.40002, -1355.00000, 1100.44995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 1177.19995, -1291.47998, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2208, 1154.75000, -1306.91003, 1099.99548,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1671, 1157.00000, -1303.50000, 1100.53003,   0.00000, 0.00000, -10.00000);
	CreateDynamicObject(19445, 1167.50000, -1294.68005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1798, 1173.50000, -1355.05005, 1100.08606,   0.00000, 0.00000, 990.00000);
	CreateDynamicObject(2788, 1182.50000, -1356.50000, 1100.59998,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2788, 1192.90002, -1354.94995, 1100.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2819, 1149.80005, -1322.50000, 1100.69995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2603, 1185.50000, -1290.69995, 1100.52002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2788, 1186.80005, -1356.50000, 1100.59998,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2200, 1150.42004, -1331.28003, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1671, 1153.00000, -1308.50000, 1100.53003,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2163, 1150.19995, -1331.40002, 1101.94995,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2164, 1182.00000, -1290.13000, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1185.30005, -1357.00000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3394, 1189.00000, -1290.69995, 1100.08997,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2010, 1176.50000, -1290.69995, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14401, 1149.25000, -1323.50000, 1100.38000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 1152.12000, -1337.30005, 1100.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19357, 1181.14795, -1357.15002, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1798, 1166.50000, -1353.00000, 1100.08606,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 1154.75000, -1305.02502, 1099.99548,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19383, 1178.81006, -1357.00000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 1185.30005, -1290.00000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19357, 1182.02002, -1357.31995, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1523, 1179.56250, -1357.19995, 1100.06604,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2165, 1157.00000, -1345.50000, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, 1178.81006, -1357.15002, 1104.32397,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2685, 1180.19995, -1357.43506, 1101.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19387, 1178.81006, -1357.31995, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2788, 1191.40002, -1356.50000, 1100.59998,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1806, 1158.00000, -1347.00000, 1100.07996,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(19357, 1176.43506, -1357.15002, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2518, 1182.66003, -1357.80005, 1100.30005,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1671, 1155.00000, -1303.50000, 1100.53003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1149.39001, -1315.80005, 1101.94995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2518, 1180.69995, -1357.89697, 1100.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1175.55005, -1290.00000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19357, 1175.59998, -1357.31995, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2331, 1173.50000, -1290.40002, 1100.34998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1149.16199, -1315.92004, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1157.93005, -1347.57996, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2010, 1192.69995, -1290.55005, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1152.25000, -1339.75806, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 1191.71997, -1357.00000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3388, 1167.50000, -1292.50000, 1100.08997,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19399, 1149.94995, -1312.34998, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 1149.93994, -1334.84998, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2289, 1157.50000, -1347.45996, 1102.40002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19353, 1191.71997, -1290.00000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2562, 1171.00000, -1356.42004, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19445, 1172.31995, -1357.00000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 1152.00000, -1306.91003, 1099.99500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1671, 1151.00000, -1308.50000, 1100.53003,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2204, 1152.44995, -1341.50000, 1100.08508,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1149.40002, -1335.00000, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1151.59998, -1340.19995, 1100.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19353, 1148.25000, -1331.53503, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 1148.25000, -1315.66504, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2846, 1147.34998, -1325.50000, 1100.70496,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2525, 1174.50000, -1358.15002, 1100.08862,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1149.00000, -1312.35498, 1101.19995,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1149.00000, -1312.35498, 1101.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2518, 1182.66003, -1359.30005, 1100.30005,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19447, 1178.50000, -1359.05005, 1100.00000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1147.00000, -1323.59998, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2333, 1172.00000, -1289.44995, 1100.08997,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19377, 1147.00000, -1323.59998, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1523, 1176.50000, -1358.93005, 1100.06604,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1169.40002, -1290.30005, 1100.07996,   0.00000, 0.00000, 190.00000);
	CreateDynamicObject(1671, 1153.00000, -1303.50000, 1100.53003,   0.00000, 0.00000, -30.00000);
	CreateDynamicObject(2208, 1152.00000, -1305.02502, 1099.99500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, 1175.00000, -1358.99902, 1101.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1798, 1166.50000, -1356.00000, 1100.08606,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 1146.55896, -1326.80798, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 1146.55896, -1320.38501, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2611, 1146.68506, -1328.00000, 1102.19995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2611, 1146.68506, -1319.00000, 1102.19995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 1146.55896, -1317.17505, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1671, 1149.00000, -1308.50000, 1100.53003,   0.00000, 0.00000, 200.00000);
	CreateDynamicObject(2164, 1154.50000, -1347.44995, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1491, 1147.47302, -1334.83997, 1100.06995,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19379, 1147.00000, -1333.23206, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1147.00000, -1313.96997, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1147.00000, -1333.23206, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1147.00000, -1313.96997, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2525, 1174.50000, -1359.84998, 1100.08862,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2518, 1182.66003, -1360.80005, 1100.30005,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2826, 1149.80005, -1341.30005, 1100.57996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2208, 1149.19995, -1306.91003, 1099.99548,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1176.50000, -1360.60901, 1100.06604,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1151.00000, -1303.50000, 1100.53003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1165.92004, -1290.00000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19383, 1146.72803, -1334.84998, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 1149.80005, -1342.00000, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 1162.82996, -1355.75000, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, 1175.00000, -1360.67798, 1101.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 1152.25000, -1346.18005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1153.13000, -1299.52002, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 1149.19995, -1305.02502, 1099.99548,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 1183.25000, -1362.05005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19387, 1181.56006, -1362.35596, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2525, 1174.50000, -1361.50000, 1100.08862,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1147.00000, -1308.50000, 1100.53003,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19377, 1178.50000, -1362.12000, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2010, 1151.69995, -1347.00000, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1162.69995, -1357.00000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 1178.50000, -1362.55005, 1100.00000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1523, 1176.50000, -1362.28796, 1100.06604,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 1145.25000, -1335.12500, 1101.75000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1671, 1149.00000, -1303.50000, 1100.53003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19383, 1143.32996, -1323.66077, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 1143.33997, -1324.40503, 1100.06995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 1173.91003, -1362.05005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 1175.14001, -1362.35596, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 1143.32996, -1320.44995, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 1143.32996, -1326.87195, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2373, 1183.29004, -1363.50000, 1100.00000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2208, 1146.44995, -1306.91003, 1099.99500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2184, 1148.59998, -1345.00000, 1100.08179,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2527, 1179.50000, -1363.90503, 1100.06995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1143.32996, -1314.03003, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1143.32996, -1333.29504, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1147.00000, -1342.85999, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1147.00000, -1304.33997, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2527, 1177.50000, -1363.90503, 1100.06995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1147.00000, -1342.85999, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1147.00000, -1304.33997, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2208, 1146.44995, -1305.02502, 1099.99500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1143.54004, -1312.34998, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 1143.51794, -1334.84998, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 1143.59998, -1335.59998, 1101.75000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1671, 1147.00000, -1303.50000, 1100.53003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14842, 1174.87500, -1364.00000, 1101.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2207, 1145.50000, -1305.01001, 1100.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1721, 1141.09998, -1324.50000, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1141.09998, -1321.90002, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1141.02734, -1323.02515, 1100.90405,   0.00000, 0.00000, -10.00000);
	CreateDynamicObject(1721, 1141.09998, -1327.09998, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2527, 1179.64197, -1365.34998, 1100.06995,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1141.09998, -1319.19995, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1147.00000, -1345.50000, 1100.84998,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(19445, 1148.29797, -1347.57996, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2527, 1177.64197, -1365.34998, 1100.06995,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1141.09998, -1329.69995, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2637, 1140.50000, -1322.80005, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2637, 1140.50000, -1325.40002, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2270, 1147.50000, -1347.00000, 1102.30005,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2637, 1140.50000, -1320.19995, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1147.50000, -1347.19995, 1100.08728,   0.00000, 0.00000, 170.00000);
	CreateDynamicObject(2637, 1140.50000, -1328.00000, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1140.48413, -1328.18823, 1100.90405,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1141.09998, -1332.30005, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1178.50000, -1366.05005, 1100.00000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2637, 1140.50000, -1317.50000, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1139.97998, -1322.95850, 1100.90405,   0.00000, 0.00000, 10.00000);
	CreateDynamicObject(2894, 1139.97144, -1325.62280, 1100.90405,   0.00000, 0.00000, -10.00000);
	CreateDynamicObject(2637, 1140.50000, -1330.59998, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1143.69995, -1305.90002, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1140.97961, -1333.35425, 1100.90405,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1139.84998, -1324.50000, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1139.84998, -1321.90002, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14842, 1175.19995, -1365.93506, 1101.80005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1139.84998, -1327.09998, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1140.06055, -1317.71411, 1100.90405,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(1721, 1141.09998, -1334.65002, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1139.84998, -1319.15015, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2637, 1140.50000, -1333.09998, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1139.84998, -1329.69995, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2297, 1143.75000, -1342.50000, 1100.08630,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(2373, 1182.54004, -1366.94995, 1100.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19449, 1178.50000, -1366.90002, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1139.84998, -1332.30005, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1143.32996, -1304.40002, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1143.32996, -1342.92798, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1139.84998, -1334.65002, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1137.94995, -1324.50000, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1137.94995, -1321.90002, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1137.94995, -1327.09998, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1137.94995, -1319.15015, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19439, 1138.89502, -1313.13794, 1100.08496,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(2894, 1137.69556, -1325.58594, 1100.90405,   0.00000, 0.00000, 10.00000);
	CreateDynamicObject(2894, 1137.75208, -1320.46704, 1100.90405,   0.00000, 0.00000, -10.00000);
	CreateDynamicObject(1721, 1137.94995, -1329.69995, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1137.88135, -1317.66675, 1100.90405,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1144.00000, -1347.00000, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2637, 1137.25000, -1322.80005, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2637, 1137.25000, -1325.40002, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19439, 1138.40002, -1313.23999, 1100.12000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2637, 1137.25000, -1320.19995, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1137.94995, -1332.30005, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2637, 1137.25000, -1328.00000, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19439, 1138.09998, -1313.23999, 1100.28503,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2637, 1137.25000, -1317.50000, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2169, 1137.75000, -1314.40002, 1100.88501,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2894, 1136.78601, -1322.97217, 1100.90405,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2637, 1137.25000, -1330.59998, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1143.50000, -1299.52002, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1137.59875, -1314.39270, 1101.67346,   0.00000, 0.00000, 190.00000);
	CreateDynamicObject(19439, 1137.80005, -1313.23999, 1100.45996,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2894, 1137.16724, -1330.75232, 1100.90405,   0.00000, 0.00000, -10.00000);
	CreateDynamicObject(1721, 1137.94995, -1334.65002, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1136.57996, -1324.50000, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1136.57996, -1321.90002, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1136.50000, -1323.59998, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1721, 1136.57996, -1327.09998, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1136.50000, -1323.59998, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19439, 1137.21997, -1314.80005, 1100.00000,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(2894, 1136.73987, -1317.64197, 1100.90405,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1136.57996, -1319.15015, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19439, 1137.50000, -1313.23999, 1100.63000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2637, 1137.25000, -1333.09998, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19439, 1137.22998, -1314.10498, 1100.80005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1721, 1136.57996, -1329.69995, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2616, 1137.50000, -1312.47998, 1102.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19426, 1142.68005, -1347.57996, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1137.25000, -1313.00000, 1100.87500,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19439, 1137.22998, -1312.50000, 1100.80005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1721, 1136.57996, -1332.30005, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1137.09998, -1334.84998, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1136.50000, -1333.23206, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1136.50000, -1313.96997, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1136.50000, -1333.23206, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1136.50000, -1313.96997, 1103.65002,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1721, 1136.57996, -1334.65002, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1134.69995, -1324.50000, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1134.69995, -1321.90002, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1134.69995, -1327.09998, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1134.69995, -1319.15015, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19439, 1135.55798, -1313.13794, 1100.08496,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(1721, 1134.69995, -1329.69995, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1134.62219, -1317.69482, 1100.90405,   0.00000, 0.00000, -10.00000);
	CreateDynamicObject(2894, 1134.05640, -1325.65845, 1100.90405,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2637, 1134.00000, -1322.80005, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2637, 1134.00000, -1325.40002, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14532, 1134.80005, -1314.50000, 1101.06995,   0.00000, 0.00000, 190.00000);
	CreateDynamicObject(1721, 1134.69995, -1332.30005, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2637, 1134.00000, -1320.19995, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1133.94727, -1320.30847, 1100.90405,   0.00000, 0.00000, -10.00000);
	CreateDynamicObject(2637, 1134.00000, -1328.00000, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2637, 1134.00000, -1317.50000, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2637, 1134.00000, -1330.59998, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1134.69995, -1334.65002, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1133.30005, -1324.50000, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1133.30005, -1321.90002, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1133.46155, -1328.31274, 1100.90405,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1133.30005, -1327.09998, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1133.30005, -1319.15015, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2637, 1134.00000, -1333.09998, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1133.30005, -1329.69995, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1133.91003, -1312.34998, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1133.30005, -1332.30005, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1133.30005, -1334.65002, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1131.30005, -1326.88196, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 1131.30005, -1317.25000, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 1131.30005, -1333.30005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19426, 1131.47998, -1334.84998, 1101.82996,   0.00000, 0.00000, 90.00000);

}

public AddTolls() // Needs to be called in the OnGameModeInit function!
{ // Thanks to Nexus for mapping!
	/* Prison   */
  CreateObject(987, 141.79900, 1953.61902, 18.22900,   0.00000, 0.00000, 0.00000);
  CreateObject(987, 118.39000, 1952.32996, 17.08000,   0.00000, -3.00000, 6.67900);
	new prison;
	prison = CreateDynamicObjectEx(19367,134.448,1912.294,19.616,0.000,0.499,90.399,1000.000,1000.000);
	SetDynamicObjectMaterialText(prison, 0, "MENT B", 90, "Ariel", 40, 1, -16711680, 0, 1);
	prison = CreateDynamicObjectEx(19367,161.174,2013.529,21.860,0.000,0.499,178.699,1000.000,1000.000);
	SetDynamicObjectMaterialText(prison, 0, "DEPARTMENT", 100, "Ariel", 30, 1, -16711680, 0, 1);
	prison = CreateDynamicObjectEx(19367,181.485,1906.523,18.183,0.000,0.499,0.199,1000.000,1000.000);
	SetDynamicObjectMaterialText(prison, 0, "DEPART", 90, "Ariel", 40, 1, -16711680, 0, 1);
	prison = CreateDynamicObjectEx(19367,181.479,1908.244,18.183,0.000,0.499,0.199,1000.000,1000.000);
	SetDynamicObjectMaterialText(prison, 0, "MENT B", 90, "Ariel", 40, 1, -16711680, 0, 1);
	prison = CreateDynamicObjectEx(19367,181.479,1908.244,18.183,0.000,0.499,0.199,1000.000,1000.000);
	SetDynamicObjectMaterialText(prison, 0, "MENT C", 90, "Ariel", 40, 1, -16711680, 0, 1);
	prison = CreateDynamicObjectEx(19367,207.217,1920.692,17.824,0.000,0.499,-89.900,1000.000,1000.000);
	SetDynamicObjectMaterialText(prison, 0, "DEPART", 90, "Ariel", 40, 1, -16711680, 0, 1);
	prison = CreateDynamicObjectEx(19367,208.917,1920.695,17.824,0.000,0.499,-89.900,1000.000,1000.000);
	SetDynamicObjectMaterialText(prison, 0, "MENT A", 90, "Ariel", 40, 1, -16711680, 0, 1);
	prison = CreateDynamicObjectEx(19367,136.168,1912.306,19.616,0.000,0.499,90.399,1000.000,1000.000);
	SetDynamicObjectMaterialText(prison, 0, "DEPART", 90, "Ariel", 40, 1, -16711680, 0, 1);
	prison = CreateDynamicObjectEx(11453,208.077,1920.610,17.838,0.000,0.000,360.000,1000.000,1000.000);
	SetDynamicObjectMaterial(prison, 0, 10101, "2notherbuildsfe", "ferry_build14", 0);
	SetDynamicObjectMaterial(prison, 1, 10101, "2notherbuildsfe", "ferry_build14", 0);
	prison = CreateDynamicObjectEx(11453,181.559,1907.270,18.219,0.000,0.000,90.000,1000.000,1000.000);
	SetDynamicObjectMaterial(prison, 0, 10101, "2notherbuildsfe", "ferry_build14", 0);
	SetDynamicObjectMaterial(prison, 1, 10101, "2notherbuildsfe", "ferry_build14", 0);
	prison = CreateDynamicObjectEx(11453,269.869,1756.550,18.079,0.000,0.000,270.000,1000.000,1000.000);
	SetDynamicObjectMaterial(prison, 0, 10101, "2notherbuildsfe", "ferry_build14", 0);
	SetDynamicObjectMaterial(prison, 1, 10101, "2notherbuildsfe", "ferry_build14", 0);
	prison = CreateDynamicObjectEx(11453,264.519,1965.770,17.959,0.000,0.000,90.000,1000.000,1000.000);
	SetDynamicObjectMaterial(prison, 0, 10101, "2notherbuildsfe", "ferry_build14", 0);
	SetDynamicObjectMaterial(prison, 1, 10101, "2notherbuildsfe", "ferry_build14", 0);
	prison = CreateDynamicObjectEx(11453,135.199,1912.380,19.619,0.000,0.000,180.000,1000.000,1000.000);
	SetDynamicObjectMaterial(prison, 0, 10101, "2notherbuildsfe", "ferry_build14", 0);
	SetDynamicObjectMaterial(prison, 1, 10101, "2notherbuildsfe", "ferry_build14", 0);
	SetDynamicObjectMaterial(prison, 2, 10101, "2notherbuildsfe", "ferry_build14", 0);
	prison = CreateDynamicObjectEx(11453,312.100,1794.760,18.000,0.000,0.000,180.000,1000.000,1000.000);
	SetDynamicObjectMaterial(prison, 0, 10101, "2notherbuildsfe", "ferry_build14", 0);
	SetDynamicObjectMaterial(prison, 1, 10101, "2notherbuildsfe", "ferry_build14", 0);
	prison = CreateDynamicObjectEx(19367,161.142,2012.159,21.860,0.000,0.499,178.699,1000.000,1000.000);
	SetDynamicObjectMaterialText(prison, 0, "OF", 100, "Ariel", 30, 1, -16711680, 0, 1);
	prison = CreateDynamicObjectEx(19367,161.107,2010.628,21.860,0.000,0.499,178.699,1000.000,1000.000);
	SetDynamicObjectMaterialText(prison, 0, "CORRECTIONS", 100, "Ariel", 30, 1, -16711680, 0, 1);
	prison = CreateDynamicObjectEx(19367,264.453,1964.782,17.918,0.000,0.499,0.199,1000.000,1000.000);
	SetDynamicObjectMaterialText(prison, 0, "DEPART", 90, "Ariel", 40, 1, -16711680, 0, 1);
	prison = CreateDynamicObjectEx(19367,264.447,1966.442,17.918,0.000,0.499,0.199,1000.000,1000.000);
	SetDynamicObjectMaterialText(prison, 0, "MENT A", 90, "Ariel", 40, 1, -16711680, 0, 1);
	prison = CreateDynamicObjectEx(19367,312.991,1794.671,17.959,0.000,0.499,89.799,1000.000,1000.000);
	SetDynamicObjectMaterialText(prison, 0, "DEPART", 90, "Ariel", 40, 1, -16711680, 0, 1);
	prison = CreateDynamicObjectEx(19367,311.291,1794.677,17.959,0.000,0.499,89.799,1000.000,1000.000);
	SetDynamicObjectMaterialText(prison, 0, "MENT C", 90, "Ariel", 40, 1, -16711680, 0, 1);
	prison = CreateDynamicObjectEx(19367,161.225,2015.806,21.860,0.000,0.499,178.699,1000.000,1000.000);
	SetDynamicObjectMaterialText(prison, 0, "SAN ANDREAS", 100, "Ariel", 30, 1, -16711680, 0, 1);
	prison = CreateDynamicObjectEx(737,294.130,1859.579,16.930,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(737,293.477,1833.561,16.930,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(817,288.410,-220.169,349.089,0.000,0.000,283.739,1000.000,1000.000);
	prison = CreateDynamicObjectEx(817,188.407,-220.167,349.093,0.000,0.000,283.746,1000.000,1000.000);
	prison = CreateDynamicObjectEx(879,261.720,1889.000,16.870,0.000,0.000,199.550,1000.000,1000.000);
	prison = CreateDynamicObjectEx(879,273.769,1881.489,16.620,0.000,0.000,337.470,1000.000,1000.000);
	prison = CreateDynamicObjectEx(879,268.500,1874.510,16.620,0.000,0.000,340.119,1000.000,1000.000);
	prison = CreateDynamicObjectEx(879,275.880,1877.599,16.620,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(880,265.579,1884.979,16.629,0.000,0.000,268.399,1000.000,1000.000);
	prison = CreateDynamicObjectEx(880,267.269,1885.449,16.670,0.000,0.000,28.319,1000.000,1000.000);
	prison = CreateDynamicObjectEx(880,268.570,1883.430,17.750,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(880,244.990,1862.579,19.780,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(947,223.960,1901.369,18.809,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(947,224.369,1878.930,18.809,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(947,217.529,1791.719,18.959,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(969,209.947,1876.103,12.307,0.000,0.000,360.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(969,300.093,1852.935,6.998,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(976,254.454,1804.571,6.588,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(984,289.679,-218.839,352.850,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(987,154.080,1977.300,18.229,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(987,154.089,1965.339,18.229,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(987,154.059,1953.410,18.229,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(987,142.699,1953.619,18.229,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(987,154.059,1941.459,17.920,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(987,161.190,1934.089,17.540,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(987,115.730,1952.170,17.260,0.000,-3.000,6.679,1000.000,1000.000);
	prison = CreateDynamicObjectEx(987,154.029,1929.569,17.909,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(987,103.629,1952.170,17.059,0.000,-1.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(987,91.580,1952.239,17.030,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(987,118.069,1912.420,18.370,0.000,0.000,203.690,1000.000,1000.000);
	prison = CreateDynamicObjectEx(987,273.500,1847.890,16.649,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(987,285.679,1843.680,16.649,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(987,285.519,1831.747,16.649,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(987,201.850,1798.560,18.950,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(987,201.850,1798.560,16.629,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(987,285.190,1815.369,16.649,0.000,0.000,273.320,1000.000,1000.000);
	prison = CreateDynamicObjectEx(987,285.779,1803.349,16.620,0.000,0.000,203.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(987,309.449,1793.537,16.579,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(987,300.059,1786.390,16.620,0.000,0.000,131.369,1000.000,1000.000);
	prison = CreateDynamicObjectEx(987,297.480,1740.079,19.129,0.000,0.000,203.009,1000.000,1000.000);
	prison = CreateDynamicObjectEx(987,297.480,1740.079,16.629,0.000,0.000,203.009,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1216,154.315,-179.719,342.617,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1216,152.147,-179.695,342.617,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1216,149.856,-179.692,342.617,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1216,147.657,-179.688,342.617,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1216,166.242,1997.939,18.777,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1216,189.600,1910.699,17.329,0.000,0.000,125.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1216,191.080,1908.609,17.329,0.000,0.000,125.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1216,192.690,1906.359,17.350,0.000,0.000,125.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1216,194.229,1904.050,17.329,0.000,0.000,125.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1216,195.649,1901.890,17.329,0.000,0.000,125.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1271,236.229,1912.520,16.959,0.000,0.000,22.579,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1271,236.389,1911.229,16.959,0.000,0.000,351.079,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1280,196.389,1897.109,17.040,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1280,196.240,1892.479,17.040,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1290,308.029,1884.949,22.629,0.000,0.000,359.059,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1290,307.959,1873.589,22.629,0.000,0.000,359.059,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1290,308.309,1862.880,22.629,0.000,0.000,359.059,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1290,308.179,1850.819,22.629,0.000,0.000,359.059,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1290,308.204,1835.395,22.700,0.000,0.000,359.059,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1368,150.948,-205.413,342.615,0.000,0.000,90.994,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1368,150.877,-201.943,342.615,0.000,0.000,90.988,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1368,148.893,-205.499,342.615,0.000,0.000,90.988,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1368,148.834,-201.989,342.615,0.000,0.000,90.988,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1368,146.668,-205.499,342.615,0.000,0.000,90.988,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1368,146.589,-201.949,342.615,0.000,0.000,90.988,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1383,162.259,1932.780,0.970,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1383,233.440,1934.800,0.930,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1383,267.088,1895.151,0.970,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1383,166.119,1849.979,0.990,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1383,113.502,1814.396,0.990,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1383,262.109,1807.569,0.930,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1491,296.450,-215.889,348.269,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1500,238.470,1873.507,10.455,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1500,268.999,1890.696,-13.822,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1508,267.193,1875.267,9.267,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1508,267.193,1864.060,9.267,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1523,186.796,-185.332,348.254,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1533,283.940,-226.029,348.269,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1533,304.500,-209.479,348.260,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1533,191.512,-205.022,348.272,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1533,191.514,-203.521,348.272,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1533,145.299,-206.774,341.920,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1533,143.025,-194.750,341.920,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1533,142.994,-194.589,341.915,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1533,143.041,-193.272,341.920,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1533,206.179,1798.479,16.620,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1533,207.720,1798.760,16.620,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1537,283.950,-223.020,348.269,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1537,209.429,1960.380,30.579,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1537,138.130,1923.410,18.329,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1569,291.829,-206.529,348.269,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1569,291.799,-206.479,348.269,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1569,291.820,-203.529,348.269,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1580,312.329,1930.790,19.290,0.000,90.000,266.010,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1580,312.320,1930.689,19.190,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1616,155.132,-179.651,345.557,0.000,0.000,55.884,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1671,293.670,-226.429,348.739,0.000,0.000,211.740,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1671,181.341,-197.082,348.737,0.000,0.000,190.733,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1671,181.719,-193.070,348.737,0.000,0.000,284.233,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1671,185.258,-182.227,348.737,0.000,0.000,269.989,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1671,181.531,-190.038,348.737,0.000,0.000,272.982,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1671,185.017,-180.309,348.737,0.000,0.000,293.247,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1671,181.436,-182.397,348.737,0.000,0.000,97.747,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1671,181.422,-180.275,348.737,0.000,0.000,79.740,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1713,287.779,-227.429,348.269,0.000,0.000,180.990,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1800,173.233,-207.842,342.965,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1800,173.233,-207.842,341.906,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1800,173.235,-182.997,342.983,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1800,173.235,-182.997,341.920,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1800,165.502,-207.829,342.942,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1800,165.503,-207.829,341.906,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1800,164.023,-207.799,342.924,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1800,164.024,-207.800,341.903,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1800,168.769,-182.964,342.946,0.750,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1800,168.769,-182.965,341.920,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1800,163.944,-182.986,342.919,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1800,163.945,-182.987,341.905,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1800,156.080,-207.680,342.944,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1800,156.080,-207.681,341.920,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1800,159.182,-182.958,342.938,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1800,159.183,-182.958,341.903,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1810,171.063,-202.553,341.920,0.000,0.000,331.748,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1810,170.588,-204.454,341.920,0.000,0.000,194.750,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1810,168.515,-202.219,341.920,0.000,0.000,26.493,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1810,168.121,-204.044,341.920,0.000,0.000,151.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1810,170.217,-182.997,341.920,0.000,0.000,123.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1810,170.502,-181.794,341.920,0.000,0.000,53.492,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1810,161.651,-202.322,341.920,0.000,0.000,331.743,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1810,161.125,-204.102,341.920,0.000,0.000,194.749,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1810,165.937,-183.311,341.920,0.000,0.000,93.742,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1810,165.786,-182.207,341.920,0.000,0.000,53.492,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1810,164.140,-182.772,341.920,0.000,0.000,272.490,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1810,158.900,-202.075,341.920,0.000,0.000,26.989,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1810,158.528,-203.575,341.920,0.000,0.000,157.493,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1810,160.973,-182.368,341.920,0.000,0.000,92.990,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1810,156.055,-182.727,341.920,0.000,0.000,92.988,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1810,155.983,-181.785,341.920,0.000,0.000,92.988,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1812,170.346,-202.274,345.924,0.000,0.000,179.241,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1812,172.226,-181.990,345.924,0.000,0.000,90.236,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1812,165.577,-202.321,345.924,0.000,0.000,180.741,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1812,167.510,-182.008,345.924,0.000,0.000,90.236,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1812,160.773,-202.241,345.924,0.000,0.000,180.741,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1812,162.732,-181.931,345.924,0.000,0.000,90.236,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1812,156.061,-202.200,345.907,0.000,0.000,179.991,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1812,158.001,-181.916,345.924,0.000,0.000,90.236,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1812,151.323,-202.152,345.905,0.000,0.000,180.741,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1812,153.263,-181.953,345.924,0.000,0.000,90.236,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1812,146.511,-202.113,345.915,0.000,0.000,180.741,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1812,148.523,-182.047,345.924,0.000,0.000,90.230,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1850,233.949,1917.160,16.479,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1968,158.369,-192.860,342.438,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1968,158.387,-190.086,342.438,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1968,155.043,-192.866,342.438,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1968,155.029,-190.168,342.438,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1968,151.295,-192.872,342.438,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1968,151.374,-190.220,342.438,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1968,192.759,1927.410,17.149,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1968,196.500,1927.420,17.149,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1968,192.589,1924.949,17.149,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1968,200.149,1927.430,17.149,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1968,196.539,1925.079,17.149,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1968,200.130,1925.060,17.149,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1968,201.960,1913.130,17.180,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1968,205.100,1913.089,17.180,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1968,201.979,1911.199,17.180,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1968,205.009,1911.250,17.180,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1968,201.889,1909.319,17.180,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1968,205.020,1909.310,17.180,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1969,300.540,-217.839,348.869,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1969,300.549,-215.960,348.869,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1969,300.540,-214.080,348.869,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1969,300.480,-212.309,348.869,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1969,143.686,-183.350,342.433,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1969,143.691,-181.800,342.433,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1969,143.683,-180.215,342.433,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1987,236.350,1912.599,17.860,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(1988,236.350,1911.609,17.860,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2165,292.540,-225.399,348.480,0.000,0.000,33.750,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2183,182.564,-179.830,348.277,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2198,180.517,-195.668,348.277,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2200,296.899,-226.970,348.260,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2362,231.940,1913.060,17.479,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2387,233.990,1914.280,16.629,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2445,154.468,-183.972,341.925,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2445,153.470,-183.972,341.925,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2445,152.472,-183.972,341.925,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2445,151.475,-183.970,341.925,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2445,150.477,-183.969,341.925,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2445,149.479,-183.970,341.925,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2445,148.484,-183.969,341.925,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2504,234.589,1916.780,17.860,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2504,234.970,1916.790,17.860,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2513,233.190,1917.199,17.790,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2513,234.029,1917.219,17.790,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2521,170.270,-206.200,341.902,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2521,169.073,-206.292,341.902,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2521,169.087,-204.511,345.916,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2521,164.300,-204.578,345.916,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2521,170.544,-179.931,341.920,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2521,160.769,-206.250,341.902,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2521,159.543,-206.103,341.902,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2521,159.537,-204.309,345.916,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2521,165.726,-179.916,341.920,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2521,161.246,-179.915,341.920,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2521,154.770,-204.456,345.916,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2521,156.343,-179.836,341.920,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2521,150.008,-204.364,345.916,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2583,236.550,1914.329,17.469,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2596,154.957,-203.696,344.506,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2620,236.270,1915.819,18.209,0.000,0.000,35.979,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2628,205.860,1897.219,16.610,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2628,206.009,1893.089,16.639,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2629,203.460,1897.160,16.620,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2629,203.419,1893.140,16.620,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2629,240.410,1788.869,16.729,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2686,172.139,-184.289,344.940,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2686,167.309,-184.309,344.940,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2686,162.600,-184.289,344.940,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2686,157.919,-184.279,344.940,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2686,172.240,-200.309,344.940,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2686,167.369,-200.289,344.940,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2686,162.600,-200.240,344.940,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2686,157.669,-200.300,344.940,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2686,171.539,-184.330,348.989,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2686,167.380,-184.270,348.989,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2686,162.619,-184.300,348.989,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2686,157.750,-184.289,348.989,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2686,153.020,-184.350,348.989,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2686,148.250,-184.360,348.989,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2686,171.440,-200.309,349.049,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2686,167.320,-200.289,349.049,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2686,162.520,-200.240,349.049,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2686,157.800,-200.300,349.049,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2686,153.039,-200.309,349.049,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2686,148.110,-200.289,349.049,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2686,1117.670,325.910,585.849,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2686,1119.130,330.899,585.849,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2747,169.662,-203.386,342.257,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2747,160.117,-203.049,342.253,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2765,291.029,-225.770,352.630,340.489,0.000,55.680,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2765,292.200,-226.759,352.369,269.250,0.000,55.680,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2911,179.404,-195.134,349.278,0.000,90.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2913,202.970,1897.640,17.540,90.000,90.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2913,200.330,1892.630,16.819,90.000,90.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2913,202.929,1892.560,17.540,90.000,90.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2913,234.720,1788.579,16.989,0.000,90.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2913,239.979,1789.390,17.760,0.000,90.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2915,201.429,1898.319,16.719,0.000,0.000,342.130,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2915,199.600,1897.630,16.750,0.000,0.000,28.319,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2915,238.759,1791.890,16.860,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2930,293.281,-218.648,350.842,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2930,300.408,-209.587,350.901,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2933,300.380,-206.869,352.619,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2933,300.399,-205.190,349.220,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2990,269.970,1847.410,19.159,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(2990,289.089,1799.255,19.059,0.000,0.000,130.330,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3069,2810.709,-2388.072,12.599,-22.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3069,2810.709,-2438.072,12.599,-22.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3279,251.320,1938.596,16.510,0.000,0.000,60.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3279,292.661,1882.026,16.489,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3279,256.869,1841.050,16.489,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3279,209.949,1810.589,16.489,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3819,224.580,1906.650,17.469,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3819,233.949,1897.359,17.649,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3819,234.289,1884.189,17.479,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3819,225.020,1871.410,17.520,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3819,236.550,1747.280,17.459,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3819,257.899,1747.170,17.459,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3858,179.376,-192.214,348.968,0.000,0.000,314.994,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3858,179.345,-188.294,342.248,0.000,0.000,314.817,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3859,179.379,-182.306,351.962,0.000,0.000,17.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3864,194.089,1924.609,22.600,0.000,330.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3864,208.190,1923.229,22.590,0.000,330.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3864,262.380,1979.290,22.600,0.000,330.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3864,221.490,1923.089,22.469,0.000,330.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3864,262.329,1965.920,22.600,0.000,330.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3864,128.350,1910.119,22.600,0.000,330.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3872,128.339,1916.300,19.959,0.000,330.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3872,268.630,1979.270,19.959,0.000,330.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3872,268.540,1965.959,19.959,0.000,330.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3934,295.429,2050.520,24.040,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3998,202.940,1980.729,17.989,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3998,214.929,2032.229,14.720,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3998,204.020,1974.630,19.819,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3998,201.449,1946.459,17.969,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3998,240.419,2032.339,14.720,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3998,239.460,1989.969,22.860,0.000,0.000,179.050,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3998,241.190,1974.209,22.829,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3998,216.710,1944.160,22.829,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3998,157.910,1915.709,22.870,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3998,145.320,1886.939,18.620,0.000,0.000,180.389,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3998,126.910,1891.079,19.219,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3998,126.830,1889.219,24.680,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3998,143.720,1868.689,22.500,0.000,0.000,179.240,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3998,126.980,1857.400,24.520,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3998,303.920,1771.469,22.620,0.000,-0.300,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(3998,293.089,1748.680,17.590,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(4058,167.679,1958.969,-12.039,0.300,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(4058,114.360,1927.439,-12.050,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(4058,217.110,1925.260,-13.779,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(4058,114.279,1893.349,-12.060,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(4058,222.529,1881.410,-13.779,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(4058,114.339,1859.280,-12.050,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(4058,165.899,1836.189,-12.359,0.000,-1.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(4058,114.410,1836.189,-12.060,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(4058,217.360,1836.209,-13.569,0.000,-2.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(4058,221.699,1829.859,-13.789,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(4058,232.309,1781.619,-13.850,0.000,-1.100,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(4106,144.084,-198.171,344.386,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(4106,142.249,-186.437,344.386,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(5166,2829.953,-2479.570,3.765,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(5309,177.130,1838.130,21.280,0.000,1.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(5309,208.860,1836.300,21.049,0.000,0.500,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(6959,1120.209,-1607.569,12.729,-0.540,-0.150,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(6959,1129.989,-1643.060,12.779,0.000,0.019,0.019,1000.000,1000.000);
	prison = CreateDynamicObjectEx(6976,269.880,2038.630,15.340,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7019,277.279,2062.909,20.239,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,151.900,-248.743,344.213,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,151.591,-252.367,348.227,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,147.422,-252.775,348.074,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,147.426,-252.797,344.136,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,144.389,-206.590,359.902,0.000,270.000,179.994,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,142.654,-252.767,348.115,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,142.654,-252.767,344.136,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,144.393,-222.528,398.083,0.000,270.000,179.994,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,137.887,-252.782,348.109,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,137.888,-252.782,344.174,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,133.122,-252.781,348.094,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,133.120,-252.801,344.174,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,128.348,-252.792,348.133,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,157.078,-127.072,344.213,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,151.903,-132.109,352.293,0.000,0.000,90.016,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,121.886,-222.488,352.295,0.000,0.000,179.994,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,151.883,-129.122,348.294,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,123.589,-252.851,348.153,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,124.748,-267.880,344.213,0.000,0.000,91.241,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,121.907,-182.617,327.737,270.000,0.000,179.994,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,121.907,-178.434,327.737,270.000,0.000,179.994,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,121.921,-169.950,344.213,0.000,0.000,179.994,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,121.572,-161.815,348.126,0.000,0.000,179.994,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,117.407,-161.817,348.070,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,117.409,-161.798,344.213,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,112.632,-161.817,348.128,0.000,0.000,179.994,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,112.632,-161.791,344.213,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,107.863,-161.819,348.105,0.000,0.000,179.994,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,107.865,-161.792,344.213,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,103.098,-161.804,348.142,0.000,0.000,179.994,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,103.098,-161.796,344.054,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7022,98.329,-161.809,348.166,0.000,0.000,179.994,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7090,265.075,2029.837,25.879,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7191,174.136,-222.190,347.966,0.000,179.994,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7191,186.813,-164.873,352.740,180.000,180.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7191,186.803,-164.865,352.754,179.994,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7191,186.811,-163.213,349.918,179.994,179.994,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7191,186.804,-163.216,349.948,180.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7191,151.803,-205.060,347.869,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7191,151.395,-206.106,349.986,0.000,90.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7191,151.396,-206.115,345.815,0.000,90.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7191,151.396,-202.143,349.986,0.000,90.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7191,151.396,-202.156,345.819,0.000,90.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7191,152.060,-182.450,345.819,0.000,90.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7191,151.990,-178.487,345.819,0.000,90.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7419,1093.530,-1626.589,6.070,0.000,0.000,179.850,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7921,159.539,1925.729,22.549,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8149,321.000,2015.319,19.629,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8149,320.959,1864.800,19.629,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8150,195.460,2031.140,19.790,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8150,195.429,2031.099,24.020,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8150,258.140,2093.830,19.809,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8150,258.140,2093.850,24.010,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8152,186.510,1877.787,19.719,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8154,263.040,1954.969,19.649,0.000,0.000,-120.620,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8154,133.240,1825.430,19.920,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8154,253.669,1771.180,19.430,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8154,243.842,1762.328,19.670,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8168,151.399,1980.989,20.040,-2.000,0.000,287.070,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8168,234.490,1914.180,18.430,0.000,0.000,286.329,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8168,282.172,1829.204,18.520,0.000,0.000,16.500,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8169,253.100,1848.160,16.620,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8169,250.550,1843.150,16.620,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8176,286.619,-217.289,353.880,90.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8176,306.059,-182.809,349.779,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8176,306.420,-182.830,352.630,0.000,0.000,179.990,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8176,306.519,-182.809,346.929,0.000,0.000,179.990,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8176,329.429,-203.740,349.799,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8176,329.429,-203.740,346.950,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8176,329.429,-203.740,352.649,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8176,336.760,-244.339,349.690,180.000,180.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8176,336.410,-244.339,355.399,180.000,180.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8176,336.790,-244.339,352.540,180.000,180.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8209,91.250,1902.300,19.799,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8209,225.149,1798.380,19.790,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8210,188.149,1969.150,19.149,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8210,181.740,1941.160,19.149,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8210,188.960,1933.859,19.149,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8210,285.570,1882.540,19.549,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8310,1138.160,-1637.150,22.000,0.000,0.000,18.200,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8615,173.171,-188.420,344.189,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8659,300.500,-226.300,348.350,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(8659,300.540,-218.320,353.179,180.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(9131,285.290,1826.530,16.579,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(9131,285.420,1815.540,16.899,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(9819,180.747,-191.068,348.829,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(10183,183.770,1972.109,18.469,0.000,0.000,315.399,1000.000,1000.000);
	prison = CreateDynamicObjectEx(10183,158.259,1961.520,18.360,0.000,0.000,135.470,1000.000,1000.000);
	prison = CreateDynamicObjectEx(10183,183.860,1962.150,18.469,0.000,0.000,315.399,1000.000,1000.000);
	prison = CreateDynamicObjectEx(10183,316.260,2002.729,16.649,0.000,0.000,315.399,1000.000,1000.000);
	prison = CreateDynamicObjectEx(10183,316.200,1961.939,16.649,0.000,0.000,315.399,1000.000,1000.000);
	prison = CreateDynamicObjectEx(10183,147.500,1841.599,16.649,0.000,0.000,44.919,1000.000,1000.000);
	prison = CreateDynamicObjectEx(10402,174.173,-191.083,347.592,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(10402,174.173,-191.083,351.105,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(11474,232.330,1912.189,18.510,0.460,2.960,97.449,1000.000,1000.000);
	prison = CreateDynamicObjectEx(14389,288.670,-181.820,351.519,0.000,0.000,179.990,1000.000,1000.000);
	prison = CreateDynamicObjectEx(14401,201.586,-173.749,348.602,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(14408,169.453,-193.055,351.264,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(14409,189.204,-196.222,345.084,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(14412,327.859,-207.820,353.440,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(14437,294.040,-218.830,350.260,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(14437,172.049,-200.447,343.912,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(14437,171.449,-200.457,347.911,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(14437,167.275,-200.438,347.896,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(14437,167.275,-200.438,343.920,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(14437,162.509,-200.429,347.901,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(14437,162.509,-200.429,343.920,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(14437,157.742,-200.469,347.913,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(14437,157.737,-200.447,343.918,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(14437,152.973,-200.475,347.913,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(14437,148.201,-200.480,347.913,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(14454,137.412,-216.727,339.880,0.000,0.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(14782,190.923,-182.924,349.293,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(14791,202.399,1884.099,18.239,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(14855,293.519,-229.929,352.760,0.000,0.000,182.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(16010,178.750,2014.219,8.159,2.000,2.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(16010,184.119,2013.300,21.510,0.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(16010,182.039,2015.140,7.929,-2.000,0.000,180.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(16010,244.899,2014.479,20.579,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(16400,316.137,1931.179,16.620,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(16655,301.260,-200.429,350.579,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(16655,301.260,-200.429,353.179,0.000,0.000,270.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(18765,1134.839,-1623.859,10.479,-0.560,-2.000,-0.500,1000.000,1000.000);
	prison = CreateDynamicObjectEx(18765,1135.099,-1593.880,10.180,-0.560,-2.000,-0.500,1000.000,1000.000);
	prison = CreateDynamicObjectEx(18765,1135.010,-1603.869,10.279,-0.560,-2.000,-0.500,1000.000,1000.000);
	prison = CreateDynamicObjectEx(18765,1134.930,-1613.859,10.380,-0.560,-2.000,-0.500,1000.000,1000.000);
	prison = CreateDynamicObjectEx(18765,1052.469,-1657.310,10.159,0.000,-1.220,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(18765,1052.430,-1587.250,10.140,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(18765,1052.430,-1597.250,10.140,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(18765,1052.430,-1607.260,10.140,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(18765,1052.430,-1617.270,10.140,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(18765,1052.430,-1627.270,10.140,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(18765,1052.430,-1637.290,10.140,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(18765,1134.979,-1657.260,10.449,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(18765,1052.430,-1647.310,10.140,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(18765,1062.459,-1657.250,10.399,0.000,-1.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(18765,1072.430,-1657.270,10.470,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(18765,1082.430,-1657.270,10.470,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(18765,1092.420,-1657.270,10.470,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(18765,1102.430,-1657.280,10.470,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(18765,1112.430,-1657.280,10.470,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(18765,1122.430,-1657.280,10.470,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(18765,1132.430,-1657.270,10.470,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(19123,2810.500,-2384.699,13.100,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(19123,2810.500,-2391.500,13.100,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(19123,2810.500,-2434.699,13.100,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(19123,2810.500,-2441.500,13.100,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(19322,1117.579,-1490.010,32.720,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(19323,1117.579,-1490.010,32.720,0.000,0.000,0.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(19428,232.860,1915.900,16.559,0.000,90.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(19428,234.460,1915.890,16.559,0.000,90.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(19428,236.059,1915.900,16.559,0.000,90.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(19428,232.860,1912.400,16.559,0.000,90.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(19428,234.460,1912.400,16.559,0.000,90.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(19428,236.059,1912.400,16.559,0.000,90.000,90.000,1000.000,1000.000);
	prison = CreateDynamicObjectEx(7090,264.964,2000.602,25.879,0.000,0.000,0.000,1000.000,1000.000);
	/* Richman */
	CreateDynamicObject( 8168, 612.73895263672, -1191.4602050781, 20.294105529785, 0.000000, 5, 318.31237792969, -1 );
	CreateDynamicObject( 8168, 620.47265625, -1188.49609375, 20.044105529785, 0.000000, 352.99621582031, 138.94409179688, -1 );
	CreateDynamicObject( 966, 613.97229003906, -1197.7174072266, 17.475030899048, 0.000000, 0.000000, 23.81982421875, -1 );
	CreateDynamicObject( 997, 614.33209228516, -1194.3870849609, 17.709369659424, 0.000000, 0.000000, 266.70568847656, -1 );
	CreateDynamicObject( 973, 602.98425292969, -1202.1643066406, 18.000516891479, 0.000000, 0.000000, 19.849853515625, -1 );
	L_a_TollObject[0] = CreateDynamicObject( 968, 613.8935546875, -1197.7329101563, 18.109180450439, 0.000000, -90.000000, 23.81982421875, -1 );
	CreateDynamicObject( 966, 619.42913818359, -1181.6597900391, 18.725030899048, 0.000000, 0.000000, 214.37744140625, -1 );
	CreateDynamicObject( 973, 629.68823242188, -1176.0551757813, 19.500516891479, 0.000000, 0.000000, 21.831787109375, -1 );
	CreateDynamicObject( 997, 619.26574707031, -1181.6518554688, 18.709369659424, 0.000000, 0.000000, 268.68908691406, -1 );
	L_a_TollObject[1] = CreateDynamicObject( 968, 619.44201660156, -1181.6903076172, 19.525806427002, 0.000000, -90.000000, 214.37744140625, -1 );
	/* End of Richman */

	/* Flint */
	CreateDynamicObject( 8168, 61.256042480469, -1533.3946533203, 6.1042537689209, 0.000000, 0.000000, 9.9252624511719, -1 );
	CreateDynamicObject( 8168, 40.966598510742, -1529.5725097656, 6.1042537689209, 0.000000, 0.000000, 188.5712890625, -1 );
	L_a_TollObject[2] = CreateDynamicObject( 968, 35.838928222656, -1525.9034423828, 5.0012145042419, 0.000000, -90.000000, 270.67565917969, -1 );
	CreateDynamicObject( 966, 35.889751434326, -1526.0096435547, 4.2410612106323, 0.000000, 0.000000, 270.67565917969, -1 );
	CreateDynamicObject( 966, 67.093727111816, -1536.8275146484, 3.9910612106323, 0.000000, 0.000000, 87.337799072266, -1 );
	L_a_TollObject[3] = CreateDynamicObject( 968, 67.116600036621, -1536.8218994141, 4.7504549026489, 0.000000, -90.000000, 87.337799072266, -1 );
	CreateDynamicObject( 973, 52.9794921875, -1531.9252929688, 5.090488910675, 0.000000, 0.000000, 352.06005859375, -1 );
	CreateDynamicObject( 973, 49.042072296143, -1531.5065917969, 5.1758694648743, 0.000000, 0.000000, 352.05688476563, -1 );
	CreateDynamicObject( 997, 68.289916992188, -1546.6020507813, 4.0626411437988, 0.000000, 0.000000, 119.09942626953, -1 );
	CreateDynamicObject( 997, 34.5198097229, -1516.1402587891, 4.0626411437988, 0.000000, 0.000000, 292.50622558594, -1 );
	CreateDynamicObject( 997, 35.903915405273, -1525.8717041016, 4.0626411437988, 0.000000, 0.000000, 342.13012695313, -1 );
	CreateDynamicObject( 997, 63.914081573486, -1535.7126464844, 4.0626411437988, 0.000000, 0.000000, 342.130859375, -1 );
	/* End of Flint */

	/* LV */
	CreateDynamicObject( 8168, 1789.83203125, 703.189453125, 15.846367835999, 0.000000, 3, 99.24951171875, -1 );
	CreateDynamicObject( 8168, 1784.8334960938, 703.94799804688, 16.070636749268, 0.000000, 357, 278.61096191406, -1 );
	CreateDynamicObject( 966, 1781.4122314453, 697.32531738281, 14.636913299561, 0.000000, 0.000000, 348.09008789063, -1 );
	CreateDynamicObject( 996, 1767.3087158203, 700.50506591797, 15.281567573547, 0.000000, 0.000000, 346.10510253906, -1 );
	CreateDynamicObject( 997, 1781.6832275391, 697.34796142578, 14.698781013489, 0.000000, 3, 77.41455078125, -1 );
	CreateDynamicObject( 997, 1792.7745361328, 706.38543701172, 13.948781013489, 0.000000, 2.999267578125, 81.379638671875, -1 );
	CreateDynamicObject( 966, 1793.4289550781, 709.87982177734, 13.636913299561, 0.000000, 0.000000, 169.43664550781, -1 );
	CreateDynamicObject( 996, 1800.8060302734, 708.38299560547, 14.281567573547, 0.000000, 0.000000, 346.10229492188, -1 );
	L_a_TollObject[4] = CreateDynamicObject( 968, 1781.4133300781, 697.31750488281, 15.420023918152, 0.000000, -90.000000, 348.10229492188, -1 );
	L_a_TollObject[5] = CreateDynamicObject( 968, 1793.6700439453, 709.84631347656, 14.405718803406, 0.000000, -90.000000, 169.43664550781, -1 );
	/* End of LV */

	/* Blueberry right */
	CreateDynamicObject(966, 614.42188, 350.81711, 17.92480,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(966, 602.91162, 342.59781, 17.92480,   0.00000, 0.00000, 215.92000);
	L_a_TollObject[6] = CreateDynamicObject(968, 614.42188, 350.81711, 18.66520,   0.00000, -90.00000, 35.00000);
	L_a_TollObject[7] = CreateDynamicObject(968, 602.91162, 342.59781, 18.66520,   0.00000, -90.00000, 215.92000);
	/* Blueberry right */

	/* Blueberry left */
	CreateDynamicObject(966, -190.35580, 254.64290, 11.07090,   0.00000, 0.00000, 345.00000);
	CreateDynamicObject(966, -204.00880, 258.30411, 11.07090,   0.00000, 0.00000, -195.00000);
	L_a_TollObject[8] = CreateDynamicObject(968, -190.24850, 254.62019, 11.89360,   0.00000, -90.00000, -14.94000);
	L_a_TollObject[9] = CreateDynamicObject(968, -204.10410, 258.34149, 11.89360,   0.00000, -90.00000, -195.00000);
	/* Blueberry right */
	///UNITY
	CreateObject(1973, 1718.82056, -1873.94360, 13.23780,   0.00000, 0.00000, 180.00000);
	CreateObject(1285, 1833.33838, -1849.38098, 13.11520,   0.00000, 0.00000, 90.00000);
	//PASARELA LSRP==================================================//
	CreateObject(17550, 1146.64966, -1395.10706, 16.86195,   0.00000, 0.00000, -71.88002);

	//POARTA SAN NEWS EXT
	CreateObject(971, 617.40344, -1506.39661, 13.16276,   0.00000, 0.00000, 90.00000);
	servicepecosud = CreateObject(10575, 1912.0736, -1771.8940, 13.7736,   0.00000, 0.00000, 90.00000);
	//FD GARAJ SI EMS
	CreateObject(987, -1619.89685, 730.96167, -6.24710,   0.00000, 0.00000, 90.00000);
	CreateObject(987, -1619.87915, 742.93677, -6.24710,   0.00000, 0.00000, 90.00000);
	/// Apartment Complex ///
	CreateObject(14576,1529.29980469,-12.69921875,1009.70001221,0.00000000,0.00000000,0.00000000); //object(vault_door) (1)
	CreateObject(1536,1527.90002441,-25.50000000,1001.50000000,0.00000000,0.25000000,2.25000000); //object(gen_doorext15) (1)
	CreateObject(1536,1530.90002441,-25.39999962,1001.50000000,0.00000000,0.00000000,179.99914551); //object(gen_doorext15) (2)
	CreateObject(1536,1530.69995117,-25.50000000,1003.90002441,0.00439453,271.00012207,359.75003052); //object(gen_doorext15) (3)
	CreateObject(1506,1527.63000488,-33.90000153,1003.50000000,0.00000000,0.00000000,269.74731445); //object(gen_doorext08) (1)
	CreateObject(1506,1534.95007324,-34.00000000,1003.50000000,0.00000000,0.00000000,269.74182129); //object(gen_doorext08) (2)
	CreateObject(1506,1534.95007324,-28.29980469,1005.70001221,0.00000000,0.00000000,269.74182129); //object(gen_doorext08) (3)
	CreateObject(1506,1527.64916992,-28.39941406,1005.70001221,0.00000000,0.00000000,269.74182129); //object(gen_doorext08) (4)
	CreateObject(1506,1527.63916016,-33.79980469,1007.79998779,0.00000000,0.00000000,270.24182129); //object(gen_doorext08) (5)
	CreateObject(1506,1534.95007324,-33.89941406,1007.79998779,0.00000000,0.00000000,270.24182129); //object(gen_doorext08) (6)
	CreateObject(1506,1527.64916992,-28.39941406,1010.00000000,0.00000000,0.00000000,269.74182129); //object(gen_doorext08) (7)
	CreateObject(1506,1527.64916992,-33.89941406,1011.90002441,0.00000000,0.00000000,269.74182129); //object(gen_doorext08) (8)
	CreateObject(1506,1534.95007324,-33.89941406,1012.00000000,0.00000000,0.00000000,269.74182129); //object(gen_doorext08) (9)
	CreateObject(1499,1532.64001465,-27.39999962,1009.90002441,0.00000000,0.00000000,0.00000000); //object(gen_doorint05) (1)
	CreateObject(16666,1530.09997559,-11.69999981,1008.00000000,0.00000000,0.00000000,0.00000000); //object(a51_machines) (1)
	CreateObject(18257,1536.19995117,-14.50000000,1008.90002441,0.00000000,0.00000000,90.00000000); //object(crates) (1)
	CreateObject(3761,1526.19995117,-18.10000038,1010.90002441,0.00000000,0.00000000,0.00000000); //object(industshelves) (1)
	CreateObject(3093,1533.59997559,-27.39999962,1013.79998779,270.50006104,0.00000000,90.74996948); //object(cuntgirldoor) (1)
	CreateObject(1506,1535.00000000,-28.49200058,1009.90002441,0.00000000,0.00000000,269.74182129); //object(gen_doorext08) (10)
	CreateObject(3093,1535.09997559,-29.00000000,1013.70001221,270.50006104,0.00000000,179.99707031); //object(cuntgirldoor) (2)
	CreateObject(1506,1527.64916992,-28.50000000,1014.20001221,0.00000000,0.00000000,270.24182129); //object(gen_doorext08) (11)
	CreateObject(3093,1533.00000000,-27.39999962,1017.79998779,270.49987793,0.00000000,270.74157715); //object(cuntgirldoor) (3)
	CreateObject(1893,1530.90002441,-29.10000038,1009.70001221,0.00000000,0.00000000,0.00000000); //object(shoplight1) (1)
	CreateObject(1893,1530.90002441,-29.29999924,1013.90002441,0.00000000,0.00000000,0.00000000); //object(shoplight1) (2)
	CreateObject(1893,1530.89941406,-29.09960938,1018.09997559,0.00000000,0.00000000,0.00000000); //object(shoplight1) (3)
	CreateObject(1893,1530.80004883,-34.50000000,1007.59997559,0.00000000,0.00000000,0.00000000); //object(shoplight1) (4)
	CreateObject(1893,1528.90002441,-29.29999924,1005.59997559,0.00000000,0.00000000,0.00000000); //object(shoplight1) (5)
	CreateObject(2780,1528.30004883,-8.60000038,1008.90002441,0.00000000,0.00000000,0.00000000); //object(cj_smoke_mach) (1)
	CreateObject(1651,1532.50000000,-14.19999981,1002.70001221,0.00000000,358.00000000,91.25000000); //object(od_copwindows) (1)
	CreateObject(3109,1532.17993164,-27.50000000,1015.29998779,0.00000000,0.00000000,270.50000000); //object(imy_la_door) (1)
	CreateObject(1506,1535.00000000,-28.29999924,1014.09997559,0.00000000,0.00000000,269.74182129); //object(gen_doorext08) (9)
	//USI PD inauntru ARMOURY
	CreateObject(1504, 275.77191, 121.33520, 1003.59552,   0.00000, 0.00000, 90.00000);
	CreateObject(1504, 275.76309, 115.83840, 1003.59552,   0.00000, 0.00000, 90.00000);
	CreateObject(1504, 275.75421, 117.33160, 1003.59552,   0.00000, 0.00000, 90.00000);
	//MALL//
	CreateObject(19322, 1117.58997, -1490.01001, 32.72000,   0.00000, 0.00000, 0.00000);
	CreateObject(19323, 1117.58997, -1490.01001, 32.72000,   0.00000, 0.00000, 0.00000);
	CreateObject(2436, 1159.05591, -1460.19250, 14.78945,   0.00000, 0.00000, 181.81824);
	CreateObject(2436, 1163.22095, -1460.09680, 14.77935,   0.00000, 0.00000, 178.19992);
	CreateObject(2413, 1165.66235, -1455.41736, 14.64814,   0.00000, 0.00000, 269.67557);
	CreateObject(2413, 1165.66858, -1453.79871, 14.64813,   0.00000, 0.00000, 269.67557);
	CreateObject(2436, 1158.53296, -1449.39136, 14.76660,   0.00000, 0.00000, 0.00000);
	CreateObject(2436, 1162.97754, -1449.38062, 14.76765,   0.00000, 0.00000, 0.00000);
	CreateObject(2207, 1161.78601, -1453.86646, 14.62734,   0.00000, 0.00000, 179.97244);
	CreateObject(2207, 1159.93201, -1455.78967, 14.62734,   0.00000, 0.00000, 0.00000);
	CreateObject(19611, 1159.91260, -1454.91382, 15.55039,   -181.20009, 1.38000, 5.24415);
	CreateObject(19611, 1160.20459, -1454.11853, 15.55039,   -181.02010, 1.32000, 5.24415);
	CreateObject(19611, 1160.87036, -1453.77112, 15.55039,   -181.02010, 1.32000, 5.24415);
	CreateObject(19611, 1161.58447, -1454.07483, 15.55039,   -181.02010, 1.32000, 5.24415);
	CreateObject(19611, 1161.84106, -1454.81152, 15.55039,   -181.02010, 1.32000, 5.24415);
	CreateObject(19611, 1161.40283, -1455.59277, 15.55039,   -181.02010, 1.32000, 5.24415);
	CreateObject(19611, 1160.48596, -1455.69336, 15.55039,   -181.02010, 1.32000, 5.24415);
	CreateObject(19611, 1160.83154, -1454.75903, 15.69410,   -181.02010, 1.32000, 5.24415);
	CreateObject(19039, 1158.31140, -1449.53992, 15.59340,   -11.86000, 3.42000, 186.50517);
	CreateObject(19041, 1161.42542, -1455.61755, 15.57870,   -10.00000, 0.00000, 229.88126);
	CreateObject(19042, 1160.14807, -1454.08752, 15.58720,   -15.00000, 0.00000, 70.01420);
	CreateObject(19043, 1159.86389, -1454.92932, 15.59160,   -15.00000, 0.00000, 103.95860);
	CreateObject(19039, 1161.89331, -1454.82898, 15.57290,   -11.86000, 3.42000, 274.55209);
	CreateObject(19041, 1160.87903, -1453.74414, 15.57870,   -10.00000, 0.00000, 8.16450);
	CreateObject(19039, 1160.46899, -1455.73792, 15.57290,   -11.86000, 3.42000, 186.50517);
	CreateObject(19039, 1159.52087, -1449.53015, 15.59340,   -11.86000, 3.42000, 186.50517);
	CreateObject(19041, 1158.61853, -1449.50146, 15.58578,   -11.86000, 3.42000, 186.50520);
	CreateObject(19045, 1159.10474, -1449.58362, 15.59840,   -11.86000, 3.42000, 186.50520);
	CreateObject(19045, 1162.66846, -1449.43970, 15.59340,   -11.86000, 3.42000, 187.73579);
	CreateObject(19048, 1163.12024, -1449.46240, 15.59340,   -11.86000, 3.42000, 187.73579);
	CreateObject(19042, 1163.56055, -1449.43445, 15.59340,   -11.86000, 3.42000, 187.73579);
	CreateObject(19051, 1163.93408, -1449.44434, 15.59650,   -11.86000, 3.42000, 187.73579);
	CreateObject(19040, 1161.60742, -1454.05273, 15.57340,   -10.00000, 0.00000, 326.28201);
	CreateObject(19040, 1163.46765, -1459.97839, 15.58071,   -10.00000, 0.00000, 17.44912);
	CreateObject(19042, 1163.07434, -1459.93750, 15.58870,   -10.00000, 0.00000, 17.44910);
	CreateObject(19044, 1162.71326, -1459.94690, 15.58800,   -10.00000, 0.00000, 17.44910);
	CreateObject(19046, 1162.31860, -1459.93408, 15.60190,   -10.00000, 0.00000, 17.44910);
	CreateObject(19046, 1159.34802, -1460.13855, 15.60190,   -10.00000, 0.00000, 17.44910);
	CreateObject(19045, 1158.94788, -1460.12634, 15.60180,   -10.00000, 0.00000, 17.44910);
	CreateObject(19040, 1158.55078, -1460.11267, 15.60720,   -10.00000, 0.00000, 17.44910);
	CreateObject(19050, 1158.16003, -1460.11084, 15.60410,   -10.00000, 0.00000, 17.44910);
	CreateObject(19329, 1155.13000, -1440.40002, 18.53000,   0.00000, 0.00000, 89.23000);
	CreateObject(19474, 1168.23547, -1454.98267, 17.41114,   0.12000, -88.08004, 358.75290);
	CreateObject(19305, 1155.08594, -1456.37915, 16.49515,   0.00000, 0.00000, 264.83966);
	CreateObject(1514, 1165.55945, -1456.06689, 15.87353,   0.00000, 0.00000, 266.56757);
	CreateObject(1671, 1166.88123, -1453.69312, 15.27039,   0.00000, 0.00000, 267.46631);
	CreateObject(1671, 1166.77295, -1455.73022, 15.27039,   0.00000, 0.00000, 257.19794);
	CreateObject(1661, 1161.05310, -1454.47485, 18.75611,   0.00000, 0.00000, 0.00000);
	CreateObject(1651, 1155.48340, -1458.07275, 18.13099,   0.00000, 0.00000, 0.50401);
	CreateObject(2710, 1165.64490, -1454.52332, 15.30819,   0.00000, 0.00000, 234.07887);
	CreateObject(2710, 1160.82202, -1454.79773, 15.80484,   0.00000, 0.00000, 0.00000);
	CreateObject(2710, 1162.87805, -1440.29407, 15.30819,   0.00000, 0.00000, 294.38437);
	CreateObject(2710, 1165.61572, -1456.08521, 15.30819,   0.00000, 0.00000, 220.28864);
	CreateObject(2710, 1162.87805, -1440.29407, 15.30819,   0.00000, 0.00000, 294.38437);
	CreateObject(2710, 1165.60767, -1453.66467, 15.30819,   0.00000, 0.00000, 294.38437);
	CreateObject(2710, 1165.61279, -1455.27734, 15.30819,   0.00000, 0.00000, 294.38437);
	CreateObject(1514, 1165.57373, -1453.76953, 15.86865,   0.00000, 0.00000, 266.56757);
	CreateObject(2412, 1100.88000, -1456.18005, 14.79000,   0.00000, 0.00000, 90.00000);
	CreateObject(2412, 1155.98547, -1455.89941, 14.79000,   0.00000, 0.00000, 90.00000);
	CreateObject(1622, 1156.15894, -1459.42993, 18.26352,   180.53975, 165.71997, 5.55407);
	CreateObject(1622, 1154.54419, -1456.23083, 18.26352,   11.46000, -23.04000, 3.35216);


	// Fake IDS / licenses place //
	CreateDynamicObject(18045, 351.14999, -206.98000, 1025.98999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1650, 343.98001, -209.34000, 1025.22998,   0.00000, 0.00000, -28.62000);
	CreateDynamicObject(1650, 343.95999, -208.97000, 1025.22998,   0.00000, 0.00000, 84.78000);
	CreateDynamicObject(2994, 344.42001, -206.67999, 1024.47998,   0.00000, 0.00000, -30.48000);
	CreateDynamicObject(18635, 343.97000, -208.75999, 1025.02002,   -88.26000, -16.68000, 13.68000);
	CreateDynamicObject(335, 344.03000, -208.34000, 1025.03003,   -93.18000, -51.54000, 61.62000);
	CreateDynamicObject(1217, 344.22000, -205.44000, 1024.35999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1217, 345.03000, -205.53000, 1024.35999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1217, 345.03000, -205.53000, 1025.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1217, 345.84000, -205.50000, 1024.35999,   0.00000, 0.00000, -40.20000);
	CreateDynamicObject(14574, 355.23999, -201.78999, 1025.16003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4099, 354.98999, -208.78999, 1025.39001,   0.00000, 0.00000, 50.28000);
	CreateDynamicObject(1421, 354.39001, -211.78000, 1024.73999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1440, 353.60001, -209.70000, 1024.46997,   0.00000, 0.00000, 100.80000);
	CreateDynamicObject(1441, 358.19000, -210.08000, 1024.63000,   0.00000, 0.00000, -88.20000);
	CreateDynamicObject(1224, 351.04001, -211.41000, 1024.53003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1224, 351.08261, -211.45264, 1025.71997,   0.00000, 0.00000, 6.60000);
	CreateDynamicObject(1440, 351.01999, -209.75000, 1024.46997,   0.00000, 0.00000, 268.92001);
	CreateDynamicObject(1421, 351.75000, -202.17000, 1024.73999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1421, 352.17001, -203.53000, 1024.73999,   0.00000, 0.00000, -89.52000);
	CreateDynamicObject(4099, 352.37000, -208.74001, 1025.39001,   0.00000, 0.00000, 51.48000);
	CreateDynamicObject(2649, 345.41000, -209.00999, 1027.68005,   179.88000, -1.32000, 0.00000);
	CreateDynamicObject(2649, 348.75000, -210.60001, 1027.68005,   179.88000, -1.32000, 90.12000);
	CreateDynamicObject(2653, 356.34000, -209.78000, 1027.75000,   0.72000, -183.00000, 0.00000);
	CreateDynamicObject(2653, 356.34000, -201.92000, 1027.84998,   0.72000, -183.00000, 0.00000);
	CreateDynamicObject(14584, 360.88000, -232.70000, 1025.78003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1441, 350.45001, -203.25000, 1024.63000,   0.00000, 0.00000, -269.10001);
	CreateDynamicObject(1421, 352.32999, -211.35001, 1024.73999,   0.00000, 0.00000, -88.20000);
	CreateDynamicObject(1440, 352.07999, -209.77000, 1024.46997,   0.00000, 0.00000, 274.67999);
	CreateDynamicObject(4099, 335.67999, -194.94000, 1025.39001,   0.00000, 0.00000, 92.88000);
	CreateDynamicObject(1441, 348.31000, -202.13000, 1024.63000,   0.00000, 0.00000, -2.10000);
	CreateDynamicObject(18553, 357.50000, -211.47000, 1025.22998,   0.00000, 0.00000, -90.24000);
	CreateDynamicObject(1999, 349.36801, -211.66617, 1023.99548,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1806, 348.34937, -210.55159, 1023.99518,   0.00000, 0.00000, 209.16002);
	CreateDynamicObject(2197, 344.92493, -211.37473, 1023.98157,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2197, 344.92493, -211.37473, 1025.63318,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2197, 344.91391, -210.67221, 1023.98157,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2197, 344.91812, -210.67218, 1025.63318,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19776, 351.73352, -211.14241, 1024.80859,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19776, 349.56494, -210.19435, 1023.99683,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19776, 349.51962, -211.53920, 1024.81738,   0.00000, 0.00000, 63.48000);
	CreateDynamicObject(19776, 349.13739, -211.57675, 1024.81738,   0.00000, 0.00000, 98.40001);
	CreateDynamicObject(19786, 346.47250, -212.27660, 1025.60913,   0.00000, 0.00000, -179.88011);
	CreateDynamicObject(19776, 349.32028, -211.69228, 1024.81738,   0.00000, 0.00000, 150.78000);


/*
Created By Rapido
*/
}

public OnGameModeExit()
{
	KillTimer(checkgastimer);
	KillTimer(onemintimer);
	KillTimer(paydaytimer);
	KillTimer(checkstatus);
	//KillTimer(hungertimer);
	mysql_close(dbHandle);
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	TogglePlayerSpectating(playerid, 1);
	InterpolateCameraPos(playerid, 2088.1123, -1858.2400, 38.6070,2088.1123, -1858.2400, 38.6070, 25000, CAMERA_MOVE);
	InterpolateCameraLookAt(playerid,2087.8926, -1857.2668, 38.2670, 2087.8926, -1857.2668, 38.2670, 25000, CAMERA_MOVE);
 	//InterpolateCameraPos(playerid, 1651.635498, -2088.351806, 143.160308, 890.011413, -1448.084350, 40.954223, 7000, CAMERA_MOVE);
	//InterpolateCameraLookAt(playerid, 1649.163330, -2084.259277, 141.697952, 893.406188, -1445.108886, 38.804336, 7000, CAMERA_MOVE);
	CheckAccount(playerid);
	isAFK{playerid} = false;
 	AFKTime[playerid] = 0;
	return 1;
}

public OnPlayerConnect(playerid)
{
  	ResetDamages(playerid);
	SetPlayerColor(playerid, COLOR_CONNECT);
	RemoveBuildingsForMall(playerid);
	PLights[playerid] = 0;
	NameTagHide[playerid] = 0;
	maskOn{playerid} = false;
	CreateAllTextDraws(playerid);
	SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin],1642.2006,-2334.4751,-2.6797, 1.0, -1, -1, -1, -1, -1, -1);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
	///==================================================
	// GANTON PARALEL CU GYM-UL
	RemoveBuildingForPlayer(playerid, 3695, 2239.9297, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3695, 2282.9922, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3695, 2314.8203, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3695, 2352.7188, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3695, 2387.8203, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2229.0469, -1810.0313, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1807.3281, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1801.8672, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2230.4141, -1815.1484, 11.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2234.4844, -1817.9297, 12.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1791.0000, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1796.4531, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2239.9297, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1775.5078, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1780.9844, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2228.6719, -1767.2734, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1770.0469, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 2249.8672, -1815.4141, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 669, 2254.7266, -1827.4375, 12.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2259.9453, -1796.0703, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2258.3438, -1804.7422, 12.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2259.2656, -1773.2422, 11.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 17886, 2264.0391, -1789.2578, 20.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1791.0000, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1796.4531, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1807.3281, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1801.8672, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1770.0469, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1775.5078, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1780.9844, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2275.3906, -1820.7266, 12.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2268.1875, -1810.0313, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2273.6953, -1810.0313, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2282.9922, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2267.8125, -1767.2734, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2273.3359, -1767.3438, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2271.6484, -1772.3984, 8.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2285.7578, -1762.1250, 12.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2297.8984, -1793.8203, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2297.3828, -1798.5391, 8.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2297.1484, -1775.8750, 8.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2305.0625, -1810.0313, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1807.3281, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1801.8672, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1791.0000, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1796.4531, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2314.8203, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1775.5078, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1770.0469, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1780.9844, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2304.7813, -1767.3828, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 2322.6484, -1815.4141, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2332.8281, -1817.7109, 12.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2341.7578, -1810.0313, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1807.3281, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2341.7578, -1817.7266, 8.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1801.8672, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2335.6484, -1796.6328, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1791.0000, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1796.4531, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2334.7109, -1785.0625, 12.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1775.5078, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1780.9844, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 17887, 2343.6094, -1784.5078, 20.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1770.0469, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2341.3828, -1767.2734, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 669, 2329.1875, -1765.5234, 12.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2349.6172, -1763.3438, 11.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2352.7188, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2367.6484, -1802.7969, 8.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2367.6484, -1780.7734, 11.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2378.3359, -1818.7266, 8.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1800.4688, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1805.9297, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2376.9922, -1813.9297, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1811.3828, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1780.9844, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1789.6016, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1795.0547, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2376.6172, -1767.2734, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1770.0469, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1775.5078, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2399.9766, -1815.9922, 11.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2387.8203, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2398.5781, -1782.7734, 10.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2387.0234, -1763.6406, 12.1797, 0.25);
	///REMOVE FROM EST LSPD
	RemoveBuildingForPlayer(playerid, 17535, 2364.0547, -1391.5313, 41.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 17965, 2322.2813, -1355.1953, 25.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1266, 2317.5859, -1355.8281, 37.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 17970, 2364.0547, -1391.5313, 41.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 17543, 2322.2813, -1355.1953, 25.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 2317.5938, -1355.8203, 37.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2336.9844, -1350.5781, 22.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2338.9141, -1336.4766, 22.7266, 0.25);
	//===================================================
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1);
	RemoveBuildingForPlayer(playerid, 17535, 2364.0547, -1391.5313, 41.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 17965, 2322.2813, -1355.1953, 25.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1266, 2317.5859, -1355.8281, 37.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 17970, 2364.0547, -1391.5313, 41.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 17543, 2322.2813, -1355.1953, 25.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 2317.5938, -1355.8203, 37.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2336.9844, -1350.5781, 22.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2338.9141, -1336.4766, 22.7266, 0.25);
	//=======================================DEALERSHIP
	RemoveBuildingForPlayer(playerid, 5951, 958.8203, -1359.8672, 17.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 6002, 931.2266, -1357.3281, 25.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 6003, 954.6875, -1305.7734, 30.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 1266, 932.5859, -1363.5156, 21.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 1261, 958.3359, -1377.3203, 24.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 5783, 908.5391, -1384.3281, 24.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 932.5859, -1363.5156, 21.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 5814, 931.2266, -1357.3281, 25.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1522, 929.3281, -1352.1719, 12.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 716, 944.9063, -1389.3359, 12.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 975.8125, -1391.0938, 15.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 969.2734, -1385.3984, 12.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, 981.8750, -1385.9922, 12.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 948.7656, -1381.1641, 13.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1267, 958.3359, -1377.3203, 24.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 5813, 958.8203, -1359.8672, 17.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 5818, 954.6875, -1305.7734, 30.1406, 0.25);
	//========================PARCARE PECO SUD
	RemoveBuildingForPlayer(playerid, 1412, 1917.3203, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1912.0547, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1906.7734, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1927.8516, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1922.5859, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1938.3906, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1933.1250, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1951.6094, -1821.1250, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1951.6094, -1815.8594, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1951.6094, -1810.5938, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1951.6094, -1805.3281, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1948.9844, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1943.6875, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1951.6094, -1800.0625, 13.8125, 0.25);
	//=================PASARELA LSRP======================//
	RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1434.0703, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 615, 1147.6016, -1416.8750, 13.9531, 0.25);
	///==================================================
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1);
	RemoveBuildingForPlayer(playerid, 5681, 1921.4844, -1778.9141, 18.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 3366, 276.6563, 2023.7578, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3366, 276.6563, 1989.5469, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3366, 276.6563, 1955.7656, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 16619, 199.3359, 1943.8750, 18.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 3267, 188.2422, 2081.6484, 22.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 3277, 188.2422, 2081.6484, 22.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 16093, 211.6484, 1810.1563, 20.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 16638, 211.7266, 1809.1875, 18.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 3279, 262.0938, 1807.6719, 16.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 347.1953, 1799.2656, 18.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 342.9375, 1796.2891, 18.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 16670, 330.7891, 1813.2188, 17.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 3279, 113.3828, 1814.4531, 16.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3279, 165.9531, 1849.9922, 16.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 16095, 279.1328, 1829.7813, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 16094, 191.1406, 1870.0391, 21.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3279, 103.8906, 1901.1016, 16.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 16096, 120.5078, 1934.0313, 19.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 3279, 161.9063, 1933.0938, 16.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 16323, 199.3359, 1943.8750, 18.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 16671, 193.9531, 2051.7969, 20.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 3279, 233.4297, 1934.8438, 16.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3279, 267.0625, 1895.2969, 16.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3268, 276.6563, 2023.7578, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3268, 276.6563, 1989.5469, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3268, 276.6563, 1955.7656, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 16668, 357.9375, 2049.4219, 16.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 16669, 380.2578, 1914.9609, 17.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 17350, -54.9922, -1130.7266, 4.5781, 0.25);//TRUCKER INCEPUT
	RemoveBuildingForPlayer(playerid, 1447, -89.9297, -1133.7500, 1.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -87.0547, -1132.6797, 0.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, -79.2500, -1137.7188, 0.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 3285, -73.8047, -1141.4219, 1.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 17072, -54.9922, -1130.7266, 4.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 17073, -56.1250, -1130.1719, 4.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, -84.3750, -1116.0938, 0.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -84.0547, -1117.2188, 1.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -68.3516, -1104.9922, 0.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, -60.3594, -1116.9375, 0.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -63.6719, -1125.6953, 0.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -63.4141, -1115.4141, 0.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -63.8125, -1106.4219, 0.2188, 0.25);//TRUCKER SFARSIT
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	if(PlayerLogged(playerid))
	{
		GetPlayerPos(playerid, PlayerInfo[playerid][pLastX], PlayerInfo[playerid][pLastY], PlayerInfo[playerid][pLastZ]);
		GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pLastA]);
		format(query, sizeof(query), "UPDATE `users` SET `LastX` = %f, `LastY` = %f, `LastZ` = %f, `LastA` = %f, `LastInt` = %d, `LastVW` = %d WHERE `name` = '%s'",
		PlayerInfo[playerid][pLastX], PlayerInfo[playerid][pLastY], PlayerInfo[playerid][pLastZ],PlayerInfo[playerid][pLastA],GetInterior(playerid), GetWorld(playerid), GetName(playerid));
		mysql_function_query(dbHandle, query, false, "", "");
		Screenshot[playerid] = 0;
		PlayerInfo[playerid][pSwat] = 0;
		//========================================
		if(GetIntVar(playerid, "JustDied") == 1 || GetIntVar(playerid, "LoggedInDead") == 1)
		{
			PlayerInfo[playerid][pDied] = 1;
			PutPlayer(playerid, PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
			SetInterior(playerid, PlayerInfo[playerid][pInt]);
			SetWorld(playerid, PlayerInfo[playerid][pWorld]);
		}
		else
		{
			PlayerInfo[playerid][pDied] = 0;
			Delete3DTextLabel(DamageShot[playerid]);
		}
		//========================================
		if(GetIntVar(playerid, "RentedCar") == 1)
		{
			DestoryCar(GetIntVar(playerid, "RentVehKey"));
			RemoveVar(playerid, "RentedCar");
			RemoveVar(playerid, "RentVehKey");
		}
		//========================================
		new caller = GetIntVar(playerid, "CallWith");
		if(PlayerIsOn(caller))
		{
			if(GetIntVar(caller, "OnCall") == 1 && GetIntVar(playerid, "OnCall") == 1)
			{
				CellMSG(caller, "The line just went dead.");
				SetIntVar(playerid, "CallCost", GetIntVar(playerid, "callTime")/10);
				format(msg, sizeof(msg), "~w~The call cost~n~~r~$%d",GetIntVar(caller, "CallCost"));
				GameTextForPlayer(caller, msg, 5000, 1);
				GiveCash(caller, -GetIntVar(playerid, "CallCost"));
				phoneAnim(caller, 0);
				RemoveVar(caller, "CallCost");
				RemoveVar(caller, "CallTime");
				RemoveVar(caller, "CallWith");
				RemoveVar(caller, "GettingCall");
				RemoveVar(caller, "OnCall");
				RemoveVar(caller, "IsCalling");
				RemoveVar(playerid, "CallCost");
				RemoveVar(playerid, "CallTime");
				RemoveVar(playerid, "CallWith");
				RemoveVar(playerid, "GettingCall");
				RemoveVar(playerid, "OnCall");
				RemoveVar(playerid, "IsCalling");
			}
		}
		//========================================
		//========================================
		foreach(Player, i)
		{
			if(GetIntVar(i, "InConvo") == 1 && GetIntVar(i, "ConvoWith") == playerid)
			{
				format(msg, sizeof(msg), "[ID: %d] %s has been disconnected from the server, the convo has ended.", playerid, GetNameEx(playerid));
				ConvoMSG(i, msg);
				RemoveVar(i, "InConvo");
				RemoveVar(i, "ConvoWith");
			}
		}
		//========================================
		if(PlayerInfo[playerid][pHouseKey] != -1) UpdateHouseInfo(PlayerInfo[playerid][pHouseKey]);
		if(PlayerInfo[playerid][pBizKey] != -1) UpdateBizInfo(PlayerInfo[playerid][pBizKey]);
		if(PlayerInfo[playerid][pCarKey] != 0)
		{
			SaveVehicle(PlayerInfo[playerid][pCarKey]);
		}
		else
		{
			PlayerInfo[playerid][pCarKey] = 0;
			PlayerInfo[playerid][pVehSlot] = 0;
		}
		RemovePlayerBoomBox(playerid);
		//========================================
		for(new i = 0; i < 11; i++)
		{
			if(RoadBlocks[playerid][i] != INVALID_OBJECT_ID)
			{
				DestroyDynamicObject(RoadBlocks[playerid][i]);
			}
		}
		//========================================
		if(Trucking{playerid})
		{
			new vehicle = TruckVehicle[playerid];
			if(TruckComps[vehicle] > 0)
			{
				PlacePlayerTicket(playerid, (TruckComps[vehicle] * 5) / 10);
			}
			TruckComps[vehicle] = 0;
			if(!VehicleInfo[vehicle][carOwned])
			{
				RespawnVehicle(TruckVehicle[playerid]);
			}
		}
		//========================================
		SavePlayerStats(playerid);
		SavePlayerPos(playerid);
		//========================================
	}
    switch(reason)
    {
      case 0: format(msg, sizeof(msg), "** %s has left the server.(Crash) ", GetNameEx(playerid));
      case 1: format(msg, sizeof(msg), "** %s has left the server.(Leaving)", GetNameEx(playerid));
      case 2: format(msg, sizeof(msg), "** %s has left the server.(Kick/Ban)",  GetNameEx(playerid));
      case 3: format(msg, sizeof(msg), "** %s has left the server.(TimeOut)", GetNameEx(playerid));
    }
	if(reason == 0)
	{
		PlayerInfo[playerid][pCrashed] = 1;
	}
	ProxDetector(5, playerid, msg, COLOR_GREY);
	return 1;
}

public loadgraffs()
{
	for(new ID = 0; ID < MAXGRAFFS; ID++)
	{
		gInfo[ID][OBJECTID] = CreateDynamicObject( 19482, gInfo[ID][Xpos],gInfo[ID][Ypos],gInfo[ID][Zpos], gInfo[ID][XYpos], gInfo[ID][YYpos], gInfo[ID][ZYpos], -1, 0, -1, 200 ); //Creating the object
		SetDynamicObjectMaterialText( gInfo[ID][OBJECTID], 0, gInfo[ID][graffname], OBJECT_MATERIAL_SIZE_256x256, gInfo[ID][grafont], 25, 0, 0xFFFFFFFF, 0, 1 ); // Setting the object text with our choosen graffiti text
		gammount ++;
	}
	return 1;
}

public creategraff( playerid )
{
	new v = random(200+200);
	printf("%d",v);
	POBJECT[playerid] += v;
    DestroyDynamicObject( POBJECT[playerid] ); // Destroying old sprayobject
    POBJECT[playerid] = CreateDynamicObject( 19482, XYZ[playerid][0], XYZ[playerid][1], XYZ[playerid][2], XYZ[playerid][3], XYZ[playerid][4], XYZ[playerid][5], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 200 ); //Creating the object
	SetDynamicObjectMaterialText( POBJECT[playerid], 0, POBJECTN[playerid], OBJECT_MATERIAL_SIZE_256x256, POBJECTF[playerid], 25, 0, 0xFFFFFFFF, 0, 1 ); // Setting the object text with our choosen graffiti text
	GameTextForPlayer( playerid, "~w~SPRAYED ]",5000,5 ); // SElf explainable?
	DeletePVar( playerid,"GraffitiCreating" ); // Deleting the PVAR afterwards
	sprayammount[playerid] = 0; // SEtting this var to 0, will explain what it is further down
	GRAVEH[playerid] = 0;
	isveh[playerid] = 0;
	sprays ++;
	creator[playerid] = GetName(playerid);
	new string[20];
	new id = nGraffiti();
	format(string, sizeof(string),Graffitis, id);
	dini_Create(string);
	strmid(gInfo[id][graffname] , POBJECTN[playerid], 0, strlen(POBJECTN[playerid]), 32);
	strmid(gInfo[id][grafont], POBJECTF[playerid], 0, strlen(POBJECTF[playerid]), 32);
	gInfo[id][graffcreator] = GetName(playerid);
	gInfo[id][OBJECTID] = POBJECT[playerid];
	gInfo[id][Xpos] = XYZ[playerid][0];
	gInfo[id][Ypos] = XYZ[playerid][1];
	gInfo[id][Zpos] = XYZ[playerid][2];
	gInfo[id][XYpos] = XYZ[playerid][3];
	gInfo[id][YYpos] = XYZ[playerid][4];
	gInfo[id][ZYpos] = XYZ[playerid][5];
	SaveGraffitis();
	GiveWeapon(playerid, 0, 1);
	StopAudioStreamForPlayer(playerid);
	return 1;
}

public killgr(playerid)
{
    sprayammount[playerid] = 0;
   	DeletePVar( playerid,"GraffitiCreating" ); // Deleting the PVAR afterwards
	sprayammountch[playerid] = 0;
	graffmenup[playerid] = 0;
	GiveWeapon(playerid, 41, 0);
	return 1;
}


public spraying( playerid ) // This Callback gets called evrysecond
{
    if(IsPlayerInRangeOfPoint(playerid, 3.0,XYZ[playerid][0],XYZ[playerid][1], XYZ[playerid][2]))
    {
		sprayammount[playerid] ++; //Evry second it gets called player gets ONE point

		if( sprayammount[playerid] == sprayammountch[playerid] ) // If player reached his points
		{
			KillTimer( spraytimer[playerid] ); // We kill this timer as player reached his points
	    	creategraff( playerid ); // We now call creategraff and the graffiti will be created
	 		return 1;
		}
		new string[64];
		format( string, sizeof(string),"~g~SPRAYING~n~ ~r~] ~w~%d/%d",sprayammount[playerid], sprayammountch[playerid]); // <----
		GameTextForPlayer( playerid, string, 1000,5 );
		return 1;
	}
	else
	{
		GameTextForPlayer(playerid, "] ~r~Sorry, you are too far away\n-2 points deducted ~y~]",5000, 5);
		sprayammount[playerid] -= 2;
		return 1;
	}

}

public startgraff (playerid)
{
	new	Float:X[3];
	GetPlayerPos( playerid, X[0], X[1], X[2] ); // SAving players position// storing params in a format // storing text in a player callback
	POBJECT[playerid] = CreateDynamicObject( 19482, X[0], X[1], X[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), playerid, 200 ); // Creating the graffiti for player
	SetDynamicObjectMaterialText( POBJECT[playerid], 0, POBJECTN[playerid], OBJECT_MATERIAL_SIZE_256x256, POBJECTF[playerid], 26, 0, 0xFFFFFFFF, 0, 1 ); // SEtting the text to what player wrote
	EditDynamicObject( playerid, POBJECT[playerid] ); // Forcing the player to move the graffiti
	SetPVarInt( playerid, "GraffitiCreating", 1 ); // SEtting Graffiticreating positive for player
	return 1; // End of script.
}

/* =================== Stocks =================== */
stock RemoveBuilding(modelid, Float:oX, Float:oY, Float:oZ, Float:oRadius = 0.25, Float:orX = 0.0, Float:orY = 0.0, Float:orZ = 0.0)
{
	for(new i; i < MAX_REMOVED_OBJECTS; i++)
	{
	    if(ObiecteSterse[i][_model] != modelid) continue;
	    if(ObiecteSterse[i][restored] != 0)
	    {
	        if((ObiecteSterse[i][_oX] == oX) && (ObiecteSterse[i][_oY] == oY) && (ObiecteSterse[i][_oZ] == oZ))
	        {
	            DestroyObject(ObiecteSterse[i][restored]);
	            ObiecteSterse[i][restored] = 0;
	            ObiecteSterse[i][_model] = 0;
	            return i;
	        }
	    }
	}

	new slot = GetObjectFreeSlot();
	if(slot == -1) return printf("\tYou cannot remove objects.\nLimit MAX_REMOVED_OBJECTS\nCurrent limit: %i", MAX_REMOVED_OBJECTS);

	ObiecteSterse[slot][_model] = modelid;
	ObiecteSterse[slot][_oX] = oX;
	ObiecteSterse[slot][_oY] = oY;
	ObiecteSterse[slot][_oZ] = oZ;
	ObiecteSterse[slot][_oRadius] = oRadius;

	ObiecteSterse[slot][_orX] = orX;
	ObiecteSterse[slot][_orY] = orY;
	ObiecteSterse[slot][_orZ] = orZ;

	for(new i; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerConnected(i)) continue;
	    RemoveBuildingForPlayer(i, modelid, oX, oY, oZ, oRadius);
	}
	return slot;
}

stock RestoreBuilding(slot)
{
	if(slot < 0 || slot > MAX_REMOVED_OBJECTS) return 0;
	if(ObiecteSterse[slot][_model] == 0) return 0;
	ObiecteSterse[slot][restored] = CreateObject(ObiecteSterse[slot][_model], ObiecteSterse[slot][_oX], ObiecteSterse[slot][_oY], ObiecteSterse[slot][_oZ], ObiecteSterse[slot][_orX], ObiecteSterse[slot][_orY], ObiecteSterse[slot][_orZ]);
	return 1;
}

stock GetNextHouseTrunkSlot(house)
{
	for(new i = 0; i < MAX_HOUSE_WEAPONS; i++)
	{
		if(HouseInfo[house][hWeapon][i] == 0)
		{
			return i;
		}
	}
	return -1;
}

stock GetNextVehicleTrunkSlot(vehicleid)
{
	new i=0;
	while(i != MAX_VEHICLE_WEAPONS)
	{
		if(VehicleInfo[vehicleid][carTrunkWep][i] == 0)
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetVehicleTrunkWeps(vehicleid)
{
	new count = 0;
	for(new i = 0; i < MAX_VEHICLE_WEAPONS; i++)
	{
		if(VehicleInfo[vehicleid][carTrunkWep][i] == 1)
		{
			count++;
		}
	}
	return count;
}

/*stock rent(playerid)
{
	TextDrawHideForPlayer(playerid, Textdraw0[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw1[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw2[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw2[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw3[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw4[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw5[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw6[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw7[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw8[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw9[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw10[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw11[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw12[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw13[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw14[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw15[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw16[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw17[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw18[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw19[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw20[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw21[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw22[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw23[playerid]);
	CancelSelectTextDraw(playerid);
	return 1;
}*/


stock RemoveSpecificBuilding(modelid)
{
	return RemoveBuilding(modelid, 0.0, 0.0, 0.0, 10000.0);
}

stock RemoveBuildingInit(playerid)
{
	for(new i; i < MAX_REMOVED_OBJECTS; i++)
	{
	    if(ObiecteSterse[i][_model] != 0) RemoveBuildingForPlayer(playerid, ObiecteSterse[i][_model], ObiecteSterse[i][_oX], ObiecteSterse[i][_oY], ObiecteSterse[i][_oZ], ObiecteSterse[i][_oRadius]);
	}
	return 1;
}

stock GetObjectFreeSlot()
{
	for(new i; i < MAX_REMOVED_OBJECTS; i++)
	{
	    if(ObiecteSterse[i][_model] == 0) return i;
	}
	return -1;
}

stock CountObiecteSterse()
{
    new count = 0;
    for(new i; i < MAX_REMOVED_OBJECTS; i++)
    {
        if(ObiecteSterse[i][_model] != 0) count++;
    }
	return count;
}

stock GiveWeapon(playerid, wep, ammo)
{
    Weapons[playerid][wep] = 1;
    return GivePlayerWeapon(playerid, wep, ammo);
}

stock nGraffiti()
{
	new ID[64]; for(new h = 0; h <= 200; h++){
	format(ID, sizeof(ID), Graffitis, h);if(!dini_Exists(ID)) return h; }return true;
}

stock LoadGraffitis()
{
	new string[70];
	for(new ID = 0; ID < sizeof(gInfo); ID++)
	{
	    format(string, sizeof(string), Graffitis, ID);
	    if(dini_Exists(string))
	    {
	        strmid(gInfo[ID][graffcreator],dini_Get(string,"graffcreator"),0,MAX_PLAYER_NAME,MAX_PLAYER_NAME);
	        strmid(gInfo[ID][graffname],dini_Get(string,"graffname"),0,96,96);
	        gInfo[ID][OBJECTID] =  dini_Int(string, "OBJECTID");
	        gInfo[ID][Xpos] =  dini_Float(string, "Xpos");
	        gInfo[ID][Ypos] =  dini_Float(string, "Ypos");
	        gInfo[ID][Zpos] =  dini_Float(string, "Zpos");
	        gInfo[ID][XYpos] =  dini_Float(string, "XYpos");
	        gInfo[ID][YYpos] =  dini_Float(string, "YYpos");
	        gInfo[ID][ZYpos] =  dini_Float(string, "ZYpos");

	    }
	}
	return 1;
}

stock SaveGraffitis()
{
	new string[50];
	for(new ID = 0; ID < sizeof(gInfo); ID++)
	{
	    format(string, sizeof(string), Graffitis, ID);
	    if(dini_Exists(string))
	    {
	        dini_Set(string,"graffcreator",gInfo[ID][graffcreator]);
	        dini_Set(string,"graffname",gInfo[ID][graffname]);
	        dini_Set(string,"OBJECTID", gInfo[ID][OBJECTID]);
	        dini_FloatSet(string,"Xpos", gInfo[ID][Xpos]);
	        dini_FloatSet(string,"Ypos", gInfo[ID][Ypos]);
	        dini_FloatSet(string,"Zpos", gInfo[ID][Zpos]);
	        dini_FloatSet(string,"XYpos", gInfo[ID][XYpos]);
	        dini_FloatSet(string,"YYpos", gInfo[ID][YYpos]);
	        dini_FloatSet(string,"ZYpos", gInfo[ID][ZYpos]);

	    }
	}
    return 1;
}

stock ProxDetector(Float:radi, playerid, string[],color)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid,x,y,z);
    foreach(Player,i)
    {
        if(IsPlayerInRangeOfPoint(i,radi,x,y,z) && GetWorld(i) == GetWorld(playerid))
        {
            SCM(i,color,string);
	    }
    }
}

stock PlayerNearPlayer(Float:radi, playerid, targetid) {
	new Float: fp_playerPos[3];
	GetPlayerPos(targetid, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]);
	if(IsPlayerInRangeOfPoint(playerid, radi, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]) && GetWorld(targetid) == GetWorld(playerid))
	{
		return 1;
	}
	return 0;
}

stock Float:PlayerPosX(playerid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y ,z);
	return x;
}

stock Float:PlayerPosY(playerid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y ,z);
	return y;
}

stock Float:PlayerPosZ(playerid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y ,z);
	return z;
}

stock StopPlayerSpec(playerid)
{
	TogglePlayerSpectating(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

stock PlayerSpec(playerid)
{
	TogglePlayerSpectating(playerid, 1);
	return 1;
}

stock StartPlayerSpec(playerid, otherid)
{
	TogglePlayerSpectating(playerid, 1);
	if(PlayerInCar(otherid))
	{
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(otherid));
	}
	else
	{
		PlayerSpectatePlayer(playerid, otherid);
	}
	SetInterior(playerid,GetInterior(otherid));
	SetWorld(playerid, GetWorld(otherid));
	return 1;
}

stock SavePlayerPos(playerid)
{
	new Float:a;
	GetPlayerFacingAngle(playerid, a);
	PlayerInfo[playerid][pPosX] = PlayerPosX(playerid);
	PlayerInfo[playerid][pPosY] = PlayerPosY(playerid);
	PlayerInfo[playerid][pPosZ] = PlayerPosZ(playerid);
	PlayerInfo[playerid][pPosA] = a;
	PlayerInfo[playerid][pWorld] = GetWorld(playerid);
	PlayerInfo[playerid][pInt] = GetInterior(playerid);
	return 1;
}

stock OnPlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(PlayerInCar(playerid) || JackingEngine[playerid] != 0 || JackingLock[playerid] != 0 || Tazed{playerid} || Beanbag{playerid} || GetIntVar(playerid, "Injured") == 1) return 1;
		OnAnim{playerid} = true;
		ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp, 1);
		return 1;
	}
	return 0;
}

stock ChatAnimation(playerid, length)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !OnAnim{playerid})
	{
		if(PlayerIsWounded(playerid) || PlayerInCar(playerid) || JackingEngine[playerid] != 0 || JackingLock[playerid] != 0 || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) return 1;
		new chatstyle = PlayerInfo[playerid][pTalk];
		OnAnim{playerid} = true;
		if(chatstyle == 0) { ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,1,0,0,1,1); }
		else if(chatstyle == 1) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkA",4.0,1,0,0,1,1); }
		else if(chatstyle == 2) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkB",4.0,1,0,0,1,1); }
		else if(chatstyle == 3) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkC",4.0,1,0,0,1,1);}
		else if(chatstyle == 4) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkD",4.0,1,0,0,1,1);}
		else if(chatstyle == 5) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkE",4.0,1,0,0,1,1);}
		else if(chatstyle == 6) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkF",4.0,1,0,0,1,1);}
		else if(chatstyle == 7) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkG",4.0,1,0,0,1,1);}
		else if(chatstyle == 8) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkH",4.0,1,0,0,1,1);}
		SetTimerEx("TalkTimer",floatround(length/9)*1600, 0, "i", playerid);

	}
	return 1;
}

stock StopPlayerAnims(playerid)
{
	if(PlayerIsWounded(playerid) || PlayerInCar(playerid) || JackingEngine[playerid] != 0 || JackingLock[playerid] != 0 || Tazed{playerid} || Beanbag{playerid}) return 1;
	OnAnim{playerid} = false;
	ClearAnimations(playerid, 1);
	PreloadPlayerAnims(playerid);
	return 1;
}

stock SetFightStyle(playerid, styleid)
{
	PlayerInfo[playerid][pFightStyle] = styleid;
	return SetPlayerFightingStyle(playerid, styleid);
}

stock CheckAccount(playerid)
{
	new escapedPlayerName[MAX_PLAYER_NAME];
	mysql_real_escape_string(GetName(playerid), escapedPlayerName);
	format(query, sizeof(query), "SELECT `id` AND `password` FROM `users` WHERE `name` = '%s' LIMIT 1", escapedPlayerName);
	mysql_function_query(dbHandle, query, true, "OnAccountCheck", "d", playerid);
	return 1;
}

stock CreatePlayerAccount(playerid, password[])
{
	new escapename[MAX_PLAYER_NAME], IP[100], OR[256];
	mysql_real_escape_string(GetName(playerid), escapename);
	format(OR, sizeof(OR), "None");
	GetPlayerIp(playerid, IP, sizeof(IP));
	format(query, sizeof(query), "INSERT INTO `users` (name, password, registered, origin, playerIP) VALUES ('%s', '%s', 0, '%s', '%s')",escapename,password,OR,IP);
	mysql_function_query(dbHandle, query, true, "OnPlayerCreateAccount", "d", playerid);
	return 1;
}

stock InsertPlayerSecretWord(playerid, email[])
{
	format(query, sizeof(query), "UPDATE `users` SET `secret` = '%s' WHERE `name` = '%s'", email, GetName(playerid));
	mysql_function_query(dbHandle, query, true, "ContinueRegisterSex", "i", playerid);
	return 1;
}

stock GetName(playerid)
{
	new pName[MAX_PLAYER_NAME];
	GetPlayerName(playerid, pName, sizeof(pName));
	return pName;
}

stock GetNameEx(playerid)
{
	new pName[MAX_PLAYER_NAME];
	GetPlayerName(playerid, pName, sizeof(pName));
	strreplace(pName, '_', ' ');
	return pName;
}

stock GetNameWithMask(playerid)
{
	if(maskOn{playerid})
	{
		format(msg, sizeof(msg), "[Masked_%d]", GetMaskID(playerid));
	}
	else
	{
		GetPlayerName(playerid, msg, sizeof(msg));
		strreplace(msg, '_', ' ');
	}
	return msg;
}

stock GetMaskID(playerid) return GetIntVar(playerid, "MaskID");

stock strreplace(string[], find, replace)
{
    for(new i=0; string[i]; i++)
	{
        if(string[i] == find)
		{
            string[i] = replace;
        }
    }
}

stock LeftServerMSG(playerid)
{
	return ServerMSG(playerid, "You have left the server.");
}

stock NotAuthMSG(playerid)
{
	return ServerMSG(playerid, "You are not authorized to use this command.");
}

stock SetInterior(playerid, int)
{
	PlayerInfo[playerid][pInt] = int;
	return SetPlayerInterior(playerid, int);
}

stock GetInterior(playerid)
{
	return PlayerInfo[playerid][pInt];
}

stock SetWorld(playerid, world)
{
	PlayerInfo[playerid][pWorld] = world;
	return SetPlayerVirtualWorld(playerid, world);
}

stock GetWorld(playerid)
{
	return PlayerInfo[playerid][pWorld];
}

stock SetSkin(playerid, skinid)
{
	SetSpawnInfo(playerid, 0, skinid, 1642.2006,-2334.4751,-2.6797, 1.0, -1, -1, -1, -1, -1, -1);
	PlayerInfo[playerid][pSkin] = skinid;
	return SetPlayerSkin(playerid, skinid);
}


stock GetSkin(playerid) return PlayerInfo[playerid][pSkin];
///////////////////////////Savings///////////////////////////////////
stock GiveSavings(playerid, cash)
{
	PlayerInfo[playerid][pSavings] = PlayerInfo[playerid][pSavings] + cash;
	return 1;
}
stock ResetSavings(playerid)
{
	PlayerInfo[playerid][pSavings] = 0;
	return 1;
}
stock SetSavings(playerid, cash)
{
	PlayerInfo[playerid][pSavings] = cash;
	return 1;
}
stock GetSavings(playerid) return PlayerInfo[playerid][pSavings];
///////////////////////////Savings///////////////////////////////////

///////////////////////////Bank///////////////////////////////////
stock GiveBankCash(playerid, cash)
{
	PlayerInfo[playerid][pBank] = PlayerInfo[playerid][pBank] + cash;
	return 1;
}
stock ResetBankCash(playerid)
{
	PlayerInfo[playerid][pBank] = 0;
	return 1;
}
stock SetBankCash(playerid, cash)
{
	PlayerInfo[playerid][pBank] = cash;
	return 1;
}
stock GetBankCash(playerid) return PlayerInfo[playerid][pBank];
///////////////////////////Bank///////////////////////////////////

///////////////////////////Cash///////////////////////////////////
public GiveCash(playerid, cash)
{
	new oldcash = GetPlayerMoney(playerid);
	if(oldcash < PlayerInfo[playerid][pCash] && oldcash > -1) PlayerInfo[playerid][pCash] = oldcash;
	PlayerInfo[playerid][pCash] += cash;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid,PlayerInfo[playerid][pCash]);
	return 1;
}

public ResetCash(playerid)
{
	PlayerInfo[playerid][pCash] = 0;
	ResetPlayerMoney(playerid);
	return 1;
}
/*public TimerDea1(playerid)
{
	SCM(playerid,COLOR_YELLOWG,"Poti folosi acum /acceptdeath deoarece au trecut 120 de secunde");
	TimerDeath1[playerid] = 1;
	return 1;
}*/
public SetCash(playerid, cash)
{
	PlayerInfo[playerid][pCash] = cash;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, cash);
	return 1;
}
public GetCash(playerid) return PlayerInfo[playerid][pCash];
///////////////////////////Cash///////////////////////////////////

stock strvalEx( const string[] ) // fix for strval-bug with > 50 letters.
{
	// written by mabako in less than a minute :X
	if( strlen( string ) >= 50 ) return 0; // It will just return 0 if the string is too long
	return strval(string);
}

stock ShowStats(playerid, id)
{
	new cash = PlayerInfo[id][pCash];
	new bank = PlayerInfo[id][pBank];
	new paycheck = PlayerInfo[id][pPayCheckMoney];
	new level = PlayerInfo[id][pLevel];
	new exp = PlayerInfo[id][pExp];
	new nxtlevel = PlayerInfo[id][pLevel]+1;
	new expamount = nxtlevel*levelexp;
	new hours = PlayerInfo[id][pHours];
	new sex = PlayerInfo[id][pSex];
	new age = PlayerInfo[id][pAge];
	new donate = PlayerInfo[id][pDonateRank];
	new warns = PlayerInfo[id][pWarns];
	new admin = PlayerInfo[id][pAdmin];
	new tester = PlayerInfo[id][pHelper];
	new number = PlayerInfo[id][pNumber];
	new cell = PlayerInfo[id][pCellPhone];
	new housekey = PlayerInfo[id][pHouseKey];
	new bizkey = PlayerInfo[id][pBizKey];
	new channel = PlayerInfo[id][pChannel];
	new Float:shealth = PlayerInfo[id][pSHealth];
	new vehkey = PlayerInfo[id][pCarKey];
	new sparekey = PlayerInfo[id][pSpareKey];
	new workkey = PlayerInfo[id][pWorkOn];
  new faction = PlayerInfo[id][pFaction];
	new rank = PlayerInfo[id][pRank];
	new job = PlayerInfo[id][pJob];
	new sidejob = PlayerInfo[id][pSideJob];

	new ammo1 = PlayerInfo[id][pAmmo1];
	new ammo2 = PlayerInfo[id][pAmmo2];

	new wstring1[56], gunname1[32];
	GetWeaponName(PlayerInfo[id][pPerm1],gunname1,sizeof(gunname1));
	if(PlayerInfo[id][pPerm1] == 0) { wstring1 = "N/A"; }
	else if(PlayerInfo[id][pPerm1] > 0) { wstring1 = gunname1; }
	else { wstring1 = "None"; }

	new wstring2[56], gunname2[32];
	GetWeaponName(PlayerInfo[id][pPerm2],gunname2,sizeof(gunname2));
	if(PlayerInfo[id][pPerm2] == 0) { wstring2 = "N/A"; }
	else if(PlayerInfo[id][pPerm2] > 0) { wstring2 = gunname2; }
	else { wstring2 = "None"; }

	new wstring3[56], gunname3[32];
	GetWeaponName(PlayerInfo[id][pMeleeWep],gunname3,sizeof(gunname3));
	if(PlayerInfo[id][pMeleeWep] == 0) { wstring3 = "N/A"; }
	else if(PlayerInfo[id][pMeleeWep] > 0) { wstring3 = gunname3; }
	else { wstring3 = "None"; }

	new nums[64];
	if(cell == 0) {
		nums = "None";
	} else {
		format(nums, sizeof(nums), "%d", number);
	}

	new houses[64];
	if(housekey == -1) {
		houses = "None";
	} else {
		format(houses, sizeof(houses), "%d", housekey);
	}

	new bizs[64];
	if(bizkey == -1) {
		bizs = "None";
	} else {
		format(bizs, sizeof(bizs), "%d", bizkey);
	}

	new rents[11];
	if(GetIntVar(id, "RentVehKey") == 0) {
		rents = "None";
	} else {
		format(rents, sizeof(rents), "%d", GetIntVar(id, "RentVehKey"));
	}

	new vehs[11];
	if(vehkey == 0) {
		vehs = "None";
	} else {
		format(vehs, sizeof(vehs), "%d", vehkey);
	}

	new works[64];
	if(workkey == -1) {
		works = "None";
	} else {
		format(works, sizeof(works), "%d-%s", workkey, BizInfo[workkey][bizName]);
	}

	new spares[11];
	if(sparekey == 0) {
		spares = "None";
	} else {
		format(spares, sizeof(spares), "%d", sparekey);
	}

	new radios[11];
	if(PlayerInfo[id][pRadio] == 0) {
		radios = "No";
	} else {
		radios = "Yes";
	}

	new sexr[11];
	if(sex == 1) format(sexr,11,"Male");
	else if(sex == 2) format(sexr,11,"Female");

	new drank[11];
	if(donate == 0) format(drank,11,"N/A");
	else if(donate == 1) format(drank,11,"Bronz");
	else if(donate == 2) format(drank,11,"Silver");
	else if(donate == 3) format(drank,11,"Gold");

	new fname[128];
	if(faction == 0) format(fname,128,"N/A");
	else format(fname,128,"%s",GetShortFactionName(faction));

	new rname[128];
	if(rank == 0) format(rname,128,"N/A");
	else format(rname,128,"%s",GetRankName(id));

	new jname[128];
	if(job == 0) format(jname,128,"Unemployed");
	else format(jname,128,"%s",GetJobName(job));

	new sjname[128];
	if(sidejob == 0) format(sjname,128,"N/A");
	else format(sjname,128,"%s",GetJobName(sidejob));

	format(msg, sizeof(msg),"|===============================[ %s's Stats ]===============================|",GetNameEx(id));
	SCM(playerid, COLOR_GREEN,msg);
	format(msg, sizeof(msg), "> {FFFFFF}Character | Faction: [%s] -  Rank: [%s] - Sex: [%s] - Origin: [%s] - Age: [%d] - Ph: [%s]", fname, rname, sexr,PlayerInfo[id][pOrigin],age,nums);
	SCM(playerid, COLOR_ORANGE ,msg);
	format(msg, sizeof(msg), "> {FFFFFF}Weapons | Melee: [%s] - Primary: [%s] - Ammo: [%d] - Secondary: [%s] - Ammo: [%d]", wstring3, wstring1,ammo1,wstring2,ammo2);
	SCM(playerid, COLOR_ORANGE, msg);
	format(msg, sizeof(msg), "> {FFFFFF}Level | Level: [%d] - Experience: [%d/%d] - Donor: [%s]", level,exp,expamount,drank);
	SCM(playerid, COLOR_ORANGE, msg);
	format(msg, sizeof(msg), "> {FFFFFF}Skill | SpawnHealth: [%.1f] - Hours played: [%d] - Fighting style: [%s]", shealth+100.0, hours, GetFightStyleName(id));
	SCM(playerid, COLOR_ORANGE,msg);
	format(msg, sizeof(msg), "> {FFFFFF}Money | Money: [$%d] - Bank: [$%d] - PayCheck: [$%d]", cash, bank, paycheck);
	SCM(playerid, COLOR_ORANGE,msg);
	format(msg, sizeof(msg), "> {FFFFFF}Other | Work: [%s] - House: [%s] - Business: [%s] - Job: [%s] - Secondary job: [%s]", works, houses, bizs, jname, sjname);
	SCM(playerid, COLOR_ORANGE,msg);
	format(msg, sizeof(msg), "> {FFFFFF}Other | Vehicle: [%s] - DuplicateKey: [%s] - Rent-car: [%s] - Radio: [%s] - Channel: [%d]", vehs, spares, rents, radios, channel);
	SCM(playerid, COLOR_ORANGE,msg);
	format(msg, sizeof(msg), "> {FFFFFF}OOC | Warn: [%d] - IP: [%s] - Admin: [%d] - Tester: [%d]", warns, GetPlayerIP(id), admin, tester);
	SCM(playerid, COLOR_ORANGE,msg);
	SCM(playerid, COLOR_GREEN, "|========================================================================|");
	return 1;
}

stock SyntaxMSG(playerid, message[])
{
	format(msg, sizeof(msg), "{6a696a}[Command]: {9c9a9c}%s", message);
	return SCM(playerid, COLOR_GREY, msg);
}

stock ConvoMSG(playerid, message[])
{
	format(msg, sizeof(msg), "{AFAFAF}[Convo]: {00FFFF}%s", message);
	return SCM(playerid, -1, msg);
}

stock NoteMSG(playerid, message[])
{
	format(msg, sizeof(msg), "{AFAFAF}[Note]: {00FFFF}%s", message);
	return SCM(playerid, -1, msg);
}

stock RadioMSG(playerid, message[])
{
	format(msg, sizeof(msg), "{AFAFAF}[Radio]: {DADADA}%s", message);
	return SCM(playerid, -1, msg);
}

stock HouseMSG(playerid, message[])
{
	format(msg, sizeof(msg), "{AFAFAF}[House]: {FFFFFF}%s", message);
	return SCM(playerid, -1, msg);
}

stock CellMSG(playerid, message[])
{
	format(msg, sizeof(msg), "{AFAFAF}[Cellphone]: {FFFFFF}%s", message);
	return SCM(playerid, -1, msg);
}

stock ServerMSG(playerid, message[])
{
	format(msg, sizeof(msg), "{AFAFAF}SERVER: {FFFFFF}%s", message);
	return SCM(playerid, -1, msg);
}

stock FishMSG(playerid, message[])
{
	format(msg, sizeof(msg), "{AFAFAF}[Fishing]: {00FFFF}%s", message);
	return SCM(playerid, -1, msg);
}

stock DmvMSG(playerid, message[])
{
	format(msg, sizeof(msg), "{AFAFAF}[DMV]: {C0C0C0}%s", message);
	return SCM(playerid, -1, msg);
}

stock CheckAdmin(playerid, level)
{
	if (PlayerInfo[playerid][pAdmin] >= level)
		return true;
	else
		return false;
}

stock isTester(playerid)
{
	if (PlayerInfo[playerid][pHelper] >= 1)
		return true;
	else
		return false;
}

stock isAdminDuty(playerid)
{
	if (GetIntVar(playerid, "AdminDuty") == 1)
		return 1;
	else
		return 0;
}

stock isTesterDuty(playerid)
{
	if (GetIntVar(playerid, "TesterDuty") == 1)
		return 1;
	else
		return 0;
}

stock BroadCast(color, string[])
{
	if(strlen(string) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		format(msg, sizeof(msg), "%.*s ...", pos, string);
		SCMALL(color, msg);
		format(msg, sizeof(msg), "... %s", string[pos]);
		SCMALL(color, msg);
	}
	else
	{
		format(msg, sizeof(msg), "%s", string);
		SCMALL(color, msg);
	}
	return 1;
}

stock AddLabelToFile(LabelID, LabelInfo[], virworld, color, gametext, Float:LX, Float:LY, Float:LZ)
{
	format(query, sizeof(query), "INSERT INTO `labels` (posx, posy, posz, color, labeltext, virworld, gametext) VALUES(%f, %f, %f, %d, '%s', %d, %d)", LX, LY, LZ, color, LabelInfo, virworld, gametext);
	mysql_function_query(dbHandle, query, true, "OnLabelInsert", "d", LabelID);
	return 1;
}

stock AddDoorToFile(DoorID, DoorText[], virworld, interior, Float:LX, Float:LY, Float:LZ)
{
	format(query, sizeof(query), "INSERT INTO `doors` (info, enterinterior, virtualworld, posx, posy, posz) VALUES('%s', %d, %d, %f, %f, %f)", DoorText, interior, virworld, LX, LY, LZ);
	mysql_function_query(dbHandle, query, true, "OnDoorInsert", "d", DoorID);
	return 1;
}

stock AddFactionDoorToFile(DoorID, vehicle, interior, faction, info[], Float:LX, Float:LY, Float:LZ)
{
	format(query, sizeof(query), "INSERT INTO `factiondoors` (info, withvehicle, enterinterior, faction, enterx, entery, enterz) VALUES('%s', %d, %d, %d, %f, %f, %f)", info, vehicle, interior, faction, LX, LY, LZ);
	mysql_function_query(dbHandle, query, true, "OnFactionDoorInsert", "d", DoorID);
	return 1;
}

stock AddTeleToFile(teleid, mapname[], interior, Float:LX, Float:LY, Float:LZ)
{
	format(query, sizeof(query), "INSERT INTO `ateles` (mapname, posx, posy, posz, interior) VALUES('%s', %f, %f, %f, %d)", mapname, LX, LY, LZ, interior);
	mysql_function_query(dbHandle, query, true, "OnTeleportInsert", "d", teleid);
	return 1;
}

stock AddInfoToFile(infoid, virworld, labeltext[], labeltext2[], otherinfo[], Float:x, Float:y, Float:z)
{
	format(query, sizeof(query), "INSERT INTO `infos` (posx, posy, posz, labeltext, labeltext2, otherinfo, virworld) VALUES(%f, %f, %f, '%s', '%s', '%s', %d)", x, y, z, labeltext, labeltext2, otherinfo, virworld);
	mysql_function_query(dbHandle, query, true, "OnInfoInsert", "d", infoid);
	return 1;
}

stock AddDealerShipToFile(dealerid, info[], Float:x, Float:y, Float:z)
{
	format(query, sizeof(query), "INSERT INTO `dealerships` (posx, posy, posz, info) VALUES(%f, %f, %f, '%s')", x, y, z, info);
	mysql_function_query(dbHandle, query, true, "OnDealerShipInsert", "d", dealerid);
	return 1;
}

stock AddBankToFile(bankid, interior, info[], Float:x, Float:y, Float:z)
{
	format(query, sizeof(query), "INSERT INTO `banks` (posx, posy, posz, interior, info) VALUES(%f, %f, %f, %d, '%s')", x, y, z, interior, info);
	mysql_function_query(dbHandle, query, true, "OnBankInsert", "d", bankid);
	return 1;
}

stock AddATMToFile(atmid, atminfo[], interior, Float:x, Float:y, Float:z)
{
	format(query, sizeof(query), "INSERT INTO `atms` (posx, posy, posz, interior, info) VALUES(%f, %f, %f, %d, '%s')", x, y, z, interior, atminfo);
	mysql_function_query(dbHandle, query, true, "OnATMInsert", "d", atmid);
	return 1;
}

stock AddStationToFile(stationid, stationinfo[], price, Float:x, Float:y, Float:z)
{
	format(query, sizeof(query), "INSERT INTO `gstations` (posx, posy, posz, price, info) VALUES(%f, %f, %f, %d, '%s')", x, y, z, price, stationinfo);
	mysql_function_query(dbHandle, query, true, "OnStationInsert", "d", stationid);
	return 1;
}

stock AddObjectToFile(objectid, modelid, interior, virworld, Float:x, Float:y, Float:z, name[])
{
	format(query, sizeof(query), "INSERT INTO `objects` (model, posx, posy, posz, posrx, posry, posrz, interior, virworld, objectname) VALUES(%d, %f, %f, %f, 0.0, 0.0, 0.0, %d, %d, '%s')",modelid,x,y,z,interior,virworld,name);
	mysql_function_query(dbHandle, query, true, "OnObjectInsert", "d", objectid);
	return 1;
}

stock AddCameraToFile(objectid, faction, interior, virworld, Float:x, Float:y, Float:z, name[])
{
	format(query, sizeof(query), "INSERT INTO `cctvs` (faction, posx, posy, posz, posrx, posry, posrz, interior, virworld, info) VALUES(%d, %f, %f, %f, 0.0, 0.0, 0.0, %d, %d, '%s')",faction,x,y,z,interior,virworld,name);
	mysql_function_query(dbHandle, query, true, "OnCameraInsert", "d", objectid);
	return 1;
}

stock AddMoveDoorToFile(objectid, modelid, faction, interior, virworld, Float:x, Float:y, Float:z, name[])
{
	format(query, sizeof(query), "INSERT INTO `movedoors` (model, faction, posx, posy, posz, posrx, posry, posrz, interior, virworld, name) VALUES(%d, %d, %f, %f, %f, 0.0, 0.0, 0.0, %d, %d, '%s')",modelid,faction,x,y,z,interior,virworld,name);
	mysql_function_query(dbHandle, query, true, "OnMoveDoorInsert", "d", objectid);
	return 1;
}

stock AddGateToFile(objectid, modelid, faction, interior, virworld, Float:x, Float:y, Float:z, Float:speed, Float:movex, Float:movey, name[])
{
	format(query, sizeof(query), "INSERT INTO `gates` (model, faction, posx, posy, posz, posrx, posry, posrz, openspeed, movex, movey, interior, virworld, name) VALUES(%d, %d, %f, %f, %f, 0.0, 0.0, 0.0, %f, %f, %f, %d, %d, '%s')",modelid,faction,x,y,z,speed,movex,movey,interior,virworld,name);
	mysql_function_query(dbHandle, query, true, "OnGateInsert", "d", objectid);
	return 1;
}

stock AddVehicleToFile(vehid, type, faction, modelid, Float:x, Float:y, Float:z, Float:a, color1, color2, info[], plate[])
{
	format(query, sizeof(query), "INSERT INTO `vehicles` (model, faction, color1, color2, posx, posy, posz, posa, type, plate, info) VALUES(%d, %d, %d, %d, %f, %f, %f, %f, %d, '%s', '%s')",
	modelid, faction, color1, color2, x, y, z, a, type, plate, info);
	mysql_function_query(dbHandle, query, true, "OnVehicleInsert", "d", vehid);
	return 1;
}

stock AddHouseToFile(houseid, price, houseinfo[], Float:x, Float:y, Float:z)
{
	format(query, sizeof(query), "INSERT INTO `houses` (posx, posy, posz, checkx, checky, checkz, info, price, owned, owner, cash, rentprice, rentable, locked, radio) VALUES(%f, %f, %f, %f, %f, %f, '%s', %d, %d, '%s', %d, %d, %d, %d, %d)",
	x, y, z, 0.0, 0.0, 0.0, houseinfo, price, 0, "The State", 0, 0, 0, 1, 0);
	mysql_function_query(dbHandle, query, true, "OnHouseInsert", "d", houseid);
	return 1;
}

stock AddBizToFile(bizid, price, type, owner[], name[], entermsg[], info[], Float:x, Float:y, Float:z)
{
	format(query, sizeof(query), "INSERT INTO `business` (posx, posy, posz, name, info, entermsg, owner, owned, locked, price, cash, world, type) VALUES(%f, %f, %f, '%s', '%s', '%s', '%s', %d, %d, %d, %d, %d, %d)",
	x, y, z, name, info, entermsg, owner, 0, 1, price, 0, bizid, type);
	mysql_function_query(dbHandle, query, true, "OnBizInsert", "d", bizid);
	return 1;
}

stock AddFactionToFile(factionid, name[], color, type, rankamount, chaton)
{
	format(query, sizeof(query), "INSERT INTO `factions` (factionid, name, color, type, rankamount, chaton) VALUES(%d, '%s', %d, %d, %d, %d)", factionid, name, color, type, rankamount, chaton);
	mysql_function_query(dbHandle, query, true, "OnFactionInsert", "d", factionid);
	return 1;
}

stock AddJobToFile(jobid, name[], sidejob, rankamount, highrank, Float:x, Float:y, Float:z)
{
	format(query, sizeof(query), "INSERT INTO `jobs` (jobid, name, sidejob, ranks, highrank, posx, posy, posz) VALUES(%d, '%s', %d, %d, %d, %f, %f, %f)", jobid, name, sidejob, rankamount, highrank, x, y, z);
	mysql_function_query(dbHandle, query, true, "OnJobInsert", "d", jobid);
	return 1;
}

stock AddFoodStandToFile(standid, standinfo[], Float:x, Float:y, Float:z)
{
	format(query, sizeof(query), "INSERT INTO `foodstands` (posx, posy, posz, info) VALUES(%f, %f, %f, '%s')",
	x, y, z, standinfo);
	mysql_function_query(dbHandle, query, true, "OnFoodStandInsert", "d", standid);
	return 1;
}

stock AddParkMeterToFile(parkid, parkinfo[], Float:x, Float:y, Float:z)
{
	format(query, sizeof(query), "INSERT INTO `parkmeters` (posx, posy, posz, posrx, posry, posrz, minutes, name) VALUES(%f, %f, %f, %f, %f, %f, %d, '%s')",
	x, y, z, 0.0, 0.0, 0.0, 0, parkinfo);
	mysql_function_query(dbHandle, query, true, "OnParkMeterInsert", "d", parkid);
	return 1;
}

stock SaveEditedObject(objectid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	format(query, sizeof(query), "UPDATE `objects` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %d",x,y,z,rx,ry,rz,ObjectsInfo[objectid][oID]);
	mysql_function_query(dbHandle, query, true, "OnEditedObject", "d", objectid);
	return 1;
}

stock SaveEditedCamera(objectid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	format(query, sizeof(query), "UPDATE `cctvs` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %d",x,y,z,rx,ry,rz,CCTVInfo[objectid][tvID]);
	mysql_function_query(dbHandle, query, true, "OnEditedCamera", "d", objectid);
	return 1;
}

stock SaveEditedMoveDoor(objectid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	format(query, sizeof(query), "UPDATE `movedoors` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %d",x,y,z,rx,ry,rz,Doors[objectid][doorID]);
	mysql_function_query(dbHandle, query, true, "OnEditedMoveDoor", "d", objectid);
	return 1;
}

stock SaveEditedGate(objectid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	format(query, sizeof(query), "UPDATE `gates` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %d",x,y,z,rx,ry,rz,Gates[objectid][gateID]);
	mysql_function_query(dbHandle, query, true, "OnEditedGate", "d", objectid);
	return 1;
}

stock SaveEditedFoodStand(standid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	format(query, sizeof(query), "UPDATE `foodstands` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %d",x,y,z,rx,ry,rz,FoodStand[standid][fID]);
	mysql_function_query(dbHandle, query, true, "OnEditedFoodStand", "d", standid);
	return 1;
}

stock SaveEditedParkMeter(parkid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	format(query, sizeof(query), "UPDATE `parkmeters` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %d",x,y,z,rx,ry,rz,ParkMeters[parkid][parkID]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

stock AddDoorExit(doorid, interior, Float:LX, Float:LY, Float:LZ)
{
	format(query, sizeof(query), "UPDATE `doors` SET `exitinterior` = %d, `exitx` = %f, `exity` = %f, `exitz` = %f WHERE `id` = %d", interior, LX, LY, LZ, DoorInfo[doorid][dID]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

stock AddDoorEnter(doorid, interior, Float:LX, Float:LY, Float:LZ)
{
	format(query, sizeof(query), "UPDATE `doors` SET `enterinterior` = %d, `posx` = %f, `posy` = %f, `posz` = %f WHERE `id` = %d", interior, LX, LY, LZ, DoorInfo[doorid][dID]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

stock AddFactionDoorExit(doorid, interior, Float:LX, Float:LY, Float:LZ)
{
	format(query, sizeof(query), "UPDATE `factiondoors` SET `exitinterior` = %d, `exitx` = %f, `exity` = %f, `exitz` = %f WHERE `id` = %d", interior, LX, LY, LZ, FactionDoors[doorid][dID]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

stock AddFactionDoorEnter(doorid, interior, Float:LX, Float:LY, Float:LZ)
{
	format(query, sizeof(query), "UPDATE `factiondoors` SET `enterinterior` = %d, `enterx` = %f, `entery` = %f, `enterz` = %f WHERE `id` = %d", interior, LX, LY, LZ, FactionDoors[doorid][dID]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

stock AddLabelsFromFile()
{
	format(query, sizeof(query), "SELECT * FROM `labels`");
	mysql_function_query(dbHandle, query, true, "LoadDynamicLabels", "");
	return 1;
}

stock AddDoorsFromFile()
{
	format(query, sizeof(query), "SELECT * FROM `doors`");
	mysql_function_query(dbHandle, query, true, "LoadDynamicDoors", "");
	return 1;
}

stock AddFactionDoors()
{
	format(query, sizeof(query), "SELECT * FROM `factiondoors`");
	mysql_function_query(dbHandle, query, true, "LoadDynamicFactionDoors", "");
	return 1;
}

stock AddDynamicGates()
{
	format(query, sizeof(query), "SELECT * FROM `gates`");
	mysql_function_query(dbHandle, query, true, "LoadDynamicGates", "");
	return 1;
}

stock AddMoveDoorsFromFile()
{
	format(query, sizeof(query), "SELECT * FROM `movedoors`");
	mysql_function_query(dbHandle, query, true, "LoadMoveDoors", "");
	return 1;
}

stock AddATMFromFile()
{
	format(query, sizeof(query), "SELECT * FROM `atms`");
	mysql_function_query(dbHandle, query, true, "LoadDynamicATMS", "");
	return 1;
}

stock AddAdminTeleports()
{
	format(query, sizeof(query), "SELECT * FROM `ateles`");
	mysql_function_query(dbHandle, query, true, "LoadDynamicTeles", "");
	return 1;
}

stock AddDynamicObjects()
{
	format(query, sizeof(query), "SELECT * FROM `objects`");
	mysql_function_query(dbHandle, query, true, "LoadDynamicObjects", "");
	return 1;
}

stock AddDynamicCCTV()
{
	format(query, sizeof(query), "SELECT * FROM `cctvs`");
	mysql_function_query(dbHandle, query, true, "LoadDynamicCCTV", "");
	return 1;
}

stock AddDynamicInfos()
{
	format(query, sizeof(query), "SELECT * FROM `infos`");
	mysql_function_query(dbHandle, query, true, "LoadDynamicCPT", "");
	return 1;
}

stock AddDynamicGasStations()
{
	format(query, sizeof(query), "SELECT * FROM `gstations`");
	mysql_function_query(dbHandle, query, true, "LoadDynamicGasStations", "");
	return 1;
}

stock AddDynamicBanks()
{
	format(query, sizeof(query), "SELECT * FROM `banks`");
	mysql_function_query(dbHandle, query, true, "LoadDynamicBanks", "");
	return 1;
}

stock AddDynamicVehicles()
{
	format(query, sizeof(query), "SELECT * FROM `vehicles`");
	mysql_function_query(dbHandle, query, true, "LoadDynamicVehicles", "");
	return 1;
}

stock AddDynamicHouses()
{
	format(query, sizeof(query), "SELECT * FROM `houses`");
	mysql_function_query(dbHandle, query, true, "LoadDynamicHouses", "");
	return 1;
}

stock AddDynamicComplexs()
{
  format(query, sizeof(query), "SELECT * FROM `complexs`");
  mysql_function_query(dbHandle, query, true, "LoadDynamicComplexs", "");
  return 1;
}

stock AddDynamicBiz()
{
	format(query, sizeof(query), "SELECT * FROM `business`");
	mysql_function_query(dbHandle, query, true, "LoadDynamicBiz", "");
	return 1;
}

stock AddDynamicStands()
{
	format(query, sizeof(query), "SELECT * FROM `foodstands`");
	mysql_function_query(dbHandle, query, true, "LoadDynamicStands", "");
	return 1;
}

stock AddDynamicMeters()
{
	format(query, sizeof(query), "SELECT * FROM `parkmeters`");
	mysql_function_query(dbHandle, query, true, "LoadDynamicMeters", "");
	return 1;
}

stock LoadApbs()
{
	format(query, sizeof(query), "SELECT * FROM `apbs`");
	mysql_function_query(dbHandle, query, true, "OnLoadApbs", "");
	return 1;
}

stock AddDynamicFactions()
{
	format(query, sizeof(query), "SELECT * FROM `factions` ORDER BY `factionid`");
	mysql_function_query(dbHandle, query, true, "LoadDynamicFactions", "");
	return 1;
}

stock AddDynamicJobs()
{
	format(query, sizeof(query), "SELECT * FROM `jobs` ORDER BY `jobid`");
	mysql_function_query(dbHandle, query, true, "LoadDynamicJobs", "");
	return 1;
}

stock AddRadios()
{
	format(query, sizeof(query), "SELECT * FROM `radios`");
	mysql_function_query(dbHandle, query, true, "LoadRadios", "");
	return 1;
}

stock LoadDealerShips()
{
	format(query, sizeof(query), "SELECT * FROM `dealerships`");
	mysql_function_query(dbHandle, query, true, "LoadDynamicDealerShips", "");
	return 1;
}

stock CreateAllMenus()
{
	//Food Stall Menu
	FoodStallMenu = CreateMenu("~y~ Menu", 1,20,120,150,40);
	AddMenuItem(FoodStallMenu, 0, "Noodles");
	AddMenuItem(FoodStallMenu, 0, "Pizza");
	AddMenuItem(FoodStallMenu, 0, "Chicken Wings");
	AddMenuItem(FoodStallMenu, 0, "Hot Dog");
	AddMenuItem(FoodStallMenu, 0, "Exit");
	//Food Stall Menu
	return 1;
}

stock number_format( num )
{
	new stri[16], stro[16], i, v, p, d, l, n = num < 0;

	format( stri, sizeof( stri ), "%d", num * ( n ? -1 : 1 ) );

	l = strlen( stri ) - 1;
	d = ( l - ( l % 3 ) ) / 3;
	l = l + 1;
	i = l + d;
	p = l;

	while ( i >= 0 )
	{
	    v = l + d - i;

	    if ( v && !( v % 4 ) )
     		stro[i + n] = ',';
		else
		    stro[i + n] = stri[p--];

     	i--;
	}

	stro[0] = n ? '-' : stro[0];

	return stro;
}

public BlinkingLights(playerid)
{
    if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 )
    {
        new Panels, Doors1, Lights, Tires;
        GetVehicleDamageStatus(GetPlayerVehicleID(playerid), Panels, Doors1, Lights, Tires);
        UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), Panels, Doors1, encode_lights(0,0,1,1), Tires);
    	TLI = SetTimerEx("TimerBlinkingLights", 100, false, "d", GetPlayerVehicleID(playerid));
    }
}
public ShutOffBlinkingLights(playerid)
{
	if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 )
	{
	   KillTimer(TLI);
	   KillTimer(TLI2);
	   new Panels, Doors1, Lights, Tires;
	   GetVehicleDamageStatus(GetPlayerVehicleID(playerid), Panels, Doors1, Lights, Tires);
	   UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), Panels, Doors1, encode_lights(0,0,0,0), Tires);
	}
}
public TimerBlinkingLights(vehicleid)
{
	new Panels, Doors1, Lights, Tires;
	GetVehicleDamageStatus(vehicleid, Panels, Doors1, Lights, Tires);
	UpdateVehicleDamageStatus(vehicleid, Panels, Doors1, encode_lights(1,1,0,0), Tires);
	TLI2 = SetTimerEx("TimerBlinkingLights2", 100, false, "d", vehicleid);
}
public TimerBlinkingLights2(vehicleid)
{
    new Panels, Doors1, Lights, Tires;
    GetVehicleDamageStatus(vehicleid, Panels, Doors1, Lights, Tires);
    UpdateVehicleDamageStatus(vehicleid, Panels, Doors1, encode_lights(0,0,1,1), Tires);
    TLI = SetTimerEx("TimerBlinkingLights", 100, false, "d", vehicleid);
}
public THERMALON( playerid, veh )
{
    TextDrawDestroy( crosshair[playerid] ); //Destroying the crosshair
	crosshair[playerid] = TextDrawCreate( 306.0, 218.0, "+" ); // Creating the crosshair
	TextDrawLetterSize( crosshair[playerid], 1.4 ,1.4 ); //Setting the size of the crosshair
	TextDrawShowForPlayer( playerid, crosshair[playerid] ); //Showing the crosshair for the player
    objectids[veh] = CreateObject( 3785,0,0,0,0,0,0,80 ); // creating a light object as it will act like a camera
    AttachObjectToVehicle( objectids[veh], veh, 0.000000, 2.599999, -0.800000, 0.000000, 0.000000, 0.000000 ); // attaching the object to the helicoper
    AttachCameraToObject( playerid, objectids[veh] ); // now we attach our camera to the object
    SetPVarInt( playerid, "ThermalActive", 1 ); // setting thermalactive true
    SCM(playerid,COLOR_WHITE,"You walked in /helicam. To get out the same command uses");
    playerveh[playerid] = veh; // Storing the vehicleID in a variable
    return 1;
}
public THERMALOFF(playerid)
{
	TextDrawDestroy( crosshair[playerid] ); // Destroying the crosshair
	new vehid = playerveh[playerid];	SCM(playerid,COLOR_GREY,"You just walked out of the Helicam");
	DeletePVar( playerid,"ThermalActive" ); // Deleting thermalactive from player
	SetCameraBehindPlayer( playerid ); // Setting the camera back to the player
	DestroyObject(objectids[vehid]); // Destroying the light from the helicopter
	return 1;
}
public UnFreezePlayer(playerid)
{
	RemoveVar(playerid, "isFrozen");
	TogglePlayerControllable(playerid, true);
	return 1;
}

public UnFreezePaint(playerid)
{
    new vehicle = GetPlayerVehicleID(playerid);
	RemoveVar(playerid, "isFrozen");
	TogglePlayerControllable(playerid, true);
 	SetVehiclePos(vehicle, 2074.7339,-1830.4504,13.3312);
 	SetVehicleZAngle(vehicle, 157.7101);
 	return 1;
}

public UnFreezePaint1(playerid)
{
    new vehicle = GetPlayerVehicleID(playerid);
	RemoveVar(playerid, "isFrozen");
	TogglePlayerControllable(playerid, true);
	SetVehiclePos(vehicle, 1024.7374,-1032.0444,31.5429);
	SetVehicleZAngle(vehicle, 359.1382);
	return 1;
}

public UnFreezePaint2(playerid)
{
    new vehicle = GetPlayerVehicleID(playerid);
	RemoveVar(playerid, "isFrozen");
	TogglePlayerControllable(playerid, true);
	SetVehiclePos(vehicle, 488.2218,-1732.0660,10.8674);
	SetVehicleZAngle(vehicle, 177.2970);
	return 1;
}

public FreezePlayer(playerid)
{
	SetIntVar(playerid, "isFrozen", 1);
	TogglePlayerControllable(playerid, false);
	return 1;
}

stock isFrozen(playerid)
{
	if(GetIntVar(playerid, "isFrozen") == 1)
		return true;
	else
		return false;
}

stock TextDraws_Init()
{
	ClothesText = TextDrawCreate(310.000000,361.000000,"To change the skin~n~uses ~r~right click/left click~w~.");
	TextDrawAlignment(ClothesText,2);
	TextDrawBackgroundColor(ClothesText,0x000000ff);
	TextDrawFont(ClothesText,3);
	TextDrawLetterSize(ClothesText,0.399999,1.800000);
	TextDrawColor(ClothesText,0xffffffff);
	TextDrawSetOutline(ClothesText,1);
	TextDrawSetProportional(ClothesText,1);
	TextDrawSetShadow(ClothesText,1);
	return 1;
}

stock ShowHudTextDraws(playerid, toggle)
{
	if(toggle) {
		ShowRadioTextDraw(playerid);
		ShowNetworkTextDraw(playerid);
		ShowLocationTextDraw(playerid);
		ShowTimeTextDraw(playerid);
		ShowNewsTextDraw(playerid);
		ShowStatusTextDraw(playerid);
	}
	else {
		HideRadioTextDraw(playerid);
		HideNetworkTextDraw(playerid);
		HideLocationTextDraw(playerid);
		HideTimeTextDraw(playerid);
		HideNewsTextDraw(playerid);
		HideStatusTextDraw(playerid);
	}
	return 1;
}

stock ShowSkinMenu(playerid)
{
	ShowModelSelectionMenu(playerid, skinlist, "Skins");
	SelectTextDraw(playerid, 0xACCBF1FF);
	return 1;
}

stock ShowVehicleMenu(playerid)
{
	ShowModelSelectionMenu(playerid, vehiclelist, "Vehicles");
	SelectTextDraw(playerid, 0xACCBF1FF);
	return 1;
}

stock ShowWeaponsMenu(playerid)
{
	ShowModelSelectionMenu(playerid, weaponlist, "Weapons");
	SelectTextDraw(playerid, 0xACCBF1FF);
	return 1;
}

stock ShowBuyableCars(playerid)
{
	ShowModelSelectionMenu2(playerid, buyable, "Dealership");
	SelectTextDraw(playerid, 0xFF727272);
	return 1;
}
stock ShowRentCars(playerid)
{
	ShowModelSelectionMenu(playerid, rentablecar, "Vehicles available");
	SelectTextDraw(playerid, 0xFF6A22FF);
	return 1;
}

stock TMSG(color, string[])
{
	foreach(Player, i)
	{
		if(PlayerInfo[i][pHelper] > 0)
		{
			SCM(i, color, string);
		}
	}
	return 1;
}

stock AMSG(color, string[])
{
	foreach(Player, i)
	{
		if(CheckAdmin(i, 1))
		{
			SCM(i, color, string);
		}
	}
	return 1;
}

stock StaffMSG(color, string[])
{
	foreach(Player, i)
	{
		if(CheckAdmin(i, 1) || PlayerInfo[i][pHelper] > 0)
		{
			SCM(i, color, string);
		}
	}
	return 1;
}

stock KickWithMSG(playerid)
{
	SetTimerEx("KickPlayer",100,0,"d",playerid);
}

stock BanWithMSG(playerid, message[])
{
	PlayerInfo[playerid][pBanned] = 1;
	SCMALL(0xFF4444FF, message);
	SetTimerEx("BanPlayer",100,0,"d",playerid);
}

public BanWithMSGEx(playerid, message[], reason[])
{
	PlayerInfo[playerid][pBanned] = 1;
	SetTimerEx("BanPlayerEx",100,0,"ds[128]",playerid,reason);
}

stock KickEx2(playerid, message[])
{
	SCM(playerid, COLOR_LIGHTRED, message);
	SetTimerEx("KickPlayer",100,0,"d",playerid);
}


stock KickEx(playerid)
{
	SetTimerEx("KickPlayer",100,0,"d",playerid);
}

stock PutPlayer(playerid, Float:x, Float:y, Float:z)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		SetVehiclePos(GetPlayerVehicleID(playerid), x, y, z);
	}
	else
	{
		SetPlayerPos(playerid, x, y ,z);
	}
}

stock PlayerIsOn(playerid)
{
	if(PlayerLogged(playerid) && playerid != INVALID_PLAYER_ID)
		return true;
	else
		return false;
}

stock NotConnectedMSG(playerid)
{
	return ServerMSG(playerid, "The player is not connected.");
}

stock NotNearPlayerMSG(playerid)
{
	return ServerMSG(playerid, "The player is not near you.");
}

stock PlayerInCar(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
		return true;
	else
		return false;
}

stock NotInCarMSG(playerid)
{
	return SCM(playerid,COLOR_WHITE, "You're not in a vehicle.");
}

stock SetCurrentTime()
{
	gettime(ghour, gminute, gsecond);
	FixHour(ghour);
	ghour = shifthour;
	SetWorldTime(ghour);
	return 1;
}

stock randomEx(min, max)
{
    new rand = random(max-min)+min;
    return rand;
}

stock SendStaffMessage(color, string[])
{
	foreach(Player, i)
	{
		if(PlayerInfo[i][pHelper] == 1 || CheckAdmin(i, 1))
		{
			if(TesterChat{i})
			{
				SCM(i, color, string);
			}
		}
	}
	return 1;
}

stock PlaySound(playerid, soundid)
{
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid, x, y, z);
	PlayerPlaySound(playerid, soundid, x, y, z);
}

stock GetLevel(playerid)
{
	return PlayerInfo[playerid][pLevel];
}

stock GetPlayerIP(playerid)
{
	new IP[100];
	GetPlayerIp(playerid, IP, sizeof(IP));
	return IP;
}

stock ShowLicenses(playerid, targetid)
{
	new carlic[126], weplic[126], flylic[126];
	if(PlayerInfo[playerid][pCarLic]) { carlic = "Yes"; } else { carlic = "No"; }
	if(PlayerInfo[playerid][pWepLic]) { weplic = "Yes"; } else { weplic = "No"; }
	if(PlayerInfo[playerid][pFlyLic]) { flylic = "Yes"; } else { flylic = "No"; }

	SCM(targetid, COLOR_GREEN, "__________Los Santos ID__________");
	format(msg, sizeof(msg), "Name : %s, Age: %d", GetNameEx(playerid), PlayerInfo[playerid][pAge]);
	SCM(targetid, COLOR_WHITE, msg);
	format(msg, sizeof(msg), "Driving License: %s.", carlic);
	SCM(targetid, COLOR_WHITE, msg);
  	format(msg, sizeof(msg), "Driver warnings: %d", PlayerInfo[playerid][pDriveWarns]);
  	SCM(targetid, COLOR_WHITE, msg);
	format(msg, sizeof(msg), "Weapon License: %s.", weplic);
	SCM(targetid, COLOR_WHITE, msg);
	format(msg, sizeof(msg), "Flying License: %s.", flylic);
	SCM(targetid, COLOR_WHITE, msg);
  	if(IsVehicleSpawned(PlayerInfo[playerid][pCarKey]))
  	{
	    format(msg, sizeof(msg), "Vehicle Registered: [%s].", VehicleInfo[PlayerInfo[playerid][pCarKey]][carPlate]);
	    SCM(targetid, COLOR_WHITE, msg);
  	}
	SCM(targetid, COLOR_GREEN, "_________________________________");
}

stock PlayerIsWounded(playerid)
{
	if(GetIntVar(playerid, "JustAcceptedDeath") == 1 || GetIntVar(playerid, "JustDied") == 1 || PlayerInfo[playerid][pDied] == 1 || GetIntVar(playerid, "LoggedInDead") == 1)
	{
		return true;
	}
	else
	{
		return false;
	}
}

stock CheckFightStyle(playerid)
{
	return SetFightStyle(playerid, PlayerInfo[playerid][pFightStyle]);
}

stock CarIsRented(vehicle, playerid)
{
	foreach(Player, i)
	{
		if(GetIntVar(i, "RentedCar") == 1 && GetIntVar(i, "RentVehKey") == vehicle && i != playerid) return RentMSG(playerid, "Aceasta masina este deja probabil inchiriata.");
	}
	if(GetIntVar(playerid, "RentedCar") == 1 && GetIntVar(playerid, "RentVehKey") == vehicle)
	{
		RentMSG(playerid, "Welcome to your rented car.");
	}
	return 1;
}

stock BikeIsRented(vehicle, playerid)
{
	foreach(Player, i)
	{
		if(GetIntVar(i, "RentedCar") == 1 && GetIntVar(i, "RentVehKey") == vehicle && i != playerid) return RentMSG(playerid, "This bike is not rentable, someone else rented it.");
	}
	if(GetIntVar(playerid, "RentedCar") == 1 && GetIntVar(playerid, "RentVehKey") == vehicle)
	{
		RentMSG(playerid, "Welcome to your rented bike.");
	}
	else
	{
		format(msg, sizeof(msg), "This bike is rentable for {808040}$%d{00FFFF}, '/rentbike'.", BIKE_RENT_COST);
		RentMSG(playerid, msg);
	}
	return 1;
}

stock RentMSG(playerid, message[])
{
	format(msg, sizeof(msg), "[RENT-COMPANY]{FFFFFF}: %s", message);
	return SCM(playerid, COLOR_GREY, msg);
}

stock NoCashMSG(playerid)
{
	return SCM(playerid, COLOR_WHITE, "ERROR: You don't have enough money.");
}

stock RespawnVehicle(vehicleid)
{
	SetVehicleToRespawn(vehicleid);
	VehicleEngine(vehicleid, false);
	ToggleVehicleLock(vehicleid, false);
	return 1;
}

stock ToggleVehicleLock(vehicleid, bool:toggle)
{
	if(toggle == true)
	{
		foreach(Player, i)
		{
			SetVehicleParamsForPlayer(vehicleid,i,0,1);
		}
		vLocked{vehicleid} = 1;
	}
	else if(toggle == false)
	{
		foreach(Player, i)
		{
			SetVehicleParamsForPlayer(vehicleid,i,0,0);
		}
		vLocked{vehicleid} = 0;
	}
	return 1;
}

stock ToggleVehicleLockForPlayer(playerid, vehicleid, bool:toggle)
{
	if(toggle == true)
	{
		SetVehicleParamsForPlayer(vehicleid,playerid,0,1);
	}
	else if(toggle == false)
	{
		SetVehicleParamsForPlayer(vehicleid,playerid,0,0);
	}
	return 1;
}

stock VehicleEngine(vehicleid, bool:toggle)
{
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	if(toggle == true)
	{
		SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective);
		engineOn{vehicleid} = true;
	}
	else
	{
		SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective);
		engineOn{vehicleid} = false;
	}
	return 1;
}

stock ToggleVehicleEngine(vehicleid, playerid)
{
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(!engineOn{vehicleid})
	{
		new Float:hp;
		GetVehicleHealth(vehicleid, hp);
		new start = randomEx(1, 7);
		if(hp < 700)
		{
			if(start == 1 || start == 6)
			{
				GameTextForPlayer(playerid, "~r~The vehicle failed to start beacuse was damaged", 3000, 4);
				return 1;
			}
		}
		if(hp < 500)
		{
			if(start == 1 || start == 2 || start == 5 || start == 6)
			{
				GameTextForPlayer(playerid, "~r~The vehicle failed to start beacuse was damaged", 3000, 4);
				return 1;
			}
		}
		if(hp < 300)
		{
			if(start == 1 || start == 2 || start == 3 || start == 5 || start == 6)
			{
				GameTextForPlayer(playerid, "~r~The vehicle failed to start beacuse was damaged", 3000, 4);
				return 1;
			}
		}
		format(msg, sizeof(msg), "~g~ENGINE ON");
		GameTextForPlayer(playerid, msg, 2500, 4);
		SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective);
		format(msg, sizeof(msg), "started the engine of %s", VehicleNames[GetVehicleModel(vehicleid)-400]);
		ActionMessage(playerid,15.0,msg);
		engineOn{vehicleid} = true;
	}
	else if(engineOn{vehicleid})
	{
		format(msg, sizeof(msg), "~w~ENGINE OFF");
		GameTextForPlayer(playerid, msg, 2500, 4);
		SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective);
		format(msg, sizeof(msg), "stopped the engine of %s", VehicleNames[GetVehicleModel(vehicleid)-400]);
		ActionMessage(playerid,15.0,msg);
		engineOn{vehicleid} = false;
	}
	return 1;
}

stock SetCheckPoint(playerid, value, Float:x, Float:y, Float:z, Float:size)
{
	SetIntVar(playerid, "PlayerCP", value);
	SetPlayerCheckpoint(playerid, x, y, z, size);
	return 1;
}

stock SetRaceCheckPoint(playerid, value, type, Float:x, Float:y, Float:z, Float:nextx, Float:nexty, Float:nextz, Float:size)
{
	SetIntVar(playerid, "PlayerCP", value);
	SetPlayerRaceCheckpoint(playerid, type, x, y, z, nextx, nexty, nextz, size);
	return 1;
}

stock RemoveCheckPoint(playerid)
{
	RemoveVar(playerid, "PlayerCP");
	DisablePlayerCheckpoint(playerid);
	return 1;
}

stock RemoveRaceCheckPoint(playerid)
{
	RemoveVar(playerid, "PlayerCP");
	DisablePlayerRaceCheckpoint(playerid);
	return 1;
}

stock HandleLicenseExam(playerid)
{
 	new vehicleid = GetPlayerVehicleID(playerid);
	if(IsADMVCar(vehicleid) && GetIntVar(playerid, "InDriveTest") == 1)
	{
		if(GetIntVar(playerid, "PlayerCP") >= 1 && GetIntVar(playerid, "PlayerCP") <= 14) //Playing sound when entering a checkpoint.
			PlaySound(playerid, 1138);
		if(GetIntVar(playerid, "PlayerCP") == 1)
		{
			SetIntVar(playerid, "LessonStarted", 1);
			RemoveCheckPoint(playerid);
			SetCheckPoint(playerid, CAREXAM2, 1283.5216,-1854.6621,13.3906, 4.0);
		}
		else if(GetIntVar(playerid, "PlayerCP") == 2)
		{
			RemoveCheckPoint(playerid);
			SetCheckPoint(playerid, CAREXAM3, 1314.8804,-1773.1777,13.3828, 4.0);
		}
		else if(GetIntVar(playerid, "PlayerCP") == 3)
		{
			RemoveCheckPoint(playerid);
			SetCheckPoint(playerid, CAREXAM4, 1375.2495,-1734.6357,13.3828, 4.0);
		}
		else if(GetIntVar(playerid, "PlayerCP") == 4)
		{
			RemoveCheckPoint(playerid);
			SetCheckPoint(playerid, CAREXAM5, 1482.8942,-1734.7388,13.3828, 4.0);
		}
		else if(GetIntVar(playerid, "PlayerCP") == 5)
		{
			RemoveCheckPoint(playerid);
			SetCheckPoint(playerid, CAREXAM6, 1624.9122,-1734.8265,13.3828, 4.0);
		}
		else if(GetIntVar(playerid, "PlayerCP") == 6)
		{
			RemoveCheckPoint(playerid);
			SetCheckPoint(playerid, CAREXAM7, 1811.8945,-1734.8025,13.3828, 4.0);
		}
		else if(GetIntVar(playerid, "PlayerCP") == 7)
		{
			RemoveCheckPoint(playerid);
			SetCheckPoint(playerid, CAREXAM8, 1819.2355,-1809.5865,13.3998, 4.0);
		}
		else if(GetIntVar(playerid, "PlayerCP") == 8)
		{
			RemoveCheckPoint(playerid);
			SetCheckPoint(playerid, CAREXAM9, 1715.3583,-1809.8026,13.3576, 4.0);
		}
		else if(GetIntVar(playerid, "PlayerCP") == 9)
		{
			RemoveCheckPoint(playerid);
			SetCheckPoint(playerid, CAREXAM10, 1662.9042,-1869.3386,13.3828, 4.0);
		}
		else if(GetIntVar(playerid, "PlayerCP") == 10)
		{
			RemoveCheckPoint(playerid);
			SetCheckPoint(playerid, CAREXAM11, 1516.3364,-1869.8064,13.3828, 4.0);
		}
		else if(GetIntVar(playerid, "PlayerCP") == 11)
		{
			RemoveCheckPoint(playerid);
			SetCheckPoint(playerid, CAREXAM12, 1367.4452,-1867.5293,13.3828, 4.0);
		}
		else if(GetIntVar(playerid, "PlayerCP") == 12)
		{
			RemoveCheckPoint(playerid);
			SetCheckPoint(playerid, CAREXAM13, 1270.8884,-1841.8256,13.3970, 4.0);
		}
		else if(GetIntVar(playerid, "PlayerCP") == 13)
		{
			RemoveCheckPoint(playerid);
			SetCheckPoint(playerid, CAREXAM14, 1230.3806,-1827.5269,13.4084, 4.0);
		}
		else if(GetIntVar(playerid, "PlayerCP") == 14)
		{
			RemoveCheckPoint(playerid);
			if(GetIntVar(playerid, "LessonSeconds") >= 5)
			{
				if(GetIntVar(playerid, "InDriveTest") == 1)
				{
					PlayerInfo[playerid][pCarLic] = 1;
					SCM(playerid,COLOR_LIGHTGREEN, "Congratulations! You have obtained a license of category B (2/4 door vehicles)!");
	    			GivePlayerMoney(playerid, -250);
					RemoveVar(playerid, "LessonStarted");
					RemoveVar(playerid, "LessonSeconds");
					RemoveVar(playerid, "InDriveTest");
				}
			}
			else
			{
				DmvMSG(playerid, "You have got under 5 seconds so you failed!");
				RemoveVar(playerid, "LessonStarted");
				RemoveVar(playerid, "LessonSeconds");
				RemoveVar(playerid, "InDriveTest");
			}
			RespawnVehicle(vehicleid);
		}
	}
}

stock HandleFlyingExam(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(IsADMVHeli(vehicleid) && GetIntVar(playerid, "InFlyTest") == 1)
	{
		if(GetIntVar(playerid, "PlayerCP") >= 15 && GetIntVar(playerid, "PlayerCP") <= 24) //Playing sound when entering a checkpoint.
			PlaySound(playerid, 1138);
		if(GetIntVar(playerid, "PlayerCP") == 15)
		{
			SetIntVar(playerid, "LessonStarted", 1);
			RemoveRaceCheckPoint(playerid);
			SetRaceCheckPoint(playerid, FLYEXAM2, 3, 1735.2058,-2151.1125,64.9770, 1722.7869,-1964.8521,69.8375, 6.0);
		}
		else if(GetIntVar(playerid, "PlayerCP") == 16)
		{
			RemoveRaceCheckPoint(playerid);
			SetRaceCheckPoint(playerid, FLYEXAM3, 3, 1722.7869,-1964.8521,69.8375, 1772.3292,-1808.5341,76.2515, 6.0);
		}
		else if(GetIntVar(playerid, "PlayerCP") == 17)
		{
			RemoveRaceCheckPoint(playerid);
			SetRaceCheckPoint(playerid, FLYEXAM4, 3, 1772.3292,-1808.5341,76.2515, 1871.6609,-1725.9799,64.2006, 6.0);
		}
		else if(GetIntVar(playerid, "PlayerCP") == 18)
		{
			RemoveRaceCheckPoint(playerid);
			SetRaceCheckPoint(playerid, FLYEXAM5, 3, 1871.6609,-1725.9799,64.2006, 1935.5216,-1594.7958,63.1090, 6.0);
		}
		else if(GetIntVar(playerid, "PlayerCP") == 19)
		{
			RemoveRaceCheckPoint(playerid);
			SetRaceCheckPoint(playerid, FLYEXAM6, 3, 1935.5216,-1594.7958,63.1090, 1847.6520,-1477.8009,64.2859, 6.0);
		}
		else if(GetIntVar(playerid, "PlayerCP") == 20)
		{
			RemoveRaceCheckPoint(playerid);
			SetRaceCheckPoint(playerid, FLYEXAM7, 3, 1847.6520,-1477.8009,64.2859, 1697.8094,-1411.9990,111.9126, 6.0);
		}
		else if(GetIntVar(playerid, "PlayerCP") == 21)
		{
			RemoveRaceCheckPoint(playerid);
			SetRaceCheckPoint(playerid, FLYEXAM8, 3, 1697.8094,-1411.9990,111.9126, 1582.0636,-1322.9044,104.7356, 6.0);
		}
		else if(GetIntVar(playerid, "PlayerCP") == 22)
		{
			RemoveRaceCheckPoint(playerid);
			SetRaceCheckPoint(playerid, FLYEXAM9, 3, 1582.0636,-1322.9044,104.7356, 1492.8091,-1264.3616,113.7795, 6.0);
		}
		else if(GetIntVar(playerid, "PlayerCP") == 23)
		{
			RemoveRaceCheckPoint(playerid);
			SetRaceCheckPoint(playerid, FLYEXAM10, 4, 1492.8091,-1264.3616,113.7795, 1492.8091,-1264.3616,113.7795, 6.0);
			SCM(playerid, COLOR_YELLOWG, "Please park the helicopter properly.");
		}
		else if(GetIntVar(playerid, "PlayerCP") == 24)
		{
			RemoveRaceCheckPoint(playerid);
			if(GetIntVar(playerid, "LessonSeconds") <= 100)
			{
				if(GetIntVar(playerid, "InFlyTest") == 1)
				{
					PlayerInfo[playerid][pFlyLic] = 1;
					SCM(playerid,COLOR_LIGHTGREEN, "Congratulations! You have obtained a license of patent (airplane/helicopter)!");
					GiveCash(playerid, -3500);
					RemoveVar(playerid, "LessonStarted");
					RemoveVar(playerid, "LessonSeconds");
					RemoveVar(playerid, "InFlyTest");
					SetPlayerPos(playerid, 1765.36, -2272.22, 26.796);
					SetPlayerWeapons(playerid);
				}
			}
			else
			{
				DmvMSG(playerid, "Flying too fast, it is not allowed.");
				RemoveVar(playerid, "LessonStarted");
				RemoveVar(playerid, "LessonSeconds");
				RemoveVar(playerid, "InFlyTest");
				SetPlayerPos(playerid, 1765.36, -2272.22, 26.796);
				SetPlayerWeapons(playerid);
			}
			RespawnVehicle(vehicleid);
		}
	}
}

stock GetClosestDoor(playerid)
{
	new i=0;
	while(i != MAX_OBJECTS)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Doors[i][doorPosX], Doors[i][doorPosY], Doors[i][doorPosZ]) && Doors[i][doorObjectOn])
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetClosestGate(playerid)
{
	new i=0;
	while(i != MAX_OBJECTS)
	{
		if(IsPlayerInRangeOfPoint(playerid, 10.0, Gates[i][gatePosX], Gates[i][gatePosY], Gates[i][gatePosZ]) && Gates[i][gateObjectOn])
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetNextLabelID()
{
	new i=0;
	while(i != MAX_LABELS)
	{
		if(LabelsInfo[i][tLabelOn] == 0)
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetClosestLabelID(playerid)
{
	new i=0;
	while(i != MAX_LABELS)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.0, LabelsInfo[i][tLabelX], LabelsInfo[i][tLabelY], LabelsInfo[i][tLabelZ]) && LabelsInfo[i][tLabelOn] == 1)
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetNextStationID()
{
	new i=0;
	while(i != MAX_ATMS)
	{
		if(GasStation[i][gStationOn] == 0)
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetClosestStationID(playerid)
{
	new i=0;
	while(i != MAX_GAS_STATIONS)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, GasStation[i][gPosX], GasStation[i][gPosY], GasStation[i][gPosZ]) && GasStation[i][gStationOn])
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetClosestHouseID(playerid)
{
	new i=0;
	while(i != MAX_HOUSES)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]) && HouseInfo[i][hHouseOn])
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetNextFineID(playerid)
{
  new i=0;
  while(i != MAX_FINES)
  {
    if(FineInfo[i][fineOn] == 0)
    {
      return i;
    }
    i++;
  }
  return -1;
}

stock GetNextHouseID()
{
	new i=0;
	while(i != MAX_HOUSES)
	{
		if(HouseInfo[i][hHouseOn] == 0)
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetNextFactionID()
{
	new i=1;
	while(i != MAX_FACTIONS)
	{
		if(Factions[i][fON] == 0)
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetNextFactionDoorID()
{
	new i=0;
	while(i != MAX_FACTION_DOORS)
	{
		if(FactionDoors[i][dDoorOn] == 0)
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetClosestFactionDoorID(playerid)
{
	new i=0;
	while(i != MAX_FACTION_DOORS)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, FactionDoors[i][dEnterX], FactionDoors[i][dEnterY], FactionDoors[i][dEnterZ]) && FactionDoors[i][dDoorOn])
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetNextDynamicDoorID()
{
	new i=0;
	while(i != MAX_DOORS)
	{
		if(DoorInfo[i][dDoorOn] == 0)
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetNextBizID()
{
	new i=0;
	while(i != MAX_BIZ)
	{
		if(BizInfo[i][bizOn] == 0)
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetClosestBizID(playerid)
{
	new i=0;
	while(i != MAX_BIZ)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]) && BizInfo[i][bizOn])
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetNextParkMeterID()
{
	new i=0;
	while(i != MAX_PARK_METERS)
	{
		if(ParkMeters[i][parkOn] == 0)
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetClosestParkMeter(playerid)
{
	new i=0;
	while(i != MAX_PARK_METERS)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.5, ParkMeters[i][parkPosX], ParkMeters[i][parkPosY], ParkMeters[i][parkPosZ]) && ParkMeters[i][parkOn] == 1)
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetNextDealerShipID()
{
	new i=0;
	while(i != MAX_DEALERSHIPS)
	{
		if(DealersInfo[i][dealerOn] == 0)
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetClosestDealerShip(playerid)
{
	new i=0;
	while(i != MAX_DEALERSHIPS)
	{
		if(IsPlayerInRangeOfPoint(playerid, 35.0, DealersInfo[i][dealerPosX], DealersInfo[i][dealerPosY], DealersInfo[i][dealerPosZ]) && DealersInfo[i][dealerOn] == 1)
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetNextFoodStandID()
{
	new i=0;
	while(i != MAX_FOOD_STANDS)
	{
		if(FoodStand[i][fStandOn] == 0)
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetClosestFoodStandID(playerid)
{
	new i=0;
	while(i != MAX_FOOD_STANDS)
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.0, FoodStand[i][fPosX], FoodStand[i][fPosY], FoodStand[i][fPosZ]) && FoodStand[i][fStandOn] == 1)
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetNextATMID()
{
	new i=0;
	while(i != MAX_ATMS)
	{
		if(ATMInfo[i][atmAtmOn] == 0)
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetClosestATMID(playerid)
{
	new i=0;
	while(i != MAX_ATMS)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, ATMInfo[i][atmPosX], ATMInfo[i][atmPosY], ATMInfo[i][atmPosZ]) && ATMInfo[i][atmAtmOn] == 1)
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetPlayerSpeed(playerid)
{
    new Float:x, Float:y, Float:z;
    new Float:speed, final_speed;
    GetVehicleVelocity(GetPlayerVehicleID(playerid),x,y,z);
    speed = floatsqroot(((x*x)+(y*y))+(z*z))*100;
    final_speed = floatround(speed,floatround_round);
    return final_speed;
}

stock GetVehicleSpeed(vehicleid)
{
    new Float:xPos[3];
    GetVehicleVelocity(vehicleid, xPos[0], xPos[1], xPos[2]);
    return floatround(floatsqroot(xPos[0] * xPos[0] + xPos[1] * xPos[1] + xPos[2] * xPos[2]) * 170.00);
}

stock KillAllTimers(playerid)
{
	KillTimer(LoginTimer{playerid});
	return 1;
}

/*stock IsValidName(playerid)
{
    if (IsPlayerConnected(playerid))
    {
        new player[MAX_PLAYER_NAME];
        GetPlayerName(playerid,player,sizeof(player));
        for(new n = 0; n < strlen(player); n++)
        {
            if (player[n] == '_' && player[n+1] >= 'A' && player[n+1] <= 'Z') return 1;
            if (player[n] == ']' || player[n] == '[') return 0;
        }
    }
    return 0;
}
*/

stock GetFightStyleName(playerid)
{
	switch(GetPlayerFightingStyle(playerid))
	{
		case F_BOXING:
			format(msg, sizeof(msg), "Boxing");
		case F_KUNGFU:
			format(msg, sizeof(msg), "Kungfu");
		case F_GRABKICK:
			format(msg, sizeof(msg), "Grabkick");
		case F_KNEEHEAD:
			format(msg, sizeof(msg), "Kneehead");
		case F_ELBOW:
			format(msg, sizeof(msg), "Elbow");
		case F_NORMAL:
			format(msg, sizeof(msg), "Normal");
	}
	return msg;
}

stock phoneAnim(playerid, type)
{
	if(type == 1)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		SetPlayerAttachedObject(playerid, 9, 330, 6);
	}
	else
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, 9);
	}
	return 1;
}

stock PlayRingSoundTwice(playerid)
{
	PlaySound(playerid, 1138);
	SetTimerEx("PlayRingSound", 500, 0, "i", playerid);
	return 1;
}

stock UpdateHouseText(houseid)
{
	if(HouseInfo[houseid][hOwned] == 0)
		format(msg, sizeof(msg), ""EMBED_YELLOW"["EMBED_WHITE"%d"EMBED_YELLOW"]\n"EMBED_WHITE"%s\n"EMBED_GREEN"Price: $%d", houseid, HouseInfo[houseid][hInfo], HouseInfo[houseid][hPrice]);
	else
		format(msg, sizeof(msg), ""EMBED_YELLOW"["EMBED_WHITE"%d"EMBED_YELLOW"]\n"EMBED_WHITE"%s", houseid, HouseInfo[houseid][hInfo]);
	UpdateDynamic3DTextLabelText(Text3D:HouseInfo[houseid][hLabel], -1, msg);
	return 1;
}

stock FormatHouseWeapons(house, string[])
{
	new wstr[256];
	new tmp[64];
	for(new a = 0; a < MAX_HOUSE_WEAPONS; a++)
	{
		new w = HouseInfo[house][hWeapon][a];
		new am = HouseInfo[house][hAmmo][a];
		if(a == 0)
		{
			format(tmp,sizeof(tmp),"%d=%d",w,am);
		}
		else
		{
			format(tmp,sizeof(tmp),"|%d=%d",w,am);
		}
		strins(wstr,tmp,strlen(wstr));
	}
	return format(string, 256, "%s", wstr);
}

stock UpdateHouseInfo(houseid)
{
	new weapons[256];
	FormatHouseWeapons(houseid, weapons);
	format(query, sizeof(query), "UPDATE `houses` SET `owner` = '%s', `owned` = %d, `locked` = %d, `price`= %d, `levelbuy`= %d, `rentprice` = %d, `rentable` = %d, `interior` = %d, `world` = %d, `cash` = %d, `furnitures` = %d WHERE `id` = %d",
	HouseInfo[houseid][hOwner],
	HouseInfo[houseid][hOwned],
	HouseInfo[houseid][hLocked],
	HouseInfo[houseid][hPrice],
	HouseInfo[houseid][hLevelbuy],
	HouseInfo[houseid][hRentprice],
	HouseInfo[houseid][hRentable],
	HouseInfo[houseid][hInterior],
	HouseInfo[houseid][hWorld],
	HouseInfo[houseid][hCash],
	HouseInfo[houseid][hFurnitures],
	HouseInfo[houseid][hID]);
	mysql_function_query(dbHandle, query, false, "", "");
	format(query, sizeof(query), "UPDATE `houses` SET `checkx` = %f, `checky` = %f, `checkz` = %f, `weapons` = '%s', `radio` = %d WHERE `id` = %d",
	HouseInfo[houseid][hCheckPosX],
	HouseInfo[houseid][hCheckPosY],
	HouseInfo[houseid][hCheckPosZ],
	HouseInfo[houseid][hWeapon],
	HouseInfo[houseid][hRadio],
	HouseInfo[houseid][hID]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

stock GetIDByName(playername[])
{
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(PlayerIsOn(i))
		{
			new pName[MAX_PLAYER_NAME];
			GetPlayerName(i, pName, sizeof(pName));
			if(strcmp(pName, playername, true, strlen(playername)) == 0)
			{
				return i;
			}
		}
	}
	return INVALID_PLAYER_ID;
}

stock GivePlayerArmour(playerid, Float:armour)
{
	new Float:armour;
	GetPlayerArmour(playerid, armour);
	return SetPlayerArmour(playerid, armour+armour);
}

stock GivePlayerHealth(playerid, Float:health)
{
	new Float:hp;
	GetPlayerHealth(playerid, hp);
	return SetPlayerHealth(playerid, hp+health);
}

stock Float:GetPlayerHP(playerid)
{
	new Float:hp;
	GetPlayerHealth(playerid, hp);
	return hp;
}

stock SetPlayerWeapons(playerid)
{
	if(PlayerIsOn(playerid))
	{
	    SafeResetPlayerWeapons(playerid);
	    if(PlayerInfo[playerid][pJailed] < 1)
	    {
			if (PlayerInfo[playerid][pPerm1] > 0)
			{
				GiveWeapon(playerid, PlayerInfo[playerid][pPerm1], PlayerInfo[playerid][pAmmo1]);
			}
			if (PlayerInfo[playerid][pPerm2] > 0)
			{
				GiveWeapon(playerid, PlayerInfo[playerid][pPerm2], PlayerInfo[playerid][pAmmo2]);
			}
			if (PlayerInfo[playerid][pMeleeWep] > 0)
			{
				GiveWeapon(playerid, PlayerInfo[playerid][pMeleeWep], 1);
			}
		}
	}
	return 1;
}

stock FullResetPlayerWeapons(playerid)
{
	SafeResetPlayerWeapons(playerid);
	Weapons[playerid][PlayerInfo[playerid][pPerm1]] = 0;
	Weapons[playerid][PlayerInfo[playerid][pPerm2]] = 0;
	Weapons[playerid][PlayerInfo[playerid][pMeleeWep]] = 0;
	PlayerInfo[playerid][pPerm1] = 0; PlayerInfo[playerid][pAmmo1] = 0;
    PlayerInfo[playerid][pPerm2] = 0; PlayerInfo[playerid][pAmmo2] = 0;
    PlayerInfo[playerid][pMeleeWep] = 0;
	return 1;
}

stock GetWeaponSlot(weaponid)
{
    new slot;
    switch(weaponid)
    {
        case 0,1: slot = 0;
        case 2..9: slot = 1;
        case 22..24: slot = 2;
        case 25..27: slot = 3;
        case 28,29,32: slot = 4;
        case 30,31: slot = 5;
        case 33,34: slot = 6;
        case 35..38: slot = 7;
        case 16..18,39: slot = 8;
        case 41..43: slot = 9;
        case 10..15: slot = 10;
        case 44..46: slot = 11;
        case 40: slot = 12;
        default: slot = INVALID_WEAPON_SLOT_ID;
    }
    return slot;
}

stock GetWeaponAmmo(playerid, weaponid)
{
    new weapon, ammo;
    GetPlayerWeaponData(playerid, GetWeaponSlot(weaponid), weapon, ammo);
    return ammo;
}

stock GetPrimaryWeapon(playerid)
{
	if(GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm1]) > 0)
		return PlayerInfo[playerid][pPerm1];
	else
		return 0;
}

stock GetMeleeWeapon(playerid)
{
	if(PlayerInfo[playerid][pMeleeWep] > 0)
		return PlayerInfo[playerid][pMeleeWep];
	else
		return 0;
}

stock GetSecondaryWeapon(playerid)
{
	if(GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm2]) > 0)
		return PlayerInfo[playerid][pPerm2];
	else
		return 0;
}

stock IsMeleeSlotTaken(playerid)
{
	if(PlayerInfo[playerid][pMeleeWep] > 0)
		return true;
	else
		return false;
}

stock IsPrimarySlotTaken(playerid)
{
	if(PlayerInfo[playerid][pPerm1] > 0)
		return true;
	else
		return false;
}

stock IsSecondarySlotTaken(playerid)
{
	if(PlayerInfo[playerid][pPerm2] > 0)
		return true;
	else
		return false;
}

stock IsMeleeWeapon(weaponid)
{
	if(weaponid >= 1 && weaponid <= 15)
		return true;
	else
		return false;
}

stock IsPrimaryWeapon(weaponid)
{
	if(weaponid >= 22 && weaponid <= 24)
		return true;
	else
		return false;
}

stock IsSecondaryWeapon(weaponid)
{
	if(weaponid == 25 || weaponid >= 28 && weaponid <= 32)
		return true;
	else
		return false;
}

ResetDamages(playerid)
{
    for(new i = 0; i < MAX_BODY_PARTS; i++)
    {
        for(new z = 0; z < MAX_WEAPONS; z++) Damage[playerid][i][z] = 0;
    }
	Delete3DTextLabel(DamageShot[playerid]);
    return 1;
}

CountDamages(playerid)
{
    new count = 0;
    for(new i = 0; i < MAX_BODY_PARTS; i++)
    {
        for(new z = 0; z < MAX_WEAPONS; z++)
        {
                if(Damage[playerid][i][z]) count += Damage[playerid][i][z];
        }
    }
    return count;
}

GetBodyPartName(bodypart)
{
    new part[20];
    switch(bodypart)
    {
        case BODY_PART_TORSO: part = "CHEST";
        case BODY_PART_GROIN: part = "NECK";
        case BODY_PART_LEFT_ARM: part = "LEFT HAND";
        case BODY_PART_RIGHT_ARM: part = "RIGHT HAND";
        case BODY_PART_LEFT_LEG: part = "LEFT LEG";
        case BODY_PART_RIGHT_LEG: part = "RIGHT LEG";
        case BODY_PART_HEAD: part = "HEAD";
        default: part = "NOTHING";
    }
    return part;
}

DisplayDamages(toplayer, playerid)
{
	new playername[MAX_PLAYER_NAME], title[45];
	GetPlayerName(playerid, playername, sizeof(playername));
	format(title, sizeof(title), "%s' damages", playername);
	if(!CountDamages(playerid)) return ShowDialog(toplayer, Show:<D_DAMAGES>, DIALOG_STYLE_LIST, title, "There are no damages to display...", ">>>", "");
	new gText[1000], fstr[45];
	for(new i = 0; i < MAX_BODY_PARTS; i++)
	{
        for(new z = 0; z < MAX_WEAPONS; z++)
        {
            if(!Damage[playerid][i][z]) continue;
            switch(i)
            {
                    case 0 .. 15: format(fstr, sizeof(fstr), "%d kicks %s in %s\n", Damage[playerid][i][z], GetWeaponNameEx(z), GetBodyPartName(i + 3));
                    case 54: format(fstr, sizeof(fstr), "%d falls on %s\n", Damage[playerid][i][z], GetBodyPartName(i));
                    default: format(fstr, sizeof(fstr), "%d bullets %s in %s\n", Damage[playerid][i][z], GetWeaponNameEx(z), GetBodyPartName(i + 3));
            }
            strcat(gText, fstr);
        }
	}
	ShowDialog(toplayer, Show:<D_DAMAGES>, DIALOG_STYLE_LIST, title, gText, "Close", "");
	return 1;
}

public ShowTutorialLocations(playerid)
{
	PlaySound(playerid, 1054);
	if(GetIntVar(playerid, "RegisterPart") == 7)
	{
		JobMessage(playerid, "~r~WELCOME TO TRANS UNITY ROLEPLAY~n~~y~THIS IS FOLLOWED BY A BRIEF OVERVIEW OF IMPORTANT LOCATIONS OF THE SERVER!", 8);
		SCM(playerid,COLOR_YELLOWG,"Press SPACE to move on");
		SetIntVar(playerid, "MovingToTutorial", 0);
		RemoveVar(playerid, "MovingToTutorial");
		ClearChatbox(playerid, 50);
  		SetPlayerCameraPos(playerid, 1775.7755, -1834.5095, 35.3195);
		SetPlayerCameraLookAt(playerid, 1776.4578, -1835.2377, 34.6395);
	}
	if(GetIntVar(playerid, "RegisterPart") == 8)
	{
		ClearChatbox(playerid, 50);
		JobMessage(playerid, "~r~BANK OF RODEO~n~~y~MAIN BANK HERE, WHERE YOU CAN MANAGE YOUR SAVINGS ON THE SERVER!", 8);
		SetPlayerCameraPos(playerid, 546.4125, -1226.7935, 58.4017);
		SetPlayerCameraLookAt(playerid, 547.3770, -1227.0535, 57.6217);
	}
	if(GetIntVar(playerid, "RegisterPart") == 9)
	{
		ClearChatbox(playerid, 50);
		JobMessage(playerid, "~r~VERONA MALLL~n~~y~THE PLACE WHERE YOU CAN DO SHOPPING IN VARIOUS FIELDS~n~BUT ALSO THE PLACE WHERE YOU CAN MAKE NEW FRIENDS", 8);
		SetPlayerCameraPos(playerid, 1159.3608,-1505.8439,35.6304);
		SetPlayerCameraLookAt(playerid, 1128.9388,-1488.7219,22.7690);
	}
	if(GetIntVar(playerid, "RegisterPart") == 10)
	{
		SetIntVar(playerid, "JustDoneRegister", 1);
		RemoveVar(playerid, "RegisterPart");
		SetPlayerSpawn(playerid);
		SCM(playerid,COLOR_YELLOWG,"SERVER: Thank you for choosing Trans Unity Roleplay!");
		SCM(playerid,COLOR_WHITE,"{808080}SERVER:{FFFFFF} If you need help, you can use the command /helpme!");
	}
	return 1;
}

stock GetNextToySlot(playerid)
{
	new i=0;
	while(i != MAX_PLAYER_TOYS)
	{
		if(PlayerToys[playerid][i][ptToyOn] == 0)
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetTotalToySlots(playerid)
{
	new count = 0;
	for(new i = 0; i < MAX_PLAYER_TOYS; i++)
	{
		if(PlayerToys[playerid][i][ptToyOn] == 1)
		{
			count++;
		}
	}
	return count;
}

stock OnPlayerBuyToy(playerid, toyslot, model, bone, name[])
{
	format(query, sizeof(query), "INSERT INTO `playertoys` (owner, name, model, bone) VALUES ('%s', '%s', %d, %d)", GetName(playerid), name, model, bone);
	mysql_function_query(dbHandle, query, true, "OnToyInsert", "iddds[128]", playerid, toyslot, model, bone, name);
	return 1;
}

stock UpdatePlayerToy(playerid, toyslot, Float:X, Float:Y, Float:Z, Float:RX, Float:RY, Float:RZ, Float:SC, Float:SY, Float:SZ)
{
	format(query, sizeof(query), "UPDATE `playertoys` SET `offestx` = %f, `offesty` = %f, `offestz` = %f, `rotx` = %f, `roty` = %f, `rotz` = %f, `scalex` = %f, `scaley` = %f, `scalez` = %f WHERE `id` = %d",
	X, Y, Z, RX, RY, RZ, SC, SY, SZ, PlayerToys[playerid][toyslot][ptID]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

stock LoadPlayerToys(playerid)
{
	format(query, sizeof(query), "SELECT * FROM `playertoys` WHERE `owner` = '%s'", GetName(playerid));
	mysql_function_query(dbHandle, query, true, "OnPlayerLoadToys", "i", playerid);
	return 1;
}

stock LoadPlayerFines(playerid)
{
  format(query, sizeof(query), "SELECT * FROM `fines` WHERE `Name` = '%s'", GetName(playerid));
  mysql_function_query(dbHandle, query, true, "OnPlayerLoadFines", "");
  return 1;
}

stock RemovePlayerToyFromSlot(playerid, toyslot)
{
	format(query, sizeof(query), "DELETE FROM `playertoys` WHERE `id` = %d", PlayerToys[playerid][toyslot][ptID]);
	mysql_function_query(dbHandle, query, true, "OnPlayerRemovedToy", "id", playerid, toyslot);
	return 1;
}

stock GiveMeleeWeapon(playerid, wepid)
{
	SafeResetPlayerWeapons(playerid);
    GiveWeapon(playerid, wepid, 1);
	PlayerInfo[playerid][pMeleeWep] = wepid;
	SetPlayerWeapons(playerid);
	return 1;
}

stock GivePermWeapon(playerid, slot, wepid, ammo)
{
	SafeResetPlayerWeapons(playerid);
    GiveWeapon(playerid, wepid, ammo);
	if(slot == 2)
	{
		PlayerInfo[playerid][pPerm1] = wepid;
		PlayerInfo[playerid][pAmmo1] = ammo;
	}
	if(slot == 3)
	{
		PlayerInfo[playerid][pPerm2] = wepid;
		PlayerInfo[playerid][pAmmo2] = ammo;
	}
	SetPlayerWeapons(playerid);
	return 1;
}

stock RemoveBuildingsForMall(playerid)
{
    // Remove the original mall mesh
	// This is the mall mesh LOD
	RemoveBuildingForPlayer(playerid, 6130, 1117.5859, -1490.0078, 32.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 6255, 1117.5859, -1490.0078, 32.7188, 0.25);

	// There are some trees on the outside of the mall which poke through one of the interiors
	RemoveBuildingForPlayer(playerid, 762, 1175.3594, -1420.1875, 19.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 615, 1166.3516, -1417.6953, 13.9531, 0.25);
	return 1;
}

stock AddHousesInteriors()
{
	//2 Room house
	CreateDynamicObject(14755, -79.76019, 1375.42126, 1079.20508,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1498, -80.68050, 1382.76636, 1077.94690,   0.00000, 0.00000, 0.00000); //Door
	//2 Room house

	//2 Room house
	CreateDynamicObject(14756, -48.48457, 1458.49207, 1086.61377,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1498, -47.69450, 1457.73669, 1084.60840,   0.00000, 0.00000, 90.00000); //Door
	//2 Room house

	//3 Room house
	CreateDynamicObject(14748, 41.38534, 1440.95935, 1083.41199,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1506, 46.51220, 1438.62793, 1081.40894,   0.00000, 0.00000, 90.00000); //Door
	//3 Room house

	//3 Room house & two story
	CreateDynamicObject(14750, 11.03331, 1314.19482, 1088.33093,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1506, 6.96000, 1304.85022, 1081.82263,   0.00000, 0.00000, 0.00000); //Door
	//3 Room house & two story

	//4 Room house & two story
	CreateDynamicObject(14754, 85.66241, 1280.42249, 1082.82739,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1506, 82.19940, 1271.31091, 1078.86523,   0.00000, 0.00000, 0.00000); //Door
	//4 Room house & two story

	//4 Room house & two story (More expensive)
	CreateDynamicObject(14758, 155.35648, 1409.17212, 1087.30750,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1506, 154.62061, 1409.09656, 1085.43335,   0.00000, 0.00000, 0.00000); //Door
	CreateDynamicObject(1506, 156.12061, 1409.09656, 1085.43335,   0.00000, 0.00000, 0.00000); //Door
	//4 Room house & two story (More expensive)

	//3 Room house
	CreateDynamicObject(14714, 289.94763, 1509.23218, 1079.22510,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1498, 289.17270, 1501.17688, 1077.42126,   0.00000, 0.00000, 0.00000); //Door
	//3 Room house

	//3 Room house
	CreateDynamicObject(14700, 329.35416, 1516.43005, 1086.31531,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1498, 328.56949, 1512.34375, 1084.81165,   0.00000, 0.00000, 0.00000); //Door
	//3 Room house

	//2 Room house
	CreateDynamicObject(14711, 382.01254, 1498.42480, 1080.69409,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1498, 391.08289, 1505.09924, 1079.09644,   0.00000, 0.00000, 90.00000); //Door
	//2 Room house

	//3 Room house
	CreateDynamicObject(14710, 366.74869, 1381.78625, 1080.31787,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1498, 376.35840, 1377.81616, 1078.80579,   0.00000, 0.00000, 90.00000); //Door
	//3 Room house

	//3 Room house
	CreateDynamicObject(14701, 448.67178, 1363.61853, 1083.28748,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1498, 447.54770, 1353.26965, 1081.21570,   0.00000, 0.00000, 0.00000); //Door
	//3 Room house

	//4 Room house & 2 story
	CreateDynamicObject(14703, 506.95187, 1366.91003, 1080.07947,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1504, 508.85950, 1353.45654, 1075.78345,   0.00000, 0.00000, 0.00000); //Door
	CreateDynamicObject(14722, 510.94690, 1363.57544, 1078.67737,   0.00000, 0.00000, 0.00000); //Stairs
	CreateDynamicObject(14724, 510.99319, 1363.60266, 1078.67590,   0.00000, 0.00000, 0.00000); //Stairs
	CreateDynamicObject(14715, 510.92340, 1363.51001, 1078.70215,   0.00000, 0.00000, 0.00000); //Stairs
	CreateDynamicObject(14723, 510.91971, 1363.70605, 1078.84021,   0.00000, 0.00000, 0.00000); //Stairs
	//4 Room house & 2 story

	//3 Room house & strip
	CreateDynamicObject(14736, 755.25836, 1419.45801, 1102.58032,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(14738, 753.20190, 1415.76831, 1104.04199,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1504, 744.47321, 1411.75403, 1101.42236,   0.00000, 0.00000, 0.00000); //Door
	//3 Room house & strip

	//2 Room house
	CreateDynamicObject(14713, 289.97849, 1289.53406, 1079.25183,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1498, 294.37189, 1284.51709, 1077.43616,   0.00000, 0.00000, 0.00000); //Door
	//2 Room house

	//2 Room house
	CreateDynamicObject(14718, 188.29053, 1293.25732, 1081.13208,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1498, 190.53439, 1288.35291, 1081.13416,   0.00000, 0.00000, 0.00000); //Door
	//2 Room house

	//2 Room house
	CreateDynamicObject(14712, 287.90448, 1249.52588, 1083.25146,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1498, 290.09601, 1241.95874, 1081.70117,   0.00000, 0.00000, 0.00000); //Door
	//2 Room house

	//2 Room house
	CreateDynamicObject(14709, 245.01108, 1155.45520, 1081.63599,   0.00000, 0.00000, 0.00000); //Interior
	//2 Room house

	//3 Room house
	CreateDynamicObject(14735, 342.67169, 1081.66528, 1082.87891,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1506, 325.45471, 1074.26355, 1081.25549,   0.00000, 0.00000, 0.00000); //Door
	//3 Room house

	//Richman house 5 rooms & 2 bathrooms
	CreateDynamicObject(14708, 200.11450, 1119.56934, 1083.97693,   0.00000, 0.00000, 0.00000); //Interior
	//Richman house 5 rooms & 2 bathrooms

	//Richman house 5 rooms & 2 bathrooms
	CreateDynamicObject(14706, 277.86502, 1069.62952, 1085.65552,   0.00000, 0.00000, 0.00000); //Interior
	//Richman house 5 rooms & 2 bathrooms

	//Richman house 5 rooms & 2 bathrooms
	CreateDynamicObject(14707, 275.53461, 992.44232, 1087.27319,   0.00000, 0.00000, 0.00000); //Interior
	//Richman house 5 rooms & 2 bathrooms

	//2 Room house (Small)
	CreateDynamicObject(15029, 2265.87500, -1122.75220, 1049.62781,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1535, 2260.34570, -1121.88794, 1047.87683,   0.00000, 0.00000, 90.00000); //Door
	//2 Room house (Small)

	//1 Room house (Small)
	CreateDynamicObject(15031, 2281.78003, -1121.99768, 1049.92285,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1535, 2284.04028, -1126.90771, 1049.91650,   0.00000, 0.00000, 0.00000); //Door
	//1 Room house (Small)

	//3 Room house
	CreateDynamicObject(15055, 2374.03271, -1102.76465, 1049.87073,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1504, 2369.77124, -1094.13245, 1048.61951,   0.00000, 0.00000, 0.00000); //Door
	//3 Room house

	//1 Room house (Very Small)
	CreateDynamicObject(15042, 2318.45508, -1230.66187, 1048.40820,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1501, 2312.65112, -1231.38013, 1046.40540,   0.00000, 0.00000, 0.00000); //Door
	//1 Room house (Very Small)

	//2 Room house (Small)
	CreateDynamicObject(15053, 2243.98071, -1024.30042, 1048.01758,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1535, 2243.21191, -1027.78198, 1046.76501,   0.00000, 0.00000, 0.00000); //Door
	//2 Room house (Small)

	//3 Room house
	CreateDynamicObject(15054, 2260.93286, -1251.45007, 1051.05786,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1506, 2273.48657, -1243.43054, 1047.59131,   0.00000, 0.00000, 90.00000); //Door
	//3 Room house

	//4 Room house
	CreateDynamicObject(15041, 2158.54736, -1220.96997, 1050.11694,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1506, 2149.11328, -1216.07935, 1048.11365,   0.00000, 0.00000, 0.00000); //Door
	//4 Room house

	//2 Room house
	CreateDynamicObject(15046, 2364.22144, -1082.74231, 1048.01733,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1498, 2363.47827, -1075.46021, 1046.76379,   0.00000, 0.00000, 0.00000); //Door
	//2 Room house

	//4 Room house (Rich man big)
	CreateDynamicObject(15048, 2364.55444, -1179.42346, 1055.79187,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(15059, 2364.56909, -1179.41418, 1055.79187,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1506, 2372.00317, -1184.51221, 1052.20117,   0.00000, 0.00000, 0.00000); //Door
	CreateDynamicObject(1506, 2373.50317, -1184.51221, 1052.20117,   0.00000, 0.00000, 0.00000); //Door
	//4 Room house (Rich man big)

	//Only one room (TINY for las colinas)
	CreateDynamicObject(14859, 245.20708, 321.97745, 1000.59143,   0.00000, 0.00000, 0.00000); //Interior
	//Only one room (TINY for las colinas)

	//Only one room (TINY for las colinas)
	CreateDynamicObject(14865, 269.22012, 322.22049, 998.14349,   0.00000, 0.00000, 0.00000); //Interior
	//Only one room (TINY for las colinas)

	//Only one room (TINY for las colinas)
	CreateDynamicObject(14889, 363.51450, 304.98868, 998.14722,   0.00000, 0.00000, 0.00000); //Interior
	//Only one room (TINY for las colinas)

	//Only one room (TINY for las colinas)
	CreateDynamicObject(15033, 2177.35718, -1069.85181, 1049.47449,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1535, 2190.13110, -1074.29504, 1049.47742,   0.00000, 0.00000, 90.00000); //Door
	//Only one room (TINY for las colinas)

	//Only two rooms (TINY for las colinas)
	CreateDynamicObject(15034, 2254.38940, -1108.71704, 1049.87268,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1535, 2254.09644, -1113.33044, 1048.11633,   0.00000, 0.00000, 0.00000); //Door
	//Only two rooms (TINY for las colinas)

	//Only two rooms (TINY for las colinas)
	CreateDynamicObject(15030, 2293.09204, -1092.09229, 1049.62341,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(2904, 2298.69800, -1093.70605, 1048.97290,   0.00000, 0.00000, 90.00000); //Door
	CreateDynamicObject(1535, 2298.64600, -1094.47375, 1047.87195,   0.00000, 0.00000, 90.00000); //Door
	//Only two rooms (TINY for las colinas)

}

stock FullResetPlayerClothes(playerid)
{
	for(new i = 0; i < MAX_PLAYER_TOYS; i++)
	{
		if(PlayerToys[playerid][i][ptToyOn])
		{
			RemovePlayerToyFromSlot(playerid, i);
		}
	}
	return 1;
}

stock MakePlayerWounded(playerid)
{
	if(PlayerInfo[playerid][pJailed] == 0)
	{
		SetIntVar(playerid, "JustDied", 1);
		SavePlayerPos(playerid);
	}
	return 1;
}

stock CheckPlayerCurrentCall(playerid)
{
	new caller = GetIntVar(playerid, "CallWith");
	if(PlayerIsOn(caller))
	{
		if(GetIntVar(caller, "OnCall") == 1 && GetIntVar(playerid, "OnCall") == 1)
		{
			CellMSG(caller, "The line is dead.");
			SetIntVar(playerid, "CallCost", GetIntVar(playerid, "callTime")/10);
			format(msg, sizeof(msg), "~w~The call cost~n~~r~$%d",GetIntVar(caller, "CallCost"));
			GameTextForPlayer(caller, msg, 5000, 1);
			GiveCash(caller, -GetIntVar(playerid, "CallCost"));
			phoneAnim(caller, 0);
			RemoveVar(caller, "CallCost");
			RemoveVar(caller, "CallTime");
			RemoveVar(caller, "CallWith");
			RemoveVar(caller, "GettingCall");
			RemoveVar(caller, "OnCall");
			RemoveVar(caller, "IsCalling");
			RemoveVar(playerid, "CallCost");
			RemoveVar(playerid, "CallTime");
			RemoveVar(playerid, "CallWith");
			RemoveVar(playerid, "GettingCall");
			RemoveVar(playerid, "OnCall");
			RemoveVar(playerid, "IsCalling");
		}
	}
	return 1;
}

stock RemovePlayerBoomBox(playerid)
{
	if(GetIntVar(playerid, "BoomBoxOn") == 1)
	{
		StopBoomBoxMusic(playerid);
		DestroyDynamicArea(GetIntVar(playerid, "BoomBoxArea"));
		DestroyDynamicObject(GetIntVar(playerid, "BoomBoxObject"));
	}
}

stock ShowBoomBoxStations(playerid)
{
	new str[2000];
	for(new x; x < sizeof(BoomBoxInfo); x++)
	{
		format(str, sizeof(str), "%s"EMBED_YELLOW"%s\n", str, BoomBoxInfo[x][boomboxUrlName]);
	}
	ShowDialog(playerid, Show:<ChangeBoomBoxURL>, DIALOG_STYLE_LIST, "{FF0000}Select one of the stations", str, "Select", "Cancel");
	return 1;
}

stock PlayPlayerBoomBoxURL(playerid, urlname[], url[])
{
	if(GetIntVar(playerid, "SelectingHouseRadio") == 1)
	{
		new house = HouseEntered[playerid];
		format(msg, sizeof(msg), "> %s the station changed %s.", GetNameWithMask(playerid), urlname);
		SetPlayerChatBubble(playerid, msg, COLOR_GREEN, 15.0, 10000);
		SCM(playerid, COLOR_LIGHTGREEN, msg);
		HouseInfo[house][hRadioOn] = 1;
		format(HouseInfo[house][hRadioURL], 256, "%s", url);
		StartMusicInHouse(house, url);
	}
	else if(GetIntVar(playerid, "SelectingBusinessRadio") == 1)
	{
		new biz = BizEntered[playerid];
		format(msg, sizeof(msg), "> %s the station changed %s.", GetNameWithMask(playerid), urlname);
		SetPlayerChatBubble(playerid, msg, COLOR_GREEN, 15.0, 10000);
		SCM(playerid, COLOR_LIGHTGREEN, msg);
		BizInfo[biz][bizRadioOn] = 1;
		format(BizInfo[biz][bizRadioURL], 256, "%s", url);
		StartMusicInBusiness(biz, url);
	}
	else if(GetIntVar(playerid, "SelectingCarRadio") == 1)
	{
		new vehicle = GetPlayerVehicleID(playerid);
		format(msg, sizeof(msg), "> %s the station changed %s.", GetNameWithMask(playerid), urlname);
		SetPlayerChatBubble(playerid, msg, COLOR_GREEN, 15.0, 10000);
		SCM(playerid, COLOR_LIGHTGREEN, msg);
		VehicleInfo[vehicle][carRadioOn] = 1;
		format(VehicleInfo[vehicle][carRadioURL], 256, "%s", url);
		StartMusicInVehicle(vehicle, url);
	}
	else
	{
		format(msg, sizeof(msg), "> %s the station changed %s.", GetNameWithMask(playerid), urlname);
		SetPlayerChatBubble(playerid, msg, COLOR_GREEN, 15.0, 10000);
		SCM(playerid, COLOR_LIGHTGREEN, msg);
		SetStringVar(playerid, "BoomBoxURL", url);
		SetIntVar(playerid, "BoomBoxMusicOn", 1);
		StartMusicNearBoomBox(playerid, url);
	}
	return 1;
}

stock StartMusicInVehicle(vehicle, url[])
{
	if(VehicleInfo[vehicle][carRadioOn] == 1)
	{
		foreach(Player, i)
		{
			if(GetPlayerVehicleID(i) == vehicle)
			{
				StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, url);
			}
		}
	}
	return 1;
}

stock StartMusicInHouse(house, url[])
{
	if(HouseInfo[house][hRadioOn] == 1)
	{
		foreach(Player, i)
		{
			if(HouseEntered[i] == house)
			{
				StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, url);
			}
		}
	}
	return 1;
}

stock StartMusicInBusiness(biz, url[])
{
	if(BizInfo[biz][bizRadioOn] == 1)
	{
		foreach(Player, i)
		{
			if(BizEntered[i] == biz)
			{
				StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, url);
			}
		}
	}
	return 1;
}

stock StartMusicNearBoomBox(playerid, url[])
{
	if(IsValidDynamicArea(GetIntVar(playerid, "BoomBoxArea") && GetIntVar(playerid, "BoomBoxOn") == 1))
	{
		foreach(Player, i)
		{
			if(IsPlayerInDynamicArea(i, GetIntVar(playerid, "BoomBoxArea")))
			{
				StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, url, GetFloatVar(playerid, "BoomBoxX"), GetFloatVar(playerid, "BoomBoxY"), GetFloatVar(playerid, "BoomBoxZ"), 50.0, 1);
			}
		}
	}
	return 1;
}

stock StopBoomBoxMusic(playerid)
{
	if(GetIntVar(playerid, "BoomBoxOn") == 1)
	{
		foreach(Player, i)
		{
			if(IsPlayerInDynamicArea(i, GetIntVar(playerid, "BoomBoxArea")))
			{
				StopAudioStreamForPlayer(i);
			}
		}
	}
	return 1;
}

stock StopCarBoomBox(vehicle)
{
	if(VehicleInfo[vehicle][carRadioOn] == 1)
	{
		VehicleInfo[vehicle][carRadioOn] = 0;
		foreach(Player, i)
		{
			if(GetPlayerVehicleID(i) == vehicle)
			{
				StopAudioStreamForPlayer(i);
			}
		}
	}
	return 1;
}

stock StopHouseBoomBox(house)
{
	if(HouseInfo[house][hRadioOn] == 1)
	{
		HouseInfo[house][hRadioOn] = 0;
		foreach(Player, i)
		{
			if(HouseEntered[i] == house)
			{
				StopAudioStreamForPlayer(i);
			}
		}
	}
	return 1;
}

stock StopBusinessBoomBox(biz)
{
	if(BizInfo[biz][bizRadioOn] == 1)
	{
		BizInfo[biz][bizRadioOn] = 0;
		foreach(Player, i)
		{
			if(BizEntered[i] == biz)
			{
				StopAudioStreamForPlayer(i);
			}
		}
	}
	return 1;
}

stock LoadHouseFurnitures(houseid)
{
	format(query, sizeof(query), "SELECT * FROM `furnitures` WHERE `houseid` = %d", HouseInfo[houseid][hID]);
	mysql_function_query(dbHandle, query, true, "OnFurnituresLoad", "i", houseid);
	return 1;
}

stock GetNextFurnitureSlot(houseid)
{
	new i=0;
	while(i != MAX_FURNITURE)
	{
		if(FurnitureInfo[houseid][i][fOn] == 0)
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetHouseFurnitures(houseid)
{
	new count = 0;
	for(new i = 0; i < MAX_FURNITURE; i++)
	{
		if(FurnitureInfo[houseid][i][fOn] == 1)
		{
			count++;
		}
	}
	return count;
}

stock OnPlayerBuyFurniture(houseid, interior, world, furnitureslot, model, price, name[], Float:x, Float:y, Float:z)
{
	format(query, sizeof(query), "INSERT INTO `furnitures` (model, name, houseid, interior, virworld, marketprice, posx, posy, posz) VALUES (%d, '%s', %d, %d, %d, %d, %f, %f, %f)",
	model, name, HouseInfo[houseid][hID], interior, world, price, x, y ,z);
	mysql_function_query(dbHandle, query, true, "OnFurnitureInsert", "iiiiiis[128]fff", houseid, interior, world, furnitureslot, model, price, name, x, y, z);
	return 1;
}

stock OnPlayerEditedFurniture(playerid, furnitureslot, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	format(query, sizeof(query), "UPDATE `furnitures` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %d",
	x, y, z, rx, ry, rz, FurnitureInfo[PlayerInfo[playerid][pHouseKey]][furnitureslot][fID]);
	mysql_function_query(dbHandle, query, true, "OnFurnitureUpdatePos", "iiffffff", playerid, furnitureslot, x, y, z, rx, ry, rz);
	return 1;
}

stock OnPlayerSellFurniture(playerid, houseid, furnitureslot)
{
	format(query, sizeof(query), "DELETE FROM `furnitures` WHERE `id` = %d", FurnitureInfo[houseid][furnitureslot][fID]);
	mysql_function_query(dbHandle, query, true, "OnPlayerSoldFurniture", "idd", playerid, houseid, furnitureslot);
	return 1;
}

stock GetWeaponNameEx(weaponid)
{
	new wname[64];
	GetWeaponName(weaponid, wname, sizeof(wname));
	if(weaponid == 0) format(wname, sizeof(wname), "Fist");
	return wname;
}

stock GetVehicleName(vehicleid)
{
	new String[128];
    format(String,sizeof(String),"%s",VehicleNames[GetVehicleModel(vehicleid) - 400]);
    return String;
}

stock GetWeaponNameeEx(weaponid)
{
    new weapon[22];
    switch(weaponid)
    {
        case 0: weapon = "Fist";
        case 2: weapon = "Golf Club";
        case 3: weapon = "Nightstick";
        case 4: weapon = "Knife";
        case 5: weapon = "Baseball Bat";
        case 6: weapon = "Shovel";
        case 7: weapon = "Pool Cue";
        case 8: weapon = "Katana";
        case 9: weapon = "Chainsaw";
        case 15: weapon = "Cane";
        case 16: weapon = "Grenade";
        case 17: weapon = "Tear Gas";
        case 18: weapon = "Molotov Cocktail";
        case 22: weapon = "9mm";
        case 23: weapon = "Silenced 9mm";
        case 24: weapon = "Desert Eagle";
        case 25: weapon = "Shotgun";
        case 26: weapon = "Sawnoff Shotgun";
        case 27: weapon = "Combat Shotgun";
        case 28: weapon = "Micro SMG";
        case 29: weapon = "MP5";
        case 30: weapon = "AK47";
        case 31: weapon = "M4";
        case 32: weapon = "Tec-9";
        case 33: weapon = "Country Rifle";
        case 34: weapon = "Sniper Rifle";
        case 35: weapon = "RPG";
        case 36: weapon = "HS Rocket";
        case 37: weapon = "Flamethrower";
        case 38: weapon = "Minigun";
        case 41: weapon = "Spraycan";
        case 44: weapon = "Night Vis Goggles";
        case 45: weapon = "Thermal Goggles";
        default: GetWeaponName(weaponid, weapon, sizeof(weapon));
    }
    return weapon;
}

stock SetPlayerBubble(playerid, text[])
{
	new string[128];
	new string2[128];
	format(string2, sizeof(string2) , "%s", text);
	format(string, sizeof(string), "> %s %s", GetNameWithMask(playerid), string2);
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 15.0, 8000);
	return 1;
}

stock CheckPrimaryWeapon(playerid)
{
	if(IsPrimarySlotTaken(playerid) && IsPrimaryWeapon(GetPlayerWeapon(playerid)) && GetWeaponAmmo(playerid, GetPrimaryWeapon(playerid)) > PlayerInfo[playerid][pAmmo1])
		return false;
	else
		return true;
}

stock CheckSecondaryWeapon(playerid)
{
	if(IsSecondarySlotTaken(playerid) && IsSecondaryWeapon(GetPlayerWeapon(playerid)) && GetWeaponAmmo(playerid, GetSecondaryWeapon(playerid)) > PlayerInfo[playerid][pAmmo2])
		return false;
	else
		return true;
}

stock PlayerHoldingWeapon(playerid, weaponid)
{
	if(GetPlayerWeapon(playerid) == weaponid && Weapons[playerid][weaponid] == 1)
		return true;
	else
		return false;
}

stock GetWeaponHolding(playerid)
{
	new wepid = GetPlayerWeapon(playerid);
	if(wepid > 0 && Weapons[playerid][wepid] == 1)
		return wepid;
	else
		return 0;
}

stock IsPlayerHoldingWeapon(playerid)
{
	new wepid = GetPlayerWeapon(playerid);
	if(wepid > 0 && Weapons[playerid][wepid] == 1)
		return true;
	else
		return false;
}

stock CheckWeapon(playerid, weaponid)
{
	if(Weapons[playerid][weaponid] == 1)
		return true;
	else
		return false;
}

stock GetNextWepDropID()
{
	new i=0;
	while(i != MAX_WEP_DROPS)
	{
		if(WeaponDropInfo[i][gunDropped] == 0)
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetClosestDroppedGun(playerid)
{
	new i=0;
	while(i != MAX_WEP_DROPS)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, WeaponDropInfo[i][gunPosX], WeaponDropInfo[i][gunPosY], WeaponDropInfo[i][gunPosZ]+1) && WeaponDropInfo[i][gunDropped] == 1)
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock ShowRadioTextDraw(playerid)
{
	PlayerTextDrawShow(playerid, RadioDraw[playerid]);
	PlayerTextDrawShow(playerid, ChannelDraw[playerid]);
	PlayerTextDrawShow(playerid, SlotDraw[playerid]);
	SetRadioChannel(playerid, GetPlayerChannel(playerid));
	SetRadioSlot(playerid, GetPlayerSlot(playerid));
	return 1;
}

stock HideRadioTextDraw(playerid)
{
	PlayerTextDrawHide(playerid, RadioDraw[playerid]);
	PlayerTextDrawHide(playerid, ChannelDraw[playerid]);
	PlayerTextDrawHide(playerid, SlotDraw[playerid]);
	return 1;
}


stock ShowNetworkTextDraw(playerid)
{
	PlayerTextDrawShow(playerid, FPSPingPacket[playerid]);
	return 1;
}

stock HideNetworkTextDraw(playerid)
{
	PlayerTextDrawHide(playerid, FPSPingPacket[playerid]);
	return 1;
}

stock ShowLocationTextDraw(playerid)
{
	TextDrawShowForPlayer(playerid, Zones[playerid]);
	return 1;
}

stock HideLocationTextDraw(playerid)
{
	TextDrawHideForPlayer(playerid, Zones[playerid]);
	return 1;
}

stock ShowTimeTextDraw(playerid)
{
	TextDrawShowForPlayer(playerid, TimeTD[playerid]);
	return 1;
}

stock HideTimeTextDraw(playerid)
{
	TextDrawHideForPlayer(playerid, TimeTD[playerid]);
	return 1;
}

stock ShowNewsTextDraw(playerid)
{
	TextDrawShowForPlayer(playerid, NewsTD[playerid]);
	return 1;
}

stock HideNewsTextDraw(playerid)
{
	TextDrawHideForPlayer(playerid, NewsTD[playerid]);
	return 1;
}

stock ShowStatusTextDraw(playerid)
{
	TextDrawShowForPlayer(playerid,PlayerTemp[playerid][Status]);
	return 1;
}

stock HideStatusTextDraw(playerid)
{
	TextDrawHideForPlayer(playerid,PlayerTemp[playerid][Status]);
	return 1;
}

stock SetRadioChannel(playerid, channel)
{
	if(channel == 0)
	{
		format(msg, sizeof(msg), "~b~Chan: ~h~~g~0");
		PlayerInfo[playerid][pAuthed] = 0;
	}
	else
	{
		format(msg, sizeof(msg), "~b~Chan: ~h~~g~%d", channel);
	}
	PlayerTextDrawSetString(playerid, ChannelDraw[playerid], msg);
	PlayerInfo[playerid][pChannel] = channel;
	return 1;
}

stock SetRadioSlot(playerid, slot)
{
	format(msg, sizeof(msg), "~b~Slot: ~h~~g~%d", slot);
	PlayerTextDrawSetString(playerid, SlotDraw[playerid], msg);
	PlayerInfo[playerid][pSlot] = slot;
	return 1;
}

stock GetPlayerChannel(playerid) return PlayerInfo[playerid][pChannel];
stock GetPlayerSlot(playerid) return PlayerInfo[playerid][pSlot];
stock GetOwnedChannel(playerid) return PlayerInfo[playerid][pOwnedChannel];

stock PlayerOwnChannel(playerid)
{
	if(PlayerInfo[playerid][pOwnedChannel] != 0)
		return true;
	else
		return false;
}

stock PlayerOwnGarage(playerid)
{
	if(PlayerInfo[playerid][pOwnGarage] > 0)
		return true;
	else
		return false;
}

stock ChannelExist(channelid)
{
	for(new i = 0; i < MAX_RADIOS; i++)
	{
		if(RadiosInfo[i][radioChannel] == channelid && RadiosInfo[i][radioOn] == 1)
		{
			return true;
		}
	}
	return false;
}

stock GetChannelSlot(channelid)
{
	for(new i = 0; i < MAX_RADIOS; i++)
	{
		if(RadiosInfo[i][radioChannel] == channelid)
		{
			return i;
		}
	}
	return 0;
}

stock AuthPassCorrect(slotid, authpass[])
{
	if(CompareStrings(authpass, RadiosInfo[slotid][radioPass]))
		return true;
	else
		return false;
}

stock GetNextChannelSlot()
{
	new i=0;
	while(i != MAX_RADIOS)
	{
		if(RadiosInfo[i][radioOn] == 0)
		{
			return i;
		}
		i++;
	}
	return -1;
}


stock StringHasSymbols(string[])
{
	for(new i = 0; i < strlen(string); i++)
	{
		switch(string[i])
		{
			case '!', '@', '#', '$','%','^','&','*','(',')','_','+','=','|','[',']','{','}','-','.','`','~','<','>','?',',','/': return true;
			default: continue;
		}
	}
	return false;
}

stock GetGarageSlot(garageid)
{
	for(new i = 0; i < MAX_GARAGES; i++)
	{
		if(GaragesInfo[i][garageID] == garageid)
		{
			return i;
		}
	}
	return 0;
}

stock AddChannelToFile(playerid, channelid, pass[], channelslot)
{
	format(query, sizeof(query), "INSERT INTO `radios` (channelid, owner, pass) VALUES (%d, '%s', '%s')", channelid, GetName(playerid), pass);
	mysql_function_query(dbHandle, query, true, "OnChannelInsert", "d", channelslot);
	return 1;
}

stock OnPlayerSellChannel(slotid)
{
	format(query, sizeof(query), "DELETE FROM `radios` WHERE `id` = %d", RadiosInfo[slotid][radioID]);
	mysql_function_query(dbHandle, query, false, "", "");
	format(query, sizeof(query), "UPDATE `users` SET `channel` = '0' WHERE `channel` = %d", RadiosInfo[slotid][radioChannel]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

stock ResetOfflinePlayersChannel(slotid)
{
	format(query, sizeof(query), "UPDATE `users` SET `channel` = %d, `authed` = %d WHERE `channel` = %d", 0, 0, RadiosInfo[slotid][radioChannel]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

stock UpdateRadioInfo(slot)
{
	format(query, sizeof(query), "UPDATE `radios` SET `pass` = '%s' WHERE `id` = %d", RadiosInfo[slot][radioPass], RadiosInfo[slot][radioID]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

stock FixVehicle(vehicleid)
{
	SetVehicleHealth(vehicleid, 1000.0);
	RepairVehicle(vehicleid);
	return 1;
}

stock PutPlayerInOldCar(playerid)
{
	new seatid = GetPlayerVehicleSeat(playerid);
	new vehicleid = GetPlayerVehicleID(playerid);
	PutPlayerInVehicle(playerid, vehicleid, seatid);
	return 1;
}

stock PlayerLogged(playerid)
{
	if(GetIntVar(playerid, "gLogged") == 1)
		return true;
	else
		return false;
}

stock ShowPlayerName(playerid, bool:show)
{
	if(show)
	{
		foreach(Player, i)
		{
			ShowPlayerNameTagForPlayer(i, playerid, 1);
		}
	}
	else
	{
		foreach(Player, i)
		{
			ShowPlayerNameTagForPlayer(i, playerid, 0);
		}
	}
	return 1;
}

stock RemovePlayerMask(playerid)
{
	PlayerInfo[playerid][pMask] = 0;
	Mask{playerid} = false;
	maskOn{playerid} = false;
	ShowPlayerName(playerid, true);
	return 1;
}

stock CompareStrings(string[], string2[])
{
	if(!strcmp(string, string2, true))
		return true;
	else
		return false;
}

stock SetPlayerToLogin(playerid)
{
	format(query, sizeof(query), "SELECT * FROM `bans` WHERE `name` = '%s'", GetName(playerid));
	mysql_function_query(dbHandle, query, true, "OnPlayerAttemptLogin", "i", playerid);
	return 1;
}

stock SetPlayerToLogin2(playerid)
{
	new IP[100];
	GetPlayerIp(playerid, IP, sizeof(IP));
	format(query, sizeof(query), "SELECT * FROM `users` WHERE `register_ip` = '%s'", IP);
	mysql_function_query(dbHandle, query, true, "OnPlayerAttemptLogin2", "i", playerid);
	return 1;
}

stock ResetPlayerVariables(playerid)
{
	//-----------------------------------------------------------------
	gOOC{playerid} = true; DoorEntered[playerid] = -1; ComplexEntered[playerid] = -1; HouseEntered[playerid] = 0; cellOn{playerid} = 1; factionon{playerid} = 1; HospitalWait{playerid} = 0; BizEntered[playerid] = -1;
	maskOn{playerid} = false; Mask{playerid} = false; SkinSlot[playerid] = 0; VehColor1{playerid} = 0; VehColor2{playerid} = 0; Painting{playerid} = 0;
	pToAccept[playerid] = INVALID_PLAYER_ID; vToAccept[playerid] = INVALID_VEHICLE_ID; prToAccept[playerid] = 0; spawnVehicle[playerid] = 0;
	JackingEngine[playerid] = 0; JackingLock[playerid] = 0;  DoorJacking[playerid] = 0; ToolKit{playerid} = false; IsSmoking{playerid} = false;
	IsModding{playerid} = false; BuyingPaintJob{playerid} = false; CheckingBot{playerid} = false; BizEntered[playerid] = -1; HireRequester[playerid] = INVALID_PLAYER_ID;
	TesterChat{playerid} = true; SweepTura{playerid} = false; OnAnim{playerid} = false; JustCasinoed[playerid] = 0; DrunkLevel[playerid] = 0; GasCan{playerid} = false; FactionRequest[playerid] = INVALID_PLAYER_ID;
	CopDuty{playerid} = false; GovDuty{playerid} = false; NewsDuty{playerid} = false; TransDuty{playerid} = false; radar{playerid} = false; Cuffed{playerid} = false; TazerActive{playerid} = false; BeanbagActive{playerid} = false; Tazed{playerid} = false; Beanbag{playerid} = false; OnCCTV{playerid} = false; MDCAdd[playerid] = INVALID_PLAYER_ID;
	TowingCar[playerid] = INVALID_VEHICLE_ID; SwatDuty{playerid} = false; MedicDuty{playerid} = false; Trucking{playerid} = false; LoadingTruck{playerid} = 0; DroppingOff{playerid} = false;
	TruckVehicle[playerid] = INVALID_VEHICLE_ID; TruckTrailer[playerid] = INVALID_VEHICLE_ID; TruckingMoney[playerid] = 0; RefillPrice[playerid] = 0; RefillOffer[playerid] = INVALID_PLAYER_ID;
	RepairOffer[playerid] = INVALID_PLAYER_ID; VehicleToRepair[playerid] = INVALID_VEHICLE_ID; OldVehicle[playerid] = INVALID_VEHICLE_ID; RepairTime{playerid} = 0; GettingRepair{playerid} = false;
	TaxiDuty{playerid} = false; TaxiFare{playerid} = 0; TaxiStart{playerid} = false; TaxiMoney[playerid] = 0; TaxiMade[playerid] = 0; isAFK{playerid} = false; AFKTime[playerid] = 0;
	PickingTime{playerid} = 0; PlantingTime{playerid} = 0;
	//----------------------------------------------------------------
	//-----------------------------------------------------------------
	for(new i = 0; i < 3; i++)
		RepairService[playerid][i] = 0;
	//-----------------------------------------------------------------
	for(new i = 0; i < 11; i++)
		RoadBlocks[playerid][i] = INVALID_OBJECT_ID;
	//-----------------------------------------------------------------
	for(new i = 0; i < 20; i++)
		PoliceLines[playerid][i] = INVALID_OBJECT_ID;
	//-----------------------------------------------------------------
	for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
		PoliceObjects[playerid][i] = INVALID_OBJECT_ID;
	//-----------------------------------------------------------------
	for(new i = 0; i < MAX_PLAYER_TICKETS; i++)
		PlayerInfo[playerid][pTickets][i] = 0;
	//-----------------------------------------------------------------
	for(new i = 1; i < MAX_DRUGS; i++)
	{
		PlayerInfo[playerid][pDrug][i] = 0;
		PlayerInfo[playerid][pDrugAmount][i] = 0;
	}
	//-----------------------------------------------------------------
	for (new i = 0; i < 47; i ++)
        Weapons[playerid][i] = 0;
	//-----------------------------------------------------------------
	Screenshot[playerid] = 0;
	InjuredMSG[playerid] = 0;
	PlayerInfo[playerid][pCanJob] = 0;
	PlayerInfo[playerid][pRegistered] = 0;
	PlayerInfo[playerid][pCash] = 0;
 	PlayerInfo[playerid][pBank] = 0;
 	PlayerInfo[playerid][pSkin] = 0;
 	PlayerInfo[playerid][pSex] = 0;
 	PlayerInfo[playerid][pAge] = 0;
 	NameTagHide[playerid] = 0;
	format(PlayerInfo[playerid][pOrigin],256,"None");
 	PlayerInfo[playerid][pSkin] = 0;
 	PlayerInfo[playerid][pLevel] = 0;
 	PlayerInfo[playerid][pExp] = 0;
 	PlayerInfo[playerid][pHours] = 0;
 	PlayerInfo[playerid][pAdmin] = 0;
 	PlayerInfo[playerid][pHelper] = 0;
 	PlayerInfo[playerid][pInt] = 0;
 	PlayerInfo[playerid][pWorld] = 0;
 	PlayerInfo[playerid][pJailed] = 0;
 	PlayerInfo[playerid][pJailTime] = 0;
 	PlayerInfo[playerid][pBanned] = 0;
 	PlayerInfo[playerid][pWarns] = 0;
 	PlayerInfo[playerid][pDonateRank] = 0;
 	PlayerInfo[playerid][pCarLic] = 0;
 	PlayerInfo[playerid][pTaxiLic] = 0;
 	PlayerInfo[playerid][pWepLic] = 0;
 	PlayerInfo[playerid][pFlyLic] = 0;
 	PlayerInfo[playerid][pPosX] = 0.0;
 	PlayerInfo[playerid][pPosY] = 0.0;
 	PlayerInfo[playerid][pPosZ] = 0.0;
 	PlayerInfo[playerid][pPosA] = 0.0;
 	PlayerInfo[playerid][pDied] = 0;
 	PlayerInfo[playerid][pFightStyle] = 0;
	PlayerInfo[playerid][pPen] = 0;
	format(PlayerInfo[playerid][pNote1],11,"None");
	PlayerInfo[playerid][pNote1s] = 0;
	format(PlayerInfo[playerid][pNote2],11,"None");
	PlayerInfo[playerid][pNote2s] = 0;
	format(PlayerInfo[playerid][pNote3],11,"None");
	PlayerInfo[playerid][pNote3s] = 0;
	format(PlayerInfo[playerid][pAttributes],64,"No Attributes");
	format(PlayerInfo[playerid][pForumName],64,"No ForumName");
	PlayerInfo[playerid][pPayCheckMade] = 0;
	PlayerInfo[playerid][pPayCheckMoney] = 0;
	PlayerInfo[playerid][pUpgrade] = 0;
	PlayerInfo[playerid][pPayDayTime] = 0;
	PlayerInfo[playerid][pSHealth] = 0.0;
	PlayerInfo[playerid][pCellPhone] = 0;
	PlayerInfo[playerid][pNumber] = 0;
	PlayerInfo[playerid][pSavings] = 0;
	PlayerInfo[playerid][pHouseKey] = -1;
	PlayerInfo[playerid][pMeleeWep] = 0;
	PlayerInfo[playerid][pPerm1] = 0;
	PlayerInfo[playerid][pPerm2] = 0;
	PlayerInfo[playerid][pAmmo1] = 0;
	PlayerInfo[playerid][pAmmo2] = 0;
	PlayerInfo[playerid][pRadio] = 0;
	PlayerInfo[playerid][pChannel] = 0;
	PlayerInfo[playerid][pOwnedChannel] = 0;
	PlayerInfo[playerid][pAuthed] = 0;
	PlayerInfo[playerid][pCrashed] = 0;
	PlayerInfo[playerid][pMask] = 0;
	PlayerInfo[playerid][pAccentOn] = 0;
	format(PlayerInfo[playerid][pAccent],64,"None");
	PlayerInfo[playerid][pBMX] = 0;
	PlayerInfo[playerid][pCarKey] = 0;
	strmid(PlayerVehicle[playerid][pVeh1], "None", 0, strlen("None"), 255);
	strmid(PlayerVehicle[playerid][pVeh2], "None", 0, strlen("None"), 255);
	strmid(PlayerVehicle[playerid][pVeh3], "None", 0, strlen("None"), 255);
	PlayerInfo[playerid][pVehicles] = 0;
	PlayerInfo[playerid][pVehSlot] = 0;
	PlayerInfo[playerid][pSpareKey] = 0;
	PlayerInfo[playerid][pHunger] = 100.0;
	PlayerInfo[playerid][pLighter] = 0;
	PlayerInfo[playerid][pCigars] = 0;
	PlayerInfo[playerid][pBizKey] = -1;
	PlayerInfo[playerid][pWorkOn] = -1;
	PlayerInfo[playerid][pWalk] = 0;
	PlayerInfo[playerid][pArmour] = 0.0;
	PlayerInfo[playerid][pHasArmour] = 0;
	PlayerInfo[playerid][pFaction] = 0;
	PlayerInfo[playerid][pRank] = 0;
	PlayerInfo[playerid][pBadgeNumber] = 0;
	PlayerInfo[playerid][pDriveWarns] = 0;
	PlayerInfo[playerid][pJailTime2] = 0;
	PlayerInfo[playerid][pArrested] = 0;
	PlayerInfo[playerid][pTalk] = 0;
	PlayerInfo[playerid][pSwat] = 0;
	PlayerInfo[playerid][pSlot] = 1;
	PlayerInfo[playerid][pJob] = 0;
	PlayerInfo[playerid][pJobRank] = 0;
	PlayerInfo[playerid][pCareer] = 0;
	PlayerInfo[playerid][pSideJob] = 0;
	PlayerInfo[playerid][pSpawnType] = 0;
	PlayerInfo[playerid][pPrisoned] = 0;
	PlayerInfo[playerid][pSeeds] = 0;
	//-----------------------------------------------------------------
	return 1;
}

stock CreateSecurityTextDraw(playerid)
{
	if(CheckingBot{playerid})
	{
		for(new i = 0, cindex = 0; i < sizeof(Captcha); i++)
		{
			if(i == 0) Captcha[i] = CreatePlayerTextDraw(playerid, 269.0, 139.0, "Anti-bot captcha:");
			if(i == 1)
			{
				new cstring[24];
				format(cstring, sizeof(cstring), "%c%c%c%c%c", TextArray[random(sizeof(TextArray))], TextArray[random(sizeof(TextArray))], TextArray[random(sizeof(TextArray))], TextArray[random(sizeof(TextArray))], TextArray[random(sizeof(TextArray))]);
				Captcha[i] = CreatePlayerTextDraw(playerid, 422.0, 139.0, cstring);
				SetPVarString(playerid, "CaptchaCode", cstring);
			}
			if(i == 2) Captcha[i] = CreatePlayerTextDraw(playerid, 285.0, 174.0, "Please repeat:");
			if(i == 3) Captcha[i] = CreatePlayerTextDraw(playerid, 427.0, 178.0, "-----");
			if(i > 3)
			{
				new string[4];
				format(string, sizeof(string), "%c", TextArray[i - 4]);
				if(i >= 4) Captcha[i] = CreatePlayerTextDraw(playerid, 158.0 + (41.0 * cindex), 218.0, string);
				if(i == 14) cindex = 0, Captcha[i] = CreatePlayerTextDraw(playerid, 158.0 + (41.0 * cindex), 259.0, string);
				if(i > 14) Captcha[i] = CreatePlayerTextDraw(playerid, 158.0 + (41.0 * cindex), 259.0, string);
				if(i == 24) cindex = 0, Captcha[i] = CreatePlayerTextDraw(playerid, 178.0 + (41.0 * cindex), 300.0, string);
				if(i > 24) Captcha[i] = CreatePlayerTextDraw(playerid, 178.0 + (41.0 * cindex), 300.0, string);
				if(i == 33) cindex = 0, Captcha[i] = CreatePlayerTextDraw(playerid, 220.0 + (41.0 * cindex), 341.0, string);
				if(i > 33) Captcha[i] = CreatePlayerTextDraw(playerid, 220.0 + (41.0 * cindex), 341.0, string);
				PlayerTextDrawUseBox(playerid, Captcha[i], 1);
				PlayerTextDrawBoxColor(playerid, Captcha[i], 0x000000AA);
				PlayerTextDrawTextSize(playerid, Captcha[i], 29.0, 29.0);
				PlayerTextDrawSetSelectable(playerid, Captcha[i], 1);
				cindex++;
			}
			PlayerTextDrawLetterSize(playerid, Captcha[i], 0.63, 3.4);
			PlayerTextDrawAlignment(playerid, Captcha[i], 2);
			PlayerTextDrawSetOutline(playerid, Captcha[i], 1);
			PlayerTextDrawShow(playerid, Captcha[i]);
			SelectTextDraw(playerid, 0xFDE39DFF);
		}
	}
}

stock HidePhone(playerid)
{
	PlayerTextDrawHide(playerid, phone0[playerid]);
	PlayerTextDrawHide(playerid, phone1[playerid]);
	PlayerTextDrawHide(playerid, phone2[playerid]);
	PlayerTextDrawHide(playerid, phone3[playerid]);
	PlayerTextDrawHide(playerid, phone4[playerid]);
	PlayerTextDrawHide(playerid, phone5[playerid]);
	PlayerTextDrawHide(playerid, phone6[playerid]);
	PlayerTextDrawHide(playerid, phone7[playerid]);
	PlayerTextDrawHide(playerid, phone8[playerid]);
	PlayerTextDrawHide(playerid, phone9[playerid]);
	PlayerTextDrawHide(playerid, phone10[playerid]);
	PlayerTextDrawHide(playerid, phone11[playerid]);
	PlayerTextDrawHide(playerid, phone12[playerid]);
	PlayerTextDrawHide(playerid, phone13[playerid]);
	PlayerTextDrawHide(playerid, phone14[playerid]);
	PlayerTextDrawHide(playerid, phone15[playerid]);
	PlayerTextDrawHide(playerid, phone16[playerid]);
	return 1;
}

stock ShowPhone(playerid)
{
	PlayerTextDrawShow(playerid, phone0[playerid]);
	PlayerTextDrawShow(playerid, phone1[playerid]);
	PlayerTextDrawShow(playerid, phone2[playerid]);
	PlayerTextDrawShow(playerid, phone3[playerid]);
	PlayerTextDrawShow(playerid, phone4[playerid]);
	PlayerTextDrawShow(playerid, phone5[playerid]);
	PlayerTextDrawShow(playerid, phone6[playerid]);
	PlayerTextDrawShow(playerid, phone7[playerid]);
	PlayerTextDrawShow(playerid, phone8[playerid]);
	PlayerTextDrawShow(playerid, phone9[playerid]);
	PlayerTextDrawShow(playerid, phone10[playerid]);
	PlayerTextDrawShow(playerid, phone11[playerid]);
	PlayerTextDrawShow(playerid, phone12[playerid]);
	PlayerTextDrawShow(playerid, phone13[playerid]);
	PlayerTextDrawShow(playerid, phone14[playerid]);
	PlayerTextDrawShow(playerid, phone15[playerid]);
	PlayerTextDrawShow(playerid, phone16[playerid]);
	return 1;
}

stock CreateAllTextDraws(playerid)
{
	phone0[playerid] = CreatePlayerTextDraw(playerid,462.095062, 310.613311, "ld_otb:tvcorn");
	PlayerTextDrawLetterSize(playerid,phone0[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid,phone0[playerid], 52.952449, 140.373306);
	PlayerTextDrawAlignment(playerid,phone0[playerid], 1);
	PlayerTextDrawColor(playerid,phone0[playerid], -1);
	PlayerTextDrawSetShadow(playerid,phone0[playerid], 6);
	PlayerTextDrawSetOutline(playerid,phone0[playerid], 0);
	PlayerTextDrawFont(playerid,phone0[playerid], 4);

	phone1[playerid] = CreatePlayerTextDraw(playerid,570.284973, 310.613311, "LD_otb:tvcorn");
	PlayerTextDrawLetterSize(playerid,phone1[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid,phone1[playerid], -56.091499, 140.800033);
	PlayerTextDrawAlignment(playerid,phone1[playerid], 1);
	PlayerTextDrawColor(playerid,phone1[playerid], -1);
	PlayerTextDrawSetShadow(playerid,phone1[playerid], 0);
	PlayerTextDrawSetOutline(playerid,phone1[playerid], 0);
	PlayerTextDrawFont(playerid,phone1[playerid], 4);

	phone2[playerid] = CreatePlayerTextDraw(playerid,566.094970, 407.039978, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid,phone2[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid,phone2[playerid], -99.428695, 88.319953);
	PlayerTextDrawAlignment(playerid,phone2[playerid], 1);
	PlayerTextDrawColor(playerid,phone2[playerid], 255);
	PlayerTextDrawSetShadow(playerid,phone2[playerid], 0);
	PlayerTextDrawSetOutline(playerid,phone2[playerid], 0);
	PlayerTextDrawFont(playerid,phone2[playerid], 4);

	phone3[playerid] = CreatePlayerTextDraw(playerid,467.047607, 378.453338, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid,phone3[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid,phone3[playerid], 98.285705, 31.573333);
	PlayerTextDrawAlignment(playerid,phone3[playerid], 1);
	PlayerTextDrawColor(playerid,phone3[playerid], 255);
	PlayerTextDrawSetShadow(playerid,phone3[playerid], 0);
	PlayerTextDrawSetOutline(playerid,phone3[playerid], 0);
	PlayerTextDrawFont(playerid,phone3[playerid], 4);

	phone4[playerid] = CreatePlayerTextDraw(playerid,474.666687, 351.573333, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid,phone4[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid,phone4[playerid], 83.809509, 52.906646);
	PlayerTextDrawAlignment(playerid,phone4[playerid], 1);
	PlayerTextDrawColor(playerid,phone4[playerid], -1061109505);
	PlayerTextDrawSetShadow(playerid,phone4[playerid], 0);
	PlayerTextDrawSetOutline(playerid,phone4[playerid], 0);
	PlayerTextDrawFont(playerid,phone4[playerid], 4);

	phone5[playerid] = CreatePlayerTextDraw(playerid,475.428558, 395.093292, "Menu");
	PlayerTextDrawLetterSize(playerid,phone5[playerid], 0.320095, 0.814933);
	PlayerTextDrawAlignment(playerid,phone5[playerid], 1);
	PlayerTextDrawColor(playerid,phone5[playerid], 255);
	PlayerTextDrawSetShadow(playerid,phone5[playerid], 0);
	PlayerTextDrawSetOutline(playerid,phone5[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid,phone5[playerid], 51);
	PlayerTextDrawFont(playerid,phone5[playerid], 1);
	PlayerTextDrawSetProportional(playerid,phone5[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, phone5[playerid], true);

	phone6[playerid] = CreatePlayerTextDraw(playerid,536.761962, 394.666717, "Back");
	PlayerTextDrawLetterSize(playerid,phone6[playerid], 0.288857, 0.930133);
	PlayerTextDrawAlignment(playerid,phone6[playerid], 1);
	PlayerTextDrawColor(playerid,phone6[playerid], 255);
	PlayerTextDrawSetShadow(playerid,phone6[playerid], 0);
	PlayerTextDrawSetOutline(playerid,phone6[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid,phone6[playerid], 51);
	PlayerTextDrawFont(playerid,phone6[playerid], 1);
	PlayerTextDrawSetProportional(playerid,phone6[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, phone6[playerid], true);

	phone7[playerid] = CreatePlayerTextDraw(playerid,476.571411, 408.746643, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid,phone7[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid,phone7[playerid], 24.761932, 7.253356);
	PlayerTextDrawAlignment(playerid,phone7[playerid], 1);
	PlayerTextDrawColor(playerid,phone7[playerid], -2139062017);
	PlayerTextDrawSetShadow(playerid,phone7[playerid], 0);
	PlayerTextDrawSetOutline(playerid,phone7[playerid], 0);
	PlayerTextDrawFont(playerid,phone7[playerid], 4);

	phone8[playerid] = CreatePlayerTextDraw(playerid,559.237976, 409.173339, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid,phone8[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid,phone8[playerid], -25.142845, 7.253326);
	PlayerTextDrawAlignment(playerid,phone8[playerid], 1);
	PlayerTextDrawColor(playerid,phone8[playerid], -2139062017);
	PlayerTextDrawSetShadow(playerid,phone8[playerid], 0);
	PlayerTextDrawSetOutline(playerid,phone8[playerid], 0);
	PlayerTextDrawFont(playerid,phone8[playerid], 4);

	phone9[playerid] = CreatePlayerTextDraw(playerid,499.809539, 357.973327, "14:57");
	PlayerTextDrawLetterSize(playerid,phone9[playerid], 0.329238, 0.960000);
	PlayerTextDrawAlignment(playerid,phone9[playerid], 1);
	PlayerTextDrawColor(playerid,phone9[playerid], 255);
	PlayerTextDrawSetShadow(playerid,phone9[playerid], 0);
	PlayerTextDrawSetOutline(playerid,phone9[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid,phone9[playerid], 51);
	PlayerTextDrawFont(playerid,phone9[playerid], 1);
	PlayerTextDrawSetProportional(playerid,phone9[playerid], 1);

	phone10[playerid] = CreatePlayerTextDraw(playerid,494.857116, 367.360015, "March 4th");
	PlayerTextDrawLetterSize(playerid,phone10[playerid], 0.246952, 0.695466);
	PlayerTextDrawAlignment(playerid,phone10[playerid], 1);
	PlayerTextDrawColor(playerid,phone10[playerid], 255);
	PlayerTextDrawSetShadow(playerid,phone10[playerid], 0);
	PlayerTextDrawSetOutline(playerid,phone10[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid,phone10[playerid], 51);
	PlayerTextDrawFont(playerid,phone10[playerid], 1);
	PlayerTextDrawSetProportional(playerid,phone10[playerid], 1);

	phone11[playerid] = CreatePlayerTextDraw(playerid,488.761901, 333.653320, "LS Telefonica");
	PlayerTextDrawLetterSize(playerid,phone11[playerid], 0.246952, 0.776533);
	PlayerTextDrawAlignment(playerid,phone11[playerid], 1);
	PlayerTextDrawColor(playerid,phone11[playerid], -1);
	PlayerTextDrawSetShadow(playerid,phone11[playerid], 0);
	PlayerTextDrawSetOutline(playerid,phone11[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid,phone11[playerid], 51);
	PlayerTextDrawFont(playerid,phone11[playerid], 1);
	PlayerTextDrawSetProportional(playerid,phone11[playerid], 1);

	phone12[playerid] = CreatePlayerTextDraw(playerid,544.000000, 318.720001, "ld_beat:circle");
	PlayerTextDrawLetterSize(playerid,phone12[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid,phone12[playerid], 14.857121, 14.933318);
	PlayerTextDrawAlignment(playerid,phone12[playerid], 1);
	PlayerTextDrawColor(playerid,phone12[playerid], -1);
	PlayerTextDrawSetShadow(playerid,phone12[playerid], 0);
	PlayerTextDrawSetOutline(playerid,phone12[playerid], 0);
	PlayerTextDrawFont(playerid,phone12[playerid], 4);
	PlayerTextDrawSetSelectable(playerid, phone12[playerid], true);

	phone13[playerid] = CreatePlayerTextDraw(playerid,499.047607, 422.400024, "ld_beat:left");
	PlayerTextDrawLetterSize(playerid,phone13[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid,phone13[playerid], 15.238098, 11.946655);
	PlayerTextDrawAlignment(playerid,phone13[playerid], 1);
	PlayerTextDrawColor(playerid,phone13[playerid], -1);
	PlayerTextDrawSetShadow(playerid,phone13[playerid], 0);
	PlayerTextDrawSetOutline(playerid,phone13[playerid], 0);
	PlayerTextDrawFont(playerid,phone13[playerid], 4);

	phone14[playerid] = CreatePlayerTextDraw(playerid,510.476196, 412.586669, "ld_beat:up");
	PlayerTextDrawLetterSize(playerid,phone14[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid,phone14[playerid], 15.619049, 11.946655);
	PlayerTextDrawAlignment(playerid,phone14[playerid], 1);
	PlayerTextDrawColor(playerid,phone14[playerid], -1);
	PlayerTextDrawSetShadow(playerid,phone14[playerid], 0);
	PlayerTextDrawSetOutline(playerid,phone14[playerid], 0);
	PlayerTextDrawFont(playerid,phone14[playerid], 4);

	phone15[playerid] = CreatePlayerTextDraw(playerid,523.047485, 422.399993, "ld_beat:right");
	PlayerTextDrawLetterSize(playerid,phone15[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid,phone15[playerid], 14.095205, 12.373357);
	PlayerTextDrawAlignment(playerid,phone15[playerid], 1);
	PlayerTextDrawColor(playerid,phone15[playerid], -1);
	PlayerTextDrawSetShadow(playerid,phone15[playerid], 0);
	PlayerTextDrawSetOutline(playerid,phone15[playerid], 0);
	PlayerTextDrawFont(playerid,phone15[playerid], 4);

	phone16[playerid] = CreatePlayerTextDraw(playerid,512.761901, 431.786682, "ld_beat:down");
	PlayerTextDrawLetterSize(playerid,phone16[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid,phone16[playerid], 11.809507, 14.506656);
	PlayerTextDrawAlignment(playerid,phone16[playerid], 1);
	PlayerTextDrawColor(playerid,phone16[playerid], -1);
	PlayerTextDrawSetShadow(playerid,phone16[playerid], 0);
	PlayerTextDrawSetOutline(playerid,phone16[playerid], 0);
	PlayerTextDrawFont(playerid,phone16[playerid], 4);

	RadioDraw[playerid] = CreatePlayerTextDraw(playerid, 520.000000, 103.000000, "~b~Radio info");
	PlayerTextDrawBackgroundColor(playerid, RadioDraw[playerid], 0x000000ff);
	PlayerTextDrawFont(playerid, RadioDraw[playerid], 3);
	PlayerTextDrawLetterSize(playerid, RadioDraw[playerid], 0.40, 1.0);
	PlayerTextDrawColor(playerid, RadioDraw[playerid], 0xffffffff);
	PlayerTextDrawSetShadow(playerid, RadioDraw[playerid], 1);

	ChannelDraw[playerid] = CreatePlayerTextDraw(playerid, 520.000000, 112.000000, "~b~Channel: ~h~~w~0");
	PlayerTextDrawBackgroundColor(playerid, ChannelDraw[playerid], 0x000000ff);
	PlayerTextDrawFont(playerid, ChannelDraw[playerid], 3);
	PlayerTextDrawLetterSize(playerid, ChannelDraw[playerid], 0.40, 1.0);
	PlayerTextDrawColor(playerid, ChannelDraw[playerid], 0xffffffff);
	PlayerTextDrawSetShadow(playerid, ChannelDraw[playerid], 1);

	SlotDraw[playerid] = CreatePlayerTextDraw(playerid, 520.000000, 121.000000, "~b~Slot: ~h~~w~0");
	PlayerTextDrawBackgroundColor(playerid, SlotDraw[playerid], 0x000000ff);
	PlayerTextDrawFont(playerid, SlotDraw[playerid], 3);
	PlayerTextDrawLetterSize(playerid, SlotDraw[playerid], 0.40, 1.0);
	PlayerTextDrawColor(playerid, SlotDraw[playerid], 0xffffffff);
	PlayerTextDrawSetShadow(playerid, SlotDraw[playerid], 1);
	
	STextdraw[playerid] = TextDrawCreate(617.238098, 4.059998, "usebox");
	TextDrawLetterSize(STextdraw[playerid], 0.000000, 23.766296);
	TextDrawTextSize(STextdraw[playerid], 9.047617, 0.000000);
	TextDrawAlignment(STextdraw[playerid], 1);
	TextDrawColor(STextdraw[playerid], 0);
	TextDrawUseBox(STextdraw[playerid], true);
	TextDrawBoxColor(STextdraw[playerid], -1888258305);
	TextDrawSetShadow(STextdraw[playerid], 0);
	TextDrawSetOutline(STextdraw[playerid], 0);
	TextDrawBackgroundColor(STextdraw[playerid], 41215);
	TextDrawFont(STextdraw[playerid], 0);


	/*HungerDraw[playerid] = TextDrawCreate(547.000000, 22.000000, "hunger: 100");
	TextDrawBackgroundColor(HungerDraw[playerid], 255);
	TextDrawFont(HungerDraw[playerid], 1);
	TextDrawLetterSize(HungerDraw[playerid], 0.320000, 0.799999);
	TextDrawColor(HungerDraw[playerid], -16776961);
	TextDrawSetOutline(HungerDraw[playerid], 1);
	TextDrawSetProportional(HungerDraw[playerid], 1);
	*/
	TruckerDraw[playerid] = TextDrawCreate(95.000000, 292.000000, "Loading...");
	TextDrawBackgroundColor(TruckerDraw[playerid], 255);
	TextDrawFont(TruckerDraw[playerid], 1);
	TextDrawLetterSize(TruckerDraw[playerid], 0.290000, 1.099999);
	TextDrawColor(TruckerDraw[playerid], -1);
	TextDrawSetOutline(TruckerDraw[playerid], 1);
	TextDrawSetProportional(TruckerDraw[playerid], 1);

	SpeedText[playerid] = TextDrawCreate(520.000000, 135.000000, "");
	TextDrawBackgroundColor(SpeedText[playerid], 0x000000ff);
	TextDrawFont(SpeedText[playerid], 3);
	TextDrawLetterSize(SpeedText[playerid], 0.40, 1.0);
	TextDrawColor(SpeedText[playerid], 0xffffffff);
	TextDrawSetShadow(SpeedText[playerid], 1);

	FuelText[playerid] = TextDrawCreate(520.000000, 144.000000, "");
	TextDrawBackgroundColor(FuelText[playerid], 0x000000ff);
	TextDrawFont(FuelText[playerid], 3);
	TextDrawLetterSize(FuelText[playerid], 0.40, 1.0);
	TextDrawColor(FuelText[playerid], 0xffffffff);
	TextDrawSetShadow(FuelText[playerid], 1);

	errormsg[playerid] = TextDrawCreate(318.000000,112.000000,"~r~Error");
	TextDrawAlignment(errormsg[playerid],2);
	TextDrawBackgroundColor(errormsg[playerid],0x000000ff);
	TextDrawFont(errormsg[playerid],1);
	TextDrawLetterSize(errormsg[playerid],0.299999,1.300000);
	TextDrawColor(errormsg[playerid],0xffffffff);
	TextDrawSetOutline(errormsg[playerid],1);
	TextDrawSetProportional(errormsg[playerid],1);
	TextDrawSetShadow(errormsg[playerid],1);

	jail_timeleft[playerid] = TextDrawCreate(277.000000,371.000000,"~p~Time left: ~w~Loading...");
	TextDrawAlignment(jail_timeleft[playerid],0);
	TextDrawBackgroundColor(jail_timeleft[playerid],0x000000ff);
	TextDrawFont(jail_timeleft[playerid],3);
	TextDrawLetterSize(jail_timeleft[playerid],0.299999,1.200000);
	TextDrawColor(jail_timeleft[playerid],0xffffffff);
	TextDrawSetOutline(jail_timeleft[playerid],1);
	TextDrawSetProportional(jail_timeleft[playerid],1);
	TextDrawSetShadow(jail_timeleft[playerid],1);

	hospital_timeleft[playerid] = TextDrawCreate(10.000000,100.000000,"~b~Recovery time: ~w~Loading...");
	TextDrawAlignment(hospital_timeleft[playerid],0);
	TextDrawBackgroundColor(hospital_timeleft[playerid],0x000000ff);
	TextDrawFont(hospital_timeleft[playerid],3);
	TextDrawLetterSize(hospital_timeleft[playerid],0.399999,1.37777);
	TextDrawColor(hospital_timeleft[playerid],0xffffffff);
	TextDrawSetOutline(hospital_timeleft[playerid],1);
	TextDrawSetProportional(hospital_timeleft[playerid],1);
	TextDrawSetShadow(hospital_timeleft[playerid],1);

	infotxt[playerid] = TextDrawCreate(145.000000,145.000000,"Loading...");
	TextDrawUseBox(infotxt[playerid],1);
	TextDrawBoxColor(infotxt[playerid],0x00000066);
	TextDrawTextSize(infotxt[playerid],0.000000,252.000000);
	TextDrawAlignment(infotxt[playerid],2);
	TextDrawBackgroundColor(infotxt[playerid],0x000000ff);
	TextDrawFont(infotxt[playerid],3);
	TextDrawLetterSize(infotxt[playerid],0.299999,1.200000);
	TextDrawColor(infotxt[playerid],0xffffffff);
	TextDrawSetOutline(infotxt[playerid],1);
	TextDrawSetProportional(infotxt[playerid],1);
	TextDrawSetShadow(infotxt[playerid],1);

	ModText[playerid] = TextDrawCreate(259.000000, 299.000000, "Loading...");
	TextDrawBackgroundColor(ModText[playerid], 255);
	TextDrawFont(ModText[playerid], 3);
	TextDrawLetterSize(ModText[playerid], 0.570000, 1.799999);
	TextDrawColor(ModText[playerid], -65281);
	TextDrawSetOutline(ModText[playerid], 1);

	Dusule1[playerid] = CreatePlayerTextDraw(playerid, 290.761840, 366.300018, "usebox");
	PlayerTextDrawLetterSize(playerid, Dusule1[playerid], 0.000000, 1.058143);
	PlayerTextDrawTextSize(playerid, Dusule1[playerid], 233.428512, 0.000000);
	PlayerTextDrawAlignment(playerid, Dusule1[playerid], 1);
	PlayerTextDrawColor(playerid, Dusule1[playerid], 0);
	PlayerTextDrawUseBox(playerid, Dusule1[playerid], true);
	PlayerTextDrawBoxColor(playerid, Dusule1[playerid], -1378294017);
	PlayerTextDrawSetShadow(playerid, Dusule1[playerid], 0);
	PlayerTextDrawSetOutline(playerid, Dusule1[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, Dusule1[playerid], 16777215);
	PlayerTextDrawFont(playerid, Dusule1[playerid], 0);

	Dusule2[playerid] = CreatePlayerTextDraw(playerid, 397.666473, 366.446685, "usebox");
	PlayerTextDrawLetterSize(playerid, Dusule2[playerid], 0.000000, 1.058143);
	PlayerTextDrawTextSize(playerid, Dusule2[playerid], 339.333160, 0.000000);
	PlayerTextDrawAlignment(playerid, Dusule2[playerid], 1);
	PlayerTextDrawColor(playerid, Dusule2[playerid], 0);
	PlayerTextDrawUseBox(playerid, Dusule2[playerid], true);
	PlayerTextDrawBoxColor(playerid, Dusule2[playerid], -1378294017);
	PlayerTextDrawSetShadow(playerid, Dusule2[playerid], 0);
	PlayerTextDrawSetOutline(playerid, Dusule2[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, Dusule2[playerid], 16777215);
	PlayerTextDrawFont(playerid, Dusule2[playerid], 0);

	Dusule3[playerid] = CreatePlayerTextDraw(playerid, 345.333251, 385.793334, "usebox");
	PlayerTextDrawLetterSize(playerid, Dusule3[playerid], 0.000000, 1.058143);
	PlayerTextDrawTextSize(playerid, Dusule3[playerid], 285.999938, 0.000000);
	PlayerTextDrawAlignment(playerid, Dusule3[playerid], 1);
	PlayerTextDrawColor(playerid, Dusule3[playerid], 0);
	PlayerTextDrawUseBox(playerid, Dusule3[playerid], true);
	PlayerTextDrawBoxColor(playerid, Dusule3[playerid], -1378294017);
	PlayerTextDrawSetShadow(playerid, Dusule3[playerid], 0);
	PlayerTextDrawSetOutline(playerid, Dusule3[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, Dusule3[playerid], 16777215);
	PlayerTextDrawFont(playerid, Dusule3[playerid], 0);


	PrevButton[playerid] = CreatePlayerTextDraw(playerid, 235.809509, 364.799987, "Back");
	PlayerTextDrawLetterSize(playerid, PrevButton[playerid], 0.368857, 1.198933);
	PlayerTextDrawAlignment(playerid, PrevButton[playerid], 1);
	PlayerTextDrawColor(playerid, PrevButton[playerid], -1523963137);
	PlayerTextDrawSetShadow(playerid, PrevButton[playerid], 0);
	PlayerTextDrawSetOutline(playerid, PrevButton[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, PrevButton[playerid], 51);
	PlayerTextDrawFont(playerid, PrevButton[playerid], 2);
	PlayerTextDrawSetProportional(playerid, PrevButton[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, PrevButton[playerid], true);

	NextButton[playerid] = CreatePlayerTextDraw(playerid, 341.952331, 365.373321, "BEFORE");
	PlayerTextDrawLetterSize(playerid, NextButton[playerid], 0.331142, 1.160533);
	PlayerTextDrawAlignment(playerid, NextButton[playerid], 1);
	PlayerTextDrawColor(playerid, NextButton[playerid], -1523963137);
	PlayerTextDrawSetShadow(playerid, NextButton[playerid], 0);
	PlayerTextDrawSetOutline(playerid, NextButton[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, NextButton[playerid], 51);
	PlayerTextDrawFont(playerid, NextButton[playerid], 2);
	PlayerTextDrawSetProportional(playerid, NextButton[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, NextButton[playerid], true);

	WearButton[playerid] = CreatePlayerTextDraw(playerid, 288.857208, 384.719970, "Dress up");
	PlayerTextDrawLetterSize(playerid, WearButton[playerid], 0.296476, 1.126400);
	PlayerTextDrawAlignment(playerid, WearButton[playerid], 1);
	PlayerTextDrawColor(playerid, WearButton[playerid], -1523963137);
	PlayerTextDrawSetShadow(playerid, WearButton[playerid], 0);
	PlayerTextDrawSetOutline(playerid, WearButton[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, WearButton[playerid], 51);
	PlayerTextDrawFont(playerid, WearButton[playerid], 2);
	PlayerTextDrawSetProportional(playerid, WearButton[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, WearButton[playerid], true);
	
	FPSPingPacket[playerid] = CreatePlayerTextDraw(playerid,500.5, 1.4, "_");
	PlayerTextDrawBackgroundColor(playerid, FPSPingPacket[playerid], 0x00000044);
	PlayerTextDrawFont(playerid, FPSPingPacket[playerid], 1);
	PlayerTextDrawLetterSize(playerid, FPSPingPacket[playerid], 0.190000, 0.93000);
	PlayerTextDrawColor(playerid, FPSPingPacket[playerid], 16711935);
	PlayerTextDrawSetOutline(playerid, FPSPingPacket[playerid], 1);
	PlayerTextDrawSetProportional(playerid, FPSPingPacket[playerid], 1);
	PlayerTextDrawSetShadow(playerid, FPSPingPacket[playerid],0);
	PlayerTextDrawAlignment(playerid, FPSPingPacket[playerid], 1);
	
	TimeTD[playerid] = TextDrawCreate(576.000000, 25.000000, "11/11/2011~n~15:01");
	TextDrawAlignment(TimeTD[playerid], 2);
	TextDrawBackgroundColor(TimeTD[playerid], 0x000000ff);
	TextDrawFont(TimeTD[playerid], 3);
	TextDrawLetterSize(TimeTD[playerid], 0.299999, 1.000000);
	TextDrawColor(TimeTD[playerid], 0xffffffff);
	TextDrawSetOutline(TimeTD[playerid], 1);
	TextDrawSetProportional(TimeTD[playerid], 1);
	TextDrawSetShadow(TimeTD[playerid], 1);
	
	NewsTD[playerid] = TextDrawCreate(314.000000,429.000000,"~w~There is nothing news at this moment!");
	TextDrawUseBox(NewsTD[playerid],1);
	TextDrawBoxColor(NewsTD[playerid],0x00000033);
	TextDrawTextSize(NewsTD[playerid],0.000000,892.000000);
	TextDrawAlignment(NewsTD[playerid],2);
	TextDrawBackgroundColor(NewsTD[playerid],0x00000033);
	TextDrawFont(NewsTD[playerid],1);
	TextDrawLetterSize(NewsTD[playerid],0.199999,1.400000);
	TextDrawColor(NewsTD[playerid],0xffffffff);
	TextDrawSetOutline(NewsTD[playerid],1);
	TextDrawSetProportional(NewsTD[playerid],1);
	TextDrawSetShadow(NewsTD[playerid],1);
	
	PlayerTemp[playerid][Status] = TextDrawCreate(551.000000,389.000000,"~b~Weapon: ~w~Nigga~n~~b~Money: ~w~$1.234.567~n~~b~Vehicle: ~w~Sultan~n~~b~Fuel: ~w~50/100~n~~b~Speed: ~w~1000");
	TextDrawUseBox(PlayerTemp[playerid][Status],1);
	TextDrawBoxColor(PlayerTemp[playerid][Status],0x00000033);
	TextDrawTextSize(PlayerTemp[playerid][Status],750.000000,10.000000);
	TextDrawAlignment(PlayerTemp[playerid][Status],0);
	TextDrawBackgroundColor(PlayerTemp[playerid][Status],0x00000033);
	TextDrawFont(PlayerTemp[playerid][Status],1);
	TextDrawLetterSize(PlayerTemp[playerid][Status],0.199999,0.799999);
	TextDrawColor(PlayerTemp[playerid][Status],0xffffffff);
	TextDrawSetOutline(PlayerTemp[playerid][Status],1);
	TextDrawSetProportional(PlayerTemp[playerid][Status],1);
	TextDrawSetShadow(PlayerTemp[playerid][Status],3);
	
	for(new i=0; i<MAX_PLAYERS; i++) {
   		Zones[i] = TextDrawCreate(88.000000,429.000000,"location here");
		TextDrawAlignment(Zones[i],2);
		TextDrawBackgroundColor(Zones[i],0x000000ff);
		TextDrawFont(Zones[i],2);
		TextDrawLetterSize(Zones[i],0.199999,1.200000);
		TextDrawColor(Zones[i],0xffffffff);
		TextDrawSetOutline(Zones[i],1);
		TextDrawSetProportional(Zones[i],1);
		TextDrawSetShadow(Zones[i],1);
	}
	
	return 1;
}

stock IsDriver(playerid)
{
	if(PlayerInCar(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		return true;
	else
		return false;
}

stock DestoryCar(vehicleid)
{
	VehicleEngine(vehicleid, false);
	ToggleVehicleLock(vehicleid, false);
	DestroyVehicle(vehicleid);
	return 1;
}

stock VehicleEmpty(vehicleid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerInVehicle(i, vehicleid)) return 0;
	}
	return 1;
}

stock GetVehicleZone(vehicleid, zone[], len)
{
	new Float:x, Float:y, Float:z;
	GetVehiclePos(vehicleid, x, y, z);
 	for(new i = 0; i != sizeof(gSAZones); i++ )
 	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
		{
		    return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
		}
	}
	return 0;
}

stock GetCoords2DZone(Float:x, Float:y, zone[], len)
{
 	for(new i = 0; i != sizeof(gSAZones); i++ )
 	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
		{
		    return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
		}
	}
	return 0;
}

stock GetPlayer2DZone(playerid, zone[], len)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
 	for(new i = 0; i != sizeof(gSAZones); i++ )
 	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
		{
		    return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
		}
	}
	return 0;
}

stock ErrorMsg(playerid, message[])
{
	format(ErrorInfo[playerid][0][eMsg],80,"%s",ErrorInfo[playerid][1][eMsg]);
	ErrorInfo[playerid][0][eExpire] = ErrorInfo[playerid][1][eExpire];
	format(ErrorInfo[playerid][1][eMsg],80,"%s",ErrorInfo[playerid][2][eMsg]);
	ErrorInfo[playerid][1][eExpire] = ErrorInfo[playerid][2][eExpire];
	format(ErrorInfo[playerid][2][eMsg],80,"%s",message);
	ErrorInfo[playerid][2][eExpire] = 11;
	PlaySound(playerid,1085);
	RefreshErrorMsg(playerid);
	return 1;
}

stock InfoMSG(playerid, message[], delay)
{
	TextDrawSetString(infotxt[playerid], message);
	ShowTextDraw(playerid, infotxt[playerid]);
	infotxt_expire{playerid} = delay;
	return 1;
}

stock InfoMSG2(playerid, header[], message[], delay)
{
	TD_SendMessage(playerid, message, header, delay, 12840, 10.0000, 100.000000, 300.000000, strlen(message));
	return 1;
}

stock RefreshErrorMsg(playerid)
{
	new sendstr[256];
	new tmp[80];
	new display = false;
	if(ErrorInfo[playerid][0][eExpire] || ErrorInfo[playerid][1][eExpire] || ErrorInfo[playerid][2][eExpire]) { display = true; }
	format(sendstr,sizeof(sendstr),"~r~");
	if(ErrorInfo[playerid][2][eExpire]) { format(tmp,sizeof(tmp),"~n~%s",ErrorInfo[playerid][2][eMsg]); strins(sendstr,tmp,strlen(sendstr)); }
	if(ErrorInfo[playerid][1][eExpire]) { format(tmp,sizeof(tmp),"~n~%s",ErrorInfo[playerid][1][eMsg]); strins(sendstr,tmp,strlen(sendstr)); }
	if(ErrorInfo[playerid][0][eExpire]) { format(tmp,sizeof(tmp),"~n~%s",ErrorInfo[playerid][0][eMsg]); strins(sendstr,tmp,strlen(sendstr)); }
	TextDrawSetString(errormsg[playerid],sendstr);
	if(display) { ShowTextDraw(playerid,errormsg[playerid]); } else { HideTextDraw(playerid,errormsg[playerid]); }
}

/*stock SetHunger(playerid, Float:value)
{
	SetPlayerProgressBarValue(playerid, PlayerBar:HungerBar[playerid], Float:value);
	PlayerInfo[playerid][pHunger] = value;
	format(msg, sizeof(msg), "hunger: %.0f", value);
	TextDrawSetString(HungerDraw[playerid], msg);
	return 1;
}
*/
/*stock AddHunger(playerid, Float:value)
{
	new Float:old = GetPlayerProgressBarValue(playerid, PlayerBar:HungerBar[playerid]);
	SetPlayerProgressBarValue(playerid, PlayerBar:HungerBar[playerid], old+value);
	PlayerInfo[playerid][pHunger] += value;
	format(msg, sizeof(msg), "hunger: %.0f", PlayerInfo[playerid][pHunger]);
	TextDrawSetString(HungerDraw[playerid], msg);
	return 1;
}
*/
/*stock HideHunger(playerid)
{
	HidePlayerProgressBar(playerid, PlayerBar:HungerBar[playerid]);
	HideTextDraw(playerid, HungerDraw[playerid]);
	return 1;
}

stock ShowHunger(playerid)
{
	SetPlayerProgressBarValue(playerid, PlayerBar:HungerBar[playerid], PlayerInfo[playerid][pHunger]);
	HideHunger(playerid);
	ShowPlayerProgressBar(playerid, PlayerBar:HungerBar[playerid]);
	format(msg, sizeof(msg), "hunger: %.0f", PlayerInfo[playerid][pHunger]);
	TextDrawSetString(HungerDraw[playerid], msg);
	ShowTextDraw(playerid, HungerDraw[playerid]);
	return 1;
}
*/
stock GetOwnedVehicles(playerid) return PlayerInfo[playerid][pVehicles];

stock FirstNameLetters(name[MAX_PLAYER_NAME])
{
    new
        strpos = strfind(name, "_", true),
        string[4];

    format(string, sizeof(string), "%c%c", name[0], name[strpos+1]);
    return string;
}

stock OnOwnedVehicleInsert(vehid)
{
	VehicleInfo[vehid][carID] = cache_insert_id();
	return 1;
}

stock OnPlayerBuyCar(playerid, vehid, model, color1, color2, slot, Float:ParkX, Float:ParkY, Float:ParkZ, Float:ParkA, plate[], owner[])
{
	//======================================================================================
	format(query, sizeof(query), "INSERT INTO `ownedvehicles` (model, color1, color2, parkx, parky, parkz, parka, plate, owner, owned, slot) VALUES (%d, %d, %d, %f, %f, %f, %f, '%s', '%s', %d, %d)",
	model, color1, color2, ParkX, ParkY, ParkZ, ParkA, plate, owner, 1, slot);
	mysql_function_query(dbHandle, query, true, "OnOwnedVehicleInsert", "%d", vehid);
	//======================================================================================
	format(query, sizeof(query), "UPDATE `ownedvehicles` SET `alarm` = %d, `lock` = %d, `immob` = %d, `insurances` = %d, `destroys` = %d, `gps` = %d, `fuel` = %d, `registered` = %d, `broken` = %d, `enginelife` = %d, `batterylife` = %d WHERE `owner` = '%s' AND `slot` = %d",
	0, 0, 0, 2, 0, 0, 100, 1, 0, 100, 100, GetName(playerid), slot);
	mysql_function_query(dbHandle, query, false, "", "");
	//======================================================================================
	format(query, sizeof(query), "UPDATE `ownedvehicles` SET `weapons` = %d=%d WHERE `owner` = '%s' AND `slot` = %d", "0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0", GetName(playerid),slot);
	mysql_function_query(dbHandle, query, false, "", "");
	//======================================================================================
	format(query, sizeof(query), "UPDATE `ownedvehicles` SET `comp0` = %d, `comp1` = %d, `comp2` = %d, `comp3` = %d, `comp4` = %d, `comp5` = %d, `comp6` = %d WHERE `owner` = '%s' AND `slot` = %d",
	0, 0, 0, 0, 0, 0, 0, GetName(playerid), slot);
	mysql_function_query(dbHandle, query, false, "", "");
	//=====================================================================================
	format(query, sizeof(query), "UPDATE `ownedvehicles` SET `comp7` = %d, `comp8` = %d, `comp9` = %d, `comp10` = %d, `comp11` = %d, `comp12` = %d, `comp13` = %d, `paintjob` = %d WHERE `owner` = '%s' AND `slot` = %d",
	0, 0, 0, 0, 0, 0, 0, 3, GetName(playerid), slot);
	mysql_function_query(dbHandle, query, false, "", "");
	//=====================================================================================
	format(query, sizeof(query), "UPDATE `ownedvehicles` SET `radio` = %d, `tickets` = '%s', `dupkey` = %d, `comps` = %d WHERE `owner` = '%s' AND `slot` = %d", 0, "0|0|0|0|0|0|0|0|0|0", VehicleInfo[vehid][carDupKey], 0, GetName(playerid), slot);
	mysql_function_query(dbHandle, query, false, "", "");
	//=====================================================================================
	format(query, sizeof(query), "UPDATE `ownedvehicles` SET `drugs` = %d=%d WHERE `owner` = '%s' AND `slot` = %d", "0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0|0=0", GetName(playerid), slot);
	mysql_function_query(dbHandle, query, false, "", "");
	//=====================================================================================
	format(query, sizeof(query), "UPDATE `users` SET `vehicles` = %d WHERE `name` = '%s'", PlayerInfo[playerid][pVehicles], GetName(playerid));
	mysql_function_query(dbHandle, query, false, "", "");
	//======================================================================================
	if(slot == 1)
	{
		format(query, sizeof(query), "UPDATE `users` SET `veh1` = '%s' WHERE `name` = '%s'", VehicleNames[model-400], GetName(playerid));
		format(PlayerVehicle[playerid][pVeh1], 128, "%s", VehicleNames[model-400]);
		mysql_function_query(dbHandle, query, false, "", "");
	}
	else if(slot == 2)
	{
		format(query, sizeof(query), "UPDATE `users` SET `veh2` = '%s' WHERE `name` = '%s'", VehicleNames[model-400], GetName(playerid));
		format(PlayerVehicle[playerid][pVeh2], 128, "%s", VehicleNames[model-400]);
		mysql_function_query(dbHandle, query, false, "", "");
	}
	else if(slot == 3)
	{
		format(query, sizeof(query), "UPDATE `users` SET `veh3` = '%s' WHERE `name` = '%s'", VehicleNames[model-400], GetName(playerid));
		format(PlayerVehicle[playerid][pVeh3], 128, "%s", VehicleNames[model-400]);
		mysql_function_query(dbHandle, query, false, "", "");
	}
	//======================================================================================
	return 1;
}

stock UpdateVehicleStatus(playerid, vehicle)
{
	new slot = PlayerInfo[playerid][pVehSlot];
	VehicleStatus[playerid][slot][carAlarm] = VehicleInfo[vehicle][carAlarm];
	VehicleStatus[playerid][slot][carLock] = VehicleInfo[vehicle][carLock];
	VehicleStatus[playerid][slot][carImmob] = VehicleInfo[vehicle][carImmob];
	VehicleStatus[playerid][slot][carInsurances] = VehicleInfo[vehicle][carInsurances];
	VehicleStatus[playerid][slot][carDestroyed] = VehicleInfo[vehicle][carDestroyed];
	VehicleStatus[playerid][slot][carGps] = VehicleInfo[vehicle][carGps];
	return 1;
}

stock GetInsurancePrice(vehicle)
{
	new modelid = GetVehicleModel(vehicle);
	for(new i = 0; i < sizeof(InsurancesPrice); i++)
	{
		if(modelid == InsurancesPrice[i][insuranceModel])
		{
			if(VehicleInfo[vehicle][carDestroyed] == 0)
				return InsurancesPrice[i][insurancePrice];
			else
				return InsurancesPrice[i][insurancePrice] * VehicleInfo[vehicle][carDestroyed];
		}
	}
	return 0;
}

stock GetInsurancePrice2(playerid, slot)
{
	new modelid = VehicleStatus[playerid][slot][carModel];
	for(new i = 0; i < sizeof(InsurancesPrice); i++)
	{
		if(modelid == InsurancesPrice[i][insuranceModel])
		{
			if(VehicleStatus[playerid][slot][carDestroyed] == 0)
				return InsurancesPrice[i][insurancePrice];
			else
				return InsurancesPrice[i][insurancePrice] * VehicleStatus[playerid][slot][carDestroyed];
		}
	}
	return 0;
}

stock OnPlayerEnterParkingSpot(playerid)
{
	if(GetIntVar(playerid, "PlayerCP") == 25)
	{
		GameTextForPlayer(playerid, "~y~L-AI GASIT!", 3000, 3);
		PlaySound(playerid, 1138);
		RemoveCheckPoint(playerid);
	}
}

stock GetVehiclePrice(model)
{
	for(new i = 0; i < sizeof(CarsPrices); i++)
	{
		if(model == CarsPrices[i][dCarModel])
			return CarsPrices[i][dCarPrice];
	}
	return 0;
}
stock GetRentPrice(model)
{
    for(new i = 0; i < sizeof(RentPrices); i++)
	{
		if(model == RentPrices[i][rCarModel])
			return RentPrices[i][rCarPrice];
	}
	return 0;
}

stock VehicleDealerExist(model)
{
	for(new i = 0; i < sizeof(CarsPrices); i++)
	{
		if(model == CarsPrices[i][dCarModel])
			return true;
	}
	return false;
}

stock PlayerOwnVehicle(playerid, vehicleid)
{
	if(PlayerInfo[playerid][pCarKey] == vehicleid && !strcmp(GetName(playerid), VehicleInfo[vehicleid][carOwner], true))
		return true;
	else
		return false;
}

stock GetOwnedVehicleID(playerid)
{
	for(new v = 1; v < MAX_VEHICLES; v++)
	{
		if (IsVehicleSpawned(v))
		{
			if(CompareStrings(VehicleInfo[v][carOwner], GetName(playerid))) return v;
		}
	}
	return INVALID_VEHICLE_ID;
}

stock IsVehicleSpawned(vehicleid)
{
	new Float:XX,Float:YY,Float:ZZ;
	GetVehiclePos(vehicleid, XX, YY, ZZ);
	if (XX == 0.0 && YY == 0.0 && ZZ == 0.0) return 0;
	return 1;
}

stock LoadVehicleFromSlot(playerid, slot)
{
	format(query, sizeof(query), "SELECT * FROM `ownedvehicles` WHERE `owner` = '%s' AND `slot` = %d", GetName(playerid), slot);
	mysql_function_query(dbHandle, query, true, "OnPlayerSpawnVehicle", "ii", playerid, slot);
	return 1;
}

//==================================Player Tickets==================================//
stock CountPlayerTickets(playerid)
{
	new count = 0;
	for(new i = 0; i < MAX_PLAYER_TICKETS; i++)
	{
		if(PlayerInfo[playerid][pTickets][i] != 0)
		{
			count++;
		}
	}
	return count;
}

stock PlacePlayerTicket(playerid, amount)
{
	for(new i = 0; i < MAX_PLAYER_TICKETS; i++)
	{
		if(PlayerInfo[playerid][pTickets][i] == 0)
		{
			PlayerInfo[playerid][pTickets][i] = amount;
			return 1;
		}
	}
	return 1;
}

stock AssignPlayerTickets(playerid, tickets[])
{
	new tmp[MAX_PLAYER_TICKETS][32];
	explode(tmp, tickets, "|");
	for(new i = 0; i < MAX_PLAYER_TICKETS; i ++)
	{
	    PlayerInfo[playerid][pTickets][i] = strval(tmp[i]);
	}
}

stock FormatPlayerTickets(playerid, tickets[])
{
	new upstr[256];
	new tmp[64];
	for(new b = 0; b < MAX_PLAYER_TICKETS; b ++)
	{
		if(b == 0)
			format(tmp,sizeof(tmp),"%d",PlayerInfo[playerid][pTickets][b]);
		else
			format(tmp,sizeof(tmp),"|%d",PlayerInfo[playerid][pTickets][b]);
		strins(upstr,tmp,strlen(upstr));
	}
	return format(tickets, 256, "%s", upstr);
}
//==================================Player Tickets==================================//

stock CountVehicleTickets(vehicle)
{
	new count = 0;
	for(new i = 0; i < MAX_CAR_TICKETS; i++)
	{
		if(VehicleInfo[vehicle][carTicket][i] != 0)
		{
			count++;
		}
	}
	return count;
}

stock PlaceVehicleTicket(vehicle, amount)
{
	for(new i = 0; i < MAX_CAR_TICKETS; i++)
	{
		if(VehicleInfo[vehicle][carTicket][i] == 0)
		{
			VehicleInfo[vehicle][carTicket][i] = amount;
			return 1;
		}
	}
	return 1;
}

stock AssignVehicleTickets(vehicleid, tickets[])
{
	new tmp[MAX_CAR_TICKETS][32];
	explode(tmp, tickets, "|");
	for(new i = 0; i < MAX_CAR_TICKETS; i ++)
	{
	    VehicleInfo[vehicleid][carTicket][i] = strval(tmp[i]);
	}
}

stock FormatVehicleTickets(vehicleid, tickets[])
{
	new upstr[256];
	new tmp[64];
	for(new b = 0; b < MAX_CAR_TICKETS; b ++)
	{
		if(b == 0)
			format(tmp,sizeof(tmp),"%d",VehicleInfo[vehicleid][carTicket][b]);
		else
			format(tmp,sizeof(tmp),"|%d",VehicleInfo[vehicleid][carTicket][b]);
		strins(upstr,tmp,strlen(upstr));
	}
	return format(tickets, 256, "%s", upstr);
}

stock FormatCarWeapons(vehicle, string[])
{
	new wstr[256];
	new tmp[64];
	for(new a = 0; a < MAX_VEHICLE_WEAPONS; a++)
	{
		new w = VehicleInfo[vehicle][carTrunkWep][a];
		new am = VehicleInfo[vehicle][carTrunkAmmo][a];
		if(a == 0)
		{
			format(tmp,sizeof(tmp),"%d=%d",w,am);
		}
		else
		{
			format(tmp,sizeof(tmp),"|%d=%d",w,am);
		}
		strins(wstr,tmp,strlen(wstr));
	}
	return format(string, 256, "%s", wstr);
}


stock AssignCarWeapons(vehicle, str[])
{
	new wtmp[MAX_VEHICLE_WEAPONS][64];
	explode(wtmp,str,"|");
	for(new z = 0; z < MAX_VEHICLE_WEAPONS; z++)
	{
		new wtmp2[2][64];
		explode(wtmp2,wtmp[z],"=");
		VehicleInfo[vehicle][carTrunkWep][z] = strval(wtmp2[0]);
		VehicleInfo[vehicle][carTrunkAmmo][z] = strval(wtmp2[1]);
	}
}

stock SaveVehicle(vehicleid)
{
	if(VehicleInfo[vehicleid][carOwned] == 1)
	{
		new tickets[256], weapons[256], drugs[256];
		FormatVehicleTickets(vehicleid, tickets);
		FormatCarWeapons(vehicleid, weapons);
		FormatVehicleDrugs(vehicleid, drugs);
		//=====================================================================================
		format(query, sizeof(query), "UPDATE `ownedvehicles` SET `color1` = %d, `color2` = %d, `parkx` = %f, `parky` = %f, `parkz` = %f, `parka` = %f WHERE `owner` = '%s' AND `id` = %d",
		VehicleInfo[vehicleid][carColor1],
		VehicleInfo[vehicleid][carColor2],
		VehicleInfo[vehicleid][carParkX],
		VehicleInfo[vehicleid][carParkY],
		VehicleInfo[vehicleid][carParkZ],
		VehicleInfo[vehicleid][carParkA],
		VehicleInfo[vehicleid][carOwner],
		VehicleInfo[vehicleid][carID]);
		mysql_function_query(dbHandle, query, false, "", "");
		//=====================================================================================
		format(query, sizeof(query), "UPDATE `ownedvehicles` SET `plate` = '%s', `owner` = '%s', `owned` = %d, `broken` = %d WHERE `owner` = '%s' AND `id` = %d",
		VehicleInfo[vehicleid][carPlate],
		VehicleInfo[vehicleid][carOwner],
		VehicleInfo[vehicleid][carOwned],
		VehicleInfo[vehicleid][carBroken],
		VehicleInfo[vehicleid][carOwner],
		VehicleInfo[vehicleid][carID]);
		mysql_function_query(dbHandle, query, false, "", "");
		//=====================================================================================
		format(query, sizeof(query), "UPDATE `ownedvehicles` SET `alarm` = %d, `lock` = %d, `immob` = %d, `insurances` = %d, `destroys` = %d, `gps` = %d, `fuel` = %d, `registered` = %d WHERE `owner` = '%s' AND `id` = %d",
		VehicleInfo[vehicleid][carAlarm],
		VehicleInfo[vehicleid][carLock],
		VehicleInfo[vehicleid][carImmob],
		VehicleInfo[vehicleid][carInsurances],
		VehicleInfo[vehicleid][carDestroyed],
		VehicleInfo[vehicleid][carGps],
		Gas{vehicleid},
		VehicleInfo[vehicleid][carRegistered],
		VehicleInfo[vehicleid][carOwner],
		VehicleInfo[vehicleid][carID]);
		mysql_function_query(dbHandle, query, false, "", "");
		//=====================================================================================
		format(query, sizeof(query), "UPDATE `ownedvehicles` SET `weapons` = %d=%d WHERE `owner` = '%s' AND `id` = %d",
		weapons,
		VehicleInfo[vehicleid][carOwner],
		VehicleInfo[vehicleid][carID]);
		mysql_function_query(dbHandle, query, false, "", "");
		//=====================================================================================
		format(query, sizeof(query), "UPDATE `ownedvehicles` SET `comp0` = %d, `comp1` = %d, `comp2` = %d, `comp3` = %d, `comp4` = %d, `comp5` = %d, `comp6` = %d WHERE `owner` = '%s' AND `id` = %d",
		VehicleInfo[vehicleid][carComponent][0],
		VehicleInfo[vehicleid][carComponent][1],
		VehicleInfo[vehicleid][carComponent][2],
		VehicleInfo[vehicleid][carComponent][3],
		VehicleInfo[vehicleid][carComponent][4],
		VehicleInfo[vehicleid][carComponent][5],
		VehicleInfo[vehicleid][carComponent][6],
		VehicleInfo[vehicleid][carOwner],
		VehicleInfo[vehicleid][carID]);
		mysql_function_query(dbHandle, query, false, "", "");
		//=====================================================================================
		format(query, sizeof(query), "UPDATE `ownedvehicles` SET `comp7` = %d, `comp8` = %d, `comp9` = %d, `comp10` = %d, `comp11` = %d, `comp12` = %d, `comp13` = %d, `paintjob` = %d WHERE `owner` = '%s' AND `id` = %d",
		VehicleInfo[vehicleid][carComponent][7],
		VehicleInfo[vehicleid][carComponent][8],
		VehicleInfo[vehicleid][carComponent][9],
		VehicleInfo[vehicleid][carComponent][10],
		VehicleInfo[vehicleid][carComponent][11],
		VehicleInfo[vehicleid][carComponent][12],
		VehicleInfo[vehicleid][carComponent][13],
		VehicleInfo[vehicleid][carPaintJob],
		VehicleInfo[vehicleid][carOwner],
		VehicleInfo[vehicleid][carID]);
		mysql_function_query(dbHandle, query, false, "", "");
		//=====================================================================================
		format(query, sizeof(query), "UPDATE `ownedvehicles` SET `radio` = %d, `tickets` = '%s', `dupkey` = %d, `comps` = %d WHERE `owner` = '%s' AND `id` = %d",
		VehicleInfo[vehicleid][carRadio],
		tickets,
		VehicleInfo[vehicleid][carDupKey],
		VehicleInfo[vehicleid][carComps],
		VehicleInfo[vehicleid][carOwner],
		VehicleInfo[vehicleid][carID]);
		mysql_function_query(dbHandle, query, false, "", "");
		//=====================================================================================
		format(query, sizeof(query), "UPDATE `ownedvehicles` SET `drugs` = '%s=%s' WHERE `owner` = '%s' AND `id` = %d",
		VehicleInfo[vehicleid][carDrug],
		VehicleInfo[vehicleid][carDrugAmount],
		VehicleInfo[vehicleid][carOwner],
		VehicleInfo[vehicleid][carID]);
		mysql_function_query(dbHandle, query, false, "", "");
		//=====================================================================================

	}
	return 1;
}

stock SaveFaction(factionid)
{
	//=====================================================================================
	format(query, sizeof(query), "UPDATE `factions` SET `name` = '%s', `spawnx` = %f, `spawny` = %f, `spawnz` = %f WHERE `id` = %d",
	Factions[factionid][fName],
	Factions[factionid][fX],
	Factions[factionid][fY],
	Factions[factionid][fZ],
	Factions[factionid][fID]);
	mysql_function_query(dbHandle, query, false, "", "");
	//=====================================================================================
	format(query, sizeof(query), "UPDATE `factions` SET `rank1` = '%s', `rank2` = '%s', `rank3` = '%s' WHERE `id` = %d",
	Factions[factionid][fRank1],
	Factions[factionid][fRank2],
	Factions[factionid][fRank3],
	Factions[factionid][fID]);
	mysql_function_query(dbHandle, query, false, "", "");
	//=====================================================================================
	format(query, sizeof(query), "UPDATE `factions` SET `rank4` = '%s', `rank5` = '%s' WHERE `id` = %d",
	Factions[factionid][fRank4],
	Factions[factionid][fRank5],
	Factions[factionid][fID]);
	mysql_function_query(dbHandle, query, false, "", "");
	//=====================================================================================
	format(query, sizeof(query), "UPDATE `factions` SET `rank6` = '%s', `rank7` = '%s' WHERE `id` = %d",
	Factions[factionid][fRank6],
	Factions[factionid][fRank7],
	Factions[factionid][fID]);
	mysql_function_query(dbHandle, query, false, "", "");
	//=====================================================================================
	format(query, sizeof(query), "UPDATE `factions` SET `rank8` = '%s', `rank9` = '%s', `rank10` = '%s' WHERE `id` = %d",
	Factions[factionid][fRank8],
	Factions[factionid][fRank9],
	Factions[factionid][fRank10],
	Factions[factionid][fID]);
	mysql_function_query(dbHandle, query, false, "", "");
	//=====================================================================================
	format(query, sizeof(query), "UPDATE `factions` SET `rank11` = '%s', `rank12` = '%s', `rank13` = '%s' WHERE `id` = %d",
	Factions[factionid][fRank11],
	Factions[factionid][fRank12],
	Factions[factionid][fRank13],
	Factions[factionid][fID]);
	mysql_function_query(dbHandle, query, false, "", "");
	//=====================================================================================
	format(query, sizeof(query), "UPDATE `factions` SET `rank14` = '%s', `rank15` = '%s' WHERE `id` = %d",
	Factions[factionid][fRank14],
	Factions[factionid][fRank15],
	Factions[factionid][fID]);
	mysql_function_query(dbHandle, query, false, "", "");
	//=====================================================================================
	format(query, sizeof(query), "UPDATE `factions` SET `rank16` = '%s', `rank17` = '%s' WHERE `id` = %d",
	Factions[factionid][fRank16],
	Factions[factionid][fRank17],
	Factions[factionid][fID]);
	mysql_function_query(dbHandle, query, false, "", "");
	//=====================================================================================
	format(query, sizeof(query), "UPDATE `factions` SET `rank18` = '%s', `rank19` = '%s', `rank20` = '%s' WHERE `id` = %d",
	Factions[factionid][fRank18],
	Factions[factionid][fRank19],
	Factions[factionid][fRank20],
	Factions[factionid][fID]);
	mysql_function_query(dbHandle, query, false, "", "");
	//=====================================================================================
	format(query, sizeof(query), "UPDATE `factions` SET `joinrank` = %d, `type` = %d, `rankamount` = %d, `chaton` = %d, `color` = %d WHERE `id` = %d",
	Factions[factionid][fJoinRank],
	Factions[factionid][fType],
	Factions[factionid][fRankAmount],
	Factions[factionid][fChatON],
	Factions[factionid][fColor],
	Factions[factionid][fID]);
	mysql_function_query(dbHandle, query, false, "", "");
	//=====================================================================================
	format(query, sizeof(query), "UPDATE `factions` SET `uniformx` = %f, `uniformy` = %f, `uniformz` = %f, `spawnint` = %d, `leaderrank` = %d WHERE `id` = %d",
	Factions[factionid][fUniformX],
	Factions[factionid][fUniformY],
	Factions[factionid][fUniformZ],
	Factions[factionid][fSpawnInt],
	Factions[factionid][fLeaderRank],
	Factions[factionid][fID]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

stock SaveJob(jobid)
{
	//=====================================================================================
	format(query, sizeof(query), "UPDATE `jobs` SET `name` = '%s', `posx` = %f, `posy` = %f, `posz` = %f WHERE `id` = %d",
	JobsInfo[jobid][jobName],
	JobsInfo[jobid][jobX],
	JobsInfo[jobid][jobY],
	JobsInfo[jobid][jobZ],
	JobsInfo[jobid][jobID]);
	mysql_function_query(dbHandle, query, false, "", "");
	//=====================================================================================
	format(query, sizeof(query), "UPDATE `jobs` SET `rank1` = '%s', `rank2` = '%s', `rank3` = '%s' WHERE `id` = %d",
	JobsInfo[jobid][jobRank1],
	JobsInfo[jobid][jobRank2],
	JobsInfo[jobid][jobRank3],
	JobsInfo[jobid][jobID]);
	mysql_function_query(dbHandle, query, false, "", "");
	//=====================================================================================
	format(query, sizeof(query), "UPDATE `jobs` SET `rank4` = '%s', `rank5` = '%s' WHERE `id` = %d",
	JobsInfo[jobid][jobRank4],
	JobsInfo[jobid][jobRank5],
	JobsInfo[jobid][jobID]);
	mysql_function_query(dbHandle, query, false, "", "");
	//=====================================================================================
	format(query, sizeof(query), "UPDATE `jobs` SET `rank6` = '%s', `rank7` = '%s' WHERE `id` = %d",
	JobsInfo[jobid][jobRank6],
	JobsInfo[jobid][jobRank7],
	JobsInfo[jobid][jobID]);
	mysql_function_query(dbHandle, query, false, "", "");
	//=====================================================================================
	format(query, sizeof(query), "UPDATE `jobs` SET `rank8` = '%s', `rank9` = '%s', `rank10` = '%s' WHERE `id` = %d",
	JobsInfo[jobid][jobRank8],
	JobsInfo[jobid][jobRank9],
	JobsInfo[jobid][jobRank10],
	JobsInfo[jobid][jobID]);
	mysql_function_query(dbHandle, query, false, "", "");
	//=====================================================================================
	format(query, sizeof(query), "UPDATE `jobs` SET `ranks` = %d, `highrank` = %d WHERE `id` = %d",
	JobsInfo[jobid][jobRanks],
	JobsInfo[jobid][jobHighRank],
	JobsInfo[jobid][jobID]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

stock SaveParkMeter(parkid)
{
	format(query, sizeof(query), "UPDATE `parkmeters` SET `minutes` = %d WHERE `id` = %d", ParkMeters[parkid][parkMinutes], ParkMeters[parkid][parkID]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

stock CheckPlayerDistanceToVehicle(Float:radi, playerid, vehicleid)
{
	if(PlayerIsOn(playerid))
	{
	    new Float:PX,Float:PY,Float:PZ,Float:CX,Float:CY,Float:CZ;
	    GetPlayerPos(playerid,PX,PY,PZ);
	    GetVehiclePos(vehicleid, CX,CY,CZ);
	    new Float:CDistance = (CX-PX)*(CX-PX)+(CY-PY)*(CY-PY)+(CZ-PZ)*(CZ-PZ);
	    if(CDistance <= radi*radi)
	    {
	        return 1;
	    }
	}
	return 0;
}

stock PlayerBehindVehicle(playerid)
{
	new Float:vX, Float:vY, Float:vZ, Float:vA;
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		if(VehicleInfo[i][carOwned] == 1)
		{
			GetVehiclePos(i, vX, vY, vZ);
			GetVehicleZAngle(i, vA);
			if(vA >= 270 && vA <= 360 && IsPlayerInRangeOfPoint(playerid, 2.0, vX-3.0, vY, vZ))
				return i;
			if(vA >= 180 && vA <= 270 && IsPlayerInRangeOfPoint(playerid, 2.0, vX, vY-3.0, vZ))
				return i;
			if(vA >= 90 && vA <= 180 && IsPlayerInRangeOfPoint(playerid, 2.0, vX+3.0, vY, vZ))
				return i;
			if(vA >= 0 && vA <= 90 && IsPlayerInRangeOfPoint(playerid, 2.0, vX, vY-3.0, vZ))
				return i;
		}
	}
	return INVALID_VEHICLE_ID;
}

stock AlarmOn(vehicleid)
{
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(vehicleid,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
	return 1;
}

stock AlarmOff(vehicleid)
{
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(vehicleid,engine,lights,VEHICLE_PARAMS_OFF,doors,bonnet,boot,objective);
	return 1;
}

stock ResetVariables(playerid)
{
	IsSmoking{playerid} = false;
	TransDuty{playerid} = false;
	NewsDuty{playerid} = false;
	DocDuty{playerid} = false;
	PlayerInfo[playerid][pHasArmour] = 0;
	PlayerInfo[playerid][pArmour] = 0.0;
	return 1;
}

stock HasWeapon(playerid, weaponid)
{
	if(IsMeleeWeapon(weaponid))
	{
		if(PlayerInfo[playerid][pMeleeWep] == weaponid)
			return 1;
	}
	else if(IsPrimaryWeapon(weaponid))
	{
		if(PlayerInfo[playerid][pPerm1] == weaponid)
			return 1;
	}
	else if(IsSecondaryWeapon(weaponid))
	{
		if(PlayerInfo[playerid][pPerm2] == weaponid)
			return 1;
	}
	return 0;
}

stock ResetVehicleStuff(vehicleid)
{
	for(new i = 0; i < MAX_VEHICLE_WEAPONS; i++)
	{
		VehicleInfo[vehicleid][carTrunkWep][i] = 0;
		VehicleInfo[vehicleid][carTrunkAmmo][i] = 0;
	}
	for(new i = 0; i < MAX_DRUGS; i++)
	{
		VehicleInfo[vehicleid][carDrug][i] = 0;
		VehicleInfo[vehicleid][carDrugAmount][i] = 0;
	}
	VehicleInfo[vehicleid][carComponent][0] = 0;
	VehicleInfo[vehicleid][carComponent][1] = 0;
	VehicleInfo[vehicleid][carComponent][2] = 0;
	VehicleInfo[vehicleid][carComponent][3] = 0;
	VehicleInfo[vehicleid][carComponent][4] = 0;
	VehicleInfo[vehicleid][carComponent][5] = 0;
	VehicleInfo[vehicleid][carComponent][6] = 0;
	VehicleInfo[vehicleid][carComponent][7] = 0;
	VehicleInfo[vehicleid][carComponent][8] = 0;
	VehicleInfo[vehicleid][carComponent][9] = 0;
	VehicleInfo[vehicleid][carComponent][10] = 0;
	VehicleInfo[vehicleid][carComponent][11] = 0;
	VehicleInfo[vehicleid][carComponent][12] = 0;
	VehicleInfo[vehicleid][carComponent][13] = 0;
	VehicleInfo[vehicleid][carPaintJob] = 3;
	VehicleInfo[vehicleid][carRadio] = 0;
	VehicleInfo[vehicleid][carComps] = 0;
	SaveVehicle(vehicleid);
	return 1;
}

stock IsModdedAble(vehicleid)
{
	new model = GetVehicleModel(vehicleid);
	if(model == 483 || model == 534 || model == 535 || model == 536 || model == 558 || model == 559
	|| model == 560 || model == 561 || model == 562 || model == 565 || model == 567 || model == 575 || model == 576)
		return 1;
	return 0;
}

new legalmods[48][22] = {
	{400, 1024,1021,1020,1019,1018,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{401, 1145,1144,1143,1142,1020,1019,1017,1013,1007,1006,1005,1004,1003,1001,0000,0000,0000,0000},
	{404, 1021,1020,1019,1017,1016,1013,1007,1002,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{405, 1023,1021,1020,1019,1018,1014,1001,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{410, 1024,1023,1021,1020,1019,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
	{415, 1023,1019,1018,1017,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{418, 1021,1020,1016,1006,1002,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{420, 1021,1019,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{421, 1023,1021,1020,1019,1018,1016,1014,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{422, 1021,1020,1019,1017,1013,1007,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{426, 1021,1019,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{436, 1022,1021,1020,1019,1017,1013,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
	{439, 1145,1144,1143,1142,1023,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
	{477, 1021,1020,1019,1018,1017,1007,1006,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{478, 1024,1022,1021,1020,1013,1012,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{489, 1024,1020,1019,1018,1016,1013,1006,1005,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
	{491, 1145,1144,1143,1142,1023,1021,1020,1019,1018,1017,1014,1007,1003,0000,0000,0000,0000,0000},
	{492, 1016,1006,1005,1004,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{496, 1143,1142,1023,1020,1019,1017,1011,1007,1006,1003,1002,1001,0000,0000,0000,0000,0000,0000},
	{500, 1024,1021,1020,1019,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{516, 1021,1020,1019,1018,1017,1016,1015,1007,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
	{517, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1016,1007,1003,1002,0000,0000,0000,0000,0000},
	{518, 1145,1144,1143,1142,1023,1020,1018,1017,1013,1007,1006,1005,1003,1001,0000,0000,0000,0000},
	{527, 1021,1020,1018,1017,1015,1014,1007,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{529, 1023,1020,1019,1018,1017,1012,1011,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000},
	{534, 1185,1180,1179,1178,1127,1126,1125,1124,1123,1122,1106,1101,1100,0000,0000,0000,0000,0000},
	{535, 1121,1120,1119,1118,1117,1116,1115,1114,1113,1110,1109,0000,0000,0000,0000,0000,0000,0000},
	{536, 1184,1183,1182,1181,1128,1108,1107,1105,1104,1103,0000,0000,0000,0000,0000,0000,0000,0000},
	{540, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1004,1001,0000,0000,0000,0000},
	{542, 1145,1144,1021,1020,1019,1018,1015,1014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{546, 1145,1144,1143,1142,1024,1023,1019,1018,1017,1007,1006,1004,1002,1001,0000,0000,0000,0000},
	{547, 1143,1142,1021,1020,1019,1018,1016,1003,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{549, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1012,1011,1007,1003,1001,0000,0000,0000,0000},
	{550, 1145,1144,1143,1142,1023,1020,1019,1018,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000},
	{551, 1023,1021,1020,1019,1018,1016,1006,1005,1003,1002,0000,0000,0000,0000,0000,0000,0000,0000},
	{558, 1168,1167,1166,1165,1164,1163,1095,1094,1093,1092,1091,1090,1089,1088,0000,0000,0000,0000},
	{559, 1173,1162,1161,1160,1159,1158,1072,1071,1070,1069,1068,1067,1066,1065,0000,0000,0000,0000},
	{560, 1170,1169,1141,1140,1139,1138,1033,1032,1031,1030,1029,1028,1027,1026,0000,0000,0000,0000},
	{561, 1157,1156,1155,1154,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1031,1030,1027,1026},
	{562, 1172,1171,1149,1148,1147,1146,1041,1040,1039,1038,1037,1036,1035,1034,0000,0000,0000,0000},
	{565, 1153,1152,1151,1150,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,0000,0000,0000,0000},
	{567, 1189,1188,1187,1186,1133,1132,1131,1130,1129,1102,0000,0000,0000,0000,0000,0000,0000,0000},
	{575, 1177,1176,1175,1174,1099,1044,1043,1042,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{576, 1193,1192,1191,1190,1137,1136,1135,1134,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{580, 1023,1020,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{589, 1145,1144,1024,1020,1018,1017,1016,1013,1007,1006,1005,1004,1000,0000,0000,0000,0000,0000},
	{600, 1022,1020,1018,1017,1013,1007,1006,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{603, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000}
};

stock iswheelmodel(modelid) {

    new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};
    for(new i = 0; i < 17; i++)
	{
        if (modelid == wheelmodels[i])
            return true;
    }
    return false;
}

stock IllegalCarNitroIde(carmodel) {

    new illegalvehs[29] = { 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449 };
    for(new i = 0; i < 29; i++)
	{
        if (carmodel == illegalvehs[i])
            return true;
    }
    return false;
}

stock ModFitsForCar(vehicleide, componentid)
{
    new modok = false;

    // stereo, hydraulics & nos (1x 2x 3x) are special.
    if ( (iswheelmodel(componentid)) || (componentid == 1086) || (componentid == 1087) || ((componentid >= 1008) && (componentid <= 1010))) {

        new nosblocker = IllegalCarNitroIde(vehicleide);

        if (!nosblocker)
            modok = true;

    } else {

        // check if the specified model CAN use this particular mod.
			for(new i = 0; i < sizeof(legalmods); i++) {
            if (legalmods[i][0] == vehicleide) { // first is car IDE

                for(new j = 1; j < 22; j++) { // start with 1
                    if (legalmods[i][j] == componentid)
                        modok = true;
                }

            }

        }

    }

    return modok;
}

stock HandleComponentText(playerid, vehicle)
{
	if(!HasComponent(vehicle, GetIntVar(playerid, "CompID")))
	{
		if(ModFitsForCar(GetVehicleModel(vehicle), GetIntVar(playerid, "CompID")))
		{
			SetModText(playerid, GetStringVar(playerid, "CompType"), GetIntVar(playerid, "CompPrice"), GetStringVar(playerid, "CompName"), 0, 1);
			AddVehicleComponent(vehicle, GetIntVar(playerid, "CompID"));
		}
		else
		{
			SetModText(playerid, GetStringVar(playerid, "CompType"), GetIntVar(playerid, "CompPrice"), GetStringVar(playerid, "CompName"), 0, 0);
		}
	}
	else
	{
		SetModText(playerid, GetStringVar(playerid, "CompType"), GetIntVar(playerid, "CompPrice"), GetStringVar(playerid, "CompName"), 1, 1);
		AddVehicleComponent(vehicle, GetIntVar(playerid, "CompID"));
	}
}

stock HandlePaintJobText(playerid, vehicle)
{
	if(!HasPaintJob(vehicle, GetIntVar(playerid, "OnPaint")))
	{
		SetModText(playerid, "PaintJob", 10000, "PaintJob", 0, 1);
		ChangeVehiclePaintjob(vehicle, GetIntVar(playerid, "OnPaint"));
	}
	else
	{
		SetModText(playerid, "PaintJob", 10000, "PaintJob", 1, 1);
		ChangeVehiclePaintjob(vehicle, GetIntVar(playerid, "OnPaint"));
	}
}

stock BackToDealerShip(playerid)
{
	SetInterior(playerid, 0);
	SetWorld(playerid, 0);
	UnFreezePlayer(playerid);
	HideModText(playerid);
	return 1;
}

stock HasPaintJob(vehicleid, paintid)
{
	for(new i = 0; i < 3; i++)
	{
		if(VehicleInfo[vehicleid][carPaintJob] == paintid)
			return true;
	}
	return false;
}

stock HasComponent(vehicleid, compid)
{
	for(new i = 0; i < 14; i++)
	{
		if(VehicleInfo[vehicleid][carComponent][i] == compid)
			return true;
	}
	return false;
}

stock ComponentSlotTaken(vehicleid, slot)
{
	if(VehicleInfo[vehicleid][carComponent][slot] != 0)
		return 1;
	return 0;
}

stock CountComponents(vehicleid)
{
	new count = 0;
	for(new i = 0; i < 14; i++)
	{
		if(VehicleInfo[vehicleid][carComponent][i] != 0)
			count++;
	}
	return count;
}

stock SetVehicleComponent(vehicleid, component, slot)
{
	VehicleInfo[vehicleid][carComponent][slot] = component;
	AddVehicleComponent(vehicleid, component);
	SaveVehicle(vehicleid);
	return 1;
}

stock SetVehiclePaintJob(vehicleid, paintid)
{
	VehicleInfo[vehicleid][carPaintJob] = paintid;
	VehicleInfo[vehicleid][carColor1] = 1;
	VehicleInfo[vehicleid][carColor2] = 1;
	ChangeVehicleColor(vehicleid, 1, 1);
	ChangeVehiclePaintjob(vehicleid, paintid);
	SaveVehicle(vehicleid);
	return 1;
}

stock SetModText(playerid, type[], price, name[], exists, compatible)
{
	new str[500];
	if(exists == 1)
		format(str, sizeof(str), "~w~<%s>~n~---------------~n~~y~Price:~w~$%d~n~~y~Name:~w~%s~n~~r~you already have this~n~~w~PRESS [~y~y~w~] to ~y~confirm~w~.~n~PRESS [~y~n~w~] to ~y~get out~w~.", type, price, name);
	else
		if(compatible == 1)
			format(str, sizeof(str), "~w~<%s>~n~---------------~n~~y~Price:~w~$%d~n~~y~Name:~w~%s~n~~y~that will replace what you already have~n~~w~PRESS [~y~y~w~] to ~y~confirm~w~.~n~PRESS [~y~n~w~] to ~y~get out~w~.", type, price, name);
		else
			format(str, sizeof(str), "~w~<%s>~n~---------------~n~~y~Price:~w~$%d~n~~y~Name:~w~%s~n~~r~not compatible with your car~n~~w~PRESS [~y~y~w~] to ~y~confirm~w~.~n~PRESS [~y~n~w~] to ~y~get out~w~.", type, price, name);
	TextDrawSetString(ModText[playerid], str);
	return 1;
}

stock HideModText(playerid)
{
	HideTextDraw(playerid, ModText[playerid]);
	return 1;
}

stock ShowModText(playerid)
{
	ShowTextDraw(playerid, ModText[playerid]);
	return 1;
}

stock GetComponentName(component)
{
    new modname[50];
    switch(component)
    {
       case 1000: format(modname, sizeof(modname), "Pro Spoiler");
       case 1001: format(modname, sizeof(modname), "Win Spoiler");
       case 1002: format(modname, sizeof(modname), "Drag Spoiler");
       case 1003: format(modname, sizeof(modname), "Alpha Spoiler");
       case 1004: format(modname, sizeof(modname), "Champ Scoop");
       case 1005: format(modname, sizeof(modname), "Fury Scoop");
       case 1006: format(modname, sizeof(modname), "Roof Scoop");
       case 1007: format(modname, sizeof(modname), "Right Sideskirt");
       case 1008: format(modname, sizeof(modname), "Nitrous x5");
       case 1009: format(modname, sizeof(modname), "Nitrous x2");
       case 1010: format(modname, sizeof(modname), "Nitrous x10");
       case 1011: format(modname, sizeof(modname), "Race Scoop");
       case 1012: format(modname, sizeof(modname), "Worx Scoop");
       case 1013: format(modname, sizeof(modname), "Round Fog Lights");
       case 1014: format(modname, sizeof(modname), "Champ Spoiler");
       case 1015: format(modname, sizeof(modname), "Race Spoiler");
       case 1016: format(modname, sizeof(modname), "Worx Spoiler");
       case 1017: format(modname, sizeof(modname), "Left Sideskirt");
       case 1018: format(modname, sizeof(modname), "Upswept Exhaust");
       case 1019: format(modname, sizeof(modname), "Twin Exhaust");
       case 1020: format(modname, sizeof(modname), "Large Exhaust");
       case 1021: format(modname, sizeof(modname), "Medium Exhaust");
       case 1022: format(modname, sizeof(modname), "Small Exhaust");
       case 1023: format(modname, sizeof(modname), "Fury Spoiler");
       case 1024: format(modname, sizeof(modname), "Square Fog Lights");
       case 1025: format(modname, sizeof(modname), "Offroad Wheels");
       case 1026, 1036, 1047, 1056, 1069, 1090: format(modname, sizeof(modname), "Right Alien Sideskirt");
       case 1027, 1040, 1051, 1062, 1071, 1094: format(modname, sizeof(modname), "Left Alien Sideskirt");
       case 1028, 1034, 1046, 1064, 1065, 1092: format(modname, sizeof(modname), "Alien Exhaust");
       case 1029, 1037, 1045, 1059, 1066, 1089: format(modname, sizeof(modname), "X-Flow Exhaust");
       case 1030, 1039, 1048, 1057, 1070, 1095: format(modname, sizeof(modname), "Right X-Flow Sideskirt");
       case 1031, 1041, 1052, 1063, 1072, 1093: format(modname, sizeof(modname), "Left X-Flow Sideskirt");
       case 1032, 1038, 1054, 1055, 1067, 1088: format(modname, sizeof(modname), "Alien Roof Vent");
       case 1033, 1035, 1053, 1061, 1068, 1091: format(modname, sizeof(modname), "X-Flow Roof Vent");
       case 1042: format(modname, sizeof(modname), "Right Chrome Sideskirt");
       case 1099: format(modname, sizeof(modname), "Left Chrome Sideskirt");
       case 1043, 1105, 1114, 1127, 1132, 1135: format(modname, sizeof(modname), "Slamin Exhaust");
       case 1044, 1104, 1113, 1126, 1129, 1136: format(modname, sizeof(modname), "Chrome Exhaust");
       case 1050, 1058, 1139, 1146, 1158, 1163: format(modname, sizeof(modname), "X-Flow Spoiler");
       case 1049, 1060, 1138, 1147, 1162, 1164: format(modname, sizeof(modname), "Alien Spoiler");
       case 1073: format(modname, sizeof(modname), "Shadow Wheels");
       case 1074: format(modname, sizeof(modname), "Mega Wheels");
       case 1075: format(modname, sizeof(modname), "Rimshine Wheels");
       case 1076: format(modname, sizeof(modname), "Wires Wheels");
       case 1077: format(modname, sizeof(modname), "Classic Wheels");
       case 1078: format(modname, sizeof(modname), "Twist Wheels");
       case 1079: format(modname, sizeof(modname), "Cutter Wheels");
       case 1080: format(modname, sizeof(modname), "Stitch Wheels");
       case 1081: format(modname, sizeof(modname), "Grove Wheels");
       case 1082: format(modname, sizeof(modname), "Import Wheels");
       case 1083: format(modname, sizeof(modname), "Dollar Wheels");
       case 1084: format(modname, sizeof(modname), "Trance Wheels");
       case 1085: format(modname, sizeof(modname), "Atomic Wheels");
       case 1086: format(modname, sizeof(modname), "Stereo");
       case 1087: format(modname, sizeof(modname), "Hydraulics");
       case 1096: format(modname, sizeof(modname), "Ahab Wheels");
       case 1097: format(modname, sizeof(modname), "Virtual Wheels");
       case 1098: format(modname, sizeof(modname), "Access Wheels");
       case 1100: format(modname, sizeof(modname), "Chrome Grill");
       case 1101: format(modname, sizeof(modname), "Left Chrome Flames Sideskirt");
       case 1102, 1107: format(modname, sizeof(modname), "Left Chrome Strip Sideskirt");
       case 1103: format(modname, sizeof(modname), "Convertible Roof");
       case 1106, 1124, 1137: format(modname, sizeof(modname), "Left Chrome Arches Sideskirt");
       case 1108, 1133, 1134: format(modname, sizeof(modname), "Right Chrome Strip Sideskirt");
       case 1109: format(modname, sizeof(modname), "Chrome Rear Bullbars");
       case 1110: format(modname, sizeof(modname), "Slamin Rear Bullbars");
       case 1111, 1112: format(modname, sizeof(modname), "Front Sign");
       case 1115: format(modname, sizeof(modname), "Chrome Front Bullbars");
       case 1116: format(modname, sizeof(modname), "Slamin Front Bullbars");
       case 1117, 1174, 1179, 1182, 1189, 1191: format(modname, sizeof(modname), "Chrome Front Bumper");
       case 1175, 1181, 1185, 1188, 1190: format(modname, sizeof(modname), "Slamin Front Bumper");
       case 1176, 1180, 1184, 1187, 1192: format(modname, sizeof(modname), "Chrome Rear Bumper");
       case 1177, 1178, 1183, 1186, 1193: format(modname, sizeof(modname), "Slamin Rear Bumper");
       case 1118: format(modname, sizeof(modname), "Right Chrome Trim Sideskirt");
       case 1119: format(modname, sizeof(modname), "Right Wheelcovers Sideskirt");
       case 1120: format(modname, sizeof(modname), "Left Chrome Trim Sideskirt");
       case 1121: format(modname, sizeof(modname), "Left Wheelcovers Sideskirt");
       case 1122: format(modname, sizeof(modname), "Right Chrome Flames Sideskirt");
       case 1123: format(modname, sizeof(modname), "Bullbar Chrome Bars");
       case 1125: format(modname, sizeof(modname), "Bullbar Chrome Lights");
       case 1128: format(modname, sizeof(modname), "Vinyl Hardtop Roof");
       case 1130: format(modname, sizeof(modname), "Hardtop Roof");
       case 1131: format(modname, sizeof(modname), "Softtop Roof");
       case 1140, 1148, 1151, 1156, 1161, 1167: format(modname, sizeof(modname), "X-Flow Rear Bumper");
       case 1141, 1149, 1150, 1154, 1159, 1168: format(modname, sizeof(modname), "Alien Rear Bumper");
       case 1142: format(modname, sizeof(modname), "Left Oval Vents");
       case 1143: format(modname, sizeof(modname), "Right Oval Vents");
       case 1144: format(modname, sizeof(modname), "Left Square Vents");
       case 1145: format(modname, sizeof(modname), "Right Square Vents");
       case 1152, 1157, 1165, 1170, 1172, 1173: format(modname, sizeof(modname), "X-Flow Front Bumper");
       case 1153, 1155, 1160, 1166, 1169, 1171: format(modname, sizeof(modname), "Alien Front Bumper");

    }
    return modname;
}

stock PutPlayerInModShop(playerid)
{
	new vehicle = GetPlayerVehicleID(playerid);
	PutPlayer(playerid, 1398.5208,-20.3816,1000.9159);
	SetInterior(playerid, 1);
	SetWorld(playerid, playerid);
	LinkVehicleToInterior(vehicle, 1);
	SetVehicleVirtualWorld(vehicle, playerid);
	new Float:x, Float:y, Float:z;
	GetVehiclePos(vehicle, x, y, z);
	SetPlayerCameraPos(playerid, x+6, y-2.5, z+4);
	SetPlayerCameraLookAt(playerid, x, y, z);
	FreezePlayer(playerid);
}

stock GetDriver(vehicleid)
{
	foreach(Player, i)
	{
		if(IsPlayerInVehicle(i, vehicleid) && IsDriver(i))
			return i;
	}
	return -1;
}

stock SetBizType(bizid, type)
{
	new businesstype[128];
	switch(type)
	{
		case 1: businesstype = "Restaurant";
		case 2: businesstype = "Casino";
		case 3: businesstype = "Shop 24-7";
		case 4: businesstype = "Ammunation";
		case 5: businesstype = "Clothing store";
		case 6: businesstype = "Bar/Club";
		case 7: businesstype = "Sex Shop";
		case 8: businesstype = "Boxing Club";
		case 9: businesstype = "Electronic Shop";
		case 10: businesstype = "Shop Tattoos";
		case 11: businesstype = "Disco";
		case 12: businesstype = "Gambling";
		case 13: businesstype = "Barber Shop";
		case 14: businesstype = "Pharmacy";
	}
	BizInfo[bizid][bizType] = type;
	format(BizInfo[bizid][bizInfo], 128, "%s", businesstype);
	SetBizEnterMSG(bizid);
	return 1;
}

stock SetBizEnterMSG(bizid)
{
	new type = BizInfo[bizid][bizType];
	new businesstype[256];
	switch(type)
	{
		case 1: businesstype = "HINT: Write/eatfood to eat.";
		case 2: businesstype = "HINT: Do not use machines in GTA:SA, write /casino for available commands.";
		case 3: businesstype = "HINT: Use /buy1 to buy products.";
		case 4: businesstype = "HINT: /buygun to buy a gun.";
		case 5: businesstype = "HINT: /buyclothes to buy clothing items.";
		case 6: businesstype = "HINT: /buydrink o buy a drink.";
		case 7: businesstype = "Welcome to sex shop!";
		case 8: businesstype = "Welcome to the club!";
		case 9: businesstype = "HINT: /buy to buy in the store.";
		case 10: businesstype = "Welcome to the tattoo shop!";
		case 11: businesstype = "HINT: /buydrink to buy a drink.";
		case 12: businesstype = "Welcome to the bookie, here you can play blackjack.";
		case 13: businesstype = "Welcome to barbier!";
		case 14: businesstype = "HINT: Use /buy o buy a pill.";
	}
	format(BizInfo[bizid][bizEnterMSG], 128, "%s", businesstype);
	return 1;
}

stock UpdateBizInfo(bizid)
{
	format(query, sizeof(query), "UPDATE `business` SET `owned` = %d, `locked` = %d, `price`= %d, `levelbuy`= %d, `interior` = %d, `world` = %d, `cash` = %d, `type` = %d, `entrance` = %d WHERE `id` = %d",
	BizInfo[bizid][bizOwned],
	BizInfo[bizid][bizLocked],
	BizInfo[bizid][bizPrice],
	BizInfo[bizid][bizLevelbuy],
	BizInfo[bizid][bizInterior],
	BizInfo[bizid][bizWorld],
	BizInfo[bizid][bizCash],
	BizInfo[bizid][bizType],
	BizInfo[bizid][bizEntrance],
	BizInfo[bizid][bizID]);
	mysql_function_query(dbHandle, query, false, "", "");
	//=============================================================================
	format(query, sizeof(query), "UPDATE `business` SET `owner` = '%s', `info` = '%s', `name` = '%s', `entermsg` = '%s' WHERE `id` = %d",
	BizInfo[bizid][bizOwner],
	BizInfo[bizid][bizInfo],
	BizInfo[bizid][bizName],
	BizInfo[bizid][bizEnterMSG],
	BizInfo[bizid][bizID]);
	mysql_function_query(dbHandle, query, false, "", "");
	//=============================================================================
	format(query, sizeof(query), "UPDATE `business` SET `posx` = %f, `posy` = %f, `posz` = %f, `exitx` = %f, `exity` = %f, `exitz` = %f, `radio` = %d WHERE `id` = %d",
	BizInfo[bizid][bizPosX],
	BizInfo[bizid][bizPosY],
	BizInfo[bizid][bizPosZ],
	BizInfo[bizid][bizExitX],
	BizInfo[bizid][bizExitY],
	BizInfo[bizid][bizExitZ],
	BizInfo[bizid][bizRadio],
	BizInfo[bizid][bizID]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

/*stock SetHouseInterior(playerid, houseid, int)
{
    if(id2 == 1)
	{
		Houses[id][ExitX] = 235.508994;
		Houses[id][ExitY] = 1189.169897;
		Houses[id][ExitZ] = 1080.339966;
		Houses[id][ExitInterior] = 3;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "ID-ul Casei: %d - Prezentare: Large/2 story/3 bedrooms/clone of House 9", id,id2);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 2)
	{
		Houses[id][ExitX] = 225.756989;
		Houses[id][ExitY] = 1240.000000;
		Houses[id][ExitZ] = 1082.149902;
		Houses[id][ExitInterior] = 2;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Medium/1 story/1 bedroom", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 3)
	{
		Houses[id][ExitX] = 223.043991;
		Houses[id][ExitY] = 1289.259888;
		Houses[id][ExitZ] = 1082.199951;
		Houses[id][ExitInterior] = 1;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Small/1 story/1 bedroom", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 4)
	{
		Houses[id][ExitX] = 225.630997;
		Houses[id][ExitY] = 1022.479980;
		Houses[id][ExitZ] = 1084.069946;
		Houses[id][ExitInterior] = 7;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: VERY Large/2 story/4 bedrooms", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 5)
	{
		Houses[id][ExitX] = 295.138977;
		Houses[id][ExitY] = 1474.469971;
		Houses[id][ExitZ] = 1080.519897;
		Houses[id][ExitInterior] = 15;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Small/1 story/2 bedrooms", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 6)
	{
		Houses[id][ExitX] = 328.493988;
		Houses[id][ExitY] = 1480.589966;
		Houses[id][ExitZ] = 1084.449951;
		Houses[id][ExitInterior] = 15;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Small/1 story/2 bedrooms", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 7)
	{
		Houses[id][ExitX] = 385.803986;
		Houses[id][ExitY] = 1471.769897;
		Houses[id][ExitZ] = 1080.209961;
		Houses[id][ExitInterior] = 15;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Small/1 story/1 bedroom/NO BATHROOM", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 8)
	{
		Houses[id][ExitX] = 375.971985;
		Houses[id][ExitY] = 1417.269897;
		Houses[id][ExitZ] = 1081.409912;
		Houses[id][ExitInterior] = 15;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Small/1 story/1 bedroom", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 9)
	{
		Houses[id][ExitX] = 490.810974;
		Houses[id][ExitY] = 1401.489990;
		Houses[id][ExitZ] = 1080.339966;
		Houses[id][ExitInterior] = 2;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Large/2 story/3 bedrooms", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
 	else if(id2 == 10)
	{
		Houses[id][ExitX] = 447.734985;
		Houses[id][ExitY] = 1400.439941;
		Houses[id][ExitZ] = 1084.339966;
		Houses[id][ExitInterior] = 2;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Medium/1 story/2 bedrooms", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 11)
	{
		Houses[id][ExitX] = 227.722992;
		Houses[id][ExitY] = 1114.389893;
		Houses[id][ExitZ] = 1081.189941;
		Houses[id][ExitInterior] = 5;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Large/2 story/4 bedrooms", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 12)
	{
		Houses[id][ExitX] = 260.983978;
		Houses[id][ExitY] = 1286.549927;
		Houses[id][ExitZ] = 1080.299927;
		Houses[id][ExitInterior] = 4;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Small/1 story/1 bedroom", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 13)
	{
		Houses[id][ExitX] = 221.666992;
		Houses[id][ExitY] = 1143.389893;
		Houses[id][ExitZ] = 1082.679932;
		Houses[id][ExitInterior] = 4;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Small/1 story/1 bedroom/NO BATHROOM", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 14)
	{
		Houses[id][ExitX] = 27.132700;
		Houses[id][ExitY] = 1341.149902;
		Houses[id][ExitZ] = 1084.449951;
		Houses[id][ExitInterior] = 10;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Medium/2 story/1 bedroom", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 15)
	{
		Houses[id][ExitX] = -262.601990;
		Houses[id][ExitY] = 1456.619995;
		Houses[id][ExitZ] = 1084.449951;
		Houses[id][ExitInterior] = 4;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Large/2 story/1 bedroom/NO BATHROOM", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 16)
	{
		Houses[id][ExitX] = 22.778299;
		Houses[id][ExitY] = 1404.959961;
		Houses[id][ExitZ] = 1084.449951;
		Houses[id][ExitInterior] = 5;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Medium/1 story/2 bedrooms/NO BATHROOM or DOORS", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 17)
	{
		Houses[id][ExitX] = 140.278000;
		Houses[id][ExitY] = 1368.979980;
		Houses[id][ExitZ] = 1083.969971;
		Houses[id][ExitInterior] = 5;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Large/2 story/4 bedrooms/NO BATHROOM", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 18)
	{
		Houses[id][ExitX] = 234.045990;
		Houses[id][ExitY] = 1064.879883;
		Houses[id][ExitZ] = 1084.309937;
		Houses[id][ExitInterior] = 6;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Large/2 story/3 bedrooms", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 19)
	{
		Houses[id][ExitX] = -68.294098;
		Houses[id][ExitY] = 1353.469971;
		Houses[id][ExitZ] = 1080.279907;
		Houses[id][ExitInterior] = 6;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Small/1 story/NO BEDROOM", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 20)
	{
		Houses[id][ExitX] = -285.548981;
		Houses[id][ExitY] = 1470.979980;
		Houses[id][ExitZ] = 1084.449951;
		Houses[id][ExitInterior] = 15;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: 1 bedroom/living room/kitchen/NO BATHROOM", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 21)
	{
		Houses[id][ExitX] = -42.581997;
		Houses[id][ExitY] = 1408.109985;
		Houses[id][ExitZ] = 1084.449951;
		Houses[id][ExitInterior] = 8;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Small/1 story/NO BEDROOM", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 22)
	{
		Houses[id][ExitX] = 83.345093;
		Houses[id][ExitY] = 1324.439941;
		Houses[id][ExitZ] = 1083.889893;
		Houses[id][ExitInterior] = 9;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Medium/2 story/2 bedrooms", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 23)
	{
		Houses[id][ExitX] = 260.941986;
		Houses[id][ExitY] = 1238.509888;
		Houses[id][ExitZ] = 1084.259888;
		Houses[id][ExitInterior] = 9;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Small/1 story/1 bedroom", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 24)
	{
		Houses[id][ExitX] = 244.411987;
		Houses[id][ExitY] = 305.032990;
		Houses[id][ExitZ] = 999.231995;
		Houses[id][ExitInterior] = 1;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Denise's Bedroom", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 25)
	{
		Houses[id][ExitX] = 271.884979;
		Houses[id][ExitY] = 306.631989;
		Houses[id][ExitZ] = 999.325989;
		Houses[id][ExitInterior] = 2;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Katie's Bedroom", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 26)
	{
		Houses[id][ExitX] = 291.282990;
		Houses[id][ExitY] = 310.031982;
		Houses[id][ExitZ] = 999.154968;
		Houses[id][ExitInterior] = 3;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Helena's Bedroom (barn) - limited movement", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 27)
	{
		Houses[id][ExitX] = 302.181000;
		Houses[id][ExitY] = 300.722992;
		Houses[id][ExitZ] = 999.231995;
		Houses[id][ExitInterior] = 4;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Michelle's Bedroom", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 28)
	{
		Houses[id][ExitX] = 322.197998;
		Houses[id][ExitY] = 302.497986;
		Houses[id][ExitZ] = 999.231995;
		Houses[id][ExitInterior] = 5;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Barbara's Bedroom", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 29)
	{
		Houses[id][ExitX] = 346.870025;
		Houses[id][ExitY] = 309.259033;
		Houses[id][ExitZ] = 999.155700;
		Houses[id][ExitInterior] = 6;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Millie's Bedroom", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 30)
	{
		Houses[id][ExitX] = 2496.049805;
		Houses[id][ExitY] = -1693.929932;
		Houses[id][ExitZ] = 1014.750000;
		Houses[id][ExitInterior] = 3;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: CJ's Mom's House", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 31)
	{
		Houses[id][ExitX] = 1263.079956;
		Houses[id][ExitY] = -785.308960;
		Houses[id][ExitZ] = 1091.959961;
		Houses[id][ExitInterior] = 5;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Madd Dogg's Mansion (West door)", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 32)
	{
		Houses[id][ExitX] = 2464.109863;
		Houses[id][ExitY] = -1698.659912;
		Houses[id][ExitZ] = 1013.509949;
		Houses[id][ExitInterior] = 2;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Ryder's house", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 33)
	{
		Houses[id][ExitX] = 2526.459961;
		Houses[id][ExitY] = -1679.089966;
		Houses[id][ExitZ] = 1015.500000;
		Houses[id][ExitInterior] = 1;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Sweet's House (South side of house is fucked)", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 34)
	{
		Houses[id][ExitX] = 2543.659912;
		Houses[id][ExitY] = -1303.629883;
		Houses[id][ExitZ] = 1025.069946;
		Houses[id][ExitInterior] = 2;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Big Smoke's Crack Factory (Ground Floor)", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 35)
	{
		Houses[id][ExitX] = 744.542969;
		Houses[id][ExitY] = 1437.669922;
		Houses[id][ExitZ] = 1102.739990;
		Houses[id][ExitInterior] = 6;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Fanny Batter's Whore House", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 36)
	{
		Houses[id][ExitX] = 964.106995;
		Houses[id][ExitY] = -53.205498;
		Houses[id][ExitZ] = 1001.179993;
		Houses[id][ExitInterior] = 3;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Tiger Skin Rug Brothel", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 37)
	{
		Houses[id][ExitX] = 2350.339844;
		Houses[id][ExitY] = -1181.649902;
		Houses[id][ExitZ] = 1028.000000;
		Houses[id][ExitInterior] = 5;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Burning Desire Gang House", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 38)
	{
		Houses[id][ExitX] = 2807.619873;
		Houses[id][ExitY] = -1171.899902;
		Houses[id][ExitZ] = 1025.579956;
		Houses[id][ExitInterior] = 8;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Colonel Furhberger's House", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 39)
	{
		Houses[id][ExitX] = 318.564972;
		Houses[id][ExitY] = 1118.209961;
		Houses[id][ExitZ] = 1083.979980;
		Houses[id][ExitInterior] = 5;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Crack Den", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 40)
	{
		Houses[id][ExitX] = 446.622986;
		Houses[id][ExitY] = 509.318970;
		Houses[id][ExitZ] = 1001.419983;
		Houses[id][ExitInterior] = 12;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Budget Inn Motel Room", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 41)
	{
		Houses[id][ExitX] = 2216.339844;
		Houses[id][ExitY] = -1150.509888;
		Houses[id][ExitZ] = 1025.799927;
		Houses[id][ExitInterior] = 15;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Jefferson Motel", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 42)
	{
		Houses[id][ExitX] = -2169.845947;
		Houses[id][ExitY] = 642.366027;
		Houses[id][ExitZ] = 1057.586059;
		Houses[id][ExitInterior] = 1;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Woozi's Casino", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 46)
	{
		Houses[id][ExitX] = 2234.0754394531;
		Houses[id][ExitY] = -1115.0659179688;
		Houses[id][ExitZ] = 1050.8828125;
		Houses[id][ExitInterior] = 6;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Safe house 10", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 47)
	{
		Houses[id][ExitX] = 2269.7770996094;
		Houses[id][ExitY] = -1210.3549804688;
		Houses[id][ExitZ] = 1047.5625;
		Houses[id][ExitInterior] = 6;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Safe house 11", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 48)
	{
		Houses[id][ExitX] = 2365.3979492188;
		Houses[id][ExitY] = -1135.4761962891;
		Houses[id][ExitZ] = 1050.8825683594;
		Houses[id][ExitInterior] = 8;
		Houses[id][Dynamic] = 0;
		format(string, sizeof string, "House ID: %d - Description: Safe house 12", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 49)
	{
		Houses[id][ExitX] = 1517.98156738;
		Houses[id][ExitY] = -1139.45825195;
		Houses[id][ExitZ] = 45.48049164;
		Houses[id][ExitInterior] = 0;
		Houses[id][Dynamic] = 1;
		format(string, sizeof string, "House ID: %d - Description: Blue's Interior", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(id2 == 50)
	{
		Houses[id][ExitX] = 2493.4116;
		Houses[id][ExitY] = -602.5472;
		Houses[id][ExitZ] = 63.4980;
		Houses[id][ExitInterior] = 0;
		Houses[id][Dynamic] = 1;
		format(string, sizeof string, "House ID: %d - Description: Extreme's Interior", id);
		SendClientMessage(playerid, COLOR_ADMINCMD,string);
	}
	else if(int == 51)
	{
		Houses[houseid][ExitX] = 2169.461181;
		Houses[houseid][ExitY] = 1618.798339;
		Houses[houseid][ExitZ] = 999.976562;
		Houses[houseid][Interior] = 1;
		format(string, sizeof string, "House ID: %d - Description: Calugias Basement", houseid);
	}
	
	if(int == 1)
	{
		BizInfo[bizid][bizExitX] = -794.806030;
		BizInfo[bizid][bizExitY] = 491.686004;
		BizInfo[bizid][bizExitZ] = 1376.194946;
		BizInfo[bizid][bizInterior] = 1;
		format(msg, sizeof msg, "Business ID: %d - Description: Marcos Bistro", bizid);
	}
	else if(int == 2)
	{
		BizInfo[bizid][bizExitX] = 1212.019897;
		BizInfo[bizid][bizExitY] = -28.663099;
		BizInfo[bizid][bizExitZ] = 1001.089966;
		BizInfo[bizid][bizInterior] = 3;
		format(msg, sizeof msg, "Business ID: %d - Description: Big Spread Ranch Strip Club", bizid);
	}
	else if(int == 3)
	{
		BizInfo[bizid][bizExitX] = 366.923980;
		BizInfo[bizid][bizExitY] = -72.929359;
		BizInfo[bizid][bizExitY] = 1001.507812;
		BizInfo[bizid][bizInterior] = 10;
		format(msg, sizeof msg, "Business ID: %d - Description: Burger Shot", bizid);
	}
	else if(int == 4)
	{
		BizInfo[bizid][bizExitX] = 365.672974;
		BizInfo[bizid][bizExitY] = -10.713200;
		BizInfo[bizid][bizExitZ] = 1001.869995;
		BizInfo[bizid][bizInterior] = 9;
		format(msg, sizeof msg, "Business ID: %d - Description: Cluckin Bell", bizid);
	}
	else if(int == 5)
	{
		BizInfo[bizid][bizExitX] = 372.351990;
		BizInfo[bizid][bizExitY] = -131.650986;
		BizInfo[bizid][bizExitZ] = 1001.449951;
		BizInfo[bizid][bizInterior] = 5;
		format(msg, sizeof msg, "Business ID: %d - Description: Well Stacked Pizza", bizid);
	}
	else if(int == 6)
	{
		BizInfo[bizid][bizExitX] = 377.098999;
		BizInfo[bizid][bizExitY] = -192.439987;
		BizInfo[bizid][bizExitZ] = 1000.643982;
		BizInfo[bizid][bizInterior] = 17;
		format(msg, sizeof msg, "Business ID: %d - Description: Rusty Brown Dohnuts", bizid);
	}
	else if(int == 7)
	{
		BizInfo[bizid][bizExitX] = 460.099976;
		BizInfo[bizid][bizExitY] = -88.428497;
		BizInfo[bizid][bizExitZ] = 999.621948;
		BizInfo[bizid][bizInterior] = 4;
		format(msg, sizeof msg, "Business ID: %d - Description: Jays Diner", bizid);
	}
	else if(int == 8)
	{
		BizInfo[bizid][bizExitX] = 681.474976;
		BizInfo[bizid][bizExitY] = -451.150970;
		BizInfo[bizid][bizExitZ] = -25.616798;
		BizInfo[bizid][bizInterior] = 1;
		format(msg, sizeof msg, "Business ID: %d - Description: Pump Truck Stop Diner", bizid);
	}
	else if(int == 9)
	{
		BizInfo[bizid][bizExitX] = 476.068328;
		BizInfo[bizid][bizExitY] = -14.893922;
		BizInfo[bizid][bizExitZ] = 1003.695312;
		BizInfo[bizid][bizInterior] = 17;
		format(msg, sizeof msg, "Business ID: %d - Description: Alhambra", bizid);
	}
	else if(int == 10)
	{
		BizInfo[bizid][bizExitX] = 501.980988;
		BizInfo[bizid][bizExitY] = -69.150200;
		BizInfo[bizid][bizExitZ] = 998.834961;
		BizInfo[bizid][bizInterior] = 11;
		format(msg, sizeof msg, "Business ID: %d - Description: Mistys", bizid);

	}
	else if(int == 11)
	{
		BizInfo[bizid][bizExitX] = -227.028000;
		BizInfo[bizid][bizExitY] = 1401.229980;
		BizInfo[bizid][bizExitZ] = 27.769798;
		BizInfo[bizid][bizInterior] = 18;
		format(msg, sizeof msg, "Business ID: %d - Description: Lil' Probe Inn", bizid);
	}
	else if(int == 12)
	{
		BizInfo[bizid][bizExitX] = 204.332993;
		BizInfo[bizid][bizExitY] = -166.694992;
		BizInfo[bizid][bizExitZ] = 1000.578979;
		BizInfo[bizid][bizInterior] = 14;
		format(msg, sizeof msg, "Business ID: %d - Description: EXcLusive", bizid);
	}
	else if(int == 13)
	{
		BizInfo[bizid][bizExitX] = 207.737991;
		BizInfo[bizid][bizExitY] = -109.019997;
		BizInfo[bizid][bizExitZ] = 1005.269958;
		BizInfo[bizid][bizInterior] = 15;
		format(msg, sizeof msg, "Business ID: %d - Description: Binco", bizid);
	}
	else if(int == 14)
	{
		BizInfo[bizid][bizExitX] = 207.054993;
		BizInfo[bizid][bizExitY] = -138.804993;
		BizInfo[bizid][bizExitZ] = 1003.519958;
		BizInfo[bizid][bizInterior] = 3;
		format(msg, sizeof msg, "Business ID: %d - Description: ProLaps", bizid);
	}
	else if(int == 15)
	{
		BizInfo[bizid][bizExitX] = 203.778000;
		BizInfo[bizid][bizExitY] = -48.492397;
		BizInfo[bizid][bizExitZ] = 1001.799988;
		BizInfo[bizid][bizInterior] = 1;
		format(msg, sizeof msg, "Business ID: %d - Description: SubUrban", bizid);
	}
	else if(int == 16)
	{
		BizInfo[bizid][bizExitX] = 226.293991;
		BizInfo[bizid][bizExitY] = -7.431530;
		BizInfo[bizid][bizExitZ] = 1002.259949;
		BizInfo[bizid][bizInterior] = 5;
		format(msg, sizeof msg, "Business ID: %d - Description: Victim", bizid);
	}
	else if(int == 17)
	{
		BizInfo[bizid][bizExitX] = 161.391006;
		BizInfo[bizid][bizExitY] = -93.159156;
		BizInfo[bizid][bizExitZ] = 1001.804687;
		BizInfo[bizid][bizInterior] = 18;
		format(msg, sizeof msg, "Business ID: %d - Description: Zip", bizid);
	}
	else if(int == 18)
	{
		BizInfo[bizid][bizExitX] = 1133.069946;
		BizInfo[bizid][bizExitY] = -9.573059;
		BizInfo[bizid][bizExitZ] = 1000.750000;
		BizInfo[bizid][bizInterior] = 12;
		format(msg, sizeof msg, "Business ID: %d - Description: Small Casino in Redsands West", bizid);
	}
	else if(int == 19)
	{
		BizInfo[bizid][bizExitX] = 833.818970;
		BizInfo[bizid][bizExitY] = 7.418000;
		BizInfo[bizid][bizExitZ] = 1004.179993;
		BizInfo[bizid][bizInterior] = 3;
		format(msg, sizeof msg, "Business ID: %d - Description: Off Track Betting", bizid);
	}
	else if(int == 20)
	{
		BizInfo[bizid][bizExitX] = -100.325996;
		BizInfo[bizid][bizExitY] = -22.816500;
		BizInfo[bizid][bizExitZ] = 1000.741943;
		BizInfo[bizid][bizInterior] = 3;
		format(msg, sizeof msg, "Business ID: %d - Description: Sex Shop", bizid);
	}
	else if(int == 21)
	{
		BizInfo[bizid][bizExitX] = -2239.569824;
		BizInfo[bizid][bizExitY] = 130.020996;
		BizInfo[bizid][bizExitZ] = 1035.419922;
		BizInfo[bizid][bizInterior] = 6;
		format(msg, sizeof msg, "Business ID: %d - Description: Zero's RC Shop", bizid);
	}
	else if(int == 22)
	{
		BizInfo[bizid][bizExitX] = 286.148987;
		BizInfo[bizid][bizExitY] = -40.644398;
		BizInfo[bizid][bizExitZ] = 1001.569946;
		BizInfo[bizid][bizInterior] = 1;
		format(msg, sizeof msg, "Business ID: %d - Description: Ammunation 1", bizid);
	}
	else if(int == 23)
	{
		BizInfo[bizid][bizExitX] = 286.800995;
		BizInfo[bizid][bizExitY] = -82.547600;
		BizInfo[bizid][bizExitZ] = 1001.539978;
		BizInfo[bizid][bizInterior] = 4;
		format(msg, sizeof msg, "Business ID: %d - Description: Ammunation 2", bizid);
	}
	else if(int == 24)
	{
		BizInfo[bizid][bizExitX] = 296.919983;
		BizInfo[bizid][bizExitY] = -108.071999;
		BizInfo[bizid][bizExitZ] = 1001.569946;
		BizInfo[bizid][bizInterior] = 6;
		format(msg, sizeof msg, "Business ID: %d - Description: Ammunation 3", bizid);
	}
	else if(int == 25)
	{
		BizInfo[bizid][bizExitX] = 316.524994;
		BizInfo[bizid][bizExitY] = -167.706985;
		BizInfo[bizid][bizExitZ] = 999.661987;
		BizInfo[bizid][bizInterior] = 6;
		format(msg, sizeof msg, "Business ID: %d - Description: Ammunation 4", bizid);
	}
	else if(int == 26)
	{
		BizInfo[bizid][bizExitX] = -2637.449951;
		BizInfo[bizid][bizExitY] = 1404.629883;
		BizInfo[bizid][bizExitZ] = 906.457947;
		BizInfo[bizid][bizInterior] = 3;
		format(msg, sizeof msg, "Business ID: %d - Description: Jizzys", bizid);
	}
	else if(int == 27)
	{
		BizInfo[bizid][bizExitX] = -25.884499;
		BizInfo[bizid][bizExitY] = -185.868988;
		BizInfo[bizid][bizExitZ] = 1003.549988;
		BizInfo[bizid][bizInterior] = 17;
		format(msg, sizeof msg, "Business ID: %d - Description: 24-7 1", bizid);
	}
	else if(int == 28)
	{
		BizInfo[bizid][bizExitX] = 6.091180;
		BizInfo[bizid][bizExitY] = -29.271898;
		BizInfo[bizid][bizExitZ] = 1003.549988;
		BizInfo[bizid][bizInterior] = 10;
		format(msg, sizeof msg, "Business ID: %d - Description: 24-7 2", bizid);
	}
	else if(int == 29)
	{
		BizInfo[bizid][bizExitX] = -30.946699;
		BizInfo[bizid][bizExitY] = -89.609596;
		BizInfo[bizid][bizExitZ] = 1003.549988;
		BizInfo[bizid][bizInterior] = 18;
		format(msg, sizeof msg, "Business ID: %d - Description: 24-7 3", bizid);
	}
	else if(int == 30)
	{
		BizInfo[bizid][bizExitX] = -25.132599;
		BizInfo[bizid][bizExitY] = -139.066986;
		BizInfo[bizid][bizExitZ] = 1003.549988;
		BizInfo[bizid][bizInterior] = 16;
		format(msg, sizeof msg, "Business ID: %d - Description: 24-7 4", bizid);
	}
	else if(int == 31)
	{
		BizInfo[bizid][bizExitX] = -27.312300;
		BizInfo[bizid][bizExitY] = -29.277599;
		BizInfo[bizid][bizExitZ] = 1003.549988;
		BizInfo[bizid][bizInterior] = 4;
		format(msg, sizeof msg, "Business ID: %d - Description: 24-7 5", bizid);
	}
	else if(int == 32)
	{
		BizInfo[bizid][bizExitX] = -26.691599;
		BizInfo[bizid][bizExitY] = -55.714897;
		BizInfo[bizid][bizExitZ] = 1003.549988;
		BizInfo[bizid][bizInterior] = 6;
		format(msg, sizeof msg, "Business ID: %d - Description: 24-7 6", bizid);
  	}
	else if(int == 33)
	{
		BizInfo[bizid][bizExitX] = 1494.430053;
		BizInfo[bizid][bizExitY] = 1305.63004;
		BizInfo[bizid][bizExitZ] = 1093.290039;
		BizInfo[bizid][bizInterior] = 3;
		format(msg, sizeof msg, "Business ID: %d - Description: Advertising/Phone Network", bizid);
  	}
	else if(int == 34)
	{
		BizInfo[bizid][bizExitX] = 965.1851;
		BizInfo[bizid][bizExitY] = -53.2832;
		BizInfo[bizid][bizExitZ] = 1001.1246;
		BizInfo[bizid][bizInterior] = 3;
		format(msg, sizeof msg, "Business ID: %d - Description: Bothel", bizid);
	}
	else if(int == 35)
	{
		BizInfo[bizid][bizExitX] = 2018.0131;
		BizInfo[bizid][bizExitY] = 1017.8541;
		BizInfo[bizid][bizExitZ] = 996.8750;
		BizInfo[bizid][bizInterior] = 10;
		format(msg, sizeof msg, "Business ID: %d - Description: Four Dragons Casino", bizid);
	}
	else if(int == 36)
	{
		BizInfo[bizid][bizExitX] = 617.5380;
		BizInfo[bizid][bizExitY] = -1.9900;
		BizInfo[bizid][bizExitZ] = 1000.6829;
		BizInfo[bizid][bizInterior] = 1;
		format(msg, sizeof msg, "Business ID: %d - Description: Bikers Garage", bizid);
	}
	else if(int == 37)
	{
		BizInfo[bizid][bizExitX] = 772.112000;
		BizInfo[bizid][bizExitY] = -3.898650;
		BizInfo[bizid][bizExitZ] = 1000.687988;
		BizInfo[bizid][bizInterior] = 5;
		format(msg, sizeof msg, "Business ID: %d - Description: Ganton Gym", bizid);
	}
	else if(int == 38) // Tattoo 1
	{
		BizInfo[bizid][bizExitX] = -204.439987;
		BizInfo[bizid][bizExitY] = -8.469599;
		BizInfo[bizid][bizExitZ] = 1002.273437;
		BizInfo[bizid][bizInterior] = 17;
		format(msg, sizeof msg, "Business ID: %d - Description: Tattoo 1", bizid);
	}
	else if(int == 39) // Tattoo 2
	{
		BizInfo[bizid][bizExitX] = -204.439987;
		BizInfo[bizid][bizExitY] = -43.652496;
		BizInfo[bizid][bizExitZ] = 1002.273437;
		BizInfo[bizid][bizInterior] = 3;
		format(msg, sizeof msg, "Business ID: %d - Description: Tattoo 2", bizid);
	}
	else if(int == 40) // Tattoo 3
	{
		BizInfo[bizid][bizExitX] = -204.439987;
		BizInfo[bizid][bizExitY] = -26.453998;
		BizInfo[bizid][bizExitZ] = 1002.273437;
		BizInfo[bizid][bizInterior] = 12;
		format(msg, sizeof msg, "Business ID: %d - Description: Tattoo 3", bizid);
	}
	else if(int == 41)
	{
		BizInfo[bizid][bizExitX] = 318.564972;
		BizInfo[bizid][bizExitY] = 1118.209961;
		BizInfo[bizid][bizExitZ] = 1083.979980;
		BizInfo[bizid][bizInterior] = 5;
		format(msg, sizeof msg, "Business ID: %d - Description: Crack Den", bizid);
	}
	else if(int == 42)
	{
		BizInfo[bizid][bizExitX] = -2240.468505;
		BizInfo[bizid][bizExitY] = 137.060440;
		BizInfo[bizid][bizExitZ] = 1035.414062;
		BizInfo[bizid][bizInterior] = 6;
		format(msg, sizeof msg, "Business ID: %d - Description: Zero RC shop", bizid);
	}
	else if(int == 43)
	{
		BizInfo[bizid][bizExitX] = 245.2307;
		BizInfo[bizid][bizExitY] = 304.7632;
		BizInfo[bizid][bizExitZ] = 999.1484;
		BizInfo[bizid][bizInterior] = 0;
		format(msg, sizeof msg, "Business ID: %d - Description: Record Studio", bizid);
	}
	else if(int == 44)
	{
		BizInfo[bizid][bizExitX] = 1506.24609375;
		BizInfo[bizid][bizExitY] = -1815.40039062;
		BizInfo[bizid][bizExitZ] = -43.72590637;
		BizInfo[bizid][bizInterior] = 0;
		format(msg, sizeof msg, "Business ID: %d - Description: LS Court Room", bizid);
	}
	else if(int == 45)
	{
		BizInfo[bizid][bizExitX] = 963.418762;
		BizInfo[bizid][bizExitY] = 2108.292480;
		BizInfo[bizid][bizExitZ] = 1011.030273;
		BizInfo[bizid][bizInterior] = 1;
		format(msg, sizeof(msg), "Business ID: %d - Description: Meat Factory", bizid);
	}
	else if(int == 46)
	{
		BizInfo[bizid][bizExitX] = -2154.34155;
		BizInfo[bizid][bizExitY] = 618.79169;
		BizInfo[bizid][bizExitZ] = 1055.45166;
		BizInfo[bizid][bizInterior] = 1;
		format(msg, sizeof(msg), "Business ID: %d - Description: Betting Place", bizid);
	}
	else if(int == 47)
	{
		BizInfo[bizid][bizExitX] = 418.6547;
		BizInfo[bizid][bizExitY] = -83.6987;
		BizInfo[bizid][bizExitZ] = 1001.8047;
		BizInfo[bizid][bizInterior] = 3;
		format(msg, sizeof(msg), "Business ID: %d - Description: Barber Shop", bizid);
	}
	else if(int == 48)
	{
		BizInfo[bizid][bizExitX] = -2640.762939;
		BizInfo[bizid][bizExitY] = 1406.682006;
		BizInfo[bizid][bizExitZ] = 906.460937;
		BizInfo[bizid][bizInterior] = 3;
		format(msg, sizeof(msg), "Business ID: %d - Description: Pleasure Domes", bizid);
	}
	UpdateHouseInfo(houseid);
	SCM(playerid, COLOR_INFO, msg);
	return 1;
}*/

stock SetBusinessInterior(playerid, bizid, int)
{
	if(int == 1)
	{
		BizInfo[bizid][bizExitX] = -794.806030;
		BizInfo[bizid][bizExitY] = 491.686004;
		BizInfo[bizid][bizExitZ] = 1376.194946;
		BizInfo[bizid][bizInterior] = 1;
		format(msg, sizeof msg, "Business ID: %d - Description: Marcos Bistro", bizid);
	}
	else if(int == 2)
	{
		BizInfo[bizid][bizExitX] = 1212.019897;
		BizInfo[bizid][bizExitY] = -28.663099;
		BizInfo[bizid][bizExitZ] = 1001.089966;
		BizInfo[bizid][bizInterior] = 3;
		format(msg, sizeof msg, "Business ID: %d - Description: Big Spread Ranch Strip Club", bizid);
	}
	else if(int == 3)
	{
		BizInfo[bizid][bizExitX] = 366.923980;
		BizInfo[bizid][bizExitY] = -72.929359;
		BizInfo[bizid][bizExitY] = 1001.507812;
		BizInfo[bizid][bizInterior] = 10;
		format(msg, sizeof msg, "Business ID: %d - Description: Burger Shot", bizid);
	}
	else if(int == 4)
	{
		BizInfo[bizid][bizExitX] = 365.672974;
		BizInfo[bizid][bizExitY] = -10.713200;
		BizInfo[bizid][bizExitZ] = 1001.869995;
		BizInfo[bizid][bizInterior] = 9;
		format(msg, sizeof msg, "Business ID: %d - Description: Cluckin Bell", bizid);
	}
	else if(int == 5)
	{
		BizInfo[bizid][bizExitX] = 372.351990;
		BizInfo[bizid][bizExitY] = -131.650986;
		BizInfo[bizid][bizExitZ] = 1001.449951;
		BizInfo[bizid][bizInterior] = 5;
		format(msg, sizeof msg, "Business ID: %d - Description: Well Stacked Pizza", bizid);
	}
	else if(int == 6)
	{
		BizInfo[bizid][bizExitX] = 377.098999;
		BizInfo[bizid][bizExitY] = -192.439987;
		BizInfo[bizid][bizExitZ] = 1000.643982;
		BizInfo[bizid][bizInterior] = 17;
		format(msg, sizeof msg, "Business ID: %d - Description: Rusty Brown Dohnuts", bizid);
	}
	else if(int == 7)
	{
		BizInfo[bizid][bizExitX] = 460.099976;
		BizInfo[bizid][bizExitY] = -88.428497;
		BizInfo[bizid][bizExitZ] = 999.621948;
		BizInfo[bizid][bizInterior] = 4;
		format(msg, sizeof msg, "Business ID: %d - Description: Jays Diner", bizid);
	}
	else if(int == 8)
	{
		BizInfo[bizid][bizExitX] = 681.474976;
		BizInfo[bizid][bizExitY] = -451.150970;
		BizInfo[bizid][bizExitZ] = -25.616798;
		BizInfo[bizid][bizInterior] = 1;
		format(msg, sizeof msg, "Business ID: %d - Description: Pump Truck Stop Diner", bizid);
	}
	else if(int == 9)
	{
		BizInfo[bizid][bizExitX] = 476.068328;
		BizInfo[bizid][bizExitY] = -14.893922;
		BizInfo[bizid][bizExitZ] = 1003.695312;
		BizInfo[bizid][bizInterior] = 17;
		format(msg, sizeof msg, "Business ID: %d - Description: Alhambra", bizid);
	}
	else if(int == 10)
	{
		BizInfo[bizid][bizExitX] = 501.980988;
		BizInfo[bizid][bizExitY] = -69.150200;
		BizInfo[bizid][bizExitZ] = 998.834961;
		BizInfo[bizid][bizInterior] = 11;
		format(msg, sizeof msg, "Business ID: %d - Description: Mistys", bizid);

	}
	else if(int == 11)
	{
		BizInfo[bizid][bizExitX] = -227.028000;
		BizInfo[bizid][bizExitY] = 1401.229980;
		BizInfo[bizid][bizExitZ] = 27.769798;
		BizInfo[bizid][bizInterior] = 18;
		format(msg, sizeof msg, "Business ID: %d - Description: Lil' Probe Inn", bizid);
	}
	else if(int == 12)
	{
		BizInfo[bizid][bizExitX] = 204.332993;
		BizInfo[bizid][bizExitY] = -166.694992;
		BizInfo[bizid][bizExitZ] = 1000.578979;
		BizInfo[bizid][bizInterior] = 14;
		format(msg, sizeof msg, "Business ID: %d - Description: EXcLusive", bizid);
	}
	else if(int == 13)
	{
		BizInfo[bizid][bizExitX] = 207.737991;
		BizInfo[bizid][bizExitY] = -109.019997;
		BizInfo[bizid][bizExitZ] = 1005.269958;
		BizInfo[bizid][bizInterior] = 15;
		format(msg, sizeof msg, "Business ID: %d - Description: Binco", bizid);
	}
	else if(int == 14)
	{
		BizInfo[bizid][bizExitX] = 207.054993;
		BizInfo[bizid][bizExitY] = -138.804993;
		BizInfo[bizid][bizExitZ] = 1003.519958;
		BizInfo[bizid][bizInterior] = 3;
		format(msg, sizeof msg, "Business ID: %d - Description: ProLaps", bizid);
	}
	else if(int == 15)
	{
		BizInfo[bizid][bizExitX] = 203.778000;
		BizInfo[bizid][bizExitY] = -48.492397;
		BizInfo[bizid][bizExitZ] = 1001.799988;
		BizInfo[bizid][bizInterior] = 1;
		format(msg, sizeof msg, "Business ID: %d - Description: SubUrban", bizid);
	}
	else if(int == 16)
	{
		BizInfo[bizid][bizExitX] = 226.293991;
		BizInfo[bizid][bizExitY] = -7.431530;
		BizInfo[bizid][bizExitZ] = 1002.259949;
		BizInfo[bizid][bizInterior] = 5;
		format(msg, sizeof msg, "Business ID: %d - Description: Victim", bizid);
	}
	else if(int == 17)
	{
		BizInfo[bizid][bizExitX] = 161.391006;
		BizInfo[bizid][bizExitY] = -93.159156;
		BizInfo[bizid][bizExitZ] = 1001.804687;
		BizInfo[bizid][bizInterior] = 18;
		format(msg, sizeof msg, "Business ID: %d - Description: Zip", bizid);
	}
	else if(int == 18)
	{
		BizInfo[bizid][bizExitX] = 1133.069946;
		BizInfo[bizid][bizExitY] = -9.573059;
		BizInfo[bizid][bizExitZ] = 1000.750000;
		BizInfo[bizid][bizInterior] = 12;
		format(msg, sizeof msg, "Business ID: %d - Description: Small Casino in Redsands West", bizid);
	}
	else if(int == 19)
	{
		BizInfo[bizid][bizExitX] = 833.818970;
		BizInfo[bizid][bizExitY] = 7.418000;
		BizInfo[bizid][bizExitZ] = 1004.179993;
		BizInfo[bizid][bizInterior] = 3;
		format(msg, sizeof msg, "Business ID: %d - Description: Off Track Betting", bizid);
	}
	else if(int == 20)
	{
		BizInfo[bizid][bizExitX] = -100.325996;
		BizInfo[bizid][bizExitY] = -22.816500;
		BizInfo[bizid][bizExitZ] = 1000.741943;
		BizInfo[bizid][bizInterior] = 3;
		format(msg, sizeof msg, "Business ID: %d - Description: Sex Shop", bizid);
	}
	else if(int == 21)
	{
		BizInfo[bizid][bizExitX] = -2239.569824;
		BizInfo[bizid][bizExitY] = 130.020996;
		BizInfo[bizid][bizExitZ] = 1035.419922;
		BizInfo[bizid][bizInterior] = 6;
		format(msg, sizeof msg, "Business ID: %d - Description: Zero's RC Shop", bizid);
	}
	else if(int == 22)
	{
		BizInfo[bizid][bizExitX] = 286.148987;
		BizInfo[bizid][bizExitY] = -40.644398;
		BizInfo[bizid][bizExitZ] = 1001.569946;
		BizInfo[bizid][bizInterior] = 1;
		format(msg, sizeof msg, "Business ID: %d - Description: Ammunation 1", bizid);
	}
	else if(int == 23)
	{
		BizInfo[bizid][bizExitX] = 286.800995;
		BizInfo[bizid][bizExitY] = -82.547600;
		BizInfo[bizid][bizExitZ] = 1001.539978;
		BizInfo[bizid][bizInterior] = 4;
		format(msg, sizeof msg, "Business ID: %d - Description: Ammunation 2", bizid);
	}
	else if(int == 24)
	{
		BizInfo[bizid][bizExitX] = 296.919983;
		BizInfo[bizid][bizExitY] = -108.071999;
		BizInfo[bizid][bizExitZ] = 1001.569946;
		BizInfo[bizid][bizInterior] = 6;
		format(msg, sizeof msg, "Business ID: %d - Description: Ammunation 3", bizid);
	}
	else if(int == 25)
	{
		BizInfo[bizid][bizExitX] = 316.524994;
		BizInfo[bizid][bizExitY] = -167.706985;
		BizInfo[bizid][bizExitZ] = 999.661987;
		BizInfo[bizid][bizInterior] = 6;
		format(msg, sizeof msg, "Business ID: %d - Description: Ammunation 4", bizid);
	}
	else if(int == 26)
	{
		BizInfo[bizid][bizExitX] = -2637.449951;
		BizInfo[bizid][bizExitY] = 1404.629883;
		BizInfo[bizid][bizExitZ] = 906.457947;
		BizInfo[bizid][bizInterior] = 3;
		format(msg, sizeof msg, "Business ID: %d - Description: Jizzys", bizid);
	}
	else if(int == 27)
	{
		BizInfo[bizid][bizExitX] = -25.884499;
		BizInfo[bizid][bizExitY] = -185.868988;
		BizInfo[bizid][bizExitZ] = 1003.549988;
		BizInfo[bizid][bizInterior] = 17;
		format(msg, sizeof msg, "Business ID: %d - Description: 24-7 1", bizid);
	}
	else if(int == 28)
	{
		BizInfo[bizid][bizExitX] = 6.091180;
		BizInfo[bizid][bizExitY] = -29.271898;
		BizInfo[bizid][bizExitZ] = 1003.549988;
		BizInfo[bizid][bizInterior] = 10;
		format(msg, sizeof msg, "Business ID: %d - Description: 24-7 2", bizid);
	}
	else if(int == 29)
	{
		BizInfo[bizid][bizExitX] = -30.946699;
		BizInfo[bizid][bizExitY] = -89.609596;
		BizInfo[bizid][bizExitZ] = 1003.549988;
		BizInfo[bizid][bizInterior] = 18;
		format(msg, sizeof msg, "Business ID: %d - Description: 24-7 3", bizid);
	}
	else if(int == 30)
	{
		BizInfo[bizid][bizExitX] = -25.132599;
		BizInfo[bizid][bizExitY] = -139.066986;
		BizInfo[bizid][bizExitZ] = 1003.549988;
		BizInfo[bizid][bizInterior] = 16;
		format(msg, sizeof msg, "Business ID: %d - Description: 24-7 4", bizid);
	}
	else if(int == 31)
	{
		BizInfo[bizid][bizExitX] = -27.312300;
		BizInfo[bizid][bizExitY] = -29.277599;
		BizInfo[bizid][bizExitZ] = 1003.549988;
		BizInfo[bizid][bizInterior] = 4;
		format(msg, sizeof msg, "Business ID: %d - Description: 24-7 5", bizid);
	}
	else if(int == 32)
	{
		BizInfo[bizid][bizExitX] = -26.691599;
		BizInfo[bizid][bizExitY] = -55.714897;
		BizInfo[bizid][bizExitZ] = 1003.549988;
		BizInfo[bizid][bizInterior] = 6;
		format(msg, sizeof msg, "Business ID: %d - Description: 24-7 6", bizid);
  	}
	else if(int == 33)
	{
		BizInfo[bizid][bizExitX] = 1494.430053;
		BizInfo[bizid][bizExitY] = 1305.63004;
		BizInfo[bizid][bizExitZ] = 1093.290039;
		BizInfo[bizid][bizInterior] = 3;
		format(msg, sizeof msg, "Business ID: %d - Description: Advertising/Phone Network", bizid);
  	}
	else if(int == 34)
	{
		BizInfo[bizid][bizExitX] = 965.1851;
		BizInfo[bizid][bizExitY] = -53.2832;
		BizInfo[bizid][bizExitZ] = 1001.1246;
		BizInfo[bizid][bizInterior] = 3;
		format(msg, sizeof msg, "Business ID: %d - Description: Bothel", bizid);
	}
	else if(int == 35)
	{
		BizInfo[bizid][bizExitX] = 2018.0131;
		BizInfo[bizid][bizExitY] = 1017.8541;
		BizInfo[bizid][bizExitZ] = 996.8750;
		BizInfo[bizid][bizInterior] = 10;
		format(msg, sizeof msg, "Business ID: %d - Description: Four Dragons Casino", bizid);
	}
	else if(int == 36)
	{
		BizInfo[bizid][bizExitX] = 617.5380;
		BizInfo[bizid][bizExitY] = -1.9900;
		BizInfo[bizid][bizExitZ] = 1000.6829;
		BizInfo[bizid][bizInterior] = 1;
		format(msg, sizeof msg, "Business ID: %d - Description: Bikers Garage", bizid);
	}
	else if(int == 37)
	{
		BizInfo[bizid][bizExitX] = 772.112000;
		BizInfo[bizid][bizExitY] = -3.898650;
		BizInfo[bizid][bizExitZ] = 1000.687988;
		BizInfo[bizid][bizInterior] = 5;
		format(msg, sizeof msg, "Business ID: %d - Description: Ganton Gym", bizid);
	}
	else if(int == 38) // Tattoo 1
	{
		BizInfo[bizid][bizExitX] = -204.439987;
		BizInfo[bizid][bizExitY] = -8.469599;
		BizInfo[bizid][bizExitZ] = 1002.273437;
		BizInfo[bizid][bizInterior] = 17;
		format(msg, sizeof msg, "Business ID: %d - Description: Tattoo 1", bizid);
	}
	else if(int == 39) // Tattoo 2
	{
		BizInfo[bizid][bizExitX] = -204.439987;
		BizInfo[bizid][bizExitY] = -43.652496;
		BizInfo[bizid][bizExitZ] = 1002.273437;
		BizInfo[bizid][bizInterior] = 3;
		format(msg, sizeof msg, "Business ID: %d - Description: Tattoo 2", bizid);
	}
	else if(int == 40) // Tattoo 3
	{
		BizInfo[bizid][bizExitX] = -204.439987;
		BizInfo[bizid][bizExitY] = -26.453998;
		BizInfo[bizid][bizExitZ] = 1002.273437;
		BizInfo[bizid][bizInterior] = 12;
		format(msg, sizeof msg, "Business ID: %d - Description: Tattoo 3", bizid);
	}
	else if(int == 41)
	{
		BizInfo[bizid][bizExitX] = 318.564972;
		BizInfo[bizid][bizExitY] = 1118.209961;
		BizInfo[bizid][bizExitZ] = 1083.979980;
		BizInfo[bizid][bizInterior] = 5;
		format(msg, sizeof msg, "Business ID: %d - Description: Crack Den", bizid);
	}
	else if(int == 42)
	{
		BizInfo[bizid][bizExitX] = -2240.468505;
		BizInfo[bizid][bizExitY] = 137.060440;
		BizInfo[bizid][bizExitZ] = 1035.414062;
		BizInfo[bizid][bizInterior] = 6;
		format(msg, sizeof msg, "Business ID: %d - Description: Zero RC shop", bizid);
	}
	else if(int == 43)
	{
		BizInfo[bizid][bizExitX] = 245.2307;
		BizInfo[bizid][bizExitY] = 304.7632;
		BizInfo[bizid][bizExitZ] = 999.1484;
		BizInfo[bizid][bizInterior] = 0;
		format(msg, sizeof msg, "Business ID: %d - Description: Record Studio", bizid);
	}
	else if(int == 44)
	{
		BizInfo[bizid][bizExitX] = 1506.24609375;
		BizInfo[bizid][bizExitY] = -1815.40039062;
		BizInfo[bizid][bizExitZ] = -43.72590637;
		BizInfo[bizid][bizInterior] = 0;
		format(msg, sizeof msg, "Business ID: %d - Description: LS Court Room", bizid);
	}
	else if(int == 45)
	{
		BizInfo[bizid][bizExitX] = 963.418762;
		BizInfo[bizid][bizExitY] = 2108.292480;
		BizInfo[bizid][bizExitZ] = 1011.030273;
		BizInfo[bizid][bizInterior] = 1;
		format(msg, sizeof(msg), "Business ID: %d - Description: Meat Factory", bizid);
	}
	else if(int == 46)
	{
		BizInfo[bizid][bizExitX] = -2154.34155;
		BizInfo[bizid][bizExitY] = 618.79169;
		BizInfo[bizid][bizExitZ] = 1055.45166;
		BizInfo[bizid][bizInterior] = 1;
		format(msg, sizeof(msg), "Business ID: %d - Description: Betting Place", bizid);
	}
	else if(int == 47)
	{
		BizInfo[bizid][bizExitX] = 418.6547;
		BizInfo[bizid][bizExitY] = -83.6987;
		BizInfo[bizid][bizExitZ] = 1001.8047;
		BizInfo[bizid][bizInterior] = 3;
		format(msg, sizeof(msg), "Business ID: %d - Description: Barber Shop", bizid);
	}
	else if(int == 48)
	{
		BizInfo[bizid][bizExitX] = -2640.762939;
		BizInfo[bizid][bizExitY] = 1406.682006;
		BizInfo[bizid][bizExitZ] = 906.460937;
		BizInfo[bizid][bizInterior] = 3;
		format(msg, sizeof(msg), "Business ID: %d - Description: Pleasure Domes", bizid);
	}
	UpdateBizInfo(bizid);
	SCM(playerid, COLOR_INFO, msg);
	return 1;
}

stock OnBizGiveMoney(cash, owner[])
{
	format(query, sizeof(query), "UPDATE `users` SET `cash` = %d WHERE `name` = '%s'", cash, owner);
	mysql_function_query(dbHandle, query, false, "", "");
}

stock OwnBusiness(playerid)
{
	if(PlayerInfo[playerid][pBizKey] != -1 && !strcmp(GetName(playerid), BizInfo[PlayerInfo[playerid][pBizKey]][bizOwner]))
		return true;
	return false;
}

stock NearBusiness(playerid)
{
	new key = PlayerInfo[playerid][pBizKey];
	if(PlayerToPoint(2.0,playerid, BizInfo[key][bizPosX], BizInfo[key][bizPosY], BizInfo[key][bizPosZ]))
	{
		return true;
	}
	else
	{
		SCM(playerid, COLOR_RED, "You need to be near the entrance.");
		return false;
	}
}

stock InBusiness(playerid)
{
	new key = PlayerInfo[playerid][pBizKey];
	new workon = PlayerInfo[playerid][pWorkOn];
	if(BizEntered[playerid] == key && GetWorld(playerid) == key || BizEntered[playerid] == workon && GetWorld(playerid) == workon)
	{
		return true;
	}
	else
	{
		SCM(playerid, COLOR_RED, "You must to be inside your business.");
		return false;
	}
}

stock Float:GetArmour(playerid)
{
	new Float:armour;
	GetPlayerArmour(playerid, armour);
	return armour;
}

stock GetRankName(playerid)
{
	new ranktext[MAX_RANK_NAME];
	switch(PlayerInfo[playerid][pRank])
	{
		case 1: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank1]);
		case 2: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank2]);
		case 3: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank3]);
		case 4: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank4]);
		case 5: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank5]);
		case 6: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank6]);
		case 7: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank7]);
		case 8: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank8]);
		case 9: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank9]);
		case 10: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank10]);
		case 11: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank11]);
		case 12: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank12]);
		case 13: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank13]);
		case 14: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank14]);
		case 15: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank15]);
		case 16: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank16]);
		case 17: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank17]);
		case 18: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank18]);
		case 19: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank19]);
		case 20: format(ranktext, MAX_RANK_NAME, "%s", Factions[PlayerInfo[playerid][pFaction]][fRank20]);
	}
	return ranktext;
}

stock ShowBadgeToPlayer(playerid, toplayerid)
{
	new szFactionName[64];
	format(szFactionName, 32, "%s", Factions[PlayerInfo[playerid][pFaction]][fName]);
	if(PlayerNearPlayer(3.0, playerid, toplayerid))
	{
		SCM(toplayerid, COLOR_LSPDNEW, "_______________________");
		SCM(toplayerid, COLOR_WHITE, szFactionName);
		format(szFactionName, 1+MAX_PLAYER_NAME+MAX_RANK_NAME, "%s - %s", GetRankName(playerid), GetNameWithMask(playerid));
		SCM(toplayerid, COLOR_WHITE, szFactionName);
		format(szFactionName, 21, "Badge number: %d", PlayerInfo[playerid][pBadgeNumber]);
		SCM(toplayerid, COLOR_WHITE, szFactionName);
		SCM(toplayerid, COLOR_LSPDNEW, "_______________________");
		if(PlayerInfo[playerid][pSex] == 1)
			ActionMessageToPlayer(playerid,toplayerid,20.0,"takes out his badge shows to");
		else
			ActionMessageToPlayer(playerid,toplayerid,20.0,"takes out his badge shows to");
	}
	else return NotNearPlayerMSG(playerid);
	return 1;
}

stock GetPlayerLastName(playerid)
{
	new namestring[2][MAX_PLAYER_NAME];
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid,name,MAX_PLAYER_NAME);
	split(name, namestring, '_');
	return namestring[1];
}

stock split(const strsrc[], strdest[][], delimiter)
{
    new i, li;
    new aNum;
    new len;
    while(i <= strlen(strsrc))
    {
        if(strsrc[i] == delimiter || i == strlen(strsrc))
        {
            len = strmid(strdest[aNum], strsrc, li, i, 128);
            strdest[aNum][len] = 0;
            li = i+1;
            aNum++;
        }
        i++;
    }
    return 1;
}

public ActionMessageToPlayer(playerid,targetid,Float:radius,message[])
{
	new str[128];
	format(str, sizeof(str), "%s", message);
	format(msg, sizeof(msg), "* %s %s %s", GetNameWithMask(playerid), str, GetNameWithMask(targetid));
	ProxDetector(20.0, playerid, msg, COLOR_PURPLE);
	return 1;
}

stock GetShortFactionName(factionid)
{
	new name[128];
	if(factionid == 1)
	name = "LSPD";
	if(factionid == 2)
	name = "LSFD";
	if(factionid == 3)
	name = "SASD";
	if(factionid == 4)
	name = "DOC";
	if(factionid == 5)
	name = "GOVERNMENT";
	if(factionid == 6)
	name = "NEWS";
	if(factionid == 7)
	name = "GHETTO BOYZ";
	return name;
}

stock GetJobName(jobid)
{
	new job[64];
	if(jobid == DRUGDEALER)
	{
		job = "Drug dealer";
	}
	else
	{
		format(job, sizeof(job), "%s", JobsInfo[jobid][jobName]);
	}
	return job;
}

stock GetJobRank(playerid)
{
	new ranktext[MAX_RANK_NAME];
	switch(PlayerInfo[playerid][pJobRank])
	{
		case 0: format(ranktext, MAX_RANK_NAME, "N/A");
		case 1: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[PlayerInfo[playerid][pJob]][jobRank1]);
		case 2: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[PlayerInfo[playerid][pJob]][jobRank2]);
		case 3: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[PlayerInfo[playerid][pJob]][jobRank3]);
		case 4: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[PlayerInfo[playerid][pJob]][jobRank4]);
		case 5: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[PlayerInfo[playerid][pJob]][jobRank5]);
		case 6: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[PlayerInfo[playerid][pJob]][jobRank6]);
		case 7: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[PlayerInfo[playerid][pJob]][jobRank7]);
		case 8: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[PlayerInfo[playerid][pJob]][jobRank8]);
		case 9: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[PlayerInfo[playerid][pJob]][jobRank9]);
		case 10: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[PlayerInfo[playerid][pJob]][jobRank10]);
	}
	return ranktext;
}

stock SendFactionMessage(faction, color, string[])
{
	foreach(Player, i)
	{
		if(PlayerInfo[i][pFaction] == faction)
		{
			SCM(i, color, string);
		}
	}
	return 1;
}

stock SendAllFactionsMessage(color, string[])
{
	for(new z = 0; z < MAX_FACTIONS; z++)
	{
		foreach(Player, i)
		{
			if(PlayerInfo[i][pFaction] == z)
			{
				SCM(i, color, string);
			}
		}
	}
	return 1;
}

stock SafeResetPlayerWeapons(playerid)
{
	ResetPlayerWeapons(playerid);
	for(new i = 0; i < 47; i++)
		Weapons[playerid][i] = 0;
	return 1;
}

stock isLeader(playerid)
{
	if(PlayerInfo[playerid][pRank] == Factions[PlayerInfo[playerid][pFaction]][fLeaderRank])
		return true;
	return false;
}

stock AddCriminalRecord(playerid, szCharge[], iOfficer)
{
	if(strlen(szCharge) < 5)
	{
		SCM(iOfficer, COLOR_RED, "You need to enter more than 5 characters.");
		return 0;
	}
	else
	{
		format(query, sizeof(query),"INSERT INTO `criminalrecords` (userid, charge, date, officer) VALUES(%d, '%s', '%s', %d)", PlayerInfo[playerid][pDatabaseID], szCharge, GetFullDate(), PlayerInfo[iOfficer][pDatabaseID]);
		mysql_function_query(dbHandle, query, false, "", "");
		return 1;
	}
}

stock FindVehicleByPlate(plate[])
{
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		if(!strcmp(plate, VehicleInfo[i][carPlate], true) && VehicleInfo[i][carOwned] == 1 && VehicleInfo[i][carSpawned] == 1)
		{
			return i;
		}
	}
	return 0;
}

stock PutPlayerInCell(playerid)
{
	new cell = randomEx(1, 6);
	switch(cell)
	{
		case 1:
		{
			SetPlayerPos(playerid, 1583.4746,-1687.9338,1090.5859);
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1583.4746,-1687.9338,1090.5859, 1.0, -1, -1, -1, -1, -1, -1);
		}
		case 2:
		{
			SetPlayerPos(playerid, 1583.5961,-1684.2482,1090.5859);
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1583.5961,-1684.2482,1090.5859, 1.0, -1, -1, -1, -1, -1, -1);
		}
		case 3:
		{
			SetPlayerPos(playerid, 1584.0823,-1680.5123,1090.5859);
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1584.0823,-1680.5123,1090.5859, 1.0, -1, -1, -1, -1, -1, -1);
		}
		case 4:
		{
			SetPlayerPos(playerid, 1583.8608,-1676.9052,1090.5859);
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1583.8608,-1676.9052,1090.5859, 1.0, -1, -1, -1, -1, -1, -1);
		}
		case 5:
		{
		    SetPlayerPos(playerid, 1583.9215,-1673.2192,1090.5859);
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1583.9215,-1673.2192,1090.5859, 1.0, -1, -1, -1, -1, -1, -1);
		}
	}
	SCMEx(playerid, COLOR_YELLOWG, "SERVER: You've been assigned to cell A%d as of now. Cell assigning upon connect.", cell);
	return 1;
}

stock PutPlayerInPrisonCell(playerid)
{
	new cell = randomEx(1, 13);
	switch(cell)
	{
		case 1:
		{
			SetPlayerPos(playerid, 1778.4320,-1581.6472,1734.9430);
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1778.4320,-1581.6472,1734.9430, 1.0, -1, -1, -1, -1, -1, -1);
		}
		case 2:
		{
			SetPlayerPos(playerid, 1774.2881,-1582.2438,1734.9430);
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1774.2881,-1582.2438,1734.9430, 1.0, -1, -1, -1, -1, -1, -1);
		}
		case 3:
		{
			SetPlayerPos(playerid, 1769.9882,-1582.2438,1734.9430);
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1769.9882,-1582.2438,1734.9430, 1.0, -1, -1, -1, -1, -1, -1);
		}
		case 4:
		{
			SetPlayerPos(playerid, 1765.7943,-1582.0508,1734.9430);
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1765.7943,-1582.0508,1734.9430, 1.0, -1, -1, -1, -1, -1, -1);
		}
		case 5:
		{
			SetPlayerPos(playerid, 1761.5165,-1582.1844,1734.9430);
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1761.5165,-1582.1844,1734.9430, 1.0, -1, -1, -1, -1, -1, -1);
		}
		case 6:
		{
			SetPlayerPos(playerid, 1757.1665,-1582.1844,1734.9430);
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1757.1665,-1582.1844,1734.9430, 1.0, -1, -1, -1, -1, -1, -1);
		}
		case 7:
		{
			SetPlayerPos(playerid, 1778.5205,-1564.2029,1734.9430);
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1778.5205,-1564.2029,1734.9430, 1.0, -1, -1, -1, -1, -1, -1);
		}
		case 8:
		{
			SetPlayerPos(playerid, 1774.1705,-1564.2029,1734.9430);
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1774.1705,-1564.2029,1734.9430, 1.0, -1, -1, -1, -1, -1, -1);
		}
		case 9:
		{
			SetPlayerPos(playerid, 1769.8306,-1564.2029,1734.9430);
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1769.8306,-1564.2029,1734.9430, 1.0, -1, -1, -1, -1, -1, -1);
		}
		case 10:
		{
			SetPlayerPos(playerid, 1765.6345,-1564.3988,1734.9430);
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1765.6345,-1564.3988,1734.9430, 1.0, -1, -1, -1, -1, -1, -1);
		}
		case 11:
		{
			SetPlayerPos(playerid, 1761.2845,-1564.3988,1734.9430);
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1761.2845,-1564.3988,1734.9430, 1.0, -1, -1, -1, -1, -1, -1);
		}
		case 12:
		{
			SetPlayerPos(playerid, 1756.9346,-1564.3988,1734.9430);
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1756.9346,-1564.3988,1734.9430, 1.0, -1, -1, -1, -1, -1, -1);
		}
	}
	SCMEx(playerid, COLOR_YELLOWG, "SERVER: You've been assigned to cell A%d as of now. Cell assigning upon connect.", cell);
	return 1;
}

stock CreateStrip(Float:x, Float:y, Float:z, Float:angle)
{
	new object;
	object = CreateDynamicObject(2899, x, y, z-0.9, 0, 0, angle-90);
	SpikeInfo[object][sCreated] = 1;
	SpikeInfo[object][sX] = x;
	SpikeInfo[object][sY] = y;
	SpikeInfo[object][sZ] = z-0.9;
	SpikeInfo[object][sObject] = object;
	return 1;
}

stock DeleteAllStrip()
{
	for(new i = 0; i < MAX_OBJECTS; i++)
	{
		if(SpikeInfo[i][sCreated] == 1)
		{
			SpikeInfo[i][sCreated] = 0;
			SpikeInfo[i][sX] = 0.0;
			SpikeInfo[i][sY] = 0.0;
			SpikeInfo[i][sZ] = 0.0;
			DestroyDynamicObject(SpikeInfo[i][sObject]);
  	    }
	}
	return 0;
}

stock DeleteClosestStrip(playerid)
{
	for(new i = 0; i < MAX_OBJECTS; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.0, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ]))
		{
			if(SpikeInfo[i][sCreated] == 1)
			{
				SpikeInfo[i][sCreated]=0;
				SpikeInfo[i][sX]=0.0;
				SpikeInfo[i][sY]=0.0;
				SpikeInfo[i][sZ]=0.0;
				DestroyDynamicObject(SpikeInfo[i][sObject]);
				return 1;
			}
		}
	}
	return 0;
}

stock CountHouseTrunk(house)
{
	new count;
	for(new i = 0; i < MAX_HOUSE_WEAPONS; i++)
	{
		if(HouseInfo[house][hWeapon][i] != 0)
		{
			count++;
		}
	}
	return count;
}


stock PlaySoundForAll(soundid, Float:x, Float:y, Float:z)
{
	foreach(Player, i)
	{
		if(PlayerToPoint(20.0, i, x, y ,z))
		{
			PlayerPlaySound(i, soundid, x, y, z);
		}
	}
}

stock PlayASoundForAll(playerid, url[])
{
	foreach(Player, i)
	{
		if(PlayerToPoint(3000.0, i))
		{
			PlayAudioStreamForPlayer(i, url, GetFloatVar(playerid, "BoomBoxX"), GetFloatVar(playerid, "BoomBoxY"), GetFloatVar(playerid, "BoomBoxZ"), 50.0, 1);
		}
	}
}


stock VehicleTrunk(vehicle, bool:toggle)
{
	GetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet,boot,objective);
	if(toggle)
	{
		SetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_OFF,objective);
		VehicleInfo[vehicle][carTrunkLock] = 1;
	}
	else
	{
		SetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);
		VehicleInfo[vehicle][carTrunkLock] = 0;
	}
	return 1;
}

stock SCMEx(playerid, colour, const fmat[], va_args<>)
{
	new str[145];
	va_format(str, sizeof (str), fmat, va_start<3>);
	return SendClientMessage(playerid, colour, str);
}

Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ,  Float:ObjX, Float:ObjY, Float:ObjZ,  Float:FrX, Float:FrY, Float:FrZ)
{

    new Float:TGTDistance;

    // get distance from camera to target
    TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));

    new Float:tmpX, Float:tmpY, Float:tmpZ;

    tmpX = FrX * TGTDistance + CamX;
    tmpY = FrY * TGTDistance + CamY;
    tmpZ = FrZ * TGTDistance + CamZ;

    return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}

stock IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius)
{
    new Float:cx,Float:cy,Float:cz,Float:fx,Float:fy,Float:fz;
    GetPlayerCameraPos(playerid, cx, cy, cz);
    GetPlayerCameraFrontVector(playerid, fx, fy, fz);
    return (radius >= DistanceCameraTargetToLocation(cx, cy, cz, x, y, z, fx, fy, fz));
}

stock HasAttachedObject(playerid, objectid)
{
	for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
	{
		if(PoliceObjects[playerid][i] == objectid)
			return true;
	}
	return false;
}

stock SendPMToPlayer(playerid, PID, text[])
{
	if(strlen(text) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		format(msg, sizeof(msg), "(( PM received from %s(ID:%d): %.*s ... ))", GetNameEx(playerid), playerid, pos, (text));
		SCM(PID, COLOR_PMIN, msg);
		format(msg, sizeof(msg), "(( PM received from %s(ID:%d): ... %s ))", GetNameEx(playerid), playerid, (text)[pos]);
		SCM(PID, COLOR_PMIN, msg);
		format(msg, sizeof(msg), "(( PM sent to %s(ID:%d): %.*s ... ))", GetNameEx(PID), PID, pos, (text));
		SCM(playerid, COLOR_PMOUT, msg);
		format(msg, sizeof(msg), "(( PM sent to %s(ID:%d): ... %s ))", GetNameEx(PID), PID, (text)[pos]);
		SCM(playerid, COLOR_PMOUT, msg);
	}
	else
	{
		format(msg, sizeof(msg), "(( PM received from %s(ID:%d): %s ))", GetNameEx(playerid), playerid, (text));
		SCM(PID, COLOR_PMIN, msg);
		format(msg, sizeof(msg), "(( PM sent to %s(ID:%d): %s ))", GetNameEx(PID), PID, (text));
		SCM(playerid, COLOR_PMOUT, msg);
	}
	foreach(Player, i)
	{
		if(GetIntVar(i, "PmSpy") == playerid && GetIntVar(i, "IsSpying") == 1 || GetIntVar(i, "IsSpyingAll") == 1)
		{
			if(strlen(text) > MAXLEN)
			{
				new pos = MAXLEN;
				if(pos < MAXLEN-1) pos = MAXLEN;
				format(msg, sizeof(msg), "(( PM Spy %s towards %s(ID:%d): %.*s ... ))", GetNameEx(playerid), GetNameEx(PID), PID, pos, (text));
				SCM(i, COLOR_PMIN, msg);
				format(msg, sizeof(msg), "(( PM Spy %s towards %s(ID:%d): ... %s ))", GetNameEx(playerid), GetNameEx(PID), PID, (text)[pos]);
				SCM(i, COLOR_PMIN, msg);
			}
			else
			{
				format(msg, sizeof(msg), "(( PM Spy %s towards %s(ID:%d): %s ))", GetNameEx(playerid), GetNameEx(PID), PID, text);
				SCM(i, COLOR_PMIN, msg);
			}
		}
	}
	return 1;
}

forward RemovePlayerWeapon(playerid, weaponid);
public RemovePlayerWeapon(playerid, weaponid)
{
  new plyWeapons[12], plyAmmo[12];
  for(new slot = 0; slot != 12; slot++)
  {
    new wep, ammo;
    GetPlayerWeaponData(playerid, slot, wep, ammo);
    if(wep != weaponid)
    {
      GetPlayerWeaponData(playerid, slot, plyWeapons[slot], plyAmmo[slot]);
    }
  }
  SafeResetPlayerWeapons(playerid);
  for(new slot = 0; slot != 12; slot++)
  {
    GiveWeapon(playerid, plyWeapons[slot], plyAmmo[slot]);
  }
  return 1;
}

stock SetLastCaller(playerid)
{
	for(new i = 0; i < sizeof(CallInfo); i++)
	{
		if(CallInfo[i][callTaken] == 0)
		{
			format(CallInfo[i][callType], 64, "%s", GetStringVar(playerid, "callType"));
			format(CallInfo[i][callSituation], 64, "%s", GetStringVar(playerid, "callSituation"));
			format(CallInfo[i][callLocation], 64, "%s", GetStringVar(playerid, "callLocation"));
			format(CallInfo[i][callTrace], 64, "%s", GetStringVar(playerid, "callTrace"));
			format(CallInfo[i][callDate], 64, "%s", GetFullDate());
			CallInfo[i][callID] = randomEx(1234, 9788);
			CallInfo[i][callCaller] = playerid;
			CallInfo[i][callTaken] = 1;
			return 1;
		}
	}
	if(ToLastCallSlot < 11)
	{
		format(CallInfo[ToLastCallSlot][callType], 64, "%s", GetStringVar(playerid, "callType"));
		format(CallInfo[ToLastCallSlot][callSituation], 64, "%s", GetStringVar(playerid, "callSituation"));
		format(CallInfo[ToLastCallSlot][callLocation], 64, "%s", GetStringVar(playerid, "callLocation"));
		format(CallInfo[ToLastCallSlot][callTrace], 64, "%s", GetStringVar(playerid, "callTrace"));
		format(CallInfo[ToLastCallSlot][callDate], 64, "%s", GetFullDate());
		CallInfo[ToLastCallSlot][callID] = randomEx(1234, 9788);
		CallInfo[ToLastCallSlot][callCaller] = playerid;
		CallInfo[ToLastCallSlot][callTaken] = 1;
		ToLastCallSlot++;
		if(ToLastCallSlot == 10)
			ToLastCallSlot = 0;
	}
	return 1;
}

stock SetLastArrest(playerid, suspect, time)
{
	for(new i = 0; i < sizeof(ArrestInfo); i++)
	{
		if(ArrestInfo[i][arrestTaken] == 0)
		{
			format(ArrestInfo[i][arrestDate], 64, "%s", GetFullDate());
			format(ArrestInfo[i][arrestLocation], 64, "%s", GetStringVar(playerid, "ArrestLocation"));
			ArrestInfo[i][arrestSuspect] = suspect;
			ArrestInfo[i][arrestOfficer] = playerid;
			ArrestInfo[i][arrestTime] = time;
			ArrestInfo[i][arrestTaken] = 1;
			return 1;
		}
	}
	if(ToLastCallSlot < 31)
	{
		format(ArrestInfo[ToLastArrestSlot][arrestDate], 64, "%s", GetFullDate());
		format(ArrestInfo[ToLastArrestSlot][arrestLocation], 64, "%s", GetStringVar(playerid, "ArrestLocation"));
		ArrestInfo[ToLastArrestSlot][arrestSuspect] = suspect;
		ArrestInfo[ToLastArrestSlot][arrestOfficer] = playerid;
		ArrestInfo[ToLastArrestSlot][arrestTime] = time;
		ArrestInfo[ToLastArrestSlot][arrestTaken] = 1;
		ToLastArrestSlot++;
		if(ToLastArrestSlot == 30)
			ToLastArrestSlot = 0;
	}
	return 1;
}

stock GetFullDate()
{
	new date[128];
	new year, month, day, hour, minute, second;
	getdate(year, month, day);
	gettime(hour, minute, second);
	format(date, sizeof(date), "%d-%02d-%02d %02d:%02d:%02d", year, month, day, hour, minute, second);
	return date;
}

stock GetHouseLocation(playerid)
{
	new string[64];
	if(PlayerInfo[playerid][pHouseKey] == -1)
		string = "Unknown";
	else
		GetCoords2DZone(HouseInfo[PlayerInfo[playerid][pHouseKey]][hEntranceX],HouseInfo[PlayerInfo[playerid][pHouseKey]][hEntranceY], string, MAX_ZONE_NAME);
	return string;
}

stock isHouseDoor(model)
{
	if(model == 1493 || model == 1494 || model == 1495 || model == 1496 || model == 1497 || model == 1498 || model == 1500 || model == 1501)
	{
		return 1;
	}
	return 0;
}

stock DoDamage(targetid, bodypart, weaponid)
{
	static bodyparttext[16],DamageType,Float:IncreasedDamage,Float:health,Float:armour;
	GetPlayerHealth(targetid, health);
	GetPlayerArmour(targetid, armour);
	switch(bodypart) {
	case 1: bodyparttext = "BODY_PART_HEAD",DamageType = 1;
	case 2: bodyparttext = "BODY_PART_TORSO",DamageType = 2;
	case 3: bodyparttext = "BODY_PART_LEGS",DamageType = 3; }
	switch(weaponid) {
		case 23: IncreasedDamage = SDPistolDMG; // SD Pistol
		case 24: IncreasedDamage = DeagleDMG; // Desert Eagle
		case 25: IncreasedDamage = ShotgunDMG; // Shotgun
		case 28: IncreasedDamage = UziDMG; // UZI
		case 29: IncreasedDamage = MP5DMG; // UZI
		case 30: IncreasedDamage = AK47DMG; // AK47
		case 31: IncreasedDamage = M4A1DMG; // M4A1
		case 32: IncreasedDamage = Tec9DMG; // Tec9
		case 33: IncreasedDamage = CountryRifleDMG; // Country Rifle
		case 34: IncreasedDamage = SniperRifleDMG; // Country Rifle
	}
	if(DamageType == 2 || DamageType == 3)
	{
		IncreasedDamage += 4.0;
		SetPlayerHealth(targetid, health-5);
	}
	if(health-IncreasedDamage == 0 || health-IncreasedDamage < 0) { MakePlayerWounded(targetid); }
	return 1;
}

stock IsPlayerAiming(playerid) {
	new anim = GetPlayerAnimationIndex(playerid);
	if (((anim >= 1160) && (anim <= 1163)) || (anim == 1167) || (anim == 1365) ||
	(anim == 1643) || (anim == 1453) || (anim == 220)) return 1;
	return 0;
}

stock TruckTaken(vehicle)
{
	foreach(Player, i)
	{
		if(TruckVehicle[i] == vehicle)
			return true;
	}
	return false;
}

stock SetTruckStage(playerid, stage)
{
	SetIntVar(playerid, "TruckStage", stage);
	SetTruckerText(playerid);
	return 1;
}

stock GetTruckStage(playerid)
{
	return GetIntVar(playerid, "TruckStage");
}

stock HideTruckText(playerid)
{
	HideTextDraw(playerid, TruckerDraw[playerid]);
	return 1;
}

stock ShowTruckText(playerid)
{
	ShowTextDraw(playerid, TruckerDraw[playerid]);
	return 1;
}

stock GetMaxTruckComps(vehicle)
{
	new model = GetVehicleModel(vehicle);
	if(model == 422)
		return BOBCAT_COMPS;
	if(model == 543)
		return SADLER_COMPS;
	if(model == 554)
		return YOSEMITE_COMPS;
	if(model == 609)
		return BOXVILLE_COMPS;
	if(model == 456)
		return YANKEE_COMPS;
	if(model == 403)
		return LINERUNNER_COMPS;
	return 0;
}

stock SetTruckerText(playerid)
{
	new vehicle = GetPlayerVehicleID(playerid);
	if(GetTruckStage(playerid) == 1) //Show destination
	{
		format(msg, sizeof(msg), "~w~OBTAIN %s ~y~%s.~n~~w~THE CURRENT DESTINATION: ~r~%s~n~/DROPOFF ~w~TO END THE MISSION EARLIER.", GetStringVar(playerid, "TruckGather"), GetStringVar(playerid, "TruckDrop"), GetStringVar(playerid, "TruckDest"));
	}
	if(GetTruckStage(playerid) == 2) //Loading up
	{
		format(msg, sizeof(msg), "~w~LOADING %s FROM ~r~%s.~n~~y~%d SEC ~w~REMAINING, ~g~%d ~w~COMPONENTS", GetStringVar(playerid, "TruckGather"), GetStringVar(playerid, "TruckDest"), LoadingTruck{playerid}, TruckComps[vehicle]);
	}
	if(GetTruckStage(playerid) == 3) //Max capacity
	{
		if(TruckComps[TruckVehicle[playerid]] < GetMaxTruckComps(TruckVehicle[playerid]))
		{
			format(msg, sizeof(msg), "~w~DELIVERS %s TO ~y~%s.", GetStringVar(playerid, "TruckGather"), GetStringVar(playerid, "TruckDrop"));
		}
		else
		{
			format(msg, sizeof(msg), "~w~DELIVERS %s TO ~y~%s.~n~~r~YOU HAVE REACHED THE MAXIMUM CAPACITY.", GetStringVar(playerid, "TruckGather"), GetStringVar(playerid, "TruckDrop"));
		}
	}
	if(GetTruckStage(playerid) == 4) //Dropping off
	{
		format(msg, sizeof(msg), "~w~DELIVERS %s COMPONENTS TO ~r~%s.~n~~y~%d COMPONENTS ~w~REMAINING.", GetStringVar(playerid, "TruckGather"), GetStringVar(playerid, "TruckDrop"), TruckComps[GetPlayerVehicleID(playerid)]);
	}
	if(GetTruckStage(playerid) == 5) //Returning the truck to it's original location.
	{
		format(msg, sizeof(msg), "~y~BRING THE TRUCK TO DEPOT.");
	}
	//===============Trucker Specialist Stuff for the Trailer===============//
	if(GetTruckStage(playerid) == 6) //Has to attach a trailer before the gather location pops up.
	{
		format(msg, sizeof(msg), "~r~ATTACH A TRAILER TO WORK.");
	}
	//===============Trucker Specialist Stuff for the Trailer===============//
	TextDrawSetString(TruckerDraw[playerid], msg);
	return 1;
}

stock SetRandomDestination(playerid)
{
	new vehicle = GetPlayerVehicleID(playerid);
	if(IsATruckFour(vehicle) && !IsTrailerAttachedToVehicle(vehicle))
	{
		SetTruckStage(playerid, 6);
	}
	else
	{
		new drop, gather, item;
		drop = random(sizeof(TruckDropInfo));
		gather = random(sizeof(TruckInfo));
		item = random(sizeof(TruckItems));
		GatherX[playerid] = TruckInfo[gather][tDesX];
		GatherY[playerid] = TruckInfo[gather][tDesY];
		GatherZ[playerid] = TruckInfo[gather][tDesZ];
		DropOffX[playerid] = TruckDropInfo[drop][tDesX];
		DropOffY[playerid] = TruckDropInfo[drop][tDesY];
		DropOffZ[playerid] = TruckDropInfo[drop][tDesZ];
		SetStringVar(playerid, "TruckGather", TruckItems[item][tGather]);
		SetStringVar(playerid, "TruckDrop", TruckDropInfo[drop][tDestination]);
		SetStringVar(playerid, "TruckDest", TruckInfo[gather][tDestination]);
		SetTruckStage(playerid, 1);
		SetCheckPoint(playerid, TRUCKLOAD, GatherX[playerid], GatherY[playerid], GatherZ[playerid], 9.0);
	}
	return 1;
}

stock TruckCompatible(playerid, vehicle)
{
	new rank = PlayerInfo[playerid][pJobRank];
	if(IsATruckOne(vehicle) && rank >= TRUCKER_RANK1 || IsATruckTwo(vehicle) && rank >= TRUCKER_RANK2 || IsATruckThree(vehicle) && rank >= TRUCKER_RANK3 || IsATruckFour(vehicle) && rank >= TRUCKER_RANK4)
	{
		return true;
	}
	return false;
}

stock GetTruckRank(vehicle)
{
	new model = GetVehicleModel(vehicle);
	if(model == 422)
		return TRUCKER_RANK1;
	if(model == 456)
		return TRUCKER_RANK2;
	if(model == 524)
		return TRUCKER_RANK3;
	if(model == 403)
		return TRUCKER_RANK4;
	return 0;
}

stock SetRandomDestination2(playerid)
{
	new gather;
	gather = random(sizeof(TruckInfo));
	GatherX[playerid] = TruckInfo[gather][tDesX];
	GatherY[playerid] = TruckInfo[gather][tDesY];
	GatherZ[playerid] = TruckInfo[gather][tDesZ];
	SetStringVar(playerid, "TruckDest", TruckInfo[gather][tDestination]);
	SetTruckStage(playerid, 1);
	LoadingTruck{playerid} = 0;
	SetCheckPoint(playerid, TRUCKLOAD, GatherX[playerid], GatherY[playerid], GatherZ[playerid], 9.0);
	return 1;
}

stock JobMessage(playerid, string[], length)
{
	ShowTextDraw(playerid, TruckerDraw[playerid]);
	TextDrawSetString(TruckerDraw[playerid], string);
	SetIntVar(playerid, "HideTrucker", length);
	return 1;
}

stock GetMaxPayCheck(playerid)
{
	new rank = PlayerInfo[playerid][pJobRank];
	new job = PlayerInfo[playerid][pJob];
	if(job == TRUCKER)
	{
		if(rank == TRUCKER_RANK1)
			return TRUCKER_1_PAYCHECK;
		if(rank == TRUCKER_RANK2)
			return TRUCKER_2_PAYCHECK;
		if(rank == TRUCKER_RANK3)
			return TRUCKER_3_PAYCHECK;
		if(rank == TRUCKER_RANK4)
			return TRUCKER_4_PAYCHECK;
	}
	if(job == SWEEPER)
	{
		if(rank == SWEEPER_RANK1)
			return SWEEPER_RANK1;
	}
	return 0;
}

stock HandleTruckCheckPoint(playerid)
{
	if(Trucking{playerid} && GetTruckStage(playerid) == 1 && GetIntVar(playerid, "PlayerCP") == 26)
	{
		LoadingTruck{playerid} = 19;
		SetTruckStage(playerid, 2);
	}
	if(Trucking{playerid} && GetTruckStage(playerid) == 3 && GetIntVar(playerid, "PlayerCP") == 27)
	{
		DroppingOff{playerid} = true;
		SetTruckStage(playerid, 4);
	}
	if(Trucking{playerid} && GetTruckStage(playerid) == 5 && GetIntVar(playerid, "PlayerCP") == 28)
	{
		DroppingOff{playerid} = false;
		LoadingTruck{playerid} = 0;
		Trucking{playerid} = false;
		TruckVehicle[playerid] = INVALID_VEHICLE_ID;
		TruckComps[GetPlayerVehicleID(playerid)] = 0;
		SetTruckStage(playerid, 0);
		SetPlayerPos(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+1.0);
		RespawnVehicle(GetPlayerVehicleID(playerid));
		PlayerInfo[playerid][pPayCheckMade] += TruckingMoney[playerid];
		TruckingMoney[playerid] = 0;
		format(msg, sizeof(msg), "~g~MISSION COMPLETED~n~~w~YOUR PAYCHECK IS WORTH~g~$%d~n~~r~/PAYCHECK ~y~IN THE BANK TO GET IT.", PlayerInfo[playerid][pPayCheckMade]);
		JobMessage(playerid, msg, 6);
		if(TruckTrailer[playerid] != INVALID_VEHICLE_ID)
		{
			DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
			RespawnVehicle(TruckTrailer[playerid]);
			TruckTrailer[playerid] = INVALID_VEHICLE_ID;
		}
		RemoveVar(playerid, "TruckGather");
		RemoveVar(playerid, "TruckDrop");
		RemoveVar(playerid, "TruckDest");
		RemoveCheckPoint(playerid);
    PlayerInfo[playerid][pCanJob] = 1;
    SavePlayerStats(playerid);
	}
	return 1;
}

stock ShowAPB(playerid, page)
{
  LoadApbs();
  SCMEx(playerid, COLOR_RED, "_________All Points Bulletins (Videos %d)_________", page);
  for(new i = 0; i < MAX_APBS; i++)
  {
    if(ApbInfo[i][apbPage] == page && ApbInfo[i][apbOn])
    {
      SCMEx(playerid, COLOR_RED, "%d.APB: %s", i, ApbInfo[i][apbSuspect]);
    }
  }
  return 1;
}

stock GetNextApbID()
{
	new i=0;
	while(i != MAX_APBS)
	{
		if(ApbInfo[i][apbOn] == 0)
		{
			return i;
		}
		i++;
	}
	return -1;
}

stock GetJobRankName(job, rank)
{
	new ranktext[MAX_RANK_NAME];
	switch(rank)
	{
		case 0: format(ranktext, MAX_RANK_NAME, "N/A");
		case 1: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[job][jobRank1]);
		case 2: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[job][jobRank2]);
		case 3: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[job][jobRank3]);
		case 4: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[job][jobRank4]);
		case 5: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[job][jobRank5]);
		case 6: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[job][jobRank6]);
		case 7: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[job][jobRank7]);
		case 8: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[job][jobRank8]);
		case 9: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[job][jobRank9]);
		case 10: format(ranktext, MAX_RANK_NAME, "%s", JobsInfo[job][jobRank10]);
	}
	return ranktext;
}

stock AssignHouseWeapons(house, str[])
{
	new wtmp[MAX_HOUSE_WEAPONS][64];
	explode(wtmp,str,"|");
	for(new z = 0; z < MAX_HOUSE_WEAPONS; z++)
	{
		new wtmp2[2][64];
		explode(wtmp2,wtmp[z],"=");
		HouseInfo[house][hWeapon][z] = strval(wtmp2[0]);
		HouseInfo[house][hAmmo][z] = strval(wtmp2[1]);
	}
}

stock HoldingKey(playerid, key)
{
	new keys, ud, lr;
	GetPlayerKeys(playerid, keys, ud, lr);
	if(keys & key == key)
		return true;
	return false;
}

stock RepairVehicleBody(vehicle)
{
	new p, d, l, t;
	t = encode_tires(0, 0, 0, 0); // fix all tires
	p = encode_panels(0, 0, 0, 0, 0, 0, 0); // fix all panels
	d = encode_doors(0, 0, 0, 0, 0, 0); // fix all doors
	l = encode_lights(0, 0, 0, 0); // fix all lights
	UpdateVehicleDamageStatus(vehicle, p, d, l, t);
	return 1;
}

stock MessageJob(job, color, message[], bool:checkduty)
{
	foreach(Player, i)
	{
		if(PlayerInfo[i][pJob] == job || PlayerInfo[i][pSideJob] == job)
		{
			if(checkduty == true)
			{
				if(job == TAXI && TaxiDuty{i})
				{
					SCM(i, color, message);
				}
			}
			else
			{
				SCM(i, color, message);
			}
		}
	}
	return 1;
}

stock SendMechanicHelp(playerid, text)
{
	MessageJob(MECHANIC, COLOR_GREEN, "|_________Mechanic Hotline_________|", false);
	format(msg, sizeof(msg), "Caller: %s Ph: [%d]", GetNameEx(playerid), PlayerInfo[playerid][pNumber]);
	MessageJob(MECHANIC, COLOR_WHITE, msg, false);
	format(msg, sizeof(msg), "Situation: %s", text);
	MessageJob(MECHANIC, COLOR_WHITE, msg, false);
	return 1;
}

stock SendTaxiRequest(playerid, text)
{
	MessageJob(TAXI, COLOR_YELLOWG, "|_________Taxi Call_________|",true);
	format(msg, sizeof(msg), "Caller: %s Number: %d", GetNameEx(playerid), PlayerInfo[playerid][pNumber]);
	MessageJob(TAXI, COLOR_YELLOWG, msg, true);
	format(msg, sizeof(msg), "Situation: %s", text);
	MessageJob(TAXI, COLOR_YELLOWG, msg, true);
	MessageJob(TAXI, COLOR_YELLOWG, "** /taxi accept ID to take this call! **", true);
	return 1;
}

stock ChargePerson(playerid)
{
	if(GetCash(playerid) < TaxiMoney[playerid])
	{
		SCMEx(GetVehicleDriver(OldVehicle[playerid]), COLOR_WHITE, "%s does not have enough money to pay race.", GetNameWithMask(playerid));
		TaxiMade[GetVehicleDriver(OldVehicle[playerid])] -= TaxiMoney[playerid];
		TaxiMoney[playerid] = 0;
	}
	else
	{
		format(msg, sizeof(msg), "[TAXI]: In total paid: $%d.", TaxiMoney[playerid]);
		SCM(playerid, COLOR_YELLOWG, msg);
		GiveCash(playerid, -TaxiMoney[playerid]);
		GiveCash(GetVehicleDriver(OldVehicle[playerid]), TaxiMoney[playerid]);
		TaxiMade[GetVehicleDriver(OldVehicle[playerid])] -= TaxiMoney[playerid];
		TaxiMoney[playerid] = 0;
	}
}

stock GetVehicleDriver(vehicle)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(PlayerIsOn(i))
		{
			if(IsDriver(i) && GetPlayerVehicleID(i) == vehicle)
				return i;
		}
	}
	return INVALID_PLAYER_ID;
}

stock ShowJobMessage(playerid, message[])
{
	ShowTextDraw(playerid, TruckerDraw[playerid]);
	TextDrawSetString(TruckerDraw[playerid], message);
	return 1;
}


stock CountVehiclePlayers(vehicle)
{
	new count;
	foreach(Player, i)
	{
		if(PlayerInCar(i) && GetPlayerVehicleID(i) == vehicle && GetPlayerState(i) != PLAYER_STATE_DRIVER)
		{
			count++;
		}
	}
	return count;
}

stock CheckOwnedVehicles(playerid)
{
	format(query, sizeof(query), "SELECT * FROM `ownedvehicles` WHERE `owner` = '%s' ORDER BY `slot` LIMIT 3", GetName(playerid));
	mysql_function_query(dbHandle, query, true, "OnCheckVehicles", "i", playerid);
	return 1;
}

stock CheckRecordPlayer(playerid)
{
  format(query, sizeof(query), "SELECT * FROM `criminalrecords` WHERE `userid` = '%d'", PlayerInfo[playerid][pDatabaseID]);
  mysql_function_query(dbHandle, query, true, "OnCheckCriminal", "i", playerid);
  return 1;
}

stock mktime(hour,minute,second,day,month,year)
{
	new timestamp2;

	timestamp2 = second + (minute * 60) + (hour * 3600);

	new days_of_month[12];

	if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) ) {
		days_of_month = {                         // Schaltjahr
			31,29,31,30,31,30,31,31,30,31,30,31
		};
	}
	else {
		days_of_month = {                         // keins
			31,28,31,30,31,30,31,31,30,31,30,31
		};
	}
	new days_this_year = 0;
	days_this_year = day;
	if(month > 1) {                               // No January Calculation, because its always the 0 past months
		for(new i=0; i<month-1;i++) {
			days_this_year += days_of_month[i];
		}
	}
	timestamp2 += days_this_year * 86400;

	for(new j=1970;j<year;j++) {
		timestamp2 += 31536000;
// Schaltjahr + 1 Tag
		if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) )  timestamp2 += 86400;
	}

	return timestamp2;
}
//================================Drugs================================//
stock FormatVehicleDrugs(vehicle, string[])
{
	new wstr[256];
	new tmp[64];
	for(new a = 1; a < MAX_DRUGS; a++)
	{
		new drug = VehicleInfo[vehicle][carDrug][a];
		new ammount = VehicleInfo[vehicle][carDrugAmount][a];
		if(a == 1)
		{
			format(tmp,sizeof(tmp),"%d=%d",drug,ammount);
		}
		else
		{
			format(tmp,sizeof(tmp),"|%d=%d",drug,ammount);
		}
		strins(wstr,tmp,strlen(wstr));
	}
	return format(string, 256, "%s", wstr);
}

stock AssignVehicleDrugs(vehicle, str[])
{
	new wtmp[MAX_DRUGS][64];
	explode(wtmp,str,"|");
	for(new z = 1; z < MAX_DRUGS; z++)
	{
		new wtmp2[2][64];
		/*Has to be minus 1, don't touch*/
		explode(wtmp2,wtmp[z-1],"=");
		VehicleInfo[vehicle][carDrug][z] = strval(wtmp2[0]);
		VehicleInfo[vehicle][carDrugAmount][z] = strval(wtmp2[1]);
	}
}

stock FormatPlayerDrugs(playerid, string[])
{
	new wstr[256];
	new tmp[64];
	for(new a = 1; a < MAX_DRUGS; a++)
	{
		new drug = PlayerInfo[playerid][pDrug][a];
		new ammount = PlayerInfo[playerid][pDrugAmount][a];
		if(a == 1)
		{
			format(tmp,sizeof(tmp),"%d=%d",drug,ammount);
		}
		else
		{
			format(tmp,sizeof(tmp),"|%d=%d",drug,ammount);
		}
		strins(wstr,tmp,strlen(wstr));
	}
	return format(string, 256, "%s", wstr);
}

stock AssignPlayerDrugs(playerid, str[])
{
	new wtmp[MAX_DRUGS][64];
	explode(wtmp,str,"|");
	for(new z = 1; z < MAX_DRUGS; z++)
	{
		new wtmp2[2][64];
		/*Has to be minus 1, don't touch*/
		explode(wtmp2,wtmp[z-1],"=");
		PlayerInfo[playerid][pDrug][z] = strval(wtmp2[0]);
		PlayerInfo[playerid][pDrugAmount][z] = strval(wtmp2[1]);
	}
}

stock GetDruggInfo(playerid, slot)
{
	new info[64];
	if(PlayerInfo[playerid][pDrug][slot] == 0)
	{
		info = "Empty";
	}
	else
	{
		format(info, sizeof(info), "%s(%d)", GetDrugName(PlayerInfo[playerid][pDrug][slot]), PlayerInfo[playerid][pDrugAmount][slot]);
	}
	return info;
}

stock GetWeaponInfo(playerid, slot)
{
	new info[64];
	if(PlayerInfo[playerid][pMeleeWep][slot] == 0)
	{
		info = "Empty";
	}
	else
	{
		format(info, sizeof(info), "%s(%d)", GetWeaponName(PlayerInfo[playerid][pMeleeWep][slot]), PlayerInfo[playerid][pAmmo1][slot]);
	}
	return info;
}

stock GetVehicleDruggInfo(vehicle, slot)
{
	new info[64];
	if(VehicleInfo[vehicle][carDrug][slot] == 0)
	{
		info = "Empty";
	}
	else
	{
		format(info, sizeof(info), "%s(%d)", GetDrugName(VehicleInfo[vehicle][carDrug][slot]), VehicleInfo[vehicle][carDrugAmount][slot]);
	}
	return info;
}

stock GetDrugName(drugid)
{
	new drug[24];
	switch(drugid)
	{
		case DRUG_CRACK: drug = "Crack";
		case DRUG_COCAINE: drug = "Cocaina";
		case DRUG_MARIJUANA: drug = "Marijuana";
		case DRUG_HEROIN: drug = "Heroina";
	}
	return drug;
}

stock ShowVehicleDrugs(playerid, vehicle)
{
	SCMEx(playerid, COLOR_GREEN, "___________%s's Drug Packages:___________", VehicleNames[GetVehicleModel(vehicle)-400]);
	for(new i = 1; i < MAX_DRUGS; i+=5)
	{
		SCMEx(playerid, COLOR_WHITE, "[ %d. %s ][ %d. %s ][ %d. %s ][ %d. %s ][ %d. %s ]", i,GetVehicleDruggInfo(vehicle, i),i+1,GetVehicleDruggInfo(vehicle, i+1),i+2,GetVehicleDruggInfo(vehicle, i+2),i+3,GetVehicleDruggInfo(vehicle, i+3),i+4,GetVehicleDruggInfo(vehicle, i+4));
	}
}

stock ShowPlayerDrugs(playerid, toplayer)
{
	SCMEx(toplayer, COLOR_GREEN, "______________%s's Drug Packages:______________", GetNameEx(playerid));
	for(new i = 1; i < MAX_DRUGS; i+=5)
	{
		SCMEx(toplayer, COLOR_WHITE, "[ %d. %s ][ %d. %s ][ %d. %s ][ %d. %s ][ %d. %s ]", i,GetDruggInfo(playerid, i),i+1,GetDruggInfo(playerid, i+1),i+2,GetDruggInfo(playerid, i+2),i+3,GetDruggInfo(playerid, i+3),i+4,GetDruggInfo(playerid, i+4));
	}
	if(PlayerInfo[playerid][pSeeds] > 0)
	{
		SCMEx(toplayer, COLOR_YELLOWG, "[ Seeds: %d ]", PlayerInfo[playerid][pSeeds]);
	}
}

stock GetFreeDrugSlot(playerid)
{
	for(new i = 1; i < MAX_DRUGS; i++)
	{
		if(PlayerInfo[playerid][pDrug][i] == 0)
			return i;
	}
	return 0;
}

stock GetFreeVehicleDrugSlot(vehicle)
{
	for(new i = 1; i < MAX_DRUGS; i++)
	{
		if(VehicleInfo[vehicle][carDrug][i] == 0)
			return i;
	}
	return 0;
}

stock GivePlayerDrug(playerid, drug, amount)
{
	new slot = GetFreeDrugSlot(playerid);
	PlayerInfo[playerid][pDrug][slot] = drug;
	PlayerInfo[playerid][pDrugAmount][slot] = amount;
	return 1;
}

stock GiveVehicleDrug(vehicle, drug, amount)
{
	new slot = GetFreeVehicleDrugSlot(vehicle);
	VehicleInfo[vehicle][carDrug][slot] = drug;
	VehicleInfo[vehicle][carDrugAmount][slot] = amount;
	return 1;
}

stock RemovePlayerDrug(playerid, slot)
{
	PlayerInfo[playerid][pDrug][slot] = 0;
	PlayerInfo[playerid][pDrugAmount][slot] = 0;
	return 1;
}

stock RemovePlayerDrugs(playerid)
{
	for(new i = 1; i < MAX_DRUGS; i++)
	{
		PlayerInfo[playerid][pDrug][i] = 0;
		PlayerInfo[playerid][pDrugAmount][i] = 0;
	}
	return 1;
}

stock GiveDrugFromPlayer(playerid, slot, drug, amount, toplayer)
{
	GivePlayerDrug(toplayer, drug, amount);
	PlayerInfo[playerid][pDrugAmount][slot] -= amount;
	if(PlayerInfo[playerid][pDrugAmount][slot] == 0)
		PlayerInfo[playerid][pDrug][slot] = 0;
	return 1;
}

stock GetNextPlantID()
{
	for(new i = 0; i < MAX_PLANTS; i++)
	{
		if(CropsInfo[i][pPlanted] == 0)
			return i;
	}
	return -1;
}

stock GetClosestPlantID(playerid)
{
	new i=0;
	new Float:x, Float:y, Float:z;
	while(i != MAX_PLANTS)
	{
		if(CropsInfo[i][pPlanted] == 1)
		{
			GetDynamicObjectPos(CropsInfo[i][pObject], x, y, z);
			if(IsPlayerInRangeOfPoint(playerid, 2.5, x, y, z+0.5))
			{
				return i;
			}
		}
		i++;
	}
	return -1;
}

stock PlayerInCropArea(playerid)
{
	new i=0;
	new Float:x, Float:y, Float:z;
	while(i != MAX_PLANTS)
	{
		if(CropsInfo[i][pPlanted] == 1)
		{
			GetDynamicObjectPos(CropsInfo[i][pObject], x, y, z);
			if(IsPlayerInRangeOfPoint(playerid, 4.0, x, y, z+0.5))
			{
				return 1;
			}
		}
		i++;
	}
	return 0;
}

stock AddSeedToFile(plant, planter[], Float:x, Float:y, Float:z)
{
	format(query, sizeof(query), "INSERT INTO `plants` (planter, growtime, made, posx, posy, posz) VALUES ('%s', %d, %d, %f, %f, %f)", planter, 0, 0, x, y, z);
	mysql_function_query(dbHandle, query, true, "OnPlantInsert", "d", plant);
}

stock SavePlants()
{
	for(new i = 0; i < MAX_PLANTS; i++)
	{
		if(CropsInfo[i][pPlanted] == 1)
		{
			format(query, sizeof(query), "UPDATE `plants` SET `growtime` = %d, `made` = %d, `posx` = %f, `posy` = %f, `posz` = %f WHERE `id` = %d", CropsInfo[i][pGrowTime], CropsInfo[i][pMade], CropsInfo[i][pX], CropsInfo[i][pY], CropsInfo[i][pZ]);
			mysql_function_query(dbHandle, query, false, "", "");
		}
	}
}

stock AddPlants()
{
	format(query, sizeof(query), "SELECT * FROM `plants`");
	mysql_function_query(dbHandle, query, true, "OnPlantsAdd", "");
}

stock DestroyCrop(crop)
{
	if(CropsInfo[crop][pPlanted] == 1)
	{
		format(query, sizeof(query), "DELETE FROM `plants` WHERE `id` = %d", CropsInfo[crop][pID]);
		mysql_function_query(dbHandle, query, false, "", "");
		CropsInfo[crop][pGrowTime] = 0;
		CropsInfo[crop][pMade] = 0;
		CropsInfo[crop][pX] = 0.0;
		CropsInfo[crop][pY] = 0.0;
		CropsInfo[crop][pZ] = 0.0;
		CropsInfo[crop][pPlanted] = 0;
		DestroyDynamicObject(CropsInfo[crop][pObject]);
		DestroyDynamic3DTextLabel(CropsInfo[crop][pLabel]);
	}
}
//================================Drugs================================//
/*public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if(clickedid == phone12[playerid])
	{
		HidePhone(playerid);
	}
	else if(clickedid == phone6[playerid])
	{
    HidePhone(playerid);
	}
	else if(clickedid == phone5[playerid])//right
	{
	   SCM(playerid, COLOR_YELLOWG,"Meniul este in curs de formare...");
	}
	return 1;
}*/
//=================== Stocks ===================//

public OnPlayerSpawn(playerid)
{
	if(!PlayerLogged(playerid))
	{
		KickEx2(playerid, "SERVER: You must be logged in to spawn!");
		return 1;
	}
	if(!PlayerInfo[playerid][pJailed])
	{
		LoadPlayerToys(playerid);
	}
	SetTimerEx("CheckWounded", 500, 0, "i", playerid);
	BizEntered[playerid] = -1;
	return 1;
}

forward SendInjuredMessage(playerid);
public SendInjuredMessage(playerid)
{
	if(InjuredMSG[playerid] == 0)
	{
		SCM(playerid, COLOR_RED, "You've been badly hurt, now if anyone does not help you, you will die.");
		SCM(playerid, COLOR_RED, "To respawn use /acceptdeath.");
		SCM(playerid, COLOR_RED, "(( You were hurt, /damages for more information. )) ");
		InjuredMSG[playerid] = 1;
	}
	return 1;
}

public DoInjured(playerid)
{
    SetTimerEx("FreezePlayer", 100, 0, "i", playerid);
    OnPlayAnim(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 1, 1, 1, 0);
    OnAnim{playerid} = true;
    SendInjuredMessage(playerid);
    SetIntVar(playerid, "Injured", 1);
    InjuredTimer[playerid] = SetTimerEx("InjuredFinish", 20000, 0, "i", playerid);
    new stringdamage[128];
    new stringdamage2[256];
    format(stringdamage, sizeof(stringdamage), "(( Has been injured %d times, /damages %d for more information. ))", CountDamages(playerid), playerid);
    strcat(stringdamage, stringdamage2);

    Injured[playerid] = Create3DTextLabel(stringdamage, 0xFF8080FF, 30.0, 40.0, 0.0, 20.0, 0, 0);
    Attach3DTextLabelToPlayer(DamageShot[playerid], playerid, 0.0, 0.0, 0.0);
    return 1;
}

forward CheckAnimInjured(playerid);
public CheckAnimInjured(playerid)
{
  if(GetPlayerAnimationIndex(playerid) == 0 && GetIntVar(playerid, "Injured") == 1)
  {
    OnPlayAnim(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 1, 1, 1, 0);
    OnAnim{playerid} = true;
    FreezePlayer(playerid);
  }
  return 0;
}

public CheckWounded(playerid)
{
	if(GetIntVar(playerid, "JustDied") == 1)
	{
		Delete3DTextLabel(Injured[playerid]);
		KillTimer(InjuredTimer[playerid]);
		RemoveVar(playerid, "Injured");
		SetInterior(playerid, PlayerInfo[playerid][pInt]);
		SetWorld(playerid, PlayerInfo[playerid][pWorld]);
		PutPlayer(playerid, PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
		SetTimerEx("FreezePlayer", 100, 0, "i", playerid);
		SetTimerEx("DeadAnim", 1000, 0, "i", playerid);
		OnAnim{playerid} = true;
		Death[playerid] = SetTimerEx("RespawnDeath", 60000, 0, "i", playerid);
		SCM(playerid, COLOR_YELLOWG, "You have been killed, wait 60 seconds to respawn(/acceptdeath).");
		new stringdamage[128];
		new stringdamage2[256];
		format(stringdamage, sizeof(stringdamage), "(( THIS PLAYER IS DEAD ))");
		strcat(stringdamage, stringdamage2);

		DamageShot[playerid] = Create3DTextLabel(stringdamage, 0xFF8080FF, 30.0, 40.0, 0.0, 20.0, 0, 0);
		Attach3DTextLabelToPlayer(DamageShot[playerid], playerid, 0.0, 0.0, 0.0);
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	Delete3DTextLabel(Injured[playerid]);
	SetIntVar(playerid, "JustDied", 1);
	SetNormalColor(playerid);
	ResetVariables(playerid);
	CheckPlayerCurrentCall(playerid);
	RemovePlayerMask(playerid);
	PLights[playerid] = 0;
	SavePlayerStats(playerid);
	SavePlayerPos(playerid);
	#if DEATH_RESET == true
		ResetDamages(playerid);
    #endif
    new veh = GetPlayerVehicleID(playerid);
    Delete3DTextLabel(veicolo_callsign_testo[veh]);
    veicolo_callsign_status[veh] = 0;
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	if(IsARentCar(vehicleid) || IsARentBike(vehicleid) || IsADMVCar(vehicleid)|| IsADMVHeli(vehicleid) || IsACopCar(vehicleid) || IsACopTowTruck(vehicleid))
	{
		VehicleEngine(vehicleid, false);
		ToggleVehicleLock(vehicleid, false);
		VehicleInfo[vehicleid][carEngineLife] = 999;
		VehicleInfo[vehicleid][carEngineLife] = 999;
	}
	if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510)
	{
        VehicleEngine(vehicleid, true);
	} else {
        VehicleEngine(vehicleid, false);
	}
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	//Turning off the engine
	VehicleEngine(vehicleid, false);
	//Unlocking the vehicle
	ToggleVehicleLock(vehicleid, false);

	if(CityVehicles[vehicleid][vCarOn] == 1)
	{
		RecreateCityVehicle(vehicleid);
		new veh = GetPlayerVehicleID(vehicleid);
        Delete3DTextLabel(veicolo_callsign_testo[veh]);
        veicolo_callsign_status[veh] = 0;
	}

	if(TruckVehicle[killerid] == vehicleid && Trucking{killerid})
	{
		if(TruckComps[vehicleid] > 0)
		{
			format(msg, sizeof(msg), "~w~YOU LOST BECAUSE YOU DESTROYED THE MISSION CAR~n~YOU PAID A PENALTY AMOUNTING TO ~g~$%d.", (TruckComps[vehicleid] * 5) / 10);
			JobMessage(killerid, msg, 6);
			PlacePlayerTicket(killerid, (TruckComps[vehicleid] * 5) / 10);
		}
		else HideTruckText(killerid);
		Trucking{killerid} = false;
		DroppingOff{killerid} = false;
		LoadingTruck{killerid} = 0;
		TruckComps[vehicleid] = 0;
		TruckingMoney[killerid] = 0;
		TruckVehicle[killerid] = INVALID_VEHICLE_ID;
		if(TruckTrailer[killerid] != INVALID_VEHICLE_ID)
		{
			DetachTrailerFromVehicle(GetPlayerVehicleID(killerid));
			RespawnVehicle(TruckTrailer[killerid]);
			TruckTrailer[killerid] = INVALID_VEHICLE_ID;
		}
	}
	if(PlayerOwnVehicle(killerid, vehicleid))
	{
		StopCarBoomBox(vehicleid);
		if(VehicleInfo[vehicleid][carInsurances] > 0)
		{
			VehicleInfo[vehicleid][carInsurances]--;
			VehicleInfo[vehicleid][carDestroyed]++;
			format(msg, sizeof(msg), "%s was destroyed by fire and destruction totals: %d.",VehicleNames[GetVehicleModel(vehicleid)-400],VehicleInfo[vehicleid][carDestroyed]);
			SCM(killerid, COLOR_RED, msg);
			format(msg, sizeof(msg), "You have %d insurance.",VehicleInfo[vehicleid][carInsurances]);
			SCM(killerid, COLOR_LIGHTRED, msg);
			ResetVehicleStuff(vehicleid);
			PlayerInfo[killerid][pCarKey] = 0;
			VehicleInfo[vehicleid][carOwned] = 0;
			DestoryCar(vehicleid);
			CheckOwnedVehicles(killerid);
		}
		else
		{
			VehicleInfo[vehicleid][carDestroyed]++;
			format(msg, sizeof(msg), "%s was destroyed by fire and destruction totals: %d.",VehicleNames[GetVehicleModel(vehicleid)-400],VehicleInfo[vehicleid][carDestroyed]);
			SCM(killerid, COLOR_LIGHTRED, msg);
			SCM(killerid, COLOR_LIGHTRED, "Because you have never had insurance, your engine is dead.");
			VehicleInfo[vehicleid][carBroken] = 1;
			ResetVehicleStuff(vehicleid);
			PlayerInfo[killerid][pCarKey] = 0;
			VehicleInfo[vehicleid][carOwned] = 0;
			DestoryCar(vehicleid);
			CheckOwnedVehicles(killerid);
		}
	}
	else
	{
		StopCarBoomBox(vehicleid);
		if(VehicleInfo[vehicleid][carOwned] == 1)
		{
			if(VehicleInfo[vehicleid][carInsurances] > 0)
			{
				VehicleInfo[vehicleid][carInsurances]--;
				VehicleInfo[vehicleid][carDestroyed]++;
				if(PlayerIsOn(GetIDByName(VehicleInfo[vehicleid][carOwner])))
				{
					format(msg, sizeof(msg), "%s was destroyed by someone, total destruction: %d.",VehicleNames[GetVehicleModel(vehicleid)-400],VehicleInfo[vehicleid][carDestroyed]);
					SCM(GetIDByName(VehicleInfo[vehicleid][carOwner]), COLOR_LIGHTRED, msg);
					format(msg, sizeof(msg), "You have %d insurance.",VehicleInfo[vehicleid][carInsurances]);
					SCM(GetIDByName(VehicleInfo[vehicleid][carOwner]), COLOR_LIGHTRED, msg);
					PlayerInfo[GetIDByName(VehicleInfo[vehicleid][carOwner])][pCarKey] = 0;
					CheckOwnedVehicles(GetIDByName(VehicleInfo[vehicleid][carOwner]));
				}
				VehicleInfo[vehicleid][carOwned] = 0;
				ResetVehicleStuff(vehicleid);
				DestoryCar(vehicleid);
			}
			else
			{
				VehicleInfo[vehicleid][carDestroyed]++;
				if(PlayerIsOn(GetIDByName(VehicleInfo[vehicleid][carOwner])))
				{
					format(msg, sizeof(msg), "%s was destroyed by someone, total destruction: %d.",VehicleNames[GetVehicleModel(vehicleid)-400],VehicleInfo[vehicleid][carDestroyed]);
					SCM(GetIDByName(VehicleInfo[vehicleid][carOwner]), COLOR_LIGHTRED, msg);
					SCM(GetIDByName(VehicleInfo[vehicleid][carOwner]), COLOR_LIGHTRED, "Because you have never had insurance, your engine is dead.");
					PlayerInfo[GetIDByName(VehicleInfo[vehicleid][carOwner])][pCarKey] = 0;
					CheckOwnedVehicles(GetIDByName(VehicleInfo[vehicleid][carOwner]));
				}
				VehicleInfo[vehicleid][carBroken] = 1;
				VehicleInfo[vehicleid][carOwned] = 0;
				ResetVehicleStuff(vehicleid);
				DestoryCar(vehicleid);
			}
		}
	}

	if(IsARentCar(vehicleid))
	{
		if(GetIntVar(killerid, "RentedCar") == 1 && GetIntVar(killerid, "RentVehKey") == vehicleid)
		{
			RentMSG(killerid, "You have destroyed your rented car you were penalized $500.");
			GiveCash(killerid, -500);
			RemoveVar(killerid, "RentedCar");
			RemoveVar(killerid, "RentVehKey");
		}
		else
		{
			foreach(Player, i)
			{
				if(GetIntVar(i, "RentedCar") == 1 && GetIntVar(i, "RentVehKey") == vehicleid)
				{
					RentMSG(i, "Your rental car was destroyed and you were penalized $1,000.");
					GiveCash(i, 1000);
					RemoveVar(i, "RentedCar");
					RemoveVar(i, "RentVehKey");
				}
			}
		}
	}
	if(IsARentBike(vehicleid))
	{
		if(GetIntVar(killerid, "RentedCar") == 1 && GetIntVar(killerid, "RentVehKey") == vehicleid)
		{
			RentMSG(killerid, "You have destroyed your rented bike and have been penalized $300.");
			GiveCash(killerid, -300);
			RemoveVar(killerid, "RentedCar");
			RemoveVar(killerid, "RentVehKey");
		}
		else
		{
			foreach(Player, i)
			{
				if(GetIntVar(i, "RentedCar") == 1 && GetIntVar(i, "RentVehKey") == vehicleid)
				{
					RentMSG(i, "Your bike was destroyed by someone and you were penalized $500.");
					GiveCash(i, 500);
					RemoveVar(i, "RentedCar");
					RemoveVar(i, "RentVehKey");
				}
			}
		}
	}
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
    if(!success)
    {
        format(msg, sizeof(msg), "{808080}ERROR: Command '{7EB7ED}%s'{808080} does not exist in our database, type '{7EB7ED}/help' ", cmdtext);
        SCM(playerid,COLOR_GREY, msg);
		return 1;
    }
    return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(!PlayerLogged(playerid))
	{
		SCM(playerid, COLOR_GREY, "You're not logged in.");
		return 0;
	}
	if(GetIntVar(playerid, "Muted") == 1 && !CheckAdmin(playerid, ADMIN_LEVEL_1)) 
	{
		SCM(playerid, COLOR_RED, "You are muted.");
		return 0;
	}

	return 1;
}

public OnPlayerText(playerid, text[])
{
  text[0] = toupper(text[0]);
	if(!PlayerLogged(playerid))
	{
		SCM(playerid, COLOR_GREY, "You're not logged in.");
		return 0;
	}
	if(GetIntVar(playerid, "Muted") == 1)
	{
		SCM(playerid, COLOR_RED, "You are muted.");
		return 0;
	}
	if(PlayerIsWounded(playerid))
	{
		SCM(playerid, COLOR_GREY, "You're hurt badly.");
		return 0;
	}
	new message[200], str[200];

	if(GetIntVar(playerid, "InConvo") == 1)
	{
		format(message, sizeof(message), "(( PM received from %s (ID:%d): %s ))", GetNameEx(playerid), playerid, text);
		SCM(GetIntVar(playerid, "ConvoWith"), COLOR_YELLOWG, message);
		format(message, sizeof(message), "(( PM sent to %s (ID:%d): %s ))", GetNameEx(GetIntVar(playerid, "ConvoWith")), GetIntVar(playerid, "ConvoWith"), text);
		SCM(playerid, COLOR_YELLOW3, message);
		foreach(Player, i)
		{
			if(GetIntVar(i, "PmSpy") == playerid && GetIntVar(i, "IsSpying") == 1 || GetIntVar(i, "IsSpyingAll") == 1)
			{
				format(str, sizeof(str), "(( PM Spy %s sent to %s (ID:%d): %s ))", GetNameEx(playerid), GetNameEx(GetIntVar(playerid, "ConvoWith")), GetIntVar(playerid, "ConvoWith"), message);
				SCM(i, COLOR_YELLOWG, str);
			}
		}
	}
	else
	{
		if(GetIntVar(playerid, "OnCall") == 0)
		{
			if(strlen(text) > MAXLEN)
			{
				new pos = MAXLEN;
				if(pos < MAXLEN-1) pos = MAXLEN;
				if(PlayerInfo[playerid][pAccentOn])
				{
					format(str, sizeof(str), "%s says (Accent %s): %.*s ...", GetNameWithMask(playerid), PlayerInfo[playerid][pAccent], pos, text);
					ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					format(str, sizeof(str), "%s says (Accent %s): ... %s", GetNameWithMask(playerid), PlayerInfo[playerid][pAccent], text[pos]);
					ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				else
				{
					format(str, sizeof(str), "%s says: %.*s ...", GetNameWithMask(playerid), pos, text);
					ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					format(str, sizeof(str), "%s says: ... %s", GetNameWithMask(playerid), text[pos]);
					ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				ChatAnimation(playerid, strlen(text));
			}
			else
			{
				if(PlayerInfo[playerid][pAccentOn])
					format(str, sizeof(str), "%s says (Accent %s): %s", GetNameWithMask(playerid), PlayerInfo[playerid][pAccent], text);
				else
					format(str, sizeof(str), "%s says: %s", GetNameWithMask(playerid), text);
				ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				ChatAnimation(playerid, strlen(text));
			}
		}
		else
		{
			if(GetIntVar(playerid, "CallWith") == 544)
			{
				format(str, sizeof(str), "%s says (phone): %s", GetNameWithMask(playerid), text);
				ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
    			SetStringVar(playerid, "callSituation", text);
    			SCM(playerid, COLOR_WHITE, "Mechanic Hotline: Please communicate your situation");
				SetIntVar(playerid, "CallWith", 588);
				return 0;
			}
            else if(GetIntVar(playerid, "CallWith") == 588)
			{
				SetStringVar(playerid, "callSituation", text);
				format(str, sizeof(str), "%s says (phone): %s", GetNameWithMask(playerid), text);
				ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SCM(playerid, COLOR_LIGHTBLUE, "We need request Mechanics to respond on your call.");
				MessageJob(MECHANIC, COLOR_GREEN, "|_________Mechanic Hotline_________|", false);
				format(msg, sizeof(msg), "Caller: %s, Ph: [%d]", GetNameEx(playerid), PlayerInfo[playerid][pNumber]);
				MessageJob(MECHANIC, COLOR_WHITE, msg, false);
				format(msg, sizeof(msg), "Situation: %s", text);
				MessageJob(MECHANIC, COLOR_WHITE, msg, false);
				RemoveVar(playerid, "OnCall");
				RemoveVar(playerid, "CallWith");
				HangUpAnim(playerid);
				return 0;
			}
			if(GetIntVar(playerid, "CallWith") == 555)
			{
				format(str, sizeof(str), "%s says (phone): %s", GetNameWithMask(playerid), text);
				ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SetIntVar(playerid, "NeedTaxi", 1);
				SetStringVar(playerid, "callSituation", text);
				SCM(playerid, COLOR_WHITE, "Taxi Dispatch: Please communicate your situation");
				SetIntVar(playerid, "CallWith", 599);
				return 0;
			}
            else if(GetIntVar(playerid, "CallWith") == 599)
			{
				SetStringVar(playerid, "callSituation", text);
				format(str, sizeof(str), "%s says (phone): %s", GetNameWithMask(playerid), text);
				ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SCM(playerid, COLOR_LIGHTBLUE, "We need request Taxis to respond on your call.");
				MessageJob(TAXI, COLOR_YELLOWG, "|_________Taxi Call_________|",true);
				format(msg, sizeof(msg), "Caller: %s, Ph:[%d]", GetNameEx(playerid), PlayerInfo[playerid][pNumber]);
				MessageJob(TAXI, COLOR_YELLOWG, msg, true);
				format(msg, sizeof(msg), "Situation: %s", text);
				MessageJob(TAXI, COLOR_YELLOWG, msg, true);
				MessageJob(TAXI, COLOR_YELLOWG, "** /taxi accept ID to take this call! **", true);
				RemoveVar(playerid, "OnCall");
				RemoveVar(playerid, "CallWith");
				HangUpAnim(playerid);
				return 0;
			}
/*			if(GetIntVar(playerid, "CallWith") == 2893)
			{
				format(str, sizeof(str), "%s spune (telefon): %s", GetNameWithMask(playerid), text);
				ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				if(!strlen(text))
				{
					SCM(playerid, COLOR_WHITE, "WAREHOUSE: Sorry, man. I didn't heard. Can you repeat? ('house' or 'business')");
					return 0;
				}
				else if ((strcmp("house", text, true, strlen(text)) == 0) && (strlen(text) == strlen("house")))
				{
					SCM(playerid, COLOR_WHITE, "WAREHOUSE: I understand. Tell me, how much mats you want?");
					SetIntVar(playerid, "CallWith", 2894);
					SCM(playerid, COLOR_WHITE, "WAREHOUSE: Be aware of this: 1000 materials costs $50, so do the math by yourself.");
					return 0;
				}
				else if ((strcmp("business", text, true, strlen(text)) == 0) && (strlen(text) == strlen("business")))
				{
					SCM(playerid, COLOR_WHITE, "WAREHOUSE: I understand. Tell me, how much mats you want?");
					SetIntVar(playerid, "CallWith", 2895);
					SCM(playerid, COLOR_WHITE, "WAREHOUSE: Be aware of this: 1000 materials costs $65, so do the math by yourself.");
					return 0;
				}
				else
				{
					SCM(playerid, COLOR_WHITE, "WAREHOUSE: Sorry, man. I didn't heard. Can you repeat? ('house' or 'business')");
					return 0;
				}
			}
			else if(GetIntVar(playerid, "CallWith") == 2894)
			{
				format(str, sizeof(str), "%s spune (telefon): %s", GetNameWithMask(playerid), text);
				ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				if(!strlen(text))
				{
					SCM(playerid, COLOR_WHITE, "WAREHOUSE: Sorry, I didn't understand. Can you repeat the quantity?");
					return 0;
				}
				SCM(playerid, COLOR_LIGHTBLUE, "WAREHOUSE: Okey, I got it. Your mats will be delivered today ..");
				SetIntVar(playerid, "CallWith", 2896);
				SetPVarInt(playerid, "MatsAmount", text);
				return 0;
			}
			else if(GetIntVar(playerid, "CallWith") == 2896)
			{
				format(str, sizeof(str), "%s spune (telefon): %s", GetNameWithMask(playerid), text);
				ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				if(!strlen(text))
				{
					SCM(playerid, COLOR_WHITE, "WAREHOUSE: Sorry, I didn't understand. Can you repeat the quantity?");
					return 0;
				}
				SCM(playerid, COLOR_LIGHTBLUE, "WAREHOUSE: I hope I will hear you soon.");
				new amount = GetPVarInt(playerid, "MatsAmount");
				new Float:tax = amount*0.02;
                GiveCash(playerid, -tax);
                RemoveVar(playerid, "OnCall");
				RemoveVar(playerid, "CallWith");
				HangUpAnim(playerid);
				SetLastCaller(playerid);
				return 0;
			}*/
			if(GetIntVar(playerid, "CallWith") == 911)
			{
				format(str, sizeof(str), "%s says (phone): %s", GetNameWithMask(playerid), text);
				ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				if(!strlen(text))
				{
					SCM(playerid, COLOR_ALLDEPT, "EMERGENCY: Pardon me, repeat once, LSPD/LSFD/Both.");
					return 0;
				}
				else if ((strcmp("LSPD", text, true, strlen(text)) == 0) && (strlen(text) == strlen("LSPD")))
				{
					SetStringVar(playerid, "callType", "Police");
					SCM(playerid, COLOR_ALLDEPT, "DISPATCH: I will make contact with the DISPATCHER, just stay at LSPD phone.");
					SetIntVar(playerid, "CallWith", 912);
					SCM(playerid, COLOR_LIGHTBLUE, "DISPECERAT LSPD: Hello your current location?");
					return 0;
				}
				else if ((strcmp("LSFD", text, true, strlen(text)) == 0) && (strlen(text) == strlen("LSFD")))
				{
					SetStringVar(playerid, "callType", "Paramedic");
					SCM(playerid, COLOR_ALLDEPT, "DISPATCH: I will make contact with the DISPATCHER, just stay at LSFD phone.");
					SetIntVar(playerid, "CallWith", 914);
					SCM(playerid, COLOR_ALLDEPT, "DISPECERAT LSFD: Hello your current location?");
					return 0;
				}
				else if ((strcmp("Both", text, true, strlen(text)) == 0) && (strlen(text) == strlen("Both")))
				{
					SetStringVar(playerid, "callType", "Both");
					SCM(playerid, COLOR_ALLDEPT, "DISPATCH: I will make contact with the DISPATCHER, just stay at phone.");
					SetIntVar(playerid, "CallWith", 916);
					SCM(playerid, COLOR_LIGHTRED, "DISPECERAT LSPD & LSFD: Hello your current location?");
					return 0;
				}
				else
				{
					SCM(playerid, COLOR_ALLDEPT, "EMERGENCY: Pardon me, repeat once, LSPD/LSFD/Both.");
					return 0;
				}
			}
			else if(GetIntVar(playerid, "CallWith") == 912)
			{
				format(str, sizeof(str), "%s says (phone): %s", GetNameWithMask(playerid), text);
				ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				if(!strlen(text))
				{
					SCM(playerid, COLOR_LIGHTBLUE, "LSPD Dispatch: Pardon me, I understand please repeat once.");
					return 0;
				}
				SetStringVar(playerid, "callLocation", text);
				SCM(playerid, COLOR_LIGHTBLUE, "LSPD Dispatch: Describe the situation..");
				SetStringVar(playerid, "CrimeLocation", text);
				SetIntVar(playerid, "CallWith", 913);
				return 0;
			}
			else if(GetIntVar(playerid, "CallWith") == 913)
			{
				new location[MAX_ZONE_NAME];
				GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
				SetStringVar(playerid, "callSituation", text);
				SetStringVar(playerid, "callTrace", location);
				format(str, sizeof(str), "%s says (phone): %s", GetNameWithMask(playerid), text);
				ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SCM(playerid, COLOR_LIGHTBLUE, "LSPD Dispatch: I have alerted all units in the area..");
				SendFactionMessage(LSPD, COLOR_LIGHTBLUE, "|__________Call 911__________|");
				format(str, sizeof(str), "Caller: %s, Number: %d , Trace: %s", GetNameWithMask(playerid), PlayerInfo[playerid][pNumber], location);
				SendFactionMessage(LSPD, COLOR_LIGHTBLUE, str);
				SendFactionMessage(LSPD, COLOR_LIGHTBLUE, "Services required: Police");
				format(str, sizeof(str), "Location: %s", GetStringVar(playerid, "CrimeLocation"));
				SendFactionMessage(LSPD, COLOR_LIGHTBLUE, str);
				format(str, sizeof(str), "Situation: %s", text);
				SendFactionMessage(LSPD, COLOR_LIGHTBLUE, str);
				RemoveVar(playerid, "OnCall");
				RemoveVar(playerid, "CallWith");
				HangUpAnim(playerid);
				CancelSelectTextDraw(playerid);
				HidePhone(playerid);
				SetLastCaller(playerid);
				return 0;
			}
			else if(GetIntVar(playerid, "CallWith") == 914)
			{
				format(str, sizeof(str), "%s says (phone): %s", GetNameWithMask(playerid), text);
				ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				if(!strlen(text))
				{
					SCM(playerid, COLOR_ALLDEPT, "LSFD Dispatch: Pardon me, I understand please repeat once");
					return 0;
				}
				SetStringVar(playerid, "callLocation", text);
				SCM(playerid, COLOR_ALLDEPT, "LSFD Dispatch: Describe the situation..");
				SetStringVar(playerid, "CrimeLocation", text);
				SetIntVar(playerid, "CallWith", 915);
				return 0;
			}
			else if(GetIntVar(playerid, "CallWith") == 915)
			{
				new location[MAX_ZONE_NAME];
				GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
				SetStringVar(playerid, "callSituation", text);
				SetStringVar(playerid, "callTrace", location);
				format(str, sizeof(str), "%s says (phone): %s", GetNameWithMask(playerid), text);
				ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SCM(playerid, COLOR_LIGHTBLUE, "LSFD Dispatch: I alerted all units in the area..");
				SendFactionMessage(LSFD, COLOR_LIGHTBLUE, "|__________911 EMERGENCIES__________|");
				format(str, sizeof(str), "Caller: %s, Number: %d , Trace:", GetNameWithMask(playerid), PlayerInfo[playerid][pNumber], location);
				SendFactionMessage(LSFD, COLOR_ALLDEPT, str);
				format(str, sizeof(str), "Crime location: %s", GetStringVar(playerid, "CrimeLocation"));
				SendFactionMessage(LSFD, COLOR_ALLDEPT, str);
				SendFactionMessage(LSFD, COLOR_ALLDEPT, "Services required: Emergency");
				format(str, sizeof(str), "Situation: %s", text);
				SendFactionMessage(LSFD, COLOR_ALLDEPT, str);
				RemoveVar(playerid, "OnCall");
				RemoveVar(playerid, "CallWith");
				HangUpAnim(playerid);
			CancelSelectTextDraw(playerid);
			HidePhone(playerid);
				SetLastCaller(playerid);
				return 0;
			}
			else if(GetIntVar(playerid, "CallWith") == 916)
			{
				format(str, sizeof(str), "%s says (phone): %s", GetNameWithMask(playerid), text);
				ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				if(!strlen(text))
				{
					SCM(playerid, COLOR_LIGHTBLUE, "EMERGENCY: Pardon me, I understand please repeat once");
					return 0;
				}
				SetStringVar(playerid, "callLocation", text);
				SCM(playerid, COLOR_LIGHTBLUE, "EMERGENCY: Describe the situation..");
				SetStringVar(playerid, "CrimeLocation", text);
				SetIntVar(playerid, "CallWith", 917);
				return 0;
			}
			else if(GetIntVar(playerid, "CallWith") == 917)
			{
				new location[MAX_ZONE_NAME];
				GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
				SetStringVar(playerid, "callSituation", text);
				SetStringVar(playerid, "callTrace", location);
				format(str, sizeof(str), "%s says (phone): %s", GetNameWithMask(playerid), text);
				ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SCM(playerid, COLOR_LIGHTBLUE, "EMERGENCY: I alerted all units in the area. ..");
				SendFactionMessage(LSPD, COLOR_LIGHTBLUE, "|__________911 URGENCY__________|");
				SendFactionMessage(LSFD, COLOR_LIGHTBLUE, "|__________911 URGENCY__________|");
				format(str, sizeof(str), "Caller: %s, Number: %d, Trace:", GetNameWithMask(playerid), PlayerInfo[playerid][pNumber], location);
				SendFactionMessage(LSPD, COLOR_ALLDEPT, str);
				SendFactionMessage(LSFD, COLOR_ALLDEPT, str);
				format(str, sizeof(str), "Crime location: %s", GetStringVar(playerid, "CrimeLocation"));
				SendFactionMessage(LSPD, COLOR_ALLDEPT, str);
				SendFactionMessage(LSFD, COLOR_ALLDEPT, str);
				SendFactionMessage(LSPD, COLOR_LIGHTBLUE, "Services required: Emergency");
				SendFactionMessage(LSFD, COLOR_LIGHTBLUE, "Services required: Emergency");
				format(str, sizeof(str), "Situation: %s", text);
				SendFactionMessage(LSPD, COLOR_ALLDEPT, str);
				SendFactionMessage(LSFD, COLOR_ALLDEPT, str);
				RemoveVar(playerid, "OnCall");
				RemoveVar(playerid, "CallWith");
				HangUpAnim(playerid);
				CancelSelectTextDraw(playerid);
				HidePhone(playerid);
				SetLastCaller(playerid);
				return 0;
			}
			else
			{
				if(strlen(text) > MAXLEN)
				{
					new pos = MAXLEN;
					if(pos < MAXLEN-1) pos = MAXLEN;
					format(str, sizeof(str), "%s says (phone): %.*s ...", GetNameWithMask(playerid), pos, text);
					ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					format(str, sizeof(str), "%s says (phone): ... %s", GetNameWithMask(playerid), text[pos]);
					ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				else
				{
					format(str, sizeof(str), "%s says (phone): %s", GetNameWithMask(playerid), text);
					ProxDetectorP(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				if(PlayerIsOn(GetIntVar(playerid, "CallWith")))
				{
					if(GetIntVar(GetIntVar(playerid, "CallWith"), "CallWith") == playerid)
					{
						if(strlen(text) > MAXLEN)
						{
							new pos = MAXLEN;
							if(pos < MAXLEN-1) pos = MAXLEN;
							format(str, sizeof(str), "%s says (phone): %.*s ...", GetNameWithMask(playerid), pos, text);
							SCM(GetIntVar(playerid, "CallWith"), COLOR_YELLOWG, str);
							format(str, sizeof(str), "%s says (phone): ... %s", GetNameWithMask(playerid), text[pos]);
							SCM(GetIntVar(playerid, "CallWith"), COLOR_YELLOWG, str);
						}
						else
						{
							format(str, sizeof(str), "%s says (phone): %s", GetNameWithMask(playerid), text);
							SCM(GetIntVar(playerid, "CallWith"), COLOR_YELLOWG, str);
						}
					}
				}
			}
		}
	}
	return 0;
}

public OnPlayerCommandText(playerid, cmdtext[])
{
	return 0;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	OldVehicle[playerid] = vehicleid;
	if(CityVehicles[vehicleid][vCarOn])
	{
		if(CityVehicles[vehicleid][vFaction] != 0 && PlayerInfo[playerid][pFaction] != CityVehicles[vehicleid][vFaction] && !ispassenger)
		{
			SCM(playerid, COLOR_WHITE, "SERVER: You do not have permission to enter in this vehicle.");
			PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid));
			return 1;
		}
	}
	if(Gas[vehicleid] <= 0)
	{
		SCM(playerid, COLOR_WHITE, "This vehicle's fuel is empty!");
		return 1;
	}
	if(vLocked{vehicleid} && ispassenger)
	{
		SCM(playerid, COLOR_LIGHTRED, "This vehicle is locked.");
		PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid));
		return 1;
	}
	if(IsAPlane(vehicleid) && !IsADMVHeli(vehicleid) && !ispassenger || !IsADMVHeli(vehicleid) && IsAHelicopter(vehicleid) && !ispassenger)
	{
		if(PlayerInfo[playerid][pFlyLic] == 0)
		{
			SCM(playerid, COLOR_LIGHTRED, "You do not have a pilot license.");
			PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+0.1);
		}
	}
	if(IsASweepCar(vehicleid) && PlayerInfo[playerid][pJob] != SWEEPER)
	{
	    SCM(playerid, COLOR_YELLOWG, "You can't climb into this car since you do not own the respective job.");
	    PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+0.1);
	}
	if(ispassenger == 0)
	{
		if(IsADMVCar(vehicleid))
		{
			if(PlayerInfo[playerid][pCarLic])
			{
				DmvMSG(playerid, "You already have a license.");
				PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+0.1);
			}
		}
		if(IsADMVHeli(vehicleid))
		{
			if(PlayerInfo[playerid][pFlyLic])
			{
				DmvMSG(playerid, "You already have a pilot license.");
				PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+0.1);
			}
		}
	}
	if(IsABicycle(vehicleid))
	{
		if(PlayerInfo[playerid][pBMX] == 0)
		{
			PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+0.1);
			SCM(playerid, COLOR_RED, "You do not have permission to use a BMX.");
		}
		else if(!engineOn{vehicleid})
		{
			VehicleEngine(vehicleid, true);
		}
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    old_vehicle[playerid] = vehicleid;
	old_veh_seat[playerid] = GetPlayerVehicleSeat(playerid);
	if(RepairService[playerid][REPAIR_DEAD] == 1 || RepairService[playerid][REPAIR_ENGINE] == 1 || RepairService[playerid][REPAIR_BODY] == 1 || RepairService[playerid][REPAIR_PAINT] == 1)
	{
		ShowJobMessage(playerid, "~h~~p~SPRAY TO REPAINT.");
		GiveWeapon(playerid, 41, 9999);
	}
	if(IsASweepCar(vehicleid))
	{
	    SCM(playerid,COLOR_WHITE,"You get off the car, so you couldn't make the trip.");
		RemoveCheckPoint(playerid);
		RespawnVehicle(vehicleid);
	}
	if(IsADMVCar(vehicleid) && GetIntVar(playerid, "InDriveTest") == 1)
	{
		RemoveVar(playerid, "LessonStarted");
		RemoveVar(playerid, "LessonSeconds");
		RemoveVar(playerid, "InDriveTest");
		DmvMSG(playerid, "You get off the car, so you FAILED the test.");
		RemoveCheckPoint(playerid);
		RespawnVehicle(vehicleid);
	}
	if(IsADMVHeli(vehicleid) && GetIntVar(playerid, "InFlyTest") == 1)
	{
		RemoveVar(playerid, "LessonStarted");
		RemoveVar(playerid, "LessonSeconds");
		RemoveVar(playerid, "InFlyTest");
		DmvMSG(playerid, "You get off the helicopter, so you FAILED the test.");
		RemoveRaceCheckPoint(playerid);
		RespawnVehicle(vehicleid);
		SetPlayerPos(playerid, 1765.36, -2272.22, 26.796);
		SetPlayerWeapons(playerid);
	}
	if(JackingEngine[playerid] >= 0)
	{
		JackingEngine[playerid] = 0;
	}
	if(JackingEngine[playerid] != 0)
	{
		JackingEngine[playerid] = 0;
	}
	if(VehicleInfo[vehicleid][carRadioOn] == 1)
	{
		StopAudioStreamForPlayer(playerid);
	}
	UnFreezePlayer(playerid);
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	new vehicle = GetPlayerVehicleID(playerid);
	new oldvehicle = OldVehicle[playerid];
	if (newstate == PLAYER_STATE_DRIVER)
    {
		if(CityVehicles[vehicle][vFaction] != 0 && PlayerInfo[playerid][pFaction] != CityVehicles[vehicle][vFaction])
		{
			SCM(playerid, COLOR_WHITE, "SERVER: You do not have permission to use this vehicle.");
			RemovePlayerFromVehicle(playerid);
		}
		if(PlayerInfo[playerid][pJob] == TRUCKER)
		{
			if(Trucking{playerid} && TruckVehicle[playerid] == vehicle)
			{
				if(Trucking{playerid} && GetTruckStage(playerid) > 0)
				{
					if(!IsPlayerInCheckpoint(playerid) && LoadingTruck{playerid} > 0 || !IsPlayerInCheckpoint(playerid) && DroppingOff{playerid})
					{
						TextDrawSetString(TruckerDraw[playerid], "~y~GO BACK TO THE CHECKPOINT TO CONTINUE.");
					}
					else
					{
						SetTruckerText(playerid);
					}
				}
			}
			else
			{
				if(IsATruckJob(vehicle) && VehicleInfo[vehicle][carOwned] == 0)
				{
					if(!TruckCompatible(playerid, vehicle))
					{
						SCMEx(playerid, COLOR_GREY, "This type of truck is only for degree %s.", GetJobRankName(PlayerInfo[playerid][pJob], GetTruckRank(vehicle)));
						PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid));
						RemovePlayerFromVehicle(playerid);
					}
					else
					{
						SCMEx(playerid, COLOR_GRAD2, "{808080}Welcome, {FFFFFF} %s {808080}%s in your truck.", GetJobRank(playerid), GetNameEx(playerid));
					}
				}
			}
		}
	}
	if(newstate == PLAYER_STATE_ONFOOT)
	{
		if(Trucking{playerid})
		{
			TextDrawSetString(TruckerDraw[playerid], "~r~RETURN TO VEHICLE");
		}
		if(TaxiMoney[playerid] > 0 && IsATaxi(oldvehicle))
		{
			ChargePerson(playerid);
		}
	}
	if(oldstate == PLAYER_STATE_PASSENGER && newstate == PLAYER_STATE_ONFOOT) // checking if player was in a vehicle
    {
        if(GetPVarInt( playerid, "ThermalActive" ) == 1) // Checking if player have thermal active
       	{
            THERMALOFF( playerid ); // If Player exits vehicle we set his thermal mode off
        }
    }
	if (newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
    {
		if(VehicleInfo[vehicle][carRadioOn] == 1)
		{
			PlayAudioStreamForPlayer(playerid, VehicleInfo[vehicle][carRadioURL]);
		}
		if(PlayerOwnVehicle(playerid, vehicle))
		{
			if(CountVehicleTickets(vehicle) > 0)
			{
				SCM(playerid, COLOR_RED, "* You have fines for this vehicle. (/v tickets)");
			}
		}
		ShowTextDraw(playerid, SpeedText[playerid]);
		ShowTextDraw(playerid, FuelText[playerid]);
    }
	else
	{
		if(JackingEngine[playerid] >= 0)
		{
			JackingEngine[playerid] = 0;
		}
		if(JackingEngine[playerid] != 0)
		{
			JackingEngine[playerid] = 0;
		}
		UnFreezePlayer(playerid);
		HideTextDraw(playerid, SpeedText[playerid]);
		HideTextDraw(playerid, FuelText[playerid]);
    }
	if(newstate == PLAYER_STATE_PASSENGER)
    {
        if(PlayerHoldingWeapon(playerid, 24)) //Anti Desert Eagle drive-by.
		{
			SetPlayerArmedWeapon(playerid, 0);
		}
    }
	if(newstate == PLAYER_STATE_DRIVER)
	{
		if(!engineOn{vehicle} && !IsADMVCar(vehicle) && !IsADMVHeli(vehicle) && !IsABicycle(vehicle))
		{
			SCM(playerid, COLOR_GREEN,"The engine is off! Use /engine to start it.");
		}
		if(IsASweepCar(vehicle))
		{
			SCM(playerid, COLOR_GREY,"Use /sweep to start lap writing.");
		}
		if(IsARentCar(vehicle))
		{
			CarIsRented(vehicle, playerid);
		}
		if(IsATruckJob(vehicle))
		{
            SCM(playerid, COLOR_GREY,"Use /truck to start.");
		}
		if(IsARentBike(vehicle))
		{
			BikeIsRented(vehicle, playerid);
		}
		if(IsADMVCar(vehicle))
		{
			if(!PlayerInfo[playerid][pCarLic])
			{
			    if(CarLicDmv[playerid] == 1)
				{
				    new carid = GetPlayerVehicleID(playerid);
					VehicleEngine(carid, true);
					SCM(playerid, COLOR_LIGHTRED,"______________Main Driving Rules______________");
					SCM(playerid, COLOR_LIGHTRED,"1) Drive on the right side of the road");
					SCM(playerid, COLOR_LIGHTRED,"2) Do not drive too fast");
					SCM(playerid, COLOR_LIGHTRED,"3) Respect other drivers on the road");
					SCM(playerid, COLOR_WHITE,"Now enter the checkpoint and arrive to last one in time to complete");
					SCM(playerid, COLOR_WHITE,"Don't go too last, on streets you may get in trouble if you do");
					SetIntVar(playerid, "InDriveTest", 1);
					SetIntVar(playerid, "LessonSeconds", 80);
					SetCheckPoint(playerid, CAREXAM1, 1213.4760,-1843.3016,13.3828, 4.0);
					CarLicDmv[playerid] = 0;
				}
			}
		}
		if(IsADMVHeli(vehicle))
		{
			if(!PlayerInfo[playerid][pFlyLic])
			{
				if(FlyLicDmv[playerid] == 1)
				{
				    new carid = GetPlayerVehicleID(playerid);
					VehicleEngine(carid, true);
					SCM(playerid, COLOR_GREY,"[INSTRUCTOR]: Did you start the exam, drive cautiously.");
					SetIntVar(playerid, "InFlyTest", 1);
					SetIntVar(playerid, "LessonSeconds", 180);
					SetRaceCheckPoint(playerid, FLYEXAM1, 3, 1799.6403, -2253.3269, 41.0483, 1735.2058, -2151.1125, 64.9770, 6.0);
				}
			}
		}
	}

	if(newstate == PLAYER_STATE_SPAWNED)
	{
		SetPlayerHealth(playerid, 100.0+PlayerInfo[playerid][pSHealth]);
		if(PlayerInfo[playerid][pArmour] > 0.0 && PlayerInfo[playerid][pHasArmour] > 0)
		{
			SetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);
		}
		PreloadPlayerAnims(playerid);
		CheckFightStyle(playerid);
	}

	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
    new vehicle = GetPlayerVehicleID(playerid);
	new modelcar = GetVehicleModel(vehicle);
    if(Sweep[playerid] == 1)
    {
        if(IsPlayerInRangeOfPoint(playerid,10,2300.6365,-2355.5398,13.1155)&&CPSweep[playerid] == 1)
        {
            if (modelcar == 574)
            {
                DisablePlayerCheckpoint(playerid);
                CPSweep[playerid] = 2;
                SetPlayerCheckpoint(playerid, 2222.3440,-2456.0334,13.1056, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "You're not in a car company, sweeper.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2222.3440,-2456.0334,13.1056)&&CPSweep[playerid] == 2)
        {
            if (modelcar == 574)
            {
                DisablePlayerCheckpoint(playerid);
                CPSweep[playerid] = 3;
                SetPlayerCheckpoint(playerid, 2244.9373,-2665.9922,13.1564, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "You're not in a car company, sweeper.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2244.9373,-2665.9922,13.1564)&&CPSweep[playerid] == 3)
        {
            if (modelcar == 574)
            {
                DisablePlayerCheckpoint(playerid);
                CPSweep[playerid] = 4;
                SetPlayerCheckpoint(playerid, 2487.3616,-2645.7935,13.2172, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "You're not in a car company, sweeper.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2487.3616,-2645.7935,13.2172)&&CPSweep[playerid] == 4)
        {
            if (modelcar == 574)
            {
                DisablePlayerCheckpoint(playerid);
                CPSweep[playerid] = 5;
                SetPlayerCheckpoint(playerid, 2506.9612,-2506.5154,13.2570, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "You're not in a car company, sweeper.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2506.9612,-2506.5154,13.2570)&&CPSweep[playerid] == 5)
        {
            if (modelcar == 574)
            {
                DisablePlayerCheckpoint(playerid);
                CPSweep[playerid] = 6;
                SetPlayerCheckpoint(playerid, 2686.5381,-2493.0784,13.2370, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "You're not in a car company, sweeper.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2686.5381,-2493.0784,13.2370)&&CPSweep[playerid] == 6)
        {
            if (modelcar == 574)
            {
                DisablePlayerCheckpoint(playerid);
                CPSweep[playerid] = 7;
                SetPlayerCheckpoint(playerid, 2673.8613,-2402.2520,13.1829, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "You're not in a car company, sweeper.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2673.8613,-2402.2520,13.1829)&&CPSweep[playerid] == 7)
        {
            if (modelcar == 574)
            {
                DisablePlayerCheckpoint(playerid);
                CPSweep[playerid] = 8;
                SetPlayerCheckpoint(playerid, 2570.8350,-2363.8801,14.6013, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "You're not in a car company, sweeper.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2570.8350,-2363.8801,14.6013)&&CPSweep[playerid] == 8)
        {
            if (modelcar == 574)
            {
                DisablePlayerCheckpoint(playerid);
                CPSweep[playerid] = 9;
                SetPlayerCheckpoint(playerid, 2290.3286,-2084.4341,13.1062, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "You're not in a car company, sweeper.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2290.3286,-2084.4341,13.1062)&&CPSweep[playerid] == 9)
        {
            if (modelcar == 574)
            {
                DisablePlayerCheckpoint(playerid);
                CPSweep[playerid] = 10;
                SetPlayerCheckpoint(playerid, 2197.0203,-2162.7961,13.1157, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "You're not in a car company, sweeper.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2197.0203,-2162.7961,13.1157)&&CPSweep[playerid] == 10)
        {
            if (modelcar == 574)
            {
                DisablePlayerCheckpoint(playerid);
                CPSweep[playerid] = 11;
                SetPlayerCheckpoint(playerid, 2285.2185,-2265.6035,13.1002, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "You're not in a car company, sweeper.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2285.2185,-2265.6035,13.1002)&&CPSweep[playerid] == 11)
        {
            if (modelcar == 574)
            {
                DisablePlayerCheckpoint(playerid);
                CPSweep[playerid] = 12;
                SetPlayerCheckpoint(playerid, 2314.1226,-2343.0032,13.1022, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "You're not in a car company, sweeper.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2314.1226,-2343.0032,13.1022)&&CPSweep[playerid] == 12)
        {
            if (modelcar == 574)
            {
                DisablePlayerCheckpoint(playerid);
                RemovePlayerFromVehicle(playerid);
                SetVehicleToRespawn(vehicle);
                PutPlayer(playerid, 2282.02,-2364.89,13.5471);
                Sweep[playerid] = 0;
                SweepTura[playerid] = 1;
                PlayerInfo[playerid][pCanJob] = 1;
                GiveCash(playerid, 850);
                SendClientMessage(playerid,COLOR_GREY,"You finished the race! The money collected: $850");
                SendClientMessage(playerid,COLOR_GREY,"Come back later if you want!");
                SavePlayerStats(playerid);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "You're not in a car company, sweeper.");
        }
    }
	//PlayerCP >= 1 && PlayerCP <= 14
	HandleLicenseExam(playerid); //Driving License Exam Handling 14 checkpoints.
	//PlayerCP >= 1 && PlayerCP <= 14

	//PlayerCP == 25
	OnPlayerEnterParkingSpot(playerid); //Owned vehicle parking spot
	//PlayerCP == 25

	//PlayerCP == 26 && 27 && 28
	HandleTruckCheckPoint(playerid); //Trucking Check Point
	//PlayerCP == 26 && 27 && 28

	//Trucker componencts spot 29
	if(GetIntVar(playerid, "PlayerCP") == COMPSPOT)
	{
		RemoveCheckPoint(playerid);
	}
	//Trucker componencts spot 29
	//Trucker componencts spot 30
	if(GetIntVar(playerid, "PlayerCP") == FISH)
	{
		RemoveCheckPoint(playerid);
	}
	//FISH UNLOAD

	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	//PlayerCP >= 15 && PlayerCP <= 24
	HandleFlyingExam(playerid); //Flying License Exam Handling 9 race checkpoints.
	//PlayerCP >= 15 && PlayerCP <= 24
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	printf(cmd);
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	return 0;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	new Menu:CurrentMenu = GetPlayerMenu(playerid);

	//==================Food Stall Menu==================//
	if(CurrentMenu == FoodStallMenu)
    {
		switch(row)
		{
			case 0:
			{
				if(PlayerInfo[playerid][pHunger] >= 100.0)
				{
					SCM(playerid, COLOR_YELLOWG, "You are hungry.");
					UnFreezePlayer(playerid);
					return 1;
				}
				if(GetCash(playerid) < HOTDOG_PRICE)
				{
					NoCashMSG(playerid);
					UnFreezePlayer(playerid);
					return 1;
				}
				SCM(playerid, COLOR_YELLOWG, "You bought a noodle meal for $50.");
				format(msg, sizeof(msg), "> %s has bought a noodle meal, and eats it.", GetNameWithMask(playerid));
				SetPlayerChatBubble(playerid, msg, COLOR_PURPLE, 15.0, 10000);
				GiveCash(playerid, -50);
				if(PlayerInfo[playerid][pHunger] <= 85.0)
				{
				  SendClientMessage(playerid, -1, "You've gained some strenght.");
				  GivePlayerHealth(playerid, 10);
				}
				else
				{
				    GivePlayerHealth(playerid, 10);
					SendClientMessage(playerid, -1, "You've gained some strenght.");
				}
				UnFreezePlayer(playerid);
				OnPlayAnim(playerid,"VENDING","VEND_Eat_P", 1.0, 0, 0, 0, 0, 0);
			}
			case 1:
			{
				if(PlayerInfo[playerid][pHunger] >= 100.0)
				{
					SCM(playerid, COLOR_YELLOWG, "You are not hungry.");
					UnFreezePlayer(playerid);
					return 1;
				}
				if(GetCash(playerid) < HOTDOG_PRICE)
				{
					NoCashMSG(playerid);
					UnFreezePlayer(playerid);
					return 1;
				}
				SCM(playerid, COLOR_YELLOWG, "You have bought a pizza slice for $25.");
				format(msg, sizeof(msg), "> %s has bought a pizza slice, and eats it.", GetNameWithMask(playerid));
				SetPlayerChatBubble(playerid, msg, COLOR_PURPLE, 15.0, 10000);
				GiveCash(playerid, -25);
				if(PlayerInfo[playerid][pHunger] <= 95.0)
				{
				    GivePlayerHealth(playerid, 15);
					//AddHunger(playerid, 5.0);
				}
				else
				{
				    GivePlayerHealth(playerid, 15);
					//SetHunger(playerid, 100.0);
				}
				UnFreezePlayer(playerid);
				OnPlayAnim(playerid,"VENDING","VEND_Eat_P", 1.0, 0, 0, 0, 0, 0);
			}
			case 2:
			{
				if(PlayerInfo[playerid][pHunger] >= 100.0)
				{
					SCM(playerid, COLOR_YELLOWG, "You are not hungry.");
					UnFreezePlayer(playerid);
					return 1;
				}
				if(GetCash(playerid) < HOTDOG_PRICE)
				{
					NoCashMSG(playerid);
					UnFreezePlayer(playerid);
					return 1;
				}
				SCM(playerid, COLOR_YELLOWG, "You have bought a Chicken Wings meal for $80.");
				format(msg, sizeof(msg), "> %s has bought a Chicken Wings meal, and eats it.", GetNameWithMask(playerid));
				SetPlayerChatBubble(playerid, msg, COLOR_PURPLE, 15.0, 10000);
				GiveCash(playerid, -80);
				if(PlayerInfo[playerid][pHunger] <= 80.0)
				{
				    GivePlayerHealth(playerid, 20);
					//AddHunger(playerid, 20.0);
				}
				else
				{
				    GivePlayerHealth(playerid, 20);
					//SetHunger(playerid, 100.0);
				}
				UnFreezePlayer(playerid);
				OnPlayAnim(playerid,"VENDING","VEND_Eat_P", 1.0, 0, 0, 0, 0, 0);
			}
			case 3:
			{
				if(PlayerInfo[playerid][pHunger] >= 100.0)
				{
					SCM(playerid, COLOR_YELLOWG, "You are not hungry.");
					UnFreezePlayer(playerid);
					return 1;
				}
				if(GetCash(playerid) < HOTDOG_PRICE)
				{
					NoCashMSG(playerid);
					UnFreezePlayer(playerid);
					return 1;
				}
				SCM(playerid, COLOR_YELLOWG, "You have bought a hotdog in a roll for $40.");
				format(msg, sizeof(msg), "> %s has bought a hot dog in a roll, and eats it.", GetNameWithMask(playerid));
				SetPlayerChatBubble(playerid, msg, COLOR_PURPLE, 15.0, 10000);
				GiveCash(playerid, -40);
				if(PlayerInfo[playerid][pHunger] <= 90)
				{
				    GivePlayerHealth(playerid, 10);
					//AddHunger(playerid, 10.0);
				}
				else
				{
				    GivePlayerHealth(playerid, 10);
					//SetHunger(playerid, 100.0);
				}
				UnFreezePlayer(playerid);
				OnPlayAnim(playerid,"VENDING","VEND_Eat_P", 1.0, 0, 0, 0, 0, 0);
			}
			case 4:
			{
				HideMenuForPlayer(Menu:FoodStallMenu, playerid);
				UnFreezePlayer(playerid);
				SCM(playerid, COLOR_YELLOWG,"You closed the food menu.");
			}
		}
	}
	//==================Food Stall Menu==================//
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	UnFreezePlayer(playerid);
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	new str[500];


	if ( PRESSED(KEY_FIRE) && GetPVarInt(playerid, "GraffitiCreating") == 1 ) // CHeck if player is pressing FIRE key and if he have a positiv pvar on graffiticreating
	{
		if( GetPlayerWeapon(playerid) == 41 ) // Checking if player is holding WEAPON SPRAYCAN
		{
		    spraytimer[playerid] = SetTimerEx( "spraying", 1000, true, "i", playerid ); // STarting a timer for spraying
		    PlayAudioStreamForPlayer(playerid, SPRAYCANSOUND);
		    KillTimer( spraytimerx[playerid] );
		}
	}

	if ( RELEASED( KEY_FIRE ) && GetPVarInt(playerid, "GraffitiCreating") == 1 ) // If player releases his fire key
	{

		if( GetPlayerWeapon(playerid) == 41 ) // IF player has a spraycan
		{
		    KillTimer( spraytimer[playerid] ); // Killing the timer so it wont keep going
	    	sprayammount[playerid] --; // Removing one POINT of spray for releasing the fire button
	    	GameTextForPlayer( playerid,"~g~Continue to spray!!",3000, 5 ); // <---
    	 	StopAudioStreamForPlayer(playerid);
    	 	spraytimerx[playerid] = SetTimerEx( "killgr", 90000, true, "i", playerid );
		}
	}

	if(PRESSED(KEY_FIRE) && RepairOffer[playerid] != INVALID_PLAYER_ID)
	{
		if(VehicleToRepair[playerid] != INVALID_VEHICLE_ID)
		{
			if(RepairService[playerid][REPAIR_DEAD] == 1 || RepairService[playerid][REPAIR_ENGINE] == 1 || RepairService[playerid][REPAIR_BODY] == 1 || RepairService[playerid][REPAIR_PAINT] == 1)
			{
				new Float:x, Float:y, Float:z;
				GetVehiclePos(VehicleToRepair[playerid], x, y, z);
				if(!IsPlayerInRangeOfPoint(playerid, 4.2, x, y, z))
				{
					ShowJobMessage(playerid, "~h~~p~YOU NEED TO BE NEAR THE CAR.");
				}
				else
				{
					RepairOffer[playerid] = INVALID_PLAYER_ID;
					RepairTime{playerid} = 15;
				}
			}
		}
	}
	if(PRESSED(KEY_HANDBRAKE) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && PlayerInfo[playerid][pFaction] == LSPD)
	{
		if(radar[playerid] == 1)
		{
			new Float:x,Float:y,Float:z,vehicle;
			foreach(Player, i)
			{
				if(PlayerInCar(i))
				{
					vehicle = GetPlayerVehicleID(i);
					if(VehicleInfo[vehicle][carOwned] == 1)
					{
						if(IsPlayerStreamedIn(i, playerid))
						{
							GetPlayerPos(i,x,y,z);
							if(IsPlayerAimingAt(playerid,x,y,z,6))
							{
								new string[68];
								format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~b~License plate: ~w~%s~n~~b~Speed: ~w~%d MPH", VehicleInfo[vehicle][carPlate], GetVehicleSpeed(vehicle));
								GameTextForPlayer(playerid, string, 3500, 3);
								format(string, sizeof(string), "License plate: %s. Speed: %d MPH", VehicleInfo[vehicle][carPlate], GetVehicleSpeed(vehicle) );
								SCM(playerid, COLOR_GRAD4, string);
								return 1;
							}
						}
					}
				}
			}
		}
	}
	if(RELEASED(KEY_FIRE) && !CopDuty{playerid} && !SwatDuty{playerid} && !DeputyDuty{playerid})
    {
		if(GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm1]) > 0)
		{
			PlayerInfo[playerid][pAmmo1] = GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm1]);
		}
		else PlayerInfo[playerid][pPerm1] = 0;

		if(GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm2]) > 0)
		{
			PlayerInfo[playerid][pAmmo2] = GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm2]);
		}
		else PlayerInfo[playerid][pPerm2] = 0;
    }
	if(PRESSED(KEY_SPRINT) && GetIntVar(playerid, "RegisterPart") >= 7 && GetIntVar(playerid, "MovingToTutorial") == 0)
	{
		UpdateIntVar(playerid, "RegisterPart", 1);
		ShowTutorialLocations(playerid);
	}
	if(PRESSED(KEY_HANDBRAKE) && GetIntVar(playerid, "BrowsingSkins") == 1)
	{
		if(SkinSlot[playerid] >= sizeof(StoreSkins)) return 1;
		SkinSlot[playerid]++;
		SetPlayerSkin(playerid, StoreSkins[SkinSlot[playerid]]);
		SetIntVar(playerid, "SkinBuying", StoreSkins[SkinSlot[playerid]]);
	}
	if(PRESSED(KEY_FIRE) && GetIntVar(playerid, "BrowsingSkins") == 1)
	{
		if(SkinSlot[playerid] < 1) return 1;
		SkinSlot[playerid]--;
		SetPlayerSkin(playerid, StoreSkins[SkinSlot[playerid]]);
		SetIntVar(playerid, "SkinBuying", StoreSkins[SkinSlot[playerid]]);
	}
	if(PRESSED(KEY_ANALOG_LEFT))
	{
		new vehicle = GetPlayerVehicleID(playerid);
		if(IsModding{playerid})
		{
			if(GetIntVar(playerid, "BrowsingWheels") == 1)
			{
				if(GetIntVar(playerid, "CompSlot") == 0) return 1;
				UpdateIntVar(playerid, "CompSlot", -1);
				SetIntVar(playerid, "CompPrice", Wheels[GetIntVar(playerid, "CompSlot")][compPrice]);
				SetIntVar(playerid, "CompID", Wheels[GetIntVar(playerid, "CompSlot")][compID]);
			}
			else if(GetIntVar(playerid, "BrowsingSpoilers") == 1)
			{
				if(GetIntVar(playerid, "CompSlot") == 0) return 1;
				UpdateIntVar(playerid, "CompSlot", -1);
				SetIntVar(playerid, "CompPrice", Spoilers[GetIntVar(playerid, "CompSlot")][compPrice]);
				SetIntVar(playerid, "CompID", Spoilers[GetIntVar(playerid, "CompSlot")][compID]);
			}
			else if(GetIntVar(playerid, "BrowsingScoops") == 1)
			{
				if(GetIntVar(playerid, "CompSlot") == 0) return 1;
				UpdateIntVar(playerid, "CompSlot", -1);
				SetIntVar(playerid, "CompPrice", Scoops[GetIntVar(playerid, "CompSlot")][compPrice]);
				SetIntVar(playerid, "CompID", Scoops[GetIntVar(playerid, "CompSlot")][compID]);
			}
			else if(GetIntVar(playerid, "BrowsingRoofs") == 1)
			{
				if(GetIntVar(playerid, "CompSlot") == 0) return 1;
				UpdateIntVar(playerid, "CompSlot", -1);
				SetIntVar(playerid, "CompPrice", Roofs[GetIntVar(playerid, "CompSlot")][compPrice]);
				SetIntVar(playerid, "CompID", Roofs[GetIntVar(playerid, "CompSlot")][compID]);
			}
			else if(GetIntVar(playerid, "BrowsingSkirts") == 1)
			{
				if(GetIntVar(playerid, "CompSlot") == 0) return 1;
				UpdateIntVar(playerid, "CompSlot", -1);
				SetIntVar(playerid, "CompPrice", Sideskirts[GetIntVar(playerid, "CompSlot")][compPrice]);
				SetIntVar(playerid, "CompID", Sideskirts[GetIntVar(playerid, "CompSlot")][compID]);
			}
			else if(GetIntVar(playerid, "BrowsingExhausts") == 1)
			{
				if(GetIntVar(playerid, "CompSlot") == 0) return 1;
				UpdateIntVar(playerid, "CompSlot", -1);
				SetIntVar(playerid, "CompPrice", Exhausts[GetIntVar(playerid, "CompSlot")][compPrice]);
				SetIntVar(playerid, "CompID", Exhausts[GetIntVar(playerid, "CompSlot")][compID]);
			}
			SetStringVar(playerid, "CompName", GetComponentName(GetIntVar(playerid, "CompID")));
			PlaySound(playerid, 1133);
			HandleComponentText(playerid, vehicle);
		}
		if(BuyingPaintJob{playerid})
		{
			if(GetIntVar(playerid, "BrowsingPaints") == 1)
			{
				if(GetIntVar(playerid, "OnPaint") == 0) return 1;
				UpdateIntVar(playerid, "OnPaint", -1);
				HandlePaintJobText(playerid, vehicle);
				ChangeVehiclePaintjob(GetPlayerVehicleID(playerid), GetIntVar(playerid, "OnPaint"));
			}
		}
	}
	if(PRESSED(KEY_ANALOG_RIGHT))
	{
		new vehicle = GetPlayerVehicleID(playerid);
		if(IsModding{playerid})
		{
			if(GetIntVar(playerid, "BrowsingWheels") == 1)
			{
				if(GetIntVar(playerid, "CompSlot") == sizeof(Wheels)-1) return 1;
				UpdateIntVar(playerid, "CompSlot", 1);
				SetIntVar(playerid, "CompPrice", Wheels[GetIntVar(playerid, "CompSlot")][compPrice]);
				SetIntVar(playerid, "CompID", Wheels[GetIntVar(playerid, "CompSlot")][compID]);
			}
			else if(GetIntVar(playerid, "BrowsingSpoilers") == 1)
			{
				if(GetIntVar(playerid, "CompSlot") == sizeof(Spoilers)-1) return 1;
				UpdateIntVar(playerid, "CompSlot", 1);
				SetIntVar(playerid, "CompPrice", Spoilers[GetIntVar(playerid, "CompSlot")][compPrice]);
				SetIntVar(playerid, "CompID", Spoilers[GetIntVar(playerid, "CompSlot")][compID]);
			}
			else if(GetIntVar(playerid, "BrowsingScoops") == 1)
			{
				if(GetIntVar(playerid, "CompSlot") == sizeof(Scoops)-1) return 1;
				UpdateIntVar(playerid, "CompSlot", 1);
				SetIntVar(playerid, "CompPrice", Scoops[GetIntVar(playerid, "CompSlot")][compPrice]);
				SetIntVar(playerid, "CompID", Scoops[GetIntVar(playerid, "CompSlot")][compID]);
			}
			else if(GetIntVar(playerid, "BrowsingRoofs") == 1)
			{
				if(GetIntVar(playerid, "CompSlot") == sizeof(Roofs)-1) return 1;
				UpdateIntVar(playerid, "CompSlot", 1);
				SetIntVar(playerid, "CompPrice", Roofs[GetIntVar(playerid, "CompSlot")][compPrice]);
				SetIntVar(playerid, "CompID", Roofs[GetIntVar(playerid, "CompSlot")][compID]);
			}
			else if(GetIntVar(playerid, "BrowsingSkirts") == 1)
			{
				if(GetIntVar(playerid, "CompSlot") == sizeof(Sideskirts)-1) return 1;
				UpdateIntVar(playerid, "CompSlot", 1);
				SetIntVar(playerid, "CompPrice", Sideskirts[GetIntVar(playerid, "CompSlot")][compPrice]);
				SetIntVar(playerid, "CompID", Sideskirts[GetIntVar(playerid, "CompSlot")][compID]);
			}
			else if(GetIntVar(playerid, "BrowsingExhausts") == 1)
			{
				if(GetIntVar(playerid, "CompSlot") == sizeof(Exhausts)-1) return 1;
				UpdateIntVar(playerid, "CompSlot", 1);
				SetIntVar(playerid, "CompPrice", Exhausts[GetIntVar(playerid, "CompSlot")][compPrice]);
				SetIntVar(playerid, "CompID", Exhausts[GetIntVar(playerid, "CompSlot")][compID]);
			}
			SetStringVar(playerid, "CompName", GetComponentName(GetIntVar(playerid, "CompID")));
			PlaySound(playerid, 1133);
			HandleComponentText(playerid, vehicle);
		}
		if(BuyingPaintJob{playerid})
		{
			if(GetIntVar(playerid, "BrowsingPaints") == 1)
			{
				if(GetIntVar(playerid, "OnPaint") == 2) return 1;
				UpdateIntVar(playerid, "OnPaint", 1);
				HandlePaintJobText(playerid, vehicle);
				ChangeVehiclePaintjob(GetPlayerVehicleID(playerid), GetIntVar(playerid, "OnPaint"));
			}
		}
	}
	if(PRESSED(KEY_YES))
	{
		new vehicle = GetPlayerVehicleID(playerid);
		if(IsModding{playerid})
		{
			if(!ModFitsForCar(GetVehicleModel(vehicle), GetIntVar(playerid, "CompID"))) return SCM(playerid, COLOR_INFO, "You can't buy this one.");
			if(HasComponent(vehicle, GetIntVar(playerid, "CompID"))) return SCM(playerid, COLOR_INFO, "You already have this component.");
			if(GetCash(playerid) < GetIntVar(playerid, "CompPrice")) return NoCashMSG(playerid);
			if(GetIntVar(playerid, "BrowsingWheels") == 1)
			{
				format(str, sizeof(str), "You have successfully bought %s wheel for $%d", GetStringVar(playerid, "CompName"), GetIntVar(playerid, "CompPrice"));
				SetVehicleComponent(vehicle, GetIntVar(playerid, "CompID"), CARMODTYPE_WHEELS);
				RemoveVar(playerid, "BrowsingWheels");
			}
			else if(GetIntVar(playerid, "BrowsingSpoilers") == 1)
			{
				format(str, sizeof(str), "You have succefully bought %s spoiler for $%d", GetStringVar(playerid, "CompName"), GetIntVar(playerid, "CompPrice"));
				SetVehicleComponent(vehicle, GetIntVar(playerid, "CompID"), CARMODTYPE_SPOILER);
				RemoveVar(playerid, "BrowsingSpoilers");
			}
			else if(GetIntVar(playerid, "BrowsingScoops") == 1)
			{
				format(str, sizeof(str), "You have succefully bought %s scoop for $%d", GetStringVar(playerid, "CompName"), GetIntVar(playerid, "CompPrice"));
				SetVehicleComponent(vehicle, GetIntVar(playerid, "CompID"), CARMODTYPE_HOOD);
				RemoveVar(playerid, "BrowsingScoops");
			}
			else if(GetIntVar(playerid, "BrowsingRoofs") == 1)
			{
				format(str, sizeof(str), "You have succefully bought %s roof for $%d", GetStringVar(playerid, "CompName"), GetIntVar(playerid, "CompPrice"));
				SetVehicleComponent(vehicle, GetIntVar(playerid, "CompID"), CARMODTYPE_ROOF);
				RemoveVar(playerid, "BrowsingRoofs");
			}
			else if(GetIntVar(playerid, "BrowsingSkirts") == 1)
			{
				format(str, sizeof(str), "You have succefully bought %s sideskirt for $%d", GetStringVar(playerid, "CompName"), GetIntVar(playerid, "CompPrice"));
				SetVehicleComponent(vehicle, GetIntVar(playerid, "CompID"), CARMODTYPE_SIDESKIRT);
				RemoveVar(playerid, "BrowsingSkirts");
			}
			else if(GetIntVar(playerid, "BrowsingExhausts") == 1)
			{
				format(str, sizeof(str), "You have succefully bought %s exhaust for $%d", GetStringVar(playerid, "CompName"), GetIntVar(playerid, "CompPrice"));
				SetVehicleComponent(vehicle, GetIntVar(playerid, "CompID"), CARMODTYPE_EXHAUST);
				RemoveVar(playerid, "BrowsingExhausts");
			}
			SCM(playerid, COLOR_INFO, str);
			GiveCash(playerid, -GetIntVar(playerid, "CompPrice"));
			PlaySound(playerid, 1133);
			RemoveVar(playerid, "CompPrice");
			RemoveVar(playerid, "CompType");
			RemoveVar(playerid, "CompName");
			RemoveVar(playerid, "CompID");
			RemoveVar(playerid, "CompSlot");
			IsModding{playerid} = false;
			BackToDealerShip(playerid);
		}
		if(BuyingPaintJob{playerid})
		{
			if(GetIntVar(playerid, "BrowsingPaints") == 1)
			{
				if(HasPaintJob(vehicle, GetIntVar(playerid, "OnPaint"))) return SCM(playerid, COLOR_INFO, "You already have this paintjob.");
				if(GetCash(playerid) < 10000) return NoCashMSG(playerid);
				SetVehiclePaintJob(vehicle, GetIntVar(playerid, "OnPaint"));
				SCM(playerid, COLOR_INFO, "You bought a paint-job for $10,000");
				GiveCash(playerid, -10000);
				PlaySound(playerid, 1134);
				RemoveVar(playerid, "OnPaint");
				RemoveVar(playerid, "BrowsingPaints");
				BuyingPaintJob{playerid} = false;
				BackToDealerShip(playerid);
			}
		}
	}
	if(PRESSED(KEY_NO))
	{
		new vehicle = GetPlayerVehicleID(playerid);
		if(IsModding{playerid})
		{
			if(GetIntVar(playerid, "BrowsingWheels") == 1)
			{
				if(ComponentSlotTaken(vehicle, CARMODTYPE_WHEELS))
					AddVehicleComponent(vehicle, VehicleInfo[vehicle][carComponent][CARMODTYPE_WHEELS]);
				else
					RemoveVehicleComponent(vehicle, GetIntVar(playerid, "CompID"));
				RemoveVar(playerid, "BrowsingWheels");
			}
			else if(GetIntVar(playerid, "BrowsingSpoilers") == 1)
			{
				if(ComponentSlotTaken(vehicle, CARMODTYPE_SPOILER))
					AddVehicleComponent(vehicle, VehicleInfo[vehicle][carComponent][CARMODTYPE_SPOILER]);
				else
					RemoveVehicleComponent(vehicle, GetIntVar(playerid, "CompID"));
				RemoveVar(playerid, "BrowsingSpoilers");
			}
			else if(GetIntVar(playerid, "BrowsingScoops") == 1)
			{
				if(ComponentSlotTaken(vehicle, CARMODTYPE_HOOD))
					AddVehicleComponent(vehicle, VehicleInfo[vehicle][carComponent][CARMODTYPE_HOOD]);
				else
					RemoveVehicleComponent(vehicle, GetIntVar(playerid, "CompID"));
				RemoveVar(playerid, "BrowsingScoops");
			}
			else if(GetIntVar(playerid, "BrowsingRoofs") == 1)
			{
				if(ComponentSlotTaken(vehicle, CARMODTYPE_ROOF))
					AddVehicleComponent(vehicle, VehicleInfo[vehicle][carComponent][CARMODTYPE_ROOF]);
				else
					RemoveVehicleComponent(vehicle, GetIntVar(playerid, "CompID"));
				RemoveVar(playerid, "BrowsingRoofs");
			}
			else if(GetIntVar(playerid, "BrowsingSkirts") == 1)
			{
				if(ComponentSlotTaken(vehicle, CARMODTYPE_SIDESKIRT))
					AddVehicleComponent(vehicle, VehicleInfo[vehicle][carComponent][CARMODTYPE_SIDESKIRT]);
				else
					RemoveVehicleComponent(vehicle, GetIntVar(playerid, "CompID"));
				RemoveVar(playerid, "BrowsingSkirts");
			}
			else if(GetIntVar(playerid, "BrowsingExhausts") == 1)
			{
				if(ComponentSlotTaken(vehicle, CARMODTYPE_EXHAUST))
					AddVehicleComponent(vehicle, VehicleInfo[vehicle][carComponent][CARMODTYPE_EXHAUST]);
				else
					RemoveVehicleComponent(vehicle, GetIntVar(playerid, "CompID"));
				RemoveVar(playerid, "BrowsingExhausts");
			}
			SCM(playerid, COLOR_INFO, "You have successfully out from the menu.");
			PlaySound(playerid, 1133);
			RemoveVar(playerid, "CompPrice");
			RemoveVar(playerid, "CompType");
			RemoveVar(playerid, "CompName");
			RemoveVar(playerid, "CompID");
			RemoveVar(playerid, "CompSlot");
			IsModding{playerid} = false;
			BackToDealerShip(playerid);
		}
		if(BuyingPaintJob{playerid})
		{
			if(GetIntVar(playerid, "BrowsingPaints") == 1)
			{
				if(VehicleInfo[vehicle][carPaintJob] != 3)
				{
					ChangeVehiclePaintjob(vehicle, VehicleInfo[vehicle][carPaintJob]);
				}
				else
				{
					ChangeVehicleColor(vehicle, VehicleInfo[vehicle][carColor1], VehicleInfo[vehicle][carColor2]);
					ChangeVehiclePaintjob(vehicle, 3);
				}
				SCM(playerid, COLOR_INFO, "You have successfully out from the menu.");
				PlaySound(playerid, 1134);
				RemoveVar(playerid, "OnPaint");
				RemoveVar(playerid, "BrowsingPaints");
				BuyingPaintJob{playerid} = false;
				BackToDealerShip(playerid);
			}
		}
	}
	if(PRESSED(KEY_SECONDARY_ATTACK))
	{
		//====================== Exit ======================//
		for(new i = 0; i < sizeof(DoorInfo); i ++)
		{
			if (PlayerToPoint(3, playerid,DoorInfo[i][dExitX], DoorInfo[i][dExitY], DoorInfo[i][dExitZ]) && GetWorld(playerid) == DoorInfo[i][dVirtualWorld])
			{
				SetPlayerPos(playerid,DoorInfo[i][dEnterX],DoorInfo[i][dEnterY],DoorInfo[i][dEnterZ]);
				SetInterior(playerid,DoorInfo[i][dEnterInterior]);
				SetWorld(playerid, 0);
				DoorEntered[playerid] = -1;
				return 1;
			}
		}
		for(new i = 0; i < sizeof(ComplexInfo); i ++)
		{
			if (PlayerToPoint(3, playerid,ComplexInfo[i][cxExitX], ComplexInfo[i][cxExitY], ComplexInfo[i][cxExitZ]) && GetWorld(playerid) == ComplexInfo[i][cxWorld])
			{
				SetPlayerPos(playerid,ComplexInfo[i][cxEnterX],ComplexInfo[i][cxEnterY],ComplexInfo[i][cxEnterZ]);
				SetInterior(playerid,0);
				SetWorld(playerid, 0);
				ComplexEntered[playerid] = -1;
				return 1;
			}
		}
		for(new i = 0; i < sizeof(FactionDoors); i ++)
		{
			if (PlayerToPoint(3, playerid,FactionDoors[i][dExitX], FactionDoors[i][dExitY], FactionDoors[i][dExitZ]))
			{
				if(FactionDoors[i][dWithVehicle] == 1 && IsDriver(playerid))
				{
					SetVehiclePos(GetPlayerVehicleID(playerid),FactionDoors[i][dEnterX],FactionDoors[i][dEnterY],FactionDoors[i][dEnterZ]);
					SetInterior(playerid,FactionDoors[i][dEnterInterior]);
					SetWorld(playerid, 0);
					SetVehicleZAngle(GetPlayerVehicleID(playerid), FactionDoors[i][dExitAngle]);
					LinkVehicleToInterior(GetPlayerVehicleID(playerid), FactionDoors[i][dEnterInterior]);
					SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
					FreezePlayer(playerid);
					GameTextForPlayer(playerid, "~r~Loading items...", 1000, 4);
					SetTimerEx("UnFreezePlayer", 900, 0, "i", playerid);
				}
				else
				{
					SetPlayerPos(playerid,FactionDoors[i][dEnterX],FactionDoors[i][dEnterY],FactionDoors[i][dEnterZ]);
					SetInterior(playerid,FactionDoors[i][dEnterInterior]);
					SetWorld(playerid, 0);
					FreezePlayer(playerid);
					GameTextForPlayer(playerid, "~r~Loading items...", 1000, 4);
					SetTimerEx("UnFreezePlayer", 900, 0, "i", playerid);
				}
				return 1;
			}
		}
		for(new i = 0; i <  sizeof(HouseInfo); i++)
		{
			if (PlayerToPoint(3, playerid,HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && HouseInfo[i][hWorld] == GetWorld(playerid))
			{
				if(HouseEntered[playerid] == i)
				{
					if(HouseInfo[i][hLocked] == 1) return GameTextForPlayer(playerid, "~r~Closed", 5000, 1);
					SetCameraBehindPlayer(playerid);
					SetPlayerPos(playerid,HouseInfo[i][hEntranceX],HouseInfo[i][hEntranceY],HouseInfo[i][hEntranceZ]);
					SetWorld(playerid,0);
					SetInterior(playerid,0);
					HouseEntered[playerid] = 0;
					StopAudioStreamForPlayer(playerid);
					if(HouseInfo[i][hRadioOn])
					{
						StopAudioStreamForPlayer(playerid);
					}
					return 1;
				}
			}
		}
		for(new i = 0; i < sizeof(BizInfo); i++)
		{
			if (PlayerToPoint(5, playerid,BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]) && GetWorld(playerid) == i)
			{
				if(BizInfo[i][bizLocked] == 1) return GameTextForPlayer(playerid, "~r~Closed", 5000, 1);
				SetPlayerPos(playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]);
				SetInterior(playerid,0);
				SetWorld(playerid,0);
				BizEntered[playerid] = -1;
				FreezePlayer(playerid);
				SetTimerEx("UnFreezePlayer", 1000, 0, "i", playerid);
				if(BizInfo[i][bizRadioOn])
				{
					StopAudioStreamForPlayer(playerid);
				}
				return 1;
			}
		}
		
		//====================== Enter ======================//
		for(new i = 0; i < sizeof(DoorInfo); i ++)
		{
			if (PlayerToPoint(3, playerid,DoorInfo[i][dEnterX], DoorInfo[i][dEnterY], DoorInfo[i][dEnterZ]))
			{
				SetPlayerPos(playerid,DoorInfo[i][dExitX],DoorInfo[i][dExitY],DoorInfo[i][dExitZ]);
				SetInterior(playerid,DoorInfo[i][dExitInterior]);
				SetWorld(playerid,DoorInfo[i][dVirtualWorld]);
				DoorEntered[playerid] = i;
				FreezePlayer(playerid);
				GameTextForPlayer(playerid, "~r~Loading items...", 2000, 4);
				SetTimerEx("UnFreezePlayer", 2000, 0, "i", playerid);
				return 1;
			}
		}
		for(new i = 0; i < sizeof(ComplexInfo); i ++)
		{
			if (PlayerToPoint(3, playerid,ComplexInfo[i][cxEnterX], ComplexInfo[i][cxEnterY], ComplexInfo[i][cxEnterZ]))
			{
				SetPlayerPos(playerid,ComplexInfo[i][cxExitX],ComplexInfo[i][cxExitY],ComplexInfo[i][cxExitZ]);
				SetWorld(playerid,ComplexInfo[i][cxWorld]);
				ComplexEntered[playerid] = i;
				FreezePlayer(playerid);
				GameTextForPlayer(playerid, "~r~Loading items...", 2000, 4);
				SetTimerEx("UnFreezePlayer", 2000, 0, "i", playerid);
				return 1;
			}
		}
		for(new i = 0; i < sizeof(FactionDoors); i ++)
		{
			if (PlayerToPoint(3, playerid,FactionDoors[i][dEnterX], FactionDoors[i][dEnterY], FactionDoors[i][dEnterZ]))
			{
				if(FactionDoors[i][dLocked] == 0)
				{
					if(FactionDoors[i][dWithVehicle] == 1 && IsDriver(playerid))
					{
						SetVehiclePos(GetPlayerVehicleID(playerid),FactionDoors[i][dExitX],FactionDoors[i][dExitY],FactionDoors[i][dExitZ]);
						SetInterior(playerid,FactionDoors[i][dExitInterior]);
						SetWorld(playerid,FactionDoors[i][dVirtualWorld]);
						SetVehicleZAngle(GetPlayerVehicleID(playerid), FactionDoors[i][dEnterAngle]);
						LinkVehicleToInterior(GetPlayerVehicleID(playerid), FactionDoors[i][dExitInterior]);
						SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), FactionDoors[i][dVirtualWorld]);
						FreezePlayer(playerid);
						GameTextForPlayer(playerid, "~r~Loading items...", 2000, 4);
						SetTimerEx("UnFreezePlayer", 2000, 0, "i", playerid);
					}
					else
					{
						SetPlayerPos(playerid, FactionDoors[i][dExitX], FactionDoors[i][dExitY], FactionDoors[i][dExitZ]);
						SetInterior(playerid,FactionDoors[i][dExitInterior]);
						SetWorld(playerid,FactionDoors[i][dVirtualWorld]);
						FreezePlayer(playerid);
						GameTextForPlayer(playerid, "~r~Loading items...", 2000, 4);
						SetTimerEx("UnFreezePlayer", 2000, 0, "i", playerid);
					}
					return 1;
				}
				else return GameTextForPlayer(playerid, "~r~LOCKED", 5000, 6);
			}
		}
		for(new i = 0; i < sizeof(HouseInfo); i++)
		{
			if (PlayerToPoint(3, playerid,HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
			{
				if(HouseInfo[i][hLocked] == 1) return GameTextForPlayer(playerid, "~r~Locked", 5000, 1);
				SetPlayerPos(playerid,HouseInfo[i][hExitX],HouseInfo[i][hExitY],HouseInfo[i][hExitZ]);
				SetInterior(playerid,HouseInfo[i][hInterior]);
				SetWorld(playerid,HouseInfo[i][hWorld]);
				HouseEntered[playerid] = i;
				if(PlayerInfo[playerid][pHouseKey] == i)
				{
					GameTextForPlayer(playerid, "~w~Welcome to the house", 5000, 1);
				}
				FreezePlayer(playerid);
				GameTextForPlayer(playerid, "~r~Loading items...", 2000, 4);
				SetTimerEx("UnFreezePlayer", 1200, 0, "i", playerid);
				if(HouseInfo[i][hRadioOn] == 1)
				{
					PlayAudioStreamForPlayer(playerid, HouseInfo[i][hRadioURL]);
				}
				return 1;
			}
		}
		for(new i = 0; i < sizeof(BizInfo); i++)
		{
			if (PlayerToPoint(3, playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]))
			{
				if(BizInfo[i][bizLocked] == 1) return GameTextForPlayer(playerid, "~r~Closed", 5000, 1);
				if(PlayerInfo[playerid][pBizKey] != i && PlayerInfo[playerid][pWorkOn] != i)
				{
					if(GetCash(playerid) < BizInfo[i][bizEntrance]) return GameTextForPlayer(playerid, "~r~No cash", 5000, 1);
				}
				SetPlayerPos(playerid,BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]);
				SetInterior(playerid,BizInfo[i][bizInterior]);
				SetWorld(playerid,BizInfo[i][bizWorld]);
				SCM(playerid, COLOR_WHITE, BizInfo[i][bizEnterMSG]);
				if(PlayerInfo[playerid][pBizKey] != i && PlayerInfo[playerid][pWorkOn] != i)
				{
					GiveCash(playerid, -BizInfo[i][bizEntrance]);
					BizInfo[i][bizCash] += BizInfo[i][bizEntrance];
				}
				BizEntered[playerid] = i;
				FreezePlayer(playerid);
				GameTextForPlayer(playerid, "~r~Loading items...", 2000, 4);
				SetTimerEx("UnFreezePlayer", 1200, 0, "i", playerid);
				if(BizInfo[i][bizRadioOn] == 1)
				{
					PlayAudioStreamForPlayer(playerid, BizInfo[i][bizRadioURL]);
				}
				return 1;
			}
		}
	}
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

public OnPlayerUpdate( playerid )
{
 	static
		s_iVehicle
	;

	if ( g_fSpeedCap[ playerid ] != 0.0 && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		s_iVehicle = GetPlayerVehicleID( playerid );

		if ( s_iVehicle )
		{
			static
				Float:s_fX,
				Float:s_fY,
				Float:s_fZ,
				Float:s_fVX,
				Float:s_fVY,
				Float:s_fVZ
			;

			GetVehiclePos( s_iVehicle, s_fX, s_fY, s_fZ );
			GetVehicleVelocity( s_iVehicle, s_fVX, s_fVY, s_fVZ );

			if ( !IsPlayerInRangeOfPoint( playerid, g_fSpeedCap[ playerid ] + 0.05, s_fX + s_fVX, s_fY + s_fVY, s_fZ + s_fVZ ) )
			{
				static
					Float:s_fLength
				;

				s_fLength = floatsqroot( ( s_fVX * s_fVX ) + ( s_fVY * s_fVY ) + ( s_fVZ * s_fVZ ) );

				s_fVX = ( s_fVX / s_fLength ) * g_fSpeedCap[ playerid ];
				s_fVY = ( s_fVY / s_fLength ) * g_fSpeedCap[ playerid ];
				s_fVZ = ( s_fVZ / s_fLength ) * g_fSpeedCap[ playerid ];

				if ( s_iVehicle )
					SetVehicleVelocity( s_iVehicle, s_fVX, s_fVY, s_fVZ );
				else
					SetPlayerVelocity( playerid, s_fVX, s_fVY, s_fVZ );
			}
		}
	}
	
	// Status
	for(new i=0;i<MAX_PLAYERS;i++)
	{
		new string[128], speed = GetVehicleSpeed(GetPlayerVehicleID(i));
		if(IsPlayerConnected(i)) {
			if(!IsPlayerInAnyVehicle(i)) {
				format(string, sizeof(string), "~g~Weapon: ~w~%s~n~~g~Money: ~w~$%s", GetWeaponNameEx(GetPlayerWeapon(i)), number_format(PlayerInfo[i][pCash]));
				TextDrawSetString(PlayerTemp[i][Status], string);
			}
			else {
				format(string, sizeof(string), "~g~Weapon: ~w~%s~n~~g~Money: ~w~$%s7~n~~g~Vehicle: ~w~%s~n~~g~Fuel: ~w~%d%%~n~~g~Speed: ~w~%d KM/H", GetWeaponNameEx(GetPlayerWeapon(i)), number_format(PlayerInfo[i][pCash]), GetVehicleName(GetPlayerVehicleID(i)), Gas{GetPlayerVehicleID(i)}, speed);
				TextDrawSetString(PlayerTemp[i][Status], string);
			}
		}
	}
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(maskOn{playerid})
	{
		ShowPlayerNameTagForPlayer(forplayerid, playerid, false);
	}
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	if(PlayerIsOn(playerid) && maskOn{playerid})
	{
		ShowPlayerNameTagForPlayer(playerid, playerid, false);
	}
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	if(vLocked{vehicleid}) ToggleVehicleLockForPlayer(forplayerid, vehicleid, true);
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}


/* =================== Publics =================== */
public WeaponHackBan(playerid)
{
	new gName[256], IP[100];
	FreezePlayer(playerid);
	GetWeaponName(GetPlayerWeapon(playerid),gName,sizeof(gName));
	GetPlayerIp(playerid, IP, sizeof(IP));
	format(msg, sizeof(msg), "AdmCmd: %s was banned by SYSTEM, reason: Weapon Hack (%s).", GetNameEx(playerid), gName);
	PlayerInfo[playerid][pBanned] = 1;
	BanWithMSG(playerid, msg);
	format(msg, sizeof(msg), "<Weapon Hacks-Spawned %s>", gName);
	format(query, sizeof(query), "INSERT INTO `bans` (name, reason, playerIP) VALUES ('%s', '%s', '%s')", GetName(playerid),msg,IP);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

public MoneyHackBan(playerid)
{
	new IP[100];
	FreezePlayer(playerid);
	GetPlayerIp(playerid, IP, sizeof(IP));
	format(msg, sizeof(msg), "AdmCmd: %s was banned by SYSTEM, reason: Money hack", GetNameEx(playerid));
	PlayerInfo[playerid][pBanned] = 1;
	BanWithMSG(playerid, msg);
	format(query, sizeof(query), "INSERT INTO `bans` (name, reason, playerIP) VALUES ('%s', '%s', '%s')", GetName(playerid),"<$$ Money hacks $$>",IP);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

PreloadPlayerAnims(playerid)
{
   	PreloadAnimLib(playerid,"BOMBER");
   	PreloadAnimLib(playerid,"RAPPING");
   	PreloadAnimLib(playerid,"SHOP");
	PreloadAnimLib(playerid,"BEACH");
	PreloadAnimLib(playerid,"SMOKING");
   	PreloadAnimLib(playerid,"FOOD");
   	PreloadAnimLib(playerid,"ON_LOOKERS");
   	PreloadAnimLib(playerid,"DEALER");
	PreloadAnimLib(playerid,"CRACK");
	PreloadAnimLib(playerid,"CARRY");
	PreloadAnimLib(playerid,"COP_AMBIENT");
	PreloadAnimLib(playerid,"PARK");
	PreloadAnimLib(playerid,"INT_HOUSE");
	PreloadAnimLib(playerid,"FOOD");
	PreloadAnimLib(playerid,"PED");
}

public SetPlayerSpawn(playerid)
{
  StopPlayerSpec(playerid);
  SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin],1642.2006,-2334.4751,-2.6797, 1.0, -1, -1, -1, -1, -1, -1);
  SpawnPlayer(playerid);
  new house = PlayerInfo[playerid][pHouseKey];
  if(GetIntVar(playerid, "JustDoneRegister") == 1)
  {
    ShowHudTextDraws(playerid, 1);
    StopAudioStreamForPlayer(playerid);
    StopPlayerSpec(playerid);
    PlayerInfo[playerid][pSpawnType] = 0;
    RemoveVar(playerid, "JustDied");
    RemoveVar(playerid, "LoggedInDead");
    SetIntVar(playerid, "gLogged", 1);
    RemoveVar(playerid, "JustDoneRegister");
    SetWorld(playerid, 0);
    ClearChatbox(playerid, 50);
    ClearChatbox(playerid, 100);
    PlayerInfo[playerid][pRegistered] = 1;
    PlayerInfo[playerid][pLevel] = 1;
    PlayerInfo[playerid][pActive] = 1;
    PlayerInfo[playerid][pLastX] = 1715.0094;
    PlayerInfo[playerid][pLastY] = -1876.7244;
    PlayerInfo[playerid][pLastZ] = 13.5666;
    SetFightStyle(playerid, F_NORMAL);
    ScoreUpdate(playerid);
    SetCash(playerid, 3000);
    SetBankCash(playerid, 500);
    SetNormalColor(playerid);
    SetInterior(playerid,0);
    SavePlayerStats(playerid);
    return 1;
  }
  if(PlayerInfo[playerid][pCrashed] == 1)
  {
	PutPlayer(playerid, PlayerInfo[playerid][pLastX],PlayerInfo[playerid][pLastY],PlayerInfo[playerid][pLastZ]);
	SetPlayerFacingAngle(playerid,PlayerInfo[playerid][pLastA]);
	SetInterior(playerid,PlayerInfo[playerid][pLastInt]);
	SetWorld(playerid, PlayerInfo[playerid][pLastVW]);
	SetTimerEx("UnFreezePlayer", 4000, 0, "i", playerid);
	GameTextForPlayer(playerid, "~p~Crash~n~~w~recovery", 5000, 1);
	PlayerInfo[playerid][pCrashed] = 0;
  }
  else
  {
    format(msg, sizeof(msg), "~w~Welcome, ~n~~y~ %s", GetNameEx(playerid));
    GameTextForPlayer(playerid, msg, 5000, 1);
  }
  if(PlayerInfo[playerid][pJailed] == 1)
  {
    SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 2576.7861,2712.2004,22.9507, 1.0, -1, -1, -1, -1, -1, -1);
    SetPlayerPos(playerid,  2576.7861,2712.2004,22.9507);
    PlayerInfo[playerid][pDied] = 0;
    RemoveVar(playerid, "JustDied");
    SetInterior(playerid,0);
    SetWorld(playerid, 0);
    ServerMSG(playerid, "You are still in admin jail.");
  }
  else if(PlayerInfo[playerid][pJailed] == 2)
  {
    PutPlayer(playerid, PlayerInfo[playerid][pLastX],PlayerInfo[playerid][pLastY],PlayerInfo[playerid][pLastZ]);
    SetPlayerFacingAngle(playerid,PlayerInfo[playerid][pLastA]);
    SetInterior(playerid,PlayerInfo[playerid][pLastInt]);
    SetWorld(playerid, PlayerInfo[playerid][pLastVW]);
    SetTimerEx("UnFreezePlayer", 4000, 0, "i", playerid);
    PlayerInfo[playerid][pDied] = 0;
    RemoveVar(playerid, "JustDied");
    SCM(playerid, COLOR_GRAD2, "You are still in jail.");
  }
  else if(PlayerInfo[playerid][pJailed] == 3)
  {
    PutPlayer(playerid, PlayerInfo[playerid][pLastX],PlayerInfo[playerid][pLastY],PlayerInfo[playerid][pLastZ]);
    SetPlayerFacingAngle(playerid,PlayerInfo[playerid][pLastA]);
    SetInterior(playerid,PlayerInfo[playerid][pLastInt]);
    SetWorld(playerid, PlayerInfo[playerid][pLastVW]);
    SetTimerEx("UnFreezePlayer", 4000, 0, "i", playerid);
    PlayerInfo[playerid][pDied] = 0;
    RemoveVar(playerid, "JustDied");
  }
  if(PlayerInfo[playerid][pDied] == 1)
  {
    PutPlayer(playerid, PlayerInfo[playerid][pLastX],PlayerInfo[playerid][pLastY],PlayerInfo[playerid][pLastZ]);
    SetPlayerFacingAngle(playerid,PlayerInfo[playerid][pLastA]);
    SetInterior(playerid,PlayerInfo[playerid][pLastInt]);
    SetWorld(playerid, PlayerInfo[playerid][pLastVW]);
    SetIntVar(playerid, "LoggedInDead", 1);
    SetPlayerHealth(playerid, 100.0);
    SetTimerEx("FreezePlayer", 100, 0, "i", playerid);
    SetTimerEx("DeadAnim", 1000, 0, "i", playerid);
    OnAnim{playerid} = true;
    SCM(playerid, COLOR_YELLOWG, "You're hurt, you can expect your doctor or you can type '/acceptdeath'.");
  }
  if(PlayerInfo[playerid][pSpawnType] == 0 && PlayerInfo[playerid][pJailed] == 0)
  {
    PutPlayer(playerid, PlayerInfo[playerid][pLastX],PlayerInfo[playerid][pLastY],PlayerInfo[playerid][pLastZ]);
    SetPlayerFacingAngle(playerid,PlayerInfo[playerid][pLastA]);
    SetInterior(playerid,PlayerInfo[playerid][pLastInt]);
    SetWorld(playerid, PlayerInfo[playerid][pLastVW]);
    SetTimerEx("UnFreezePlayer", 4000, 0, "i", playerid);
  }
  else if(PlayerInfo[playerid][pSpawnType] == 1 && PlayerInfo[playerid][pJailed] == 0)
  {
    if(house == -1)
    {
      SCM(playerid, COLOR_RED, "You do not have a home, so you spawn normal.");
      PlayerInfo[playerid][pSpawnType] = 0;
    }
    else
    {
      FreezePlayer(playerid);
      PutPlayer(playerid, HouseInfo[house][hExitX], HouseInfo[house][hExitY],HouseInfo[house][hExitZ]);
      SetInterior(playerid,HouseInfo[house][hInterior]);
      SetWorld(playerid,HouseInfo[house][hWorld]);
      HouseEntered[playerid] = house;
      SetTimerEx("UnFreezePlayer", 10000, 0, "i", playerid);
    }
  }
  else if(PlayerInfo[playerid][pSpawnType] == 2 && PlayerInfo[playerid][pJailed] == 0)
  {
    new faction = PlayerInfo[playerid][pFaction];
    if(faction == 0)
    {
      SCM(playerid, COLOR_RED, "You do not have a faction, so you spawn normal.");
      PlayerInfo[playerid][pSpawnType] = 0;
    }
    else if(faction == LSPD)
    {
      if(PlayerInfo[playerid][pSpawnLSPD] == 0)
      {
        PutPlayer(playerid, 2325.9409,-1349.8518,24.0577);
        SetInterior(playerid, 0);
        SetWorld(playerid, 0);
        FreezePlayer(playerid);
        SetTimerEx("UnFreezePlayer", 3000, 0, "i", playerid);
      }
      else if(PlayerInfo[playerid][pSpawnLSPD] == 1)
      {
        PutPlayer(playerid, 541.5809,-1806.1042,6.0625);
        SetInterior(playerid, 0);
        SetWorld(playerid, 0);
        FreezePlayer(playerid);
        SetTimerEx("UnFreezePlayer", 3000, 0, "i", playerid);
      }
      else if(PlayerInfo[playerid][pSpawnLSPD] == 2)
      {
        PutPlayer(playerid, 1527.1436,-1677.4576,5.8906);
        SetInterior(playerid, 0);
        SetWorld(playerid, 0);
        FreezePlayer(playerid);
        SetTimerEx("UnFreezePlayer", 3000, 0, "i", playerid);
      }
    }
    else if(faction == LSFD)
    {
        PutPlayer(playerid, 1178.4469,-1323.2102,14.1205);
      SetInterior(playerid, 0);
      SetWorld(playerid, 0);
      FreezePlayer(playerid);
      SetTimerEx("UnFreezePlayer", 3000, 0, "i", playerid);
    }
    else if(faction == GOV)
    {
        PutPlayer(playerid, 1481.3210,-1767.0018,18.7958);
      SetInterior(playerid, 0);
      SetWorld(playerid, 0);
      FreezePlayer(playerid);
      SetTimerEx("UnFreezePlayer", 3000, 0, "i", playerid);
    }
  }
  return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
    return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
  new Float:HP;
  GetPlayerHealth(playerid, HP);

  if(weaponid == 24)
  {
    SetPlayerHealth(playerid, HP-8);
  }
  if(weaponid == 22)
  {
    SetPlayerHealth(playerid, HP-7);
  }
  if(weaponid == 31)
  {
    SetPlayerHealth(playerid, HP-15);
  }
  if(weaponid == 30)
  { 
    SetPlayerHealth(playerid, HP-15);
  }
  if(weaponid == 31)
  { 
    SetPlayerHealth(playerid, HP-15);
  }
  if(weaponid == 29)
  {
    SetPlayerHealth(playerid, HP-15);
  }
  if(weaponid == 25) 
  {
  SetPlayerHealth(playerid, HP-20);
  }
  if(weaponid == 34)
  { 
  SetPlayerHealth(playerid, 0);
  }

	if((0 <= weaponid <= 46) || weaponid == 54)
	{
		if(BODY_PART_TORSO <= bodypart <= BODY_PART_HEAD) Damage[playerid][(bodypart - 3)][weaponid]++;
	}
  if(TazerActive{issuerid} == true && weaponid == 23)
  {
    SetPlayerHealth(playerid, HP);
  }
  if(BeanbagActive{issuerid} == true && weaponid == 25)
  {
    SetPlayerHealth(playerid, HP);
  }
  if(HP <= 25 && GetIntVar(playerid, "JustDied") == 0)
  {
      DoInjured(playerid);
  }
  return 1;
}

public OnPlayerShootPlayer(Shooter,Target,Float:HealthLost,Float:ArmourLost)
{
	new weapon = GetWeaponHolding(Shooter);
	if(PlayerHoldingWeapon(Shooter, 23))
	{
		if(!Tazed{Target})
		{
			OnPlayAnim(Target, "CRACK", "crckidle2", 4.0, 1, 0, 0, 1, 0);
			ActionMessage(Target, 20.0, "was hit by a tazer and fell to the ground.");
			Tazed{Target} = true;
			SetPlayerHealth(Target, 100.0);
			SetTimerEx("SetUnTazed", 10000, false, "i", Target);
		}
		else
		{
			SCM(Shooter, COLOR_GREY, "This player is already being electrocuted.");
			SetPlayerHealth(Target, 100.0);
		}
	}
    if(PlayerHoldingWeapon(Shooter, 25))
	{
		if(!Beanbag{Target})
		{
			OnPlayAnim(Target, "CRACK", "crckidle2", 4.0, 1, 0, 0, 1, 0);
			ActionMessage(Target, 20.0, "was struck by the Remington pins and fell to the ground.");
			Beanbag{Target} = true;
			SetPlayerHealth(Target, 100.0);
      SCMEx(Shooter, COLOR_YELLOWG, "SERVER: You hit %s with a rubber bullet.", GetNameEx(Target));
			SetTimerEx("SetUnBeanbag", 10000, false, "i", Target);
		}
		else
		{
			SCM(Shooter, COLOR_GREY, "This player is already being electrocuted.");
			SetPlayerHealth(Target, 100.0);
		}
	}
	if(weapon == 24 || weapon == 30 || weapon == 31 || weapon == 34 || weapon == 25 || weapon == 29 || weapon == 28 || weapon == 32 || weapon == 33 || weapon == 34)
	{
		if(GetWorld(Shooter) == GetWorld(Target))
		{
			if(IsPlayerAimingTargetBodyPart(Shooter, Target, 1)) // BODY_PART_HEAD
			{ DoDamage(Target, 1, GetPlayerWeapon(Shooter)); }
			else if(IsPlayerAimingTargetBodyPart(Shooter, Target, 2)) // BODY_PART_TORSO
			{ DoDamage(Target, 2, GetPlayerWeapon(Shooter)); }
			else if(IsPlayerAimingTargetBodyPart(Shooter, Target, 3)) // BODY_PART_LEGS
			{ DoDamage(Target, 3, GetPlayerWeapon(Shooter)); }
		}
	}
    return 1;
}

public OnEditedObject(objectid)
{
	new Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz;
	GetDynamicObjectPos(ObjectsInfo[objectid][oObject], x, y, z);
	GetDynamicObjectRot(ObjectsInfo[objectid][oObject], rx, ry, rz);
	ObjectsInfo[objectid][oPosX] = x;
	ObjectsInfo[objectid][oPosY] = y;
	ObjectsInfo[objectid][oPosZ] = z;
	ObjectsInfo[objectid][oPosRX] = rx;
	ObjectsInfo[objectid][oPosRY] = ry;
	ObjectsInfo[objectid][oPosRZ] = rz;
	return 1;
}

public OnEditedCamera(objectid)
{
	new Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz;
	GetDynamicObjectPos(CCTVInfo[objectid][tvObject], x, y, z);
	GetDynamicObjectRot(CCTVInfo[objectid][tvObject], rx, ry, rz);
	CCTVInfo[objectid][tvPosX] = x;
	CCTVInfo[objectid][tvPosY] = y;
	CCTVInfo[objectid][tvPosZ] = z;
	CCTVInfo[objectid][tvPosRX] = rx;
	CCTVInfo[objectid][tvPosRY] = ry;
	CCTVInfo[objectid][tvPosRZ] = rz;
	return 1;
}

public OnEditedMoveDoor(objectid)
{
	new Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz;
	GetDynamicObjectPos(Doors[objectid][doorObject], x, y, z);
	GetDynamicObjectRot(Doors[objectid][doorObject], rx, ry, rz);
	Doors[objectid][doorPosX] = x;
	Doors[objectid][doorPosY] = y;
	Doors[objectid][doorPosZ] = z;
	Doors[objectid][doorPosRX] = rx;
	Doors[objectid][doorPosRY] = ry;
	Doors[objectid][doorPosRZ] = rz;
	return 1;
}

public OnEditedGate(objectid)
{
	new Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz;
	GetDynamicObjectPos(Gates[objectid][gateObject], x, y, z);
	GetDynamicObjectRot(Gates[objectid][gateObject], rx, ry, rz);
	Gates[objectid][gatePosX] = x;
	Gates[objectid][gatePosY] = y;
	Gates[objectid][gatePosZ] = z;
	Gates[objectid][gatePosRX] = rx;
	Gates[objectid][gatePosRY] = ry;
	Gates[objectid][gatePosRZ] = rz;
	return 1;
}

public OnEditedFoodStand(standid)
{
	new Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz;
	GetDynamicObjectPos(FoodStand[standid][fObject], x, y, z);
	GetDynamicObjectRot(FoodStand[standid][fObject], rx, ry, rz);
	FoodStand[standid][fPosX] = x+1.5;
	FoodStand[standid][fPosY] = y;
	FoodStand[standid][fPosZ] = z;
	FoodStand[standid][fPosRX] = rx;
	FoodStand[standid][fPosRY] = ry;
	FoodStand[standid][fPosRZ] = rz;
	return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	/*
	0 - EDIT_RESPONSE_CANCEL   // player cancelled (ESC)
	1 - EDIT_RESPONSE_FINAL    // player clicked on save
	2 - EDIT_RESPONSE_UPDATE   // player moved the object (edition did not stop at all)
	*/
	//=============================================================================================================================
    if( response == EDIT_RESPONSE_FINAL ) // If player press SAVE
	{
		if( GetPVarInt(playerid, "GraffitiCreating") == 1 ) //Checking if player have a positiv variable on GraffitiCreating
		{

		    XYZ[playerid][0] = x; //Getting XYZ
			XYZ[playerid][1] = y;
			XYZ[playerid][2] = z;
			XYZ[playerid][3] = rx; // Getting Angles
			XYZ[playerid][4] = ry;
			XYZ[playerid][5] = rz;
			GameTextForPlayer( playerid, "Please spray.",10000, 5 ); // Telling player to SPRAY with his psraycan
			DestroyDynamicObject( POBJECT[playerid] ); // When player is done with his position of the graffiti and he hits save it gets destroyed
			GiveWeapon(playerid, 41, 60000); // DEBUGGING purposes we give him a spraycan
			spraytimerx[playerid] = SetTimerEx( "killgr", 90000, true, "i", playerid );

		}
	}
	if( response == EDIT_RESPONSE_CANCEL ) // If he hits ESC
	{
		if( GetPVarInt(playerid, "GraffitiCreating") == 1 ) //Checking if player is in creation of graffiti
		{
			DestroyDynamicObject( POBJECT[playerid] ); // Destroying the object
			SendClientMessage( playerid,0xFF6800FF,"Creating tag has been abandoned." ); // <---
			SafeResetPlayerWeapons(playerid);
			DeletePVar( playerid,"GraffitiCreating" ); // Deleting the PVAR from the player that he is not creating a graffiti
		}
	}
	//=============================================================================================================================
	new Float:oldX, Float:oldY, Float:oldZ,
	Float:oldRotX, Float:oldRotY, Float:oldRotZ;
	GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
	GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
	if(IsValidDynamicObject(objectid) && GetIntVar(playerid, "EditingFurniture") == 1)
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			ServerMSG(playerid, "You've done editing the furniture position.");
			OnPlayerEditedFurniture(playerid, GetIntVar(playerid, "ChosenFurnitureSlot"), x, y, z, rx, ry, rz);
			RemoveVar(playerid, "EditingFurniture");
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			ServerMSG(playerid, "You've canceled editing the furniture position.");
			RemoveVar(playerid, "EditingFurniture");
		}
	}
	//=============================================================================================================================
	if(IsValidDynamicObject(objectid) && GetIntVar(playerid, "JustBoughtFurniture") == 1)
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			ServerMSG(playerid, "You've done editing the furniture position.");
			OnPlayerEditedFurniture(playerid, GetIntVar(playerid, "ChosenFurnitureSlot"), x, y, z, rx, ry, rz);
			RemoveVar(playerid, "JustBoughtFurniture");
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
			new houseid = PlayerInfo[playerid][pHouseKey];
			format(msg, sizeof(msg), "Canceled the purchase of %s and got the money back, ${FFFF00}%d{FFFFFF}.", FurnitureInfo[houseid][GetIntVar(playerid, "ChosenFurnitureSlot")][fName], FurnitureInfo[houseid][GetIntVar(playerid, "ChosenFurnitureSlot")][fMarketPrice]);
			HouseMSG(playerid, msg);
			GiveCash(playerid, FurnitureInfo[houseid][GetIntVar(playerid, "ChosenFurnitureSlot")][fMarketPrice]);
			DestroyDynamicObject(FurnitureInfo[houseid][GetIntVar(playerid, "ChosenFurnitureSlot")][fObject]);
			OnPlayerSellFurniture(playerid, houseid, GetIntVar(playerid, "ChosenFurnitureSlot"));
			RemoveVar(playerid, "JustBoughtFurniture");
		}
	}
	//=============================================================================================================================
	if(IsValidDynamicObject(objectid) && GetIntVar(playerid, "EditingPL") == 1)
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			RemoveVar(playerid, "EditingPL");
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
			EditDynamicObject(playerid, objectid);
			SCM(playerid, COLOR_WHITE, "Please press SAVE on the editor.");
		}
	}
	//=============================================================================================================================
	if(IsValidDynamicObject(objectid) && GetIntVar(playerid, "EditingRB") == 1)
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			RemoveVar(playerid, "EditingRB");
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
			EditDynamicObject(playerid, objectid);
			SCM(playerid, COLOR_WHITE, "Please press SAVE on the editor.");
		}
	}
	//=============================================================================================================================
	if(IsValidDynamicObject(objectid) && GetIntVar(playerid, "BoomBoxOn") == 1 && GetIntVar(playerid, "EditingBoomBox") == 1)
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
			if(IsValidDynamicArea(GetIntVar(playerid, "BoomBoxArea")))
			{
				RemoveVar(playerid, "BoomBoxX");
				RemoveVar(playerid, "BoomBoxY");
				RemoveVar(playerid, "BoomBoxZ");
				SetFloatVar(playerid, "BoomBoxX", x);
				SetFloatVar(playerid, "BoomBoxY", y);
				SetFloatVar(playerid, "BoomBoxZ", z);
				foreach(Player, i)
				{
					if(i != playerid && IsValidDynamicArea(GetIntVar(i, "BoomBoxArea")) && PlayerToPoint(70.0, playerid, GetFloatVar(i, "BoomBoxX"), GetFloatVar(i, "BoomBoxY"), GetFloatVar(i, "BoomBoxZ")))
					{
						SCM(playerid, COLOR_YELLOWG, "This spot is taken by someone else, your BoomBox was sent to the old spot.");
						SetFloatVar(playerid, "BoomBoxX", oldX);
						SetFloatVar(playerid, "BoomBoxY", oldY);
						SetFloatVar(playerid, "BoomBoxZ", oldZ);
						SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
						SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
						RemoveVar(playerid, "EditingBoomBox");
						return 1;
					}
				}
				DestroyDynamicArea(GetIntVar(playerid, "BoomBoxArea"));
				RemoveVar(playerid, "BoomBoxArea");
				SetIntVar(playerid, "BoomBoxArea", CreateDynamicSphere(x, y, z, 50.0, -1, -1, -1));
				SetDynamicObjectPos(objectid, x, y, z);
				SetDynamicObjectRot(objectid, rx, ry, rz);
				SetIntVar(playerid, "BoomBoxOn", 1);
				RemoveVar(playerid, "EditingBoomBox");
				ServerMSG(playerid, "You've done editing your BoomBox position.");
			}
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
			SetFloatVar(playerid, "BoomBoxX", oldX);
			SetFloatVar(playerid, "BoomBoxY", oldY);
			SetFloatVar(playerid, "BoomBoxZ", oldZ);
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			ServerMSG(playerid, "You've canceled editing your BoomBox position.");
			RemoveVar(playerid, "EditingBoomBox");
		}
	}
	//=============================================================================================================================
	if(IsValidDynamicObject(objectid) && GetIntVar(playerid, "EditingObject") == 1 && ObjectsInfo[GetIntVar(playerid, "ObjectEditing")][oObjectOn])
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
			SaveEditedObject(GetIntVar(playerid, "ObjectEditing"), x, y, z, rx, ry, rz);
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			format(msg, sizeof(msg), "Finished editing a dynamic object: Position, %f, %f, %f.", x, y, z);
			ServerMSG(playerid, msg);
			RemoveVar(playerid, "EditingObject");
			RemoveVar(playerid, "ObjectEditing");
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			ServerMSG(playerid, "You've canceled editing the object position.");
			RemoveVar(playerid, "EditingObject");
			RemoveVar(playerid, "ObjectEditing");
		}
	}
	//=============================================================================================================================
	if(IsValidDynamicObject(objectid) && GetIntVar(playerid, "EditingCCTV") == 1 && CCTVInfo[GetIntVar(playerid, "ObjectEditing")][tvObjectOn])
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
			SaveEditedCamera(GetIntVar(playerid, "ObjectEditing"), x, y, z, rx, ry, rz);
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			format(msg, sizeof(msg), "Finished editing a dynamic CCTV: Position, %f, %f, %f.", x, y, z);
			ServerMSG(playerid, msg);
			RemoveVar(playerid, "EditingCCTV");
			RemoveVar(playerid, "ObjectEditing");
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			ServerMSG(playerid, "You've canceled editing the CCTV position.");
			RemoveVar(playerid, "EditingCCTV");
			RemoveVar(playerid, "ObjectEditing");
		}
	}
	//=============================================================================================================================
	if(IsValidDynamicObject(objectid) && GetIntVar(playerid, "EditingMoveDoor") == 1 && Doors[GetIntVar(playerid, "ObjectEditing")][doorObjectOn])
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
			SaveEditedMoveDoor(GetIntVar(playerid, "ObjectEditing"), x, y, z, rx, ry, rz);
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			format(msg, sizeof(msg), "Finished editing a dynamic movable door: Position, %f, %f, %f.", x, y, z);
			ServerMSG(playerid, msg);
			RemoveVar(playerid, "EditingMoveDoor");
			RemoveVar(playerid, "ObjectEditing");
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			ServerMSG(playerid, "You've canceled editing the movable door position.");
			RemoveVar(playerid, "EditingMoveDoor");
			RemoveVar(playerid, "ObjectEditing");
		}
	}
	//=============================================================================================================================
	if(IsValidDynamicObject(objectid) && GetIntVar(playerid, "EditingGate") == 1 && Gates[GetIntVar(playerid, "ObjectEditing")][gateObjectOn])
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
			SaveEditedGate(GetIntVar(playerid, "ObjectEditing"), x, y, z, rx, ry, rz);
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			format(msg, sizeof(msg), "Finished editing a dynamic gate: Position, %f, %f, %f.", x, y, z);
			ServerMSG(playerid, msg);
			RemoveVar(playerid, "EditingGate");
			RemoveVar(playerid, "ObjectEditing");
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			ServerMSG(playerid, "You've canceled editing the dynamic gate position.");
			RemoveVar(playerid, "EditingGate");
			RemoveVar(playerid, "ObjectEditing");
		}
	}
	//=============================================================================================================================
	if(IsValidDynamicObject(objectid) && GetIntVar(playerid, "EditingFoodStand") == 1 && FoodStand[GetIntVar(playerid, "FoodStandEditing")][fStandOn])
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
			DestroyDynamic3DTextLabel(Text3D:FoodStand[GetIntVar(playerid, "FoodStandEditing")][fLabel]);
			DestroyDynamicPickup(FoodStand[GetIntVar(playerid, "FoodStandEditing")][fPickUp]);
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			if(rz < -50.0) //Done
			{
				y += (1.2 * floatcos((-rz+90), degrees));
			}
			if(rz < -150.0) //Done
			{
				x += (1.2 * floatsin((-rz+90), degrees));
			}
			if(rz >= 0.0) //Done
			{
				x += (1.2 * floatsin((-rz+90), degrees));
			}
			if(rz > 50.0) //Done
			{
				y += (1.2 * floatcos((-rz+90), degrees));
			}
			format(msg, sizeof(msg), ""EMBED_RED"["EMBED_WHITE"Food Stall - %d"EMBED_RED"]\n"EMBED_CYAN"%s\n/buyfood.", GetIntVar(playerid, "FoodStandEditing"), FoodStand[GetIntVar(playerid, "FoodStandEditing")][fInfo]);
			FoodStand[GetIntVar(playerid, "FoodStandEditing")][fLabel] = CreateDynamic3DTextLabel(msg, -1, x, y, z, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			FoodStand[GetIntVar(playerid, "FoodStandEditing")][fPickUp] = CreateDynamicPickup(1239, 1, x, y, z, -1, -1, -1, 100.0);
			format(msg, sizeof(msg), "Finished editing a dynamic object: Position, %f, %f, %f.", x, y, z);
			ServerMSG(playerid, msg);
			format(msg, sizeof(msg), "Finished editing a dynamic object: Position, %f, %f, %f.", rx, ry, rz);
			ServerMSG(playerid, msg);
			SaveEditedFoodStand(GetIntVar(playerid, "FoodStandEditing"), x, y, z, rx, ry, rz);
			RemoveVar(playerid, "EditingFoodStand");
			RemoveVar(playerid, "FoodStandEditing");
		}
	}
	//=============================================================================================================================
	if(IsValidDynamicObject(objectid) && GetIntVar(playerid, "EditingParkMeter") == 1 && ParkMeters[GetIntVar(playerid, "ParkMeterEditing")][parkOn])
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
			DestroyDynamic3DTextLabel(Text3D:ParkMeters[GetIntVar(playerid, "ParkMeterEditing")][parkLabel]);
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			format(msg, sizeof(msg), ""EMBED_CYAN"minutes %d", ParkMeters[GetIntVar(playerid, "ParkMeterEditing")][parkMinutes]);
			ParkMeters[GetIntVar(playerid, "ParkMeterEditing")][parkLabel] = CreateDynamic3DTextLabel(msg, -1, x, y, z+0.5, 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			format(msg, sizeof(msg), "Finished editing a dynamic park meter: Position, %f, %f, %f.", x, y, z);
			ServerMSG(playerid, msg);
			DestroyDynamicArea(ParkMeters[GetIntVar(playerid, "ParkMeterEditing")][parkArea]);
			ParkMeters[GetIntVar(playerid, "ParkMeterEditing")][parkArea] = CreateDynamicSphere(x, y, z, 1.5, -1, -1, -1);
			ParkMeters[GetIntVar(playerid, "ParkMeterEditing")][parkPosX] = x;
			ParkMeters[GetIntVar(playerid, "ParkMeterEditing")][parkPosY] = y;
			ParkMeters[GetIntVar(playerid, "ParkMeterEditing")][parkPosZ] = z;
			ParkMeters[GetIntVar(playerid, "ParkMeterEditing")][parkPosRX] = rx;
			ParkMeters[GetIntVar(playerid, "ParkMeterEditing")][parkPosRY] = ry;
			ParkMeters[GetIntVar(playerid, "ParkMeterEditing")][parkPosRZ] = rz;
			SaveEditedParkMeter(GetIntVar(playerid, "ParkMeterEditing"), x, y, z, rx, ry, rz);
			RemoveVar(playerid, "EditingParkMeter");
			RemoveVar(playerid, "ParkMeterEditing");
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			ServerMSG(playerid, "You've canceled editing the park meter position.");
			RemoveVar(playerid, "EditingParkMeter");
			RemoveVar(playerid, "ParkMeterEditing");
		}
	}
	//=============================================================================================================================
	return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
		for(new i = 0; i < sizeof(HouseInfo); i++)
		{
			if(checkpointid == HouseInfo[i][hCheckPoint])
			{
				if(HouseInfo[i][hOwned] == 1 && PlayerInfo[playerid][pHouseKey] != i)
				{
					if(HouseInfo[i][hRentable] == 1)
					{
						format(msg, sizeof(msg), "[Address %d] You are at the door of %s.",i,HouseInfo[i][hOwner]);
						SCM(playerid, COLOR_GREEN, msg);
						format(msg, sizeof(msg), "[Address %d] This house rent is set to $%d.",i,HouseInfo[i][hRentprice]);
						SCM(playerid, COLOR_WHITE, msg);
						SCM(playerid, COLOR_WHITE, "Available commands: /enter, /ds(hout), /knock");
					}
					else
					{
						format(msg, sizeof(msg), "[Address %d] You are at the door of %s.",i,HouseInfo[i][hOwner]);
						SCM(playerid, COLOR_GREEN, msg);
						SCM(playerid, COLOR_WHITE, "Available commands: /enter, /ds(hout), /knock");
					}
				}
				if(HouseInfo[i][hOwned] == 1 && PlayerInfo[playerid][pHouseKey] == i)
				{
					format(msg, sizeof(msg), "[Address %d] You are at your door.",i);
					SCM(playerid, COLOR_GREEN, msg);
				}
				if(HouseInfo[i][hOwned] == 0)
				{
					format(msg, sizeof(msg), "[Address %d] This house is for sale.",i);
					SCM(playerid, COLOR_GREEN, msg);
					format(msg, sizeof(msg), "[Address %d] The price of this house is: $%d.",i,HouseInfo[i][hPrice]);
					SCM(playerid, COLOR_GREEN, msg);
					SCM(playerid, COLOR_WHITE, "Command: /buyhouse");
				}
			}
		}
	}
	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	for(new i = 0; i < sizeof(DealersInfo); i++)
	{
		if(pickupid == DealersInfo[i][dealerPickUp])
		{
			format(msg, sizeof(msg), "~w~%s~b~ Dealership ~n~~w~/v buy ~b~to buy a vehicle.", DealersInfo[i][dealerInfo]);
			GameTextForPlayer(playerid, msg, 4000, 3);
			return 1;
		}
	}
	for(new i = 0; i < sizeof(LabelsInfo); i++)
	{
		if(pickupid == LabelsInfo[i][tPickUp] && LabelsInfo[i][tGameText] == 1)
		{
			format(msg, sizeof(msg), "%s", LabelsInfo[i][tInfo]);
			GameTextForPlayer(playerid, msg, 4000, 4);
			return 1;
		}
	}
	for(new i = 0; i < sizeof(JobsInfo); i++)
	{
		if(pickupid == JobsInfo[i][jobPickUp] && JobsInfo[i][jobOn] == 1)
		{
			if(JobsInfo[i][jobSideJob] == 1)
			{
				format(msg, sizeof(msg), "~w~Side job: %s~n~~y~/takejob ~w~to get the job.~n~~r~DID NOT REPLACE THE MAIN JOB", JobsInfo[i][jobName]);
			}
			else
			{
				format(msg, sizeof(msg), "~w~Job: %s~n~~y~/takejob ~w~to get the job.", JobsInfo[i][jobName]);
			}
			GameTextForPlayer(playerid, msg, 4000, 4);
			return 1;
		}
	}
	for(new i = 0; i < MAX_FACTION_DOORS; i++)
	{
		if(pickupid == FactionDoors[i][dPickUp])
		{
			format(msg, sizeof(msg), "%s", FactionDoors[i][dInfo]);
			GameTextForPlayer(playerid, msg, 4000, 4);
			return 1;
		}
	}
	for(new i = 0; i < MAX_BIZ; i++)
	{
		if(pickupid == BizInfo[i][bizPickUp] && BizInfo[i][bizOn])
		{
			if(BizInfo[i][bizOwned] == 0)
			{
				format(msg, sizeof(msg), "~g~FOR SALE~n~~w~%s~n~~w~Tip: %s~n~~w~Price: ~g~$%d", BizInfo[i][bizName], BizInfo[i][bizInfo], BizInfo[i][bizPrice]);
				GameTextForPlayer(playerid, msg, 3000, 3);
				return 1;
			}
			else
			{
				format(msg, sizeof(msg), "~w~%s ~n~~w~Tip: %s~n~~w~Owner: %s~n~~w~Entry fee: ~g~$%d", BizInfo[i][bizName] ,BizInfo[i][bizInfo], BizInfo[i][bizOwner], BizInfo[i][bizEntrance]);
				GameTextForPlayer(playerid, msg, 3000, 3);
			}
		}
	}
	for(new i = 0; i < MAX_DOORS; i++)
	{
		if(pickupid == DoorInfo[i][dPickUp] && DoorInfo[i][dDoorOn])
		{
			format(msg, sizeof(msg), "%s", DoorInfo[i][dInfo]);
			GameTextForPlayer(playerid, msg, 5000, 4);
		}
	}
	if(pickupid == Factions[PlayerInfo[playerid][pFaction]][fPickUp])
	{
		format(msg, sizeof(msg), "~b~%s", Factions[PlayerInfo[playerid][pFaction]][fName]);
		InfoMSG2(playerid, msg, "~y~/uniform ~w~to uniform dress up.", 5000);
	}
	return 1;
}

public SetNormalColor(playerid)
{
	if(PlayerIsOn(playerid))
	{
	    SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
	}
}

public ClearChatbox(playerid, lines)
{
	if (PlayerIsOn(playerid))
	{
		for(new i=0; i<lines; i++)
		{
			SCM(playerid, COLOR_GREY, " ");
		}
	}
	return 1;
}

public OnPlayerAttemptLogin(playerid)
{
	new str[500], rows, fields, reason[100], playerIP[100];
	cache_get_data(rows, fields, dbHandle);
	if(rows)
	{
		cache_get_row(0, 2, reason, dbHandle, 128);
		cache_get_row(0, 3, playerIP, dbHandle, 128);
		format(str, sizeof(str), "The reason: %s. Apply forum for unban.", reason);
		SCM(playerid, -1, str);
		format(str, sizeof(str), "IP banned: %s.", playerIP);
		SCM(playerid, -1, str);
		KickEx2(playerid, "You are banned on this server.");
	}
	else
	{
		SetPlayerToLogin2(playerid);
	}
}

public OnPlayerAttemptLogin2(playerid)
{
	new rows, fields;
	cache_get_data(rows, fields, dbHandle);
	if(rows)
	{
		format(msg, sizeof(msg), "Enter your password:");
		ShowDialog(playerid, Show:<Login>, DIALOG_STYLE_PASSWORD, "Login", msg, "Login", "Quit");
	}
	else
	{
		ShowDialog(playerid, Show:<ConfirmWord>, DIALOG_STYLE_INPUT, ""EMBED_RED"Confirm secret word"EMBED_WHITE"", ""EMBED_WHITE"Please enter your secret word below.", "Okay", "Exit");
	}
}

public OnAccountCheck(playerid)
{
	new rows, fields;
	cache_get_data(rows, fields, dbHandle);
	SetPlayerToLogin(playerid);
	/*if(rows)
	{
		SetPlayerToLogin(playerid);
	}
	else
	{
		SCM(playerid, COLOR_INFO, "Your account is not registered, please go to "ServerWebsite".");
		KickEx2(playerid, "Unregistered account.");
	}*/
	return 1;
}

public OnPlayerCreateAccount(playerid)
{
	PlayerInfo[playerid][pDatabaseID] = cache_insert_id();
	SetIntVar(playerid, "RegisterPart", 2);
	ShowDialog(playerid, Show:<Secret>, DIALOG_STYLE_INPUT, ""EMBED_YELLOW"Registration"EMBED_WHITE"", ""EMBED_WHITE"In order to play you have to enter the secret word in case you lost your password.\n("EMBED_BLUE"You can write somewhere on the Desktop"EMBED_WHITE")", "Continue", "Quit");
	return 1;
}

public ContinueRegisterSex(playerid)
{
	SetIntVar(playerid, "RegisterPart", 3);
	ShowDialog(playerid, Show:<Sex>, DIALOG_STYLE_MSGBOX, ""EMBED_YELLOW"Registration"EMBED_WHITE"", "Are you male or female?", "Male", "Female");
	return 1;
}

public DeletePlayerAccount(account[])
{
	format(query, sizeof(query), "DELETE FROM `users` WHERE `name` = '%s'", account);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

public AddPayDayTime()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(PlayerInfo[i][pPayDayTime] < 8)
		{
			PlayerInfo[i][pPayDayTime] += 1;
		}
	}
	return 1;
}

public OnCheckVehicles(playerid)
{
	new rows, fields, total = 0;
	cache_get_data(rows, fields);
	if(rows)
	{
		while(total < rows)
		{
			VehicleStatus[playerid][total+1][carID] = cache_get_row_int(total, 0);
			VehicleStatus[playerid][total+1][carModel] = cache_get_row_int(total, 1);
			cache_get_row(total, 8, VehicleStatus[playerid][total+1][carPlate], dbHandle, 128);
			VehicleStatus[playerid][total+1][carAlarm] = cache_get_row_int(total, 12);
			VehicleStatus[playerid][total+1][carLock] = cache_get_row_int(total, 13);
			VehicleStatus[playerid][total+1][carImmob] = cache_get_row_int(total, 14);
			VehicleStatus[playerid][total+1][carInsurances] = cache_get_row_int(total, 15);
			VehicleStatus[playerid][total+1][carDestroyed] = cache_get_row_int(total, 16);
			VehicleStatus[playerid][total+1][carGps] = cache_get_row_int(total, 17);
			VehicleStatus[playerid][total+1][carOn] = 1;
			total++;
		}
	}
	return 1;
}

public LoginPlayer(playerid)
{
	new rows, fields;
	cache_get_data(rows, fields);
	if(rows)
	{
        OnAccountLoad(playerid);
        LoadPlayerFines(playerid);
        CheckRecordPlayer(playerid);

		if(PlayerInfo[playerid][pActive] != 1)
		{
			SetIntVar(playerid, "RegisterPart", 4);
			ShowDialog(playerid, Show:<Age>, DIALOG_STYLE_INPUT, "Registration", "What is your age?", "Continue", "Exit");
			return 1;
		}

		KillTimer(LoginTimer{playerid});
		SendClientMessage(playerid, COLOR_WHITE, "");
		SendClientMessage(playerid, COLOR_WHITE, "");
		SendClientMessage(playerid, COLOR_WHITE, "");
		SendClientMessage(playerid, COLOR_WHITE, "");
		SendClientMessage(playerid, COLOR_WHITE, "");
		SendClientMessage(playerid, COLOR_WHITE, "");
		SendClientMessage(playerid, COLOR_WHITE, "");
		SendClientMessage(playerid, COLOR_WHITE, "");
		SendClientMessage(playerid, COLOR_WHITE, "");
		SendClientMessage(playerid, COLOR_WHITE, "");
		SendClientMessage(playerid, COLOR_WHITE, "");
		SendClientMessage(playerid, COLOR_WHITE, "");
		SendClientMessage(playerid, COLOR_WHITE, "");
		SendClientMessage(playerid, COLOR_WHITE, "");
		SendClientMessage(playerid, COLOR_WHITE, "");
		SendClientMessage(playerid, COLOR_WHITE, "");
		SendClientMessage(playerid, COLOR_WHITE, "");
		SendClientMessage(playerid, COLOR_WHITE, "");
		SendClientMessage(playerid, COLOR_WHITE, "");
		SendClientMessage(playerid, COLOR_WHITE, "");
		SCMEx(playerid, COLOR_WHITE, "SERVER: Welcome back, %s.", GetNameEx(playerid));
		ShowHudTextDraws(playerid, 1);
		RemoveVar(playerid, "LogTries");
		SetIntVar(playerid, "gLogged", 1);
		ScoreUpdate(playerid);
		StopPlayerSpec(playerid);
		SetNormalColor(playerid);
		if(PlayerInfo[playerid][pFines] > 0)
		{
			SCMEx(playerid, COLOR_RED, "* You have %d bills/fines with your name, /myfine to check.", PlayerInfo[playerid][pFines]);
		}
		SetPlayerSpawn(playerid);
		SetPlayerWeapons(playerid);
		SetCash(playerid, PlayerInfo[playerid][pCash]);
		//ShowRadioTextDraw(playerid);
		//ShowNetworkTextDraw(playerid);
		//ShowHunger(playerid);
		CheckOwnedVehicles(playerid);
	}
	else
	{
		if(GetIntVar(playerid, "LogTries") < 3)
		{
			UpdateIntVar(playerid, "LogTries", 1);
		}
		else
		{
			KickEx2(playerid, "You've entered a wrong password 3 times.");
			return 1;
		}
		format(msg, sizeof(msg), "Enter your password:");
		ShowDialog(playerid, Show:<Login>, DIALOG_STYLE_INPUT, "Login", msg, "Login", "Quit");
	}
    return 1;
}

public CheckSecretWord(playerid)
{
	new rows, fields, IP[100];
	cache_get_data(rows, fields);
	if(rows)
	{
		GetPlayerIp(playerid, IP, sizeof(IP));
		format(query, sizeof(query), "UPDATE `users` SET `register_ip` = '%s' WHERE `name` = '%s'", IP, GetName(playerid));
		mysql_function_query(dbHandle, query, false, "", "");
		SCM(playerid,COLOR_YELLOWG,"You have confirmed the security code, now you can log in.");
		format(msg, sizeof(msg), "Enter your password:");
		ShowDialog(playerid, Show:<Login>, DIALOG_STYLE_PASSWORD, "Login", msg, "Login", "Quit");
		LoginTimer{playerid} = SetTimerEx("CheckPlayerLogged", 60000, 0, "i", playerid);
	}
	else
	{
		ShowDialog(playerid, Show:<ConfirmWord>, DIALOG_STYLE_INPUT, ""EMBED_RED"Secret word - Confirmation"EMBED_WHITE"", ""EMBED_WHITE"The IP address from which you are not the original one is also on this account, please enter secret word below\n"EMBED_RED"The wrong combination!", "Continue", "Exit");
	}
    return 1;
}

public OnPlayerChangePass(playerid)
{
	new rows, fields;
	cache_get_data(rows, fields);
	if(rows)
	{
		format(query, sizeof(query), "UPDATE `users` SET `password` = '%s' WHERE `name` = '%s'", GetStringVar(playerid, "NewPassword"), GetName(playerid));
		mysql_function_query(dbHandle, query, false, "", "");
		format(msg, sizeof(msg), "You have changed your password to %s.", GetStringVar(playerid, "NewPassword"));
		ServerMSG(playerid, msg);
		SCM(playerid, -1, "You can retain via a screenshot (F8)!");
		RemoveVar(playerid, "NewPassword");
	}
	else
	{
		ShowDialog(playerid, Show:<ChangePass>, DIALOG_STYLE_INPUT, ""EMBED_RED"Secret word confirmation"EMBED_WHITE"", "("EMBED_RED"Wrong Combination!"EMBED_WHITE")\n\nPlease enter your secret word that you've registered with!", "Change", "Exit");
	}
    return 1;
}

public OnPlayerChangeSecret(playerid)
{
	new rows, fields;
	cache_get_data(rows, fields);
	if(rows)
	{
		format(query, sizeof(query), "UPDATE `users` SET `secret` = '%s' WHERE `name` = '%s'", GetStringVar(playerid, "NewSecret"), GetName(playerid));
		mysql_function_query(dbHandle, query, false, "", "");
		format(msg, sizeof(msg), "Your secret word has been changed to %s.", GetStringVar(playerid, "NewSecret"));
		ServerMSG(playerid, msg);
		SCM(playerid, COLOR_YELLOWG, "Please make sure you take a screenshot of it (F8)!");
		RemoveVar(playerid, "NewSecret");
	}
	else
	{
		ShowDialog(playerid, Show:<ChangeSecret>, DIALOG_STYLE_INPUT, ""EMBED_RED"Secret word confirmation"EMBED_WHITE"", "("EMBED_RED"Wrong Combination!"EMBED_WHITE")\n\nPlease enter your secret word that you've registered with!", "Change", "Exit");
	}
    return 1;
}

public OnDoorRemove(doorid)
{
	DoorInfo[doorid][dEnterX] = 0.0000;
	DoorInfo[doorid][dEnterY] = 0.0000;
	DoorInfo[doorid][dEnterZ] = 0.0000;
	DoorInfo[doorid][dExitX] = 0.0000;
	DoorInfo[doorid][dExitY] = 0.0000;
	DoorInfo[doorid][dExitZ] = 0.0000;
	DoorInfo[doorid][dEnterInterior] = 0;
	DoorInfo[doorid][dExitInterior] = 0;
	DoorInfo[doorid][dVirtualWorld] = 0;
	DoorInfo[doorid][dDoorOn] = 0;
	DoorInfo[doorid][dExitLabel] = Text3D:INVALID_3DTEXT_ID;
	return 1;
}

public OnFactionDoorRemove(doorid)
{
	FactionDoors[doorid][dEnterX] = 0.0000;
	FactionDoors[doorid][dEnterY] = 0.0000;
	FactionDoors[doorid][dEnterZ] = 0.0000;
	FactionDoors[doorid][dExitX] = 0.0000;
	FactionDoors[doorid][dExitY] = 0.0000;
	FactionDoors[doorid][dExitZ] = 0.0000;
	FactionDoors[doorid][dEnterInterior] = 0;
	FactionDoors[doorid][dExitInterior] = 0;
	FactionDoors[doorid][dVirtualWorld] = 0;
	FactionDoors[doorid][dDoorOn] = 0;
	return 1;
}

public OnJobRemove(jobid)
{
	JobsInfo[jobid][jobX] = 0.0000;
	JobsInfo[jobid][jobY] = 0.0000;
	JobsInfo[jobid][jobZ] = 0.0000;
	JobsInfo[jobid][jobOn] = 0;
	return 1;
}

public OnATMRemove(atmid)
{
	ATMInfo[atmid][atmPosX] = 0.0000;
	ATMInfo[atmid][atmPosY] = 0.0000;
	ATMInfo[atmid][atmPosZ] = 0.0000;
	ATMInfo[atmid][atmAtmOn] = 0;
	ATMInfo[atmid][atmInterior] = 0;
	ATMInfo[atmid][atmLabel] = Text3D:INVALID_3DTEXT_ID;
	return 1;
}

public OnHouseRemove(houseid)
{
	HouseInfo[houseid][hEntranceX] = 0.0000;
	HouseInfo[houseid][hEntranceY] = 0.0000;
	HouseInfo[houseid][hEntranceZ] = 0.0000;
	HouseInfo[houseid][hExitX] = 0.0000;
	HouseInfo[houseid][hExitY] = 0.0000;
	HouseInfo[houseid][hExitZ] = 0.0000;
	HouseInfo[houseid][hCheckPosX] = 0.0000;
	HouseInfo[houseid][hCheckPosY] = 0.0000;
	HouseInfo[houseid][hCheckPosZ] = 0.0000;
	HouseInfo[houseid][hLevelbuy] = 0;
	HouseInfo[houseid][hPrice] = 0;
	HouseInfo[houseid][hOwned] = 0;
	HouseInfo[houseid][hLocked] = 0;
	HouseInfo[houseid][hRentprice] = 0;
	HouseInfo[houseid][hRentable] = 0;
	HouseInfo[houseid][hInterior] = 0;
	HouseInfo[houseid][hWorld] = 0;
	HouseInfo[houseid][hCash] = 0;
	HouseInfo[houseid][hRadio] = 0;
	format(HouseInfo[houseid][hOwner], 256, "The State");
	HouseInfo[houseid][hHouseOn] = 0;
	HouseInfo[houseid][hLabel] = Text3D:INVALID_3DTEXT_ID;
	return 1;
}

public OnBizRemove(bizid)
{
	BizInfo[bizid][bizPosX] = 0.0000;
	BizInfo[bizid][bizPosY] = 0.0000;
	BizInfo[bizid][bizPosZ] = 0.0000;
	BizInfo[bizid][bizExitX] = 0.0000;
	BizInfo[bizid][bizExitY] = 0.0000;
	BizInfo[bizid][bizExitZ] = 0.0000;
	BizInfo[bizid][bizLevelbuy] = 0;
	BizInfo[bizid][bizPrice] = 0;
	BizInfo[bizid][bizInterior] = 0;
	BizInfo[bizid][bizWorld] = 0;
	BizInfo[bizid][bizCash] = 0;
	BizInfo[bizid][bizOwned] = 0;
	BizInfo[bizid][bizType] = 0;
	BizInfo[bizid][bizEntrance] = 0;
	BizInfo[bizid][bizRadioOn] = 0;
	BizInfo[bizid][bizRadio] = 0;
	BizInfo[bizid][bizLocked] = 1;
	format(BizInfo[bizid][bizOwner], 64, "The State");
	format(BizInfo[bizid][bizName], 64, "Business");
	format(BizInfo[bizid][bizInfo], 64, "Business");
	format(BizInfo[bizid][bizEnterMSG], 64, "");
	BizInfo[bizid][bizOn] = 0;
	return 1;
}

public OnFoodStandRemove(standid)
{
	FoodStand[standid][fPosX] = 0.0;
	FoodStand[standid][fPosY] = 0.0;
	FoodStand[standid][fPosZ] = 0.0;
	FoodStand[standid][fPosRX] = 0.0;
	FoodStand[standid][fPosRY] = 0.0;
	FoodStand[standid][fPosRZ] = 0.0;
	FoodStand[standid][fStandOn] = 0;
	FoodStand[standid][fLabel] = Text3D:INVALID_3DTEXT_ID;
	return 1;
}

public OnParkMeterRemove(parkid)
{
	DestroyDynamicArea(ParkMeters[parkid][parkArea]);
	ParkMeters[parkid][parkPosX] = 0.0;
	ParkMeters[parkid][parkPosY] = 0.0;
	ParkMeters[parkid][parkPosZ] = 0.0;
	ParkMeters[parkid][parkPosRX] = 0.0;
	ParkMeters[parkid][parkPosRY] = 0.0;
	ParkMeters[parkid][parkPosRZ] = 0.0;
	ParkMeters[parkid][parkOn] = 0;
	ParkMeters[parkid][parkLabel] = Text3D:INVALID_3DTEXT_ID;
	return 1;
}

public OnAdminSellHouse(houseid)
{
	foreach(Player, i)
	{
		if(PlayerInfo[i][pHouseKey] == houseid)
		{
			HouseMSG(i, "The house you're renting was just sold, you're now homeless.");
			PlayerInfo[i][pHouseKey] = -1;
		}
	}
	HouseInfo[houseid][hOwned] = 0;
	HouseInfo[houseid][hLocked] = 1;
	HouseInfo[houseid][hRentprice] = 0;
	HouseInfo[houseid][hRentable] = 0;
	HouseInfo[houseid][hCash] = 0;
	HouseInfo[houseid][hRadio] = 0;
	HouseInfo[houseid][hCheckPosX] = 0.0000;
	HouseInfo[houseid][hCheckPosY] = 0.0000;
	HouseInfo[houseid][hCheckPosZ] = 0.0000;
	format(HouseInfo[houseid][hOwner], 256, "The State");
	HouseInfo[houseid][hHouseOn] = 1;
	UpdateHouseText(houseid);
	return 1;
}

public OnHouseMoved(houseid, Float:x, Float:y, Float:z)
{
	HouseInfo[houseid][hEntranceX] = x;
	HouseInfo[houseid][hEntranceY] = y;
	HouseInfo[houseid][hEntranceZ] = z;
	return 1;
}

public OnHouseExitMoved(houseid, interior, world, Float:x, Float:y, Float:z)
{
	HouseInfo[houseid][hExitX] = x;
	HouseInfo[houseid][hExitY] = y;
	HouseInfo[houseid][hExitZ] = z;
	HouseInfo[houseid][hInterior] = interior;
	HouseInfo[houseid][hWorld] = world;
	return 1;
}

public OnStationRemove(stationid)
{
	GasStation[stationid][gPosX] = 0.0000;
	GasStation[stationid][gPosY] = 0.0000;
	GasStation[stationid][gPosZ] = 0.0000;
	GasStation[stationid][gStationOn] = 0;
	GasStation[stationid][gLabel] = Text3D:INVALID_3DTEXT_ID;
	return 1;
}

public OnTeleportRemove(teleid)
{
	HouseInteriors[teleid][aPosX] = 0.0000;
	HouseInteriors[teleid][aPosY] = 0.0000;
	HouseInteriors[teleid][aPosZ] = 0.0000;
	HouseInteriors[teleid][aTeleOn] = 0;
	return 1;
}

public OnVehicleRemove(vehid)
{
	CityVehicles[vehid][vModel] = 0;
	CityVehicles[vehid][vPosX] = 0.0;
	CityVehicles[vehid][vPosY] = 0.0;
	CityVehicles[vehid][vPosZ] = 0.0;
	CityVehicles[vehid][vPosA] = 0.0;
	CityVehicles[vehid][vColor1] = -1;
	CityVehicles[vehid][vColor2] = -1;
	CityVehicles[vehid][vType] = 0;
	format(CityVehicles[vehid][vInfo], 256, "None");
	format(CityVehicles[vehid][vPlate], 256, "None");
	CityVehicles[vehid][vCarOn] = 0;
	CityVehicles[vehid][vFaction] = 0;
	DestoryCar(CityVehicles[vehid][vVehicle]);
	return 1;
}

public OnObjectRemove(objectid)
{
	DestroyDynamicObject(ObjectsInfo[objectid][oObject]);
	ObjectsInfo[objectid][oPosX] = 0.0000;
	ObjectsInfo[objectid][oPosY] = 0.0000;
	ObjectsInfo[objectid][oPosZ] = 0.0000;
	ObjectsInfo[objectid][oPosRX] = 0.0000;
	ObjectsInfo[objectid][oPosRY] = 0.0000;
	ObjectsInfo[objectid][oPosRZ] = 0.0000;
	ObjectsInfo[objectid][oObjectOn] = 0;
	return 1;
}

public OnCameraRemove(objectid)
{
	DestroyDynamicObject(CCTVInfo[objectid][tvObject]);
	CCTVInfo[objectid][tvPosX] = 0.0000;
	CCTVInfo[objectid][tvPosY] = 0.0000;
	CCTVInfo[objectid][tvPosZ] = 0.0000;
	CCTVInfo[objectid][tvPosRX] = 0.0000;
	CCTVInfo[objectid][tvPosRY] = 0.0000;
	CCTVInfo[objectid][tvPosRZ] = 0.0000;
	CCTVInfo[objectid][tvObjectOn] = 0;
	return 1;
}

public OnMoveDoorRemove(objectid)
{
	DestroyDynamicObject(Doors[objectid][doorObject]);
	Doors[objectid][doorPosX] = 0.0;
	Doors[objectid][doorPosY] = 0.0;
	Doors[objectid][doorPosZ] = 0.0;
	Doors[objectid][doorPosRX] = 0.0;
	Doors[objectid][doorPosRY] = 0.0;
	Doors[objectid][doorPosRZ] = 0.0;
	Doors[objectid][doorObjectOn] = 0;
	Doors[objectid][doorInterior] = 0;
	Doors[objectid][doorFaction] = 0;
	Doors[objectid][doorOpened] = 0;
	Doors[objectid][doorVirtualWorld] = 0;
	return 1;
}

public OnGateRemove(objectid)
{
	DestroyDynamicObject(Gates[objectid][gateObject]);
	Gates[objectid][gatePosX] = 0.0;
	Gates[objectid][gatePosY] = 0.0;
	Gates[objectid][gatePosZ] = 0.0;
	Gates[objectid][gatePosRX] = 0.0;
	Gates[objectid][gatePosRY] = 0.0;
	Gates[objectid][gatePosRZ] = 0.0;
	Gates[objectid][gateOpenSpeed] = 0.0;
	Gates[objectid][gateMoveX] = 0.0;
	Gates[objectid][gateMoveY] = 0.0;
	Gates[objectid][gateMoveZ] = 0.0;
	Gates[objectid][gateMoveRX] = 0.0;
	Gates[objectid][gateMoveRY] = 0.0;
	Gates[objectid][gateMoveRZ] = 0.0;
	Gates[objectid][gateObjectOn] = 0;
	Gates[objectid][gateInterior] = 0;
	Gates[objectid][gateFaction] = 0;
	Gates[objectid][gateOpened] = 0;
	Gates[objectid][gateVirtualWorld] = 0;
	return 1;
}

public OnInfoRemove(infoid)
{
	if(IsValidDynamicCP(CPTInfo[infoid][cCheckPoint]) && IsValidDynamic3DTextLabel(Text3D:CPTInfo[infoid][cLabel]) && IsValidDynamicPickup(CPTInfo[infoid][cPickUp]))
	{
		DestroyDynamicCP(CPTInfo[infoid][cCheckPoint]);
		DestroyDynamic3DTextLabel(Text3D:CPTInfo[infoid][cLabel]);
		DestroyDynamicPickup(CPTInfo[infoid][cPickUp]);
	}
	CPTInfo[infoid][cPosX] = 0.0000;
	CPTInfo[infoid][cPosY] = 0.0000;
	CPTInfo[infoid][cPosZ] = 0.0000;
	CPTInfo[infoid][cInfoOn] = 0;
	CPTInfo[infoid][cLabel] = Text3D:INVALID_3DTEXT_ID;
	return 1;
}

public OnDealerShipRemove(dealerid)
{
	if(IsValidDynamicPickup(DealersInfo[dealerid][dealerPickUp]))
	{
		DestroyDynamicPickup(DealersInfo[dealerid][dealerPickUp]);
	}
	DealersInfo[dealerid][dealerPosX] = 0.0000;
	DealersInfo[dealerid][dealerPosY] = 0.0000;
	DealersInfo[dealerid][dealerPosZ] = 0.0000;
	DealersInfo[dealerid][dealerOn] = 0;
	return 1;
}

public OnBankRemove(bankid)
{
	BankInfo[bankid][bPosX] = 0.0000;
	BankInfo[bankid][bPosY] = 0.0000;
	BankInfo[bankid][bPosZ] = 0.0000;
	BankInfo[bankid][bInterior] = 0;
	BankInfo[bankid][bBankOn] = 0;
	return 1;
}

public OnLabelRemove(labelid)
{
	LabelsInfo[labelid][tLabel] = Text3D:INVALID_3DTEXT_ID;
	LabelsInfo[labelid][tLabelX] = 0.0000;
	LabelsInfo[labelid][tLabelY] = 0.0000;
	LabelsInfo[labelid][tLabelZ] = 0.0000;
	LabelsInfo[labelid][tColor] = 0;
	LabelsInfo[labelid][tLabelOn] = 0;
	return 1;
}

public OnLabelRenamed(labelid, info[])
{
	UpdateDynamic3DTextLabelText(Text3D:LabelsInfo[labelid][tLabel], LabelsInfo[labelid][tColor], info);
	format(LabelsInfo[labelid][tInfo], 256, "%s", info);
	return 1;
}

public OnBankRenamed(bankid, info[])
{
	format(BankInfo[bankid][bInfo], 256, "%s", info);
	return 1;
}

public SavePosition()
{
    foreach(Player, i)
	{
		SavePlayerPos(i);
	}
	return 1;
}
public GlobalSaving()
{
	//-------------------------------------------------
	foreach(Player, i)
	{
		SavePlayerStats(i);
	}
	//-------------------------------------------------
	for(new i = 0; i < MAX_PARK_METERS; i++)
	{
		if(ParkMeters[i][parkOn])
		{
			SaveParkMeter(i);
		}
	}
	//-------------------------------------------------
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		if(VehicleInfo[i][carOwned] == 1)
		{
			SaveVehicle(i);
		}
	}
	//-------------------------------------------------
	for(new i = 0; i < MAX_HOUSES; i++)
	{
		if(HouseInfo[i][hHouseOn] == 1 && HouseInfo[i][hOwned] == 1)
		{
			UpdateHouseInfo(i);
		}
	}
	//-------------------------------------------------
	for(new i = 0; i < MAX_BIZ; i++)
	{
		if(BizInfo[i][bizOn] == 1)
		{
			UpdateBizInfo(i);
		}
	}
	//-------------------------------------------------
	for(new i = 0; i < MAX_FACTIONS; i++)
	{
		if(Factions[i][fON] == 1)
		{
			SaveFaction(i);
		}
	}
	//-------------------------------------------------
	SavePlants();
	return 1;
}
stock SaveSpawnType(playerid)
{
  format(query, sizeof(query), "UPDATE `users` SET `spawntype` = %d, `spawnlspd` = %d WHERE `name` = '%s'",
  PlayerInfo[playerid][pSpawnType],
  PlayerInfo[playerid][pSpawnLSPD],
  GetName(playerid));
  mysql_function_query(dbHandle, query, false, "", "");
  return 1;
}
public SavePlayerStats(playerid)
{
	new contacts[256], tickets[256], channels[256];
	if(playerid != INVALID_PLAYER_ID && PlayerIsOn(playerid) && PlayerLogged(playerid))
	{
		SavePlayerPos(playerid);
		format(query, sizeof(query), "UPDATE `users` SET `registered` = %d, `cash` = %d, `bank` = %d, `skin` = %d, `sex` = %d, `age` = %d, `origin` = '%s', `level` = %d, `exp` = %d, `hours` = %d, `admin` = %d, `helper` = %d, `int` = %d, `world` = %d WHERE `name` = '%s'",
		PlayerInfo[playerid][pRegistered],
		PlayerInfo[playerid][pCash],
		PlayerInfo[playerid][pBank],
		PlayerInfo[playerid][pSkin],
		PlayerInfo[playerid][pSex],
		PlayerInfo[playerid][pAge],
		PlayerInfo[playerid][pOrigin],
		PlayerInfo[playerid][pLevel],
		PlayerInfo[playerid][pExp],
		PlayerInfo[playerid][pHours],
		PlayerInfo[playerid][pAdmin],
		PlayerInfo[playerid][pHelper],
		PlayerInfo[playerid][pInt],
		PlayerInfo[playerid][pWorld],
		GetName(playerid));
		mysql_function_query(dbHandle, query, false, "", "");
		//=========================================================================================================
		format(query, sizeof(query), "UPDATE `users` SET `jailed` = %d, `jailtime` = %d, `banned` = %d, `warns` = %d, `donate` = %d, `carlic` = %d, `weplic` = %d, `flylic` = %d, `taxilic` = %d,  `posx` = %f, `posy` = %f, `posz` = %f, `posa` = %f WHERE `name` = '%s'",
		PlayerInfo[playerid][pJailed],
		PlayerInfo[playerid][pJailTime],
		PlayerInfo[playerid][pBanned],
		PlayerInfo[playerid][pWarns],
		PlayerInfo[playerid][pDonateRank],
		PlayerInfo[playerid][pCarLic],
		PlayerInfo[playerid][pWepLic],
		PlayerInfo[playerid][pFlyLic],
    PlayerInfo[playerid][pTaxiLic],
		PlayerInfo[playerid][pPosX],
		PlayerInfo[playerid][pPosY],
		PlayerInfo[playerid][pPosZ],
		PlayerInfo[playerid][pPosA],
		GetName(playerid));
		mysql_function_query(dbHandle, query, false, "", "");
		//=========================================================================================================
		format(query, sizeof(query), "UPDATE `users` SET `died` = %d, `fightstyle` = %d, `pen` = %d, `attributes` = '%s', `forumname` = '%s', `paycheck` = %d, `paycheckmoney` = %d WHERE `name` = '%s'",
		PlayerInfo[playerid][pDied],
		PlayerInfo[playerid][pFightStyle],
		PlayerInfo[playerid][pPen],
		PlayerInfo[playerid][pAttributes],
		PlayerInfo[playerid][pForumName],
		PlayerInfo[playerid][pPayCheckMade],
		PlayerInfo[playerid][pPayCheckMoney],
		GetName(playerid));
		mysql_function_query(dbHandle, query, false, "", "");
		//=========================================================================================================
		format(query, sizeof(query), "UPDATE `users` SET `upgrade` = %d, `paydaytime` = %d, `spawnhealth` = %.1f, `cellphone` = %d, `number` = %d, `savings` = %d, `housekey` = %d, `melee` = %d, `wep1`= %d, `wep2` = %d, `ammo1` = %d, `ammo2`= %d WHERE `name` = '%s'",
		PlayerInfo[playerid][pUpgrade],
		PlayerInfo[playerid][pPayDayTime],
		PlayerInfo[playerid][pSHealth],
		PlayerInfo[playerid][pCellPhone],
		PlayerInfo[playerid][pNumber],
		PlayerInfo[playerid][pSavings],
		PlayerInfo[playerid][pHouseKey],
		PlayerInfo[playerid][pMeleeWep],
		GetPrimaryWeapon(playerid),
		GetSecondaryWeapon(playerid),
		GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm1]),
		GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm2]),
		GetName(playerid));
		mysql_function_query(dbHandle, query, false, "", "");
		//=========================================================================================================
		format(query, sizeof(query), "UPDATE `users` SET `radio` = %d, `crashed` = %d, `mask` = %d, `accenton` = %d, `accent` = '%s', `bmx` = %d, `carkey` = %d, `vehicles` = %d WHERE `name` = '%s'",
		PlayerInfo[playerid][pRadio] ,
		PlayerInfo[playerid][pCrashed],
		PlayerInfo[playerid][pMask],
		PlayerInfo[playerid][pAccentOn],
		PlayerInfo[playerid][pAccent],
		PlayerInfo[playerid][pBMX],
		PlayerInfo[playerid][pCarKey],
		PlayerInfo[playerid][pVehicles],
		GetName(playerid));
		mysql_function_query(dbHandle, query, false, "", "");
		//=========================================================================================================
		format(query, sizeof(query), "UPDATE `users` SET `vehslot` = %d, `drugs` = '%s', `sparekey` = %d, `lighter` = %d, `cigars` = %d, `bizkey` = %d, `workon` = %d WHERE `name` = '%s'",
		PlayerInfo[playerid][pVehSlot],
		PlayerInfo[playerid][pDrug],
		PlayerInfo[playerid][pSpareKey],
		PlayerInfo[playerid][pLighter],
		PlayerInfo[playerid][pCigars],
		PlayerInfo[playerid][pBizKey],
		PlayerInfo[playerid][pWorkOn],
		GetName(playerid));
		mysql_function_query(dbHandle, query, false, "", "");
		//=========================================================================================================
		format(query, sizeof(query), "UPDATE `users` SET `walk` = %d, `armour` = %.1f, `hasarmour` = %d, `faction` = %d, `rank` = %d, `badgenumber` = %d, `drivewarns` = %d, `jailtime2` = %d WHERE `name` = '%s'",
		PlayerInfo[playerid][pWalk],
		GetArmour(playerid),
		PlayerInfo[playerid][pHasArmour],
		PlayerInfo[playerid][pFaction],
		PlayerInfo[playerid][pRank],
		PlayerInfo[playerid][pBadgeNumber],
		PlayerInfo[playerid][pDriveWarns],
		PlayerInfo[playerid][pJailTime2],
		GetName(playerid));
		mysql_function_query(dbHandle, query, false, "", "");
		//=========================================================================================================
		format(query, sizeof(query), "UPDATE `users` SET `arrested` = %d, `chat` = %d, `swat` = %d, `tickets` = '%s', `job` = %d, `jobrank` = %d, `career` = %d WHERE `name` = '%s'",
		PlayerInfo[playerid][pArrested],
		PlayerInfo[playerid][pTalk],
		PlayerInfo[playerid][pSwat],
		tickets,
		PlayerInfo[playerid][pJob],
		PlayerInfo[playerid][pJobRank],
		PlayerInfo[playerid][pCareer],
		GetName(playerid));
		mysql_function_query(dbHandle, query, false, "", "");
		//=========================================================================================================
		format(query, sizeof(query), "UPDATE `users` SET `sidejob` = %d, `spawntype` = %d, `spawnlspd` = %d, `prisoned` = %d WHERE `name` = '%s'",
		PlayerInfo[playerid][pSideJob],
		PlayerInfo[playerid][pSpawnType],
		PlayerInfo[playerid][pSpawnLSPD],
		PlayerInfo[playerid][pPrisoned],
		GetName(playerid));
		mysql_function_query(dbHandle, query, false, "", "");
		//=========================================================================================================
		format(query, sizeof(query), "UPDATE `users` SET `seeds` = %d, `fines` = %d, `CanJob` = %d WHERE `name` = '%s'",
		PlayerInfo[playerid][pSeeds],
		PlayerInfo[playerid][pFines],
		PlayerInfo[playerid][pCanJob],
		GetName(playerid));
		mysql_function_query(dbHandle, query, false, "", "");
		//=========================================================================================================
		format(query, sizeof(query), "UPDATE `users` SET `contacts` = '%s', `channels` = '%s', `authed` = '%d', `slot` = '%d', `channel` = '%d', `ownedchannel` = %d WHERE `name` = '%s'",
		contacts,
		channels,
		PlayerInfo[playerid][pAuthed],
		PlayerInfo[playerid][pSlot],
		PlayerInfo[playerid][pChannel],
		PlayerInfo[playerid][pOwnedChannel],
		GetName(playerid));
		mysql_function_query(dbHandle, query, false, "", "");
		//=========================================================================================================
		format(query, sizeof(query), "UPDATE `users` SET `activated` = %d WHERE `name` = '%s'",
		PlayerInfo[playerid][pActive],
		GetName(playerid));
		mysql_function_query(dbHandle, query, false, "", "");
		//=========================================================================================================
		format(query, sizeof(query), "UPDATE `users` SET `LastX` = %f, `LastY` = %f, `LastZ` = %f, `LastA` = %f, `LastInt` = %d, `LastVW` = %d WHERE `name` = '%s'",
		PlayerInfo[playerid][pLastX], PlayerInfo[playerid][pLastY], PlayerInfo[playerid][pLastZ],PlayerInfo[playerid][pLastA],GetInterior(playerid), GetWorld(playerid), GetName(playerid));
		mysql_function_query(dbHandle, query, false, "", "");
	}
	return 1;
}

public servicepecosudclose()
{
    MoveObject(servicepecosud, 1912.0736, -1771.8940, 13.7736, 1.0,0.0000, 0.0000, 90);
}

public OnAccountLoad(playerid)
{
	new tickets[256];
	cache_get_field_content(0, "id", query);
	PlayerInfo[playerid][pDatabaseID] = strval(query);
	cache_get_field_content(0, "registered", query);
	PlayerInfo[playerid][pRegistered] = strval(query);
	cache_get_field_content(0, "cash", query);
	PlayerInfo[playerid][pCash] = strval(query);
	cache_get_field_content(0, "bank", query);
	PlayerInfo[playerid][pBank] = strval(query);
	cache_get_field_content(0, "skin", query);
	PlayerInfo[playerid][pSkin] = strval(query);
	cache_get_field_content(0, "sex", query);
	PlayerInfo[playerid][pSex] = strval(query);
	cache_get_field_content(0, "age", query);
	PlayerInfo[playerid][pAge] = strval(query);
	cache_get_field_content(0, "origin", query);
	format(PlayerInfo[playerid][pOrigin], 256, query);
	cache_get_field_content(0, "level", query);
	PlayerInfo[playerid][pLevel] = strval(query);
	cache_get_field_content(0, "exp", query);
	PlayerInfo[playerid][pExp] = strval(query);
	cache_get_field_content(0, "hours", query);
	PlayerInfo[playerid][pHours] = strval(query);
	cache_get_field_content(0, "admin", query);
	PlayerInfo[playerid][pAdmin] = strval(query);
	cache_get_field_content(0, "helper", query);
	PlayerInfo[playerid][pHelper] = strval(query);
	cache_get_field_content(0, "int", query);
	PlayerInfo[playerid][pInt] = strval(query);
	cache_get_field_content(0, "world", query);
	PlayerInfo[playerid][pWorld] = strval(query);
	cache_get_field_content(0, "jailed", query);
	PlayerInfo[playerid][pJailed] = strval(query);
	cache_get_field_content(0, "jailtime", query);
	PlayerInfo[playerid][pJailTime] = strval(query);
	cache_get_field_content(0, "banned", query);
	PlayerInfo[playerid][pBanned] = strval(query);
	cache_get_field_content(0, "warns", query);
	PlayerInfo[playerid][pWarns] = strval(query);
	cache_get_field_content(0, "donate", query);
	PlayerInfo[playerid][pDonateRank] = strval(query);
	cache_get_field_content(0, "carlic", query);
	PlayerInfo[playerid][pCarLic] = strval(query);
	cache_get_field_content(0, "weplic", query);
	PlayerInfo[playerid][pWepLic] = strval(query);
	cache_get_field_content(0, "flylic", query);
	PlayerInfo[playerid][pFlyLic] = strval(query);
	cache_get_field_content(0, "posx", query);
	PlayerInfo[playerid][pPosX] = floatstr(query);
	cache_get_field_content(0, "poxy", query);
	PlayerInfo[playerid][pPosY] = floatstr(query);
	cache_get_field_content(0, "posz", query);
	PlayerInfo[playerid][pPosZ] = floatstr(query);
	cache_get_field_content(0, "posa", query);
	PlayerInfo[playerid][pPosA] = floatstr(query);
	cache_get_field_content(0, "died", query);
	PlayerInfo[playerid][pDied] = strval(query);
	cache_get_field_content(0, "pen", query);
	PlayerInfo[playerid][pPen] = strval(query);
	cache_get_field_content(0, "note1", query);
	PlayerInfo[playerid][pNote1] = strval(query);
	cache_get_field_content(0, "note1s", query);
	PlayerInfo[playerid][pNote1s] = strval(query);
	cache_get_field_content(0, "note2", query);
	PlayerInfo[playerid][pNote2] = strval(query);
	cache_get_field_content(0, "note2s", query);
	PlayerInfo[playerid][pNote2s] = strval(query);
	cache_get_field_content(0, "note3", query);
	PlayerInfo[playerid][pNote3] = strval(query);
	cache_get_field_content(0, "note3s", query);
	PlayerInfo[playerid][pNote3s] = strval(query);
	cache_get_field_content(0, "attributes", query);
	PlayerInfo[playerid][pAttributes] = strval(query);
	cache_get_field_content(0, "paycheck", query);
	PlayerInfo[playerid][pPayCheckMade] = strval(query);
	cache_get_field_content(0, "paycheckmoney", query);
	PlayerInfo[playerid][pPayCheckMoney] = strval(query);
	cache_get_field_content(0, "upgrade", query);
	PlayerInfo[playerid][pUpgrade] = strval(query);
	cache_get_field_content(0, "paydaytime", query);
	PlayerInfo[playerid][pPayDayTime] = strval(query);
	cache_get_field_content(0, "spawnhealth", query);
	PlayerInfo[playerid][pSHealth] = floatstr(query);
	cache_get_field_content(0, "cellphone", query);
	PlayerInfo[playerid][pCellPhone] = strval(query);
	cache_get_field_content(0, "number", query);
	PlayerInfo[playerid][pNumber] = strval(query);
	cache_get_field_content(0, "savings", query);
	PlayerInfo[playerid][pSavings] = strval(query);
	cache_get_field_content(0, "housekey", query);
	PlayerInfo[playerid][pHouseKey] = strval(query);
	cache_get_field_content(0, "melee", query);
	PlayerInfo[playerid][pMeleeWep] = strval(query);
	cache_get_field_content(0, "wep1", query);
	PlayerInfo[playerid][pPerm1] = strval(query);
	cache_get_field_content(0, "wep2", query);
	PlayerInfo[playerid][pPerm2] = strval(query);
	cache_get_field_content(0, "ammo1", query);
	PlayerInfo[playerid][pAmmo1] = strval(query);
	cache_get_field_content(0, "ammo2", query);
	PlayerInfo[playerid][pAmmo2] = strval(query);
	cache_get_field_content(0, "radio", query);
	PlayerInfo[playerid][pRadio] = strval(query);
	cache_get_field_content(0, "channel", query);
	PlayerInfo[playerid][pChannel] = strval(query);
	cache_get_field_content(0, "ownedchannel", query);
	PlayerInfo[playerid][pOwnedChannel] = strval(query);
	cache_get_field_content(0, "authed", query);
	PlayerInfo[playerid][pAuthed] = strval(query);
	cache_get_field_content(0, "crashed", query);
	PlayerInfo[playerid][pCrashed] = strval(query);
	cache_get_field_content(0, "mask", query);
	PlayerInfo[playerid][pMask] = strval(query);
	cache_get_field_content(0, "bmx", query);
	PlayerInfo[playerid][pBMX] = strval(query);
	cache_get_field_content(0, "carkey", query);
	PlayerInfo[playerid][pCarKey] = strval(query);
	cache_get_field_content(0, "veh1", query);
	PlayerVehicle[playerid][pVeh1] = strval(query);
	cache_get_field_content(0, "veh2", query);
	PlayerVehicle[playerid][pVeh2] = strval(query);
	cache_get_field_content(0, "veh3", query);
	PlayerVehicle[playerid][pVeh3] = strval(query);
	cache_get_field_content(0, "vehicles", query);
	PlayerInfo[playerid][pVehicles] = strval(query);
	cache_get_field_content(0, "vehslot", query);
	PlayerInfo[playerid][pVehSlot] = strval(query);
	cache_get_field_content(0, "sparekey", query);
	PlayerInfo[playerid][pSpareKey] = strval(query);
	cache_get_field_content(0, "lighter", query);
	PlayerInfo[playerid][pLighter] = strval(query);
	cache_get_field_content(0, "cigars", query);
	PlayerInfo[playerid][pCigars] = strval(query);
	cache_get_field_content(0, "bizkey", query);
	PlayerInfo[playerid][pBizKey] = strval(query);
	cache_get_field_content(0, "workon", query);
	PlayerInfo[playerid][pWorkOn] = strval(query);
	cache_get_field_content(0, "walk", query);
	PlayerInfo[playerid][pWalk] = strval(query);
	cache_get_field_content(0, "armour", query);
	PlayerInfo[playerid][pArmour] = floatstr(query);
	cache_get_field_content(0, "hasarmour", query);
	PlayerInfo[playerid][pHasArmour] = strval(query);
	cache_get_field_content(0, "faction", query);
	PlayerInfo[playerid][pFaction] = strval(query);
	cache_get_field_content(0, "rank", query);
	PlayerInfo[playerid][pRank] = strval(query);
	cache_get_field_content(0, "badgenumber", query);
	PlayerInfo[playerid][pBadgeNumber] = strval(query);
	cache_get_field_content(0, "drivewarns", query);
	PlayerInfo[playerid][pDriveWarns] = strval(query);
	cache_get_field_content(0, "jailtime2", query);
	PlayerInfo[playerid][pJailTime2] = strval(query);
	cache_get_field_content(0, "arrested", query);
	PlayerInfo[playerid][pArrested] = strval(query);
	cache_get_field_content(0, "chat", query);
	PlayerInfo[playerid][pTalk] = strval(query);
	cache_get_field_content(0, "swat", query);
	PlayerInfo[playerid][pSwat] = strval(query);
	cache_get_field_content(0, "slot", query);
	PlayerInfo[playerid][pSlot] = strval(query);
	cache_get_field_content(0, "tickets", query);
	AssignPlayerTickets(playerid, tickets);
	cache_get_field_content(0, "job", query);
	PlayerInfo[playerid][pJob] = strval(query);
	cache_get_field_content(0, "jobrank", query);
	PlayerInfo[playerid][pJobRank] = strval(query);
	cache_get_field_content(0, "career", query);
	PlayerInfo[playerid][pCareer] = strval(query);
	cache_get_field_content(0, "spawntype", query);
	PlayerInfo[playerid][pSpawnType] = strval(query);
	cache_get_field_content(0, "spawnlspd", query);
	PlayerInfo[playerid][pSpawnLSPD] = strval(query);
	cache_get_field_content(0, "prisoned", query);
	PlayerInfo[playerid][pPrisoned] = strval(query);
	cache_get_field_content(0, "drugs", query);
	PlayerInfo[playerid][pDrug] = strval(query);
	cache_get_field_content(0, "seeds", query);
	PlayerInfo[playerid][pSeeds] = strval(query);
	cache_get_field_content(0, "spraypermission", query);
	PlayerInfo[playerid][pSprayPermission] = strval(query);
	cache_get_field_content(0, "activated", query);
	PlayerInfo[playerid][pActive] = strval(query);
	cache_get_field_content(0, "fines", query);
	PlayerInfo[playerid][pFines] = strval(query);
	cache_get_field_content(0, "CanJob", query);
	PlayerInfo[playerid][pCanJob] = strval(query);
	cache_get_field_content(0, "LastX", query);
	PlayerInfo[playerid][pLastX] = strval(query);
	cache_get_field_content(0, "LastY", query);
	PlayerInfo[playerid][pLastY] = strval(query);
	cache_get_field_content(0, "LastZ", query);
	PlayerInfo[playerid][pLastZ] = strval(query);
	cache_get_field_content(0, "LastA", query);
	PlayerInfo[playerid][pLastA] = strval(query);
	cache_get_field_content(0, "LastInt", query);
	PlayerInfo[playerid][pLastInt] = strval(query);
	cache_get_field_content(0, "LastVW", query);
	PlayerInfo[playerid][pLastVW] = strval(query);
	cache_get_field_content(0, "forumname", query);
	PlayerInfo[playerid][pForumName] = strval(query);
    return 1;
}

public ScoreUpdate(playerid)
{
	if(PlayerIsOn(playerid))
	{
		SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	}
	return 1;
}

public PlayerNearVehicle(Float:radi, playerid, vehicleid)
{
    if(PlayerIsOn(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetVehiclePos(vehicleid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

public ProxDetectorP(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
	if(PlayerIsOn(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(PlayerIsOn(i) && (GetWorld(playerid) == GetWorld(i)))
			{
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						SCM(i, col1, string);
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						SCM(i, col2, string);
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						SCM(i, col3, string);
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						SCM(i, col4, string);
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						SCM(i, col5, string);
					}
			}
		}
	}//not connected
	return 1;
}

public PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
    if(PlayerIsOn(playerid))
	{
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		tempposx = (oldposx -x);
		tempposy = (oldposy -y);
		tempposz = (oldposz -z);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

public LoadDynamicLabels()
{
    new rows, fields;
	new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
		while(total < rows)
		{
			LabelsInfo[total][tID] = cache_get_row_int(total, 0);
			LabelsInfo[total][tLabelX] = cache_get_row_float(total, 1);
			LabelsInfo[total][tLabelY] = cache_get_row_float(total, 2);
			LabelsInfo[total][tLabelZ] = cache_get_row_float(total, 3);
			LabelsInfo[total][tColor] = cache_get_row_int(total, 4);
			LabelsInfo[total][tVirtualWorld] = cache_get_row_int(total, 5);
			cache_get_row(total, 6, LabelsInfo[total][tInfo], dbHandle, 128);
			LabelsInfo[total][tGameText] = cache_get_row_int(total, 7);
			LabelsInfo[total][tLabelOn] = 1;
			if(LabelsInfo[total][tGameText] == 0)
			{
				LabelsInfo[total][tLabel] = CreateDynamic3DTextLabel(LabelsInfo[total][tInfo], LabelsInfo[total][tColor], LabelsInfo[total][tLabelX], LabelsInfo[total][tLabelY], LabelsInfo[total][tLabelZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, LabelsInfo[total][tVirtualWorld], -1, -1, 100.0);
			}
			LabelsInfo[total][tPickUp] = CreateDynamicPickup(1239, 1, LabelsInfo[total][tLabelX], LabelsInfo[total][tLabelY], LabelsInfo[total][tLabelZ], -1, -1, -1, 100.0);
			total++;
		}
    }
	format(msg,sizeof(msg), "Loaded %d labels from MySQL.", total);
	printf(msg);
    return 1;
}

public LoadDynamicDoors()
{
    new rows, fields;
	new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
		while(total < rows)
		{
			DoorInfo[total][dID] = cache_get_row_int(total, 0);
			cache_get_row(total, 1, DoorInfo[total][dInfo], dbHandle, 128);
			DoorInfo[total][dEnterX] = cache_get_row_float(total, 2);
			DoorInfo[total][dEnterY] = cache_get_row_float(total, 3);
			DoorInfo[total][dEnterZ] = cache_get_row_float(total, 4);
			DoorInfo[total][dExitX] = cache_get_row_float(total, 5);
			DoorInfo[total][dExitY] = cache_get_row_float(total, 6);
			DoorInfo[total][dExitZ] = cache_get_row_float(total, 7);
			DoorInfo[total][dEnterInterior] = cache_get_row_int(total, 8);
			DoorInfo[total][dExitInterior] = cache_get_row_int(total, 9);
			DoorInfo[total][dVirtualWorld] = cache_get_row_int(total, 10);
			DoorInfo[total][dDoorOn] = 1;
			DoorInfo[total][dPickUp] = CreateDynamicPickup(1239, 1, DoorInfo[total][dEnterX], DoorInfo[total][dEnterY], DoorInfo[total][dEnterZ], -1, -1, -1, 100.0);
			total++;
		}
    }
	format(msg,sizeof(msg), "Loaded %d doors from MySQL.", total);
	printf(msg);
    return 1;
}

public LoadDynamicFactionDoors()
{
    new rows, fields;
	new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
		while(total < rows)
		{
			FactionDoors[total][dID] = cache_get_row_int(total, 0);
			FactionDoors[total][dFaction] = cache_get_row_int(total, 1);
			cache_get_row(total, 2, FactionDoors[total][dInfo], dbHandle, 128);
			FactionDoors[total][dEnterX] = cache_get_row_float(total, 3);
			FactionDoors[total][dEnterY] = cache_get_row_float(total, 4);
			FactionDoors[total][dEnterZ] = cache_get_row_float(total, 5);
			FactionDoors[total][dExitX] = cache_get_row_float(total, 6);
			FactionDoors[total][dExitY] = cache_get_row_float(total, 7);
			FactionDoors[total][dExitZ] = cache_get_row_float(total, 8);
			FactionDoors[total][dEnterInterior] = cache_get_row_int(total, 9);
			FactionDoors[total][dExitInterior] = cache_get_row_int(total, 10);
			FactionDoors[total][dVirtualWorld] = cache_get_row_int(total, 11);
			FactionDoors[total][dWithVehicle] = cache_get_row_int(total, 12);
			FactionDoors[total][dEnterAngle] = cache_get_row_float(total, 13);
			FactionDoors[total][dExitAngle] = cache_get_row_float(total, 14);
			FactionDoors[total][dDoorOn] = 1;
			FactionDoors[total][dLocked] = 1;
			FactionDoors[total][dPickUp] = CreateDynamicPickup(1239, 2, FactionDoors[total][dEnterX], FactionDoors[total][dEnterY], FactionDoors[total][dEnterZ], -1, -1, -1, 100.0);
			total++;
		}
    }
	format(msg,sizeof(msg), "Loaded %d faction doors from MySQL.", total);
	printf(msg);
    return 1;
}

public LoadMoveDoors()
{
    new rows, fields;
	new total = 0;
	new object, id, model, faction, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, Float:openspeed, Float:movex, Float:movey, Float:movez, interior, world, name[256];
    cache_get_data(rows, fields);
    if(rows)
    {
		while(total < rows)
		{
			id = cache_get_row_int(total, 0),
			model = cache_get_row_int(total, 1),
			faction = cache_get_row_int(total, 2),
			x = cache_get_row_float(total, 3),
			y = cache_get_row_float(total, 4),
			z = cache_get_row_float(total, 5),
			rx = cache_get_row_float(total, 6),
			ry = cache_get_row_float(total, 7),
			rz = cache_get_row_float(total, 8),
			interior = cache_get_row_int(total, 8),
			world = cache_get_row_int(total, 10),
			cache_get_row(total, 11, name, dbHandle, 128),
			openspeed = cache_get_row_float(total, 12),
			movex = cache_get_row_float(total, 13),
			movey = cache_get_row_float(total, 14),
			movez = cache_get_row_float(total, 15);
			object = CreateDynamicObject(model, x, y, z, rx, ry, rz, world, -1, -1, 200.0);
			Doors[object][doorID] = id;
			Doors[object][doorModel] = model;
			Doors[object][doorFaction] = faction;
			Doors[object][doorPosX] = x;
			Doors[object][doorPosY] = y;
			Doors[object][doorPosZ] = z;
			Doors[object][doorPosRX] = rx;
			Doors[object][doorPosRY] = ry;
			Doors[object][doorPosRZ] = rz;
			Doors[object][doorOpenSpeed] = openspeed;
			Doors[object][doorMoveX] = movex;
			Doors[object][doorMoveY] = movey;
			Doors[object][doorMoveZ] = movez;
			Doors[object][doorInterior] = interior;
			Doors[object][doorVirtualWorld] = world;
			format(Doors[object][doorName], 256, "%s", name);
			Doors[object][doorObjectOn] = 1;
			Doors[object][doorObject] = object;
			total++;
		}
    }
	format(msg,sizeof(msg), "Loaded %d dynamic movable doors from MySQL.", total);
	printf(msg);
    return 1;
}

public LoadDynamicGates()
{
    new rows, fields;
	new total = 0;
	new object, id, model, faction, Float:speed, Float:movex, Float:movey, Float:movez, Float:moverx, Float:movery, Float:moverz, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, interior, world, name[256];
    new sound, soundlength;
	cache_get_data(rows, fields);
    if(rows)
    {
		while(total < rows)
		{
			id = cache_get_row_int(total, 0),
			model = cache_get_row_int(total, 1),
			faction = cache_get_row_int(total, 2),
			x = cache_get_row_float(total, 3),
			y = cache_get_row_float(total, 4),
			z = cache_get_row_float(total, 5),
			rx = cache_get_row_float(total, 6),
			ry = cache_get_row_float(total, 7),
			rz = cache_get_row_float(total, 8),
			speed = cache_get_row_float(total, 9),
			movex = cache_get_row_float(total, 10),
			movey = cache_get_row_float(total, 11),
			movez = cache_get_row_float(total, 12),
			moverx = cache_get_row_float(total, 13),
			movery = cache_get_row_float(total, 14),
			moverz = cache_get_row_float(total, 15),
			interior = cache_get_row_int(total, 16),
			world = cache_get_row_int(total, 17),
			cache_get_row(total, 18, name, dbHandle, 128),
			sound = cache_get_row_int(total, 19),
			soundlength = cache_get_row_int(total, 20);
			object = CreateDynamicObject(model, x, y, z, rx, ry, rz, world, -1, -1, 200.0);
			Gates[object][gateID] = id;
			Gates[object][gateModel] = model;
			Gates[object][gateFaction] = faction;
			Gates[object][gatePosX] = x;
			Gates[object][gatePosY] = y;
			Gates[object][gatePosZ] = z;
			Gates[object][gatePosRX] = rx;
			Gates[object][gatePosRY] = ry;
			Gates[object][gatePosRZ] = rz;
			Gates[object][gateOpenSpeed] = speed;
			Gates[object][gateMoveX] = movex;
			Gates[object][gateMoveY] = movey;
			Gates[object][gateMoveZ] = movez;
			Gates[object][gateMoveRX] = moverx;
			Gates[object][gateMoveRY] = movery;
			Gates[object][gateMoveRZ] = moverz;
			Gates[object][gateInterior] = interior;
			Gates[object][gateVirtualWorld] = world;
			Gates[object][gateSound] = sound;
			Gates[object][gateSoundLength] = soundlength;
			format(Gates[object][gateName], 256, "%s", name);
			Gates[object][gateObjectOn] = 1;
			Gates[object][gateObject] = object;
			total++;
		}
    }
	format(msg,sizeof(msg), "Loaded %d dynamic gates from MySQL.", total);
	printf(msg);
    return 1;
}

public LoadDynamicATMS()
{
    new rows, fields;
	new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
		while(total < rows)
		{
			ATMInfo[total][atmID] = cache_get_row_int(total, 0);
			ATMInfo[total][atmPosX] = cache_get_row_float(total, 1);
			ATMInfo[total][atmPosY] = cache_get_row_float(total, 2);
			ATMInfo[total][atmPosZ] = cache_get_row_float(total, 3);
			ATMInfo[total][atmInterior] = cache_get_row_int(total, 4);
			cache_get_row(total, 5, ATMInfo[total][atmInfo], dbHandle, 128);
			ATMInfo[total][atmAtmOn] = 1;
			format(msg, sizeof(msg), ""EMBED_ORANGE"["EMBED_YELLOW"ATM-%d"EMBED_ORANGE"]\n"EMBED_WHITE"%s.\n"EMBED_LIGHTBLUE"/atm", total, ATMInfo[total][atmInfo]);
			ATMInfo[total][atmLabel] = CreateDynamic3DTextLabel(msg, -1, ATMInfo[total][atmPosX], ATMInfo[total][atmPosY], ATMInfo[total][atmPosZ], 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			ATMInfo[total][atmPickUp] = CreateDynamicPickup(1274, 1, ATMInfo[total][atmPosX], ATMInfo[total][atmPosY], ATMInfo[total][atmPosZ], -1, -1, -1, 100.0);
			total++;
		}
    }
	format(msg,sizeof(msg), "Loaded %d ATM's from MySQL.", total);
	printf(msg);
    return 1;
}

public LoadDynamicTeles()
{
    new rows, fields;
	new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
		while(total < rows)
		{
			HouseInteriors[total][aID] = cache_get_row_int(total, 0);
			cache_get_row(total, 1, HouseInteriors[total][aMapName], dbHandle, 128);
			HouseInteriors[total][aPosX] = cache_get_row_float(total, 2);
			HouseInteriors[total][aPosY] = cache_get_row_float(total, 3);
			HouseInteriors[total][aPosZ] = cache_get_row_float(total, 4);
			HouseInteriors[total][aInterior] = cache_get_row_int(total, 5);
			HouseInteriors[total][aTeleOn] = 1;
			total++;
		}
    }
	format(msg,sizeof(msg), "Loaded %d admin teleports from MySQL.", total);
	printf(msg);
    return 1;
}

public LoadDynamicObjects()
{
    new rows, fields;
	new total = 0;
	new object, id, model, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, interior, world, name[256];
    cache_get_data(rows, fields);
    if(rows)
    {
		while(total < rows)
		{
			id = cache_get_row_int(total, 0);
			model = cache_get_row_int(total, 1);
			x = cache_get_row_float(total, 2);
			y = cache_get_row_float(total, 3);
			z = cache_get_row_float(total, 4);
			rx = cache_get_row_float(total, 5);
			ry = cache_get_row_float(total, 6);
			rz = cache_get_row_float(total, 7);
			interior = cache_get_row_int(total, 8);
			world = cache_get_row_int(total, 9);
			cache_get_row(total, 10, name, dbHandle, 128);
			object = CreateDynamicObject(model, x, y, z, rx, ry, rz, world, -1, -1, 200.0);
			ObjectsInfo[object][oID] = id;
			ObjectsInfo[object][oModel] = model;
			ObjectsInfo[object][oPosX] = x;
			ObjectsInfo[object][oPosY] = y;
			ObjectsInfo[object][oPosZ] = z;
			ObjectsInfo[object][oPosRX] = rx;
			ObjectsInfo[object][oPosRY] = ry;
			ObjectsInfo[object][oPosRZ] = rz;
			ObjectsInfo[object][oInterior] = interior;
			ObjectsInfo[object][oVirtualWorld] = world;
			format(ObjectsInfo[object][oName], 256, "%s", name);
			ObjectsInfo[object][oObjectOn] = 1;
			ObjectsInfo[object][oObject] = object;
			total++;
		}
    }
	format(msg,sizeof(msg), "Loaded %d dynamic objects from MySQL.", total);
	printf(msg);
    return 1;
}

public LoadDynamicCCTV()
{
    new rows, fields;
	new total = 0;
	new object, id, faction, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, interior, world, name[256];
    cache_get_data(rows, fields);
    if(rows)
    {
		while(total < rows)
		{
			id = cache_get_row_int(total, 0);
			faction = cache_get_row_int(total, 1);
			x = cache_get_row_float(total, 2);
			y = cache_get_row_float(total, 3);
			z = cache_get_row_float(total, 4);
			rx = cache_get_row_float(total, 5);
			ry = cache_get_row_float(total, 6);
			rz = cache_get_row_float(total, 7);
			interior = cache_get_row_int(total, 8);
			world = cache_get_row_int(total, 9);
			cache_get_row(total, 10, name, dbHandle, 128);
			object = CreateDynamicObject(1886, x, y, z, rx, ry, rz, -1, -1, -1, 200.0);
			CCTVInfo[object][tvID] = id;
			CCTVInfo[object][tvFaction] = faction;
			CCTVInfo[object][tvPosX] = x;
			CCTVInfo[object][tvPosY] = y;
			CCTVInfo[object][tvPosZ] = z;
			CCTVInfo[object][tvPosRX] = rx;
			CCTVInfo[object][tvPosRY] = ry;
			CCTVInfo[object][tvPosRZ] = rz;
			CCTVInfo[object][tvInterior] = interior;
			CCTVInfo[object][tvVirtualWorld] = world;
			format(CCTVInfo[object][tvName], 256, "%s", name);
			CCTVInfo[object][tvObjectOn] = 1;
			CCTVInfo[object][tvObject] = object;
			total++;
		}
    }
	format(msg,sizeof(msg), "Loaded %d dynamic CCTV's from MySQL.", total);
	printf(msg);
    return 1;
}

public LoadDynamicCPT()
{
    new rows, fields;
	new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
		while(total < rows)
		{
			CPTInfo[total][cID] = cache_get_row_int(total, 0);
			CPTInfo[total][cPosX] = cache_get_row_float(total, 1);
			CPTInfo[total][cPosY] = cache_get_row_float(total, 2);
			CPTInfo[total][cPosZ] = cache_get_row_float(total, 3);
			CPTInfo[total][cVirtualWorld] = cache_get_row_int(total, 4);
			cache_get_row(total, 5, CPTInfo[total][cLabelText1], dbHandle, 128);
			cache_get_row(total, 6, CPTInfo[total][cLabelText2], dbHandle, 128);
			cache_get_row(total, 7, CPTInfo[total][cOtherInfo], dbHandle, 128);
			CPTInfo[total][cInfoOn] = 1;
			format(msg, sizeof(msg), ""EMBED_GREEN"["EMBED_RED"Info"EMBED_GREEN"]\n"EMBED_WHITE"%s.\n"EMBED_YELLOW"%s.\n"EMBED_LIGHTBLUE"Commands: /info.", CPTInfo[total][cLabelText1], CPTInfo[total][cLabelText2]);
			CPTInfo[total][cLabel] = CreateDynamic3DTextLabel(msg, -1, CPTInfo[total][cPosX], CPTInfo[total][cPosY], CPTInfo[total][cPosZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, CPTInfo[total][cVirtualWorld], -1, -1, 100.0);
			CPTInfo[total][cPickUp] = CreateDynamicPickup(1239, 1, CPTInfo[total][cPosX], CPTInfo[total][cPosY], CPTInfo[total][cPosZ], CPTInfo[total][cVirtualWorld], -1, -1, 100.0);
			CPTInfo[total][cCheckPoint] = CreateDynamicCP(CPTInfo[total][cPosX], CPTInfo[total][cPosY], CPTInfo[total][cPosZ], 1.0, CPTInfo[total][cVirtualWorld], -1, -1, 30.0);
			total++;
		}
    }
	format(msg,sizeof(msg), "Loaded %d dynamic infos from MySQL.", total);
	printf(msg);
    return 1;
}

public LoadDynamicGasStations()
{
    new rows, fields;
	new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
		while(total < rows)
		{
			GasStation[total][gID] = cache_get_row_int(total, 0);
			GasStation[total][gPosX] = cache_get_row_float(total, 1);
			GasStation[total][gPosY] = cache_get_row_float(total, 2);
			GasStation[total][gPosZ] = cache_get_row_float(total, 3);
			GasStation[total][gPrice] = cache_get_row_int(total, 4);
			cache_get_row(total, 5, GasStation[total][ggInfo], dbHandle, 128);
			GasStation[total][gStationOn] = 1;
			format(msg, sizeof(msg), ""EMBED_WHITE"["EMBED_GREEN"Gas Station-%d"EMBED_WHITE"]\n"EMBED_YELLOW"%s.\n"EMBED_GREEN"/refill price - $%d.", total, GasStation[total][ggInfo], GasStation[total][gPrice]);
			GasStation[total][gLabel] = CreateDynamic3DTextLabel(msg, -1, GasStation[total][gPosX], GasStation[total][gPosY], GasStation[total][gPosZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			GasStation[total][gPickUp] = CreateDynamicPickup(1239, 1, GasStation[total][gPosX], GasStation[total][gPosY], GasStation[total][gPosZ], -1, -1, -1, 100.0);
			total++;
		}
    }
	format(msg,sizeof(msg), "Loaded %d dynamic gas stations from MySQL.", total);
	printf(msg);
    return 1;
}

public LoadDynamicBanks()
{
    new rows, fields;
	new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
		while(total < rows)
		{
			BankInfo[total][bID] = cache_get_row_int(total, 0);
			BankInfo[total][bPosX] = cache_get_row_float(total, 1);
			BankInfo[total][bPosY] = cache_get_row_float(total, 2);
			BankInfo[total][bPosZ] = cache_get_row_float(total, 3);
			BankInfo[total][bInterior] = cache_get_row_int(total, 4);
			cache_get_row(total, 5, BankInfo[total][bInfo], dbHandle, 128);
			BankInfo[total][bBankOn] = 1;
			total++;
		}
    }
	format(msg,sizeof(msg), "Loaded %d dynamic banks from MySQL.", total);
	printf(msg);
    return 1;
}

public LoadDynamicVehicles()
{
    new rows, fields;
  	new total = 0;
  	new id, model, color1, color2, faction, Float:x, Float:y, Float:z, Float:a, type, plate[128], info[128], vehicle;
    cache_get_data(rows, fields);
    if(rows)
    {
  		while(total < rows)
  		{
  			id = cache_get_row_int(total, 0);
  			model = cache_get_row_int(total, 1);
  			color1 = cache_get_row_int(total, 2);
  			color2 = cache_get_row_int(total, 3);
  			x = cache_get_row_float(total, 4);
  			y = cache_get_row_float(total, 5);
  			z = cache_get_row_float(total, 6);
  			a = cache_get_row_float(total, 7);
  			type = cache_get_row_int(total, 8);
  			faction = cache_get_row_int(total, 9);
  			cache_get_row(total, 10, plate, dbHandle, 128);
  			cache_get_row(total, 11, info, dbHandle, 128);
  			vehicle = CreateVehicle(model, x, y, z, a, color1, color2, -1);
     			SetVehicleNumberPlate(vehicle, plate);
  			CityVehicles[vehicle][vVehicle] = vehicle;
  			CityVehicles[vehicle][vID] = id;
  			CityVehicles[vehicle][vModel] = model;
  			CityVehicles[vehicle][vColor1] = color1;
  			CityVehicles[vehicle][vColor2] = color2;
  			CityVehicles[vehicle][vPosX] = x;
  			CityVehicles[vehicle][vPosY] = y;
  			CityVehicles[vehicle][vPosZ] = z;
  			CityVehicles[vehicle][vPosA] = a;
  			CityVehicles[vehicle][vType] = type;
  			CityVehicles[vehicle][vFaction] = faction;
  			format(CityVehicles[vehicle][vPlate], 128, "%s", plate);
        	format(vehicle_plate[vehicle], 128, "%s", plate);
  			format(CityVehicles[vehicle][vInfo], 128, "%s", info);
  			CityVehicles[vehicle][vCarOn] = 1;
  			total++;
  		}
    }
  	format(msg,sizeof(msg), "Loaded %d dynamic vehicles from MySQL.", total);
  	printf(msg);
    return 1;
}

public LoadDynamicHouses()
{
    new rows, fields;
	new total = 0, weapons[256];
    cache_get_data(rows, fields);
    if(rows)
    {
		while(total < rows)
		{
			HouseInfo[total][hID] = cache_get_row_int(total, 0);
			HouseInfo[total][hEntranceX] = cache_get_row_float(total, 1);
			HouseInfo[total][hEntranceY] = cache_get_row_float(total, 2);
			HouseInfo[total][hEntranceZ] = cache_get_row_float(total, 3);
			HouseInfo[total][hExitX] = cache_get_row_float(total, 4);
			HouseInfo[total][hExitY] = cache_get_row_float(total, 5);
			HouseInfo[total][hExitZ] = cache_get_row_float(total, 6);
			cache_get_row(total, 7, HouseInfo[total][hInfo], dbHandle, 128);
			cache_get_row(total, 8, HouseInfo[total][hOwner], dbHandle, 128);
			HouseInfo[total][hOwned] = cache_get_row_int(total, 9);
			HouseInfo[total][hLocked] = cache_get_row_int(total, 10);
			HouseInfo[total][hPrice] = cache_get_row_int(total, 11);
			HouseInfo[total][hLevelbuy] = cache_get_row_int(total, 12);
			HouseInfo[total][hRentprice] = cache_get_row_int(total, 13);
			HouseInfo[total][hRentable] = cache_get_row_int(total, 14);
			HouseInfo[total][hInterior] = cache_get_row_int(total, 15);
			HouseInfo[total][hWorld] = cache_get_row_int(total, 16);
			HouseInfo[total][hCash] = cache_get_row_int(total, 17);
			HouseInfo[total][hFurnitures] = cache_get_row_int(total, 18);
			cache_get_row(total, 19, weapons, dbHandle, 128);
			HouseInfo[total][hCheckPosX] = cache_get_row_float(total, 20);
			HouseInfo[total][hCheckPosY] = cache_get_row_float(total, 21);
			HouseInfo[total][hCheckPosZ] = cache_get_row_float(total, 22);
			HouseInfo[total][hRadio] = cache_get_row_int(total, 23);
			HouseInfo[total][hHouseOn] = 1;
			AssignHouseWeapons(total, weapons);
			if(HouseInfo[total][hOwned] == 0)
				format(msg, sizeof(msg), ""EMBED_YELLOW"["EMBED_WHITE"House ID %d"EMBED_YELLOW"]\n"EMBED_WHITE"%s\n"EMBED_GREEN"Price: $%d", total, HouseInfo[total][hInfo], HouseInfo[total][hPrice]);
			else
				format(msg, sizeof(msg), ""EMBED_YELLOW"["EMBED_WHITE"House ID %d"EMBED_YELLOW"]\n"EMBED_WHITE"%s", total, HouseInfo[total][hInfo]);
			HouseInfo[total][hLabel] = CreateDynamic3DTextLabel(msg, -1, HouseInfo[total][hEntranceX], HouseInfo[total][hEntranceY], HouseInfo[total][hEntranceZ], 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			HouseInfo[total][hCheckPoint] = CreateDynamicCP(HouseInfo[total][hEntranceX], HouseInfo[total][hEntranceY], HouseInfo[total][hEntranceZ], 1.0, -1, -1, -1, 2.0);
			if(HouseInfo[total][hFurnitures] > 0)
			{
				LoadHouseFurnitures(total);
			}
			total++;
		}
    }
	format(msg,sizeof(msg), "Loaded %d dynamic houses from MySQL.", total);
	printf(msg);
    return 1;
}

public LoadDynamicComplexs()
{
  new rows, fields;
  new total = 0;
  cache_get_data(rows, fields);
  if(rows)
  {
    while(total < rows)
    {
      ComplexInfo[total][cxID] = cache_get_row_int(total, 0);
      ComplexInfo[total][cxEnterX] = cache_get_row_float(total, 1);
      ComplexInfo[total][cxEnterY] = cache_get_row_float(total, 2);
      ComplexInfo[total][cxEnterZ] = cache_get_row_float(total, 3);
      ComplexInfo[total][cxExitX] = cache_get_row_float(total, 4);
      ComplexInfo[total][cxExitY] = cache_get_row_float(total, 5);
      ComplexInfo[total][cxExitZ] = cache_get_row_float(total, 6);
      cache_get_row(total, 7, ComplexInfo[total][cxName], dbHandle, 128);
      cache_get_row(total, 8, ComplexInfo[total][cxInfo], dbHandle, 128);
      cache_get_row(total, 9, ComplexInfo[total][cxEntranceMSG], dbHandle, 128);
      ComplexInfo[total][cxInterior] = cache_get_row_int(total, 10);
      ComplexInfo[total][cxWorld] = cache_get_row_int(total, 11);
      ComplexInfo[total][cxOn] = 1;
      ComplexInfo[total][cxLabel] = Create3DTextLabel(ComplexInfo[total][cxName], 0xffffffff, ComplexInfo[total][cxEnterX],ComplexInfo[total][cxEnterY],ComplexInfo[total][cxEnterZ], 10.0, 0);
      ComplexInfo[total][cxPickup] = CreateDynamicPickup(1314, 1, ComplexInfo[total][cxEnterX],ComplexInfo[total][cxEnterY],ComplexInfo[total][cxEnterZ], 0);
      total++;
    }
  }
  format(msg,sizeof(msg), "Loaded %d dynamic complexs from MySQL.", total);
  printf(msg);
  return 1;
}

public LoadDynamicBiz()
{
    new rows, fields;
	new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
		while(total < rows)
		{
			BizInfo[total][bizID] = cache_get_row_int(total, 0);
			BizInfo[total][bizPosX] = cache_get_row_float(total, 1);
			BizInfo[total][bizPosY] = cache_get_row_float(total, 2);
			BizInfo[total][bizPosZ] = cache_get_row_float(total, 3);
			BizInfo[total][bizExitX] = cache_get_row_float(total, 4);
			BizInfo[total][bizExitY] = cache_get_row_float(total, 5);
			BizInfo[total][bizExitZ] = cache_get_row_float(total, 6);
			cache_get_row(total, 7, BizInfo[total][bizName], dbHandle, 128);
			cache_get_row(total, 8, BizInfo[total][bizInfo], dbHandle, 128);
			cache_get_row(total, 9, BizInfo[total][bizEnterMSG], dbHandle, 128);
			cache_get_row(total, 10, BizInfo[total][bizOwner], dbHandle, 128);
			BizInfo[total][bizOwned] = cache_get_row_int(total, 11);
			BizInfo[total][bizLocked] = cache_get_row_int(total, 12);
			BizInfo[total][bizPrice] = cache_get_row_int(total, 13);
			BizInfo[total][bizLevelbuy] = cache_get_row_int(total, 14);
			BizInfo[total][bizInterior] = cache_get_row_int(total, 15);
			BizInfo[total][bizWorld] = cache_get_row_int(total, 16);
			BizInfo[total][bizCash] = cache_get_row_int(total, 17);
			BizInfo[total][bizType] = cache_get_row_int(total, 18),
			BizInfo[total][bizEntrance] = cache_get_row_int(total, 19);
			BizInfo[total][bizRadio] = cache_get_row_int(total, 20);
			BizInfo[total][bizOn] = 1;
			BizInfo[total][bizPickUp] = CreateDynamicPickup(1239, 1, BizInfo[total][bizPosX], BizInfo[total][bizPosY], BizInfo[total][bizPosZ], -1, -1, -1, 100.0);
			total++;
		}
    }
	format(msg,sizeof(msg), "Loaded %d dynamic businesses from MySQL.", total);
	printf(msg);
    return 1;
}

public OnFurnituresLoad(houseid)
{
    new rows, fields;
	new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
		while(total < rows)
		{
			FurnitureInfo[houseid][total][fID] = cache_get_row_int(total, 0);
			FurnitureInfo[houseid][total][fModel] = cache_get_row_int(total, 1);
			cache_get_row(total, 2, FurnitureInfo[houseid][total][fName], dbHandle, 128);
			FurnitureInfo[houseid][total][fHouseID] = houseid;
			FurnitureInfo[houseid][total][fInterior] = cache_get_row_int(total, 4);
			FurnitureInfo[houseid][total][fVirtualWorld] = cache_get_row_int(total, 5);
			FurnitureInfo[houseid][total][fMarketPrice] = cache_get_row_int(total, 6);
			FurnitureInfo[houseid][total][fPosX] = cache_get_row_float(total, 7);
			FurnitureInfo[houseid][total][fPosY] = cache_get_row_float(total, 8);
			FurnitureInfo[houseid][total][fPosZ] = cache_get_row_float(total, 9);
			FurnitureInfo[houseid][total][fPosRX] = cache_get_row_float(total, 10);
			FurnitureInfo[houseid][total][fPosRY] = cache_get_row_float(total, 11);
			FurnitureInfo[houseid][total][fPosRZ] = cache_get_row_float(total, 12);
			FurnitureInfo[houseid][total][fMode] = cache_get_row_int(total, 15);
            cache_get_row(total, 16, FurnitureInfo[houseid][total][fTxd], dbHandle, 128);
            cache_get_row(total, 17, FurnitureInfo[houseid][total][fTexture], dbHandle, 128);
			FurnitureInfo[houseid][total][fOn] = 1;
			FurnitureInfo[houseid][total][fObject] = CreateDynamicObject(FurnitureInfo[houseid][total][fModel], FurnitureInfo[houseid][total][fPosX], FurnitureInfo[houseid][total][fPosY], FurnitureInfo[houseid][total][fPosZ], FurnitureInfo[houseid][total][fPosRX], FurnitureInfo[houseid][total][fPosRY], FurnitureInfo[houseid][total][fPosRZ], FurnitureInfo[houseid][total][fVirtualWorld], FurnitureInfo[houseid][total][fInterior], -1, 200.0);
			SetDynamicObjectMaterial(FurnitureInfo[houseid][total][fObject], 0, FurnitureInfo[houseid][total][fMode], FurnitureInfo[houseid][total][fTxd], FurnitureInfo[houseid][total][fTexture], 0);
			if(isHouseDoor(FurnitureInfo[houseid][total][fModel]))
			{
				FurnitureInfo[houseid][total][fLocked] = 1;
				FurnitureInfo[houseid][total][fOpened] = 0;
			}
			total++;
		}
    }
    return 1;
}

public LoadDynamicStands()
{
    new rows, fields;
	new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
		while(total < rows)
		{
			FoodStand[total][fID] = cache_get_row_int(total, 0);
			cache_get_row(total, 1, FoodStand[total][fInfo], dbHandle, 128);
			FoodStand[total][fPosX] = cache_get_row_float(total, 2);
			FoodStand[total][fPosY] = cache_get_row_float(total, 3);
			FoodStand[total][fPosZ] = cache_get_row_float(total, 4);
			FoodStand[total][fPosRX] = cache_get_row_float(total, 5);
			FoodStand[total][fPosRY] = cache_get_row_float(total, 6);
			FoodStand[total][fPosRZ] = cache_get_row_float(total, 7);
			FoodStand[total][fStandOn] = 1;
			FoodStand[total][fObject] = CreateDynamicObject(1340, FoodStand[total][fPosX], FoodStand[total][fPosY], FoodStand[total][fPosZ], FoodStand[total][fPosRX], FoodStand[total][fPosRY], FoodStand[total][fPosRZ], -1, -1, -1, 200.0);
			if(FoodStand[total][fPosRZ] < -50.0) //Done
			{
				FoodStand[total][fPosY] += (1.2 * floatcos((-FoodStand[total][fPosRZ]+90), degrees));
			}
			if(FoodStand[total][fPosRZ] < -150.0) //Done
			{
				FoodStand[total][fPosX] += (1.2 * floatsin((-FoodStand[total][fPosRZ]+90), degrees));
			}
			if(FoodStand[total][fPosRZ] >= 0.0) //Done
			{
				FoodStand[total][fPosX] += (1.2 * floatsin((-FoodStand[total][fPosRZ]+90), degrees));
			}
			if(FoodStand[total][fPosRZ] > 50.0) //Done
			{
				FoodStand[total][fPosY] += (1.2 * floatcos((-FoodStand[total][fPosRZ]+90), degrees));
			}
			format(msg, sizeof(msg), ""EMBED_RED"["EMBED_WHITE"Food Stall - %d"EMBED_RED"]\n"EMBED_CYAN"%s\n/buyfood.", total, FoodStand[total][fInfo]);
			FoodStand[total][fLabel] = CreateDynamic3DTextLabel(msg, -1, FoodStand[total][fPosX], FoodStand[total][fPosY], FoodStand[total][fPosZ], 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			FoodStand[total][fPickUp] = CreateDynamicPickup(1239, 1, FoodStand[total][fPosX], FoodStand[total][fPosY], FoodStand[total][fPosZ], -1, -1, -1, 100.0);
			total++;
		}
    }
	format(msg,sizeof(msg), "Loaded %d dynamic food stands from MySQL.", total);
	printf(msg);
    return 1;
}

public LoadDynamicMeters()
{
    new rows, fields;
	new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
		while(total < rows)
		{
			ParkMeters[total][parkID] = cache_get_row_int(total, 0);
			ParkMeters[total][parkPosX] = cache_get_row_float(total, 1);
			ParkMeters[total][parkPosY] = cache_get_row_float(total, 2);
			ParkMeters[total][parkPosZ] = cache_get_row_float(total, 3);
			ParkMeters[total][parkPosRX] = cache_get_row_float(total, 4);
			ParkMeters[total][parkPosRY] = cache_get_row_float(total, 5);
			ParkMeters[total][parkPosRZ] = cache_get_row_float(total, 6);
			cache_get_row(total, 7, ParkMeters[total][parkName], dbHandle, 128);
			ParkMeters[total][parkMinutes] = cache_get_row_int(total, 8);
			ParkMeters[total][parkOn] = 1;
			ParkMeters[total][parkObject] = CreateDynamicObject(1270, ParkMeters[total][parkPosX], ParkMeters[total][parkPosY], ParkMeters[total][parkPosZ], ParkMeters[total][parkPosRX], ParkMeters[total][parkPosRY], ParkMeters[total][parkPosRZ], -1, -1, -1, 200.0);
			format(msg, sizeof(msg), ""EMBED_CYAN"minutes %d", ParkMeters[total][parkMinutes]);
			ParkMeters[total][parkArea] = CreateDynamicSphere(ParkMeters[total][parkPosX], ParkMeters[total][parkPosY], ParkMeters[total][parkPosZ], 1.5, -1, -1, -1);
			ParkMeters[total][parkLabel] = CreateDynamic3DTextLabel(msg, -1, ParkMeters[total][parkPosX], ParkMeters[total][parkPosY], ParkMeters[total][parkPosZ]+0.5, 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			total++;
		}
    }
	format(msg,sizeof(msg), "Loaded %d dynamic park meters from MySQL.", total);
	printf(msg);
    return 1;
}

public OnLoadApbs()
{
    new rows, fields;
	new total = 0, page = 0, count2 = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
		while(total < rows)
		{
			ApbInfo[total][apbID] = cache_get_row_int(total, 0);
			cache_get_row(total, 1, ApbInfo[total][apbCharge], dbHandle, 128);
			cache_get_row(total, 2, ApbInfo[total][apbSuspect], dbHandle, 128);
			cache_get_row(total, 3, ApbInfo[total][apbOfficer], dbHandle, 128);
			ApbInfo[total][apbPage] = page;
			ApbInfo[total][apbOn] = 1;
			count2++;
			if(count2 == 5)
			{
				page++;
			}
			total++;
		}
    }
	format(msg,sizeof(msg), "Loaded %d APB's from MySQL.", total);
	printf(msg);
    return 1;
}

public LoadDynamicFactions()
{
    new rows, fields;
	new total = 0, factionid = 1;
    cache_get_data(rows, fields);
    if(rows)
    {
		while(total < rows)
		{
			Factions[factionid][fID] = cache_get_row_int(total, 0);
			cache_get_row(total, 2, Factions[factionid][fName], dbHandle, 128);
			Factions[factionid][fX] = cache_get_row_float(total, 3);
			Factions[factionid][fY] = cache_get_row_float(total, 4);
			Factions[factionid][fZ] = cache_get_row_float(total, 5);
			Factions[factionid][fSpawnInt] = cache_get_row_int(total, 6);
			cache_get_row(total, 7, Factions[factionid][fRank1], dbHandle, 128);
			cache_get_row(total, 8, Factions[factionid][fRank2], dbHandle, 128);
			cache_get_row(total, 9, Factions[factionid][fRank3], dbHandle, 128);
			cache_get_row(total, 10, Factions[factionid][fRank4], dbHandle, 128);
			cache_get_row(total, 11, Factions[factionid][fRank5], dbHandle, 128);
			cache_get_row(total, 12, Factions[factionid][fRank6], dbHandle, 128);
			cache_get_row(total, 13, Factions[factionid][fRank7], dbHandle, 128);
			cache_get_row(total, 14, Factions[factionid][fRank8], dbHandle, 128);
			cache_get_row(total, 15, Factions[factionid][fRank9], dbHandle, 128);
			cache_get_row(total, 16, Factions[factionid][fRank10], dbHandle, 128);
			cache_get_row(total, 17, Factions[factionid][fRank11], dbHandle, 128);
			cache_get_row(total, 18, Factions[factionid][fRank12], dbHandle, 128);
			cache_get_row(total, 19, Factions[factionid][fRank13], dbHandle, 128);
			cache_get_row(total, 20, Factions[factionid][fRank14], dbHandle, 128);
			cache_get_row(total, 21, Factions[factionid][fRank15], dbHandle, 128);
			cache_get_row(total, 22, Factions[factionid][fRank16], dbHandle, 128);
			cache_get_row(total, 23, Factions[factionid][fRank17], dbHandle, 128);
			cache_get_row(total, 24, Factions[factionid][fRank18], dbHandle, 128);
			cache_get_row(total, 25, Factions[factionid][fRank19], dbHandle, 128);
			cache_get_row(total, 26, Factions[factionid][fRank20], dbHandle, 128);
			Factions[factionid][fJoinRank] = cache_get_row_int(total, 27);
			Factions[factionid][fType] = cache_get_row_int(total, 28);
			Factions[factionid][fRankAmount] = cache_get_row_int(total, 29);
			Factions[factionid][fChatON] = cache_get_row_int(total, 30);
			Factions[factionid][fColor] = cache_get_row_int(total, 31);
			Factions[factionid][fUniformX] = cache_get_row_float(total, 32);
			Factions[factionid][fUniformY] = cache_get_row_float(total, 33);
			Factions[factionid][fUniformZ] = cache_get_row_float(total, 34);
			Factions[factionid][fLeaderRank] = cache_get_row_int(total, 35);
			Factions[factionid][fON] = 1;
			Factions[factionid][fPickUp] = CreateDynamicPickup(1239, 1, Factions[factionid][fUniformX], Factions[factionid][fUniformY], Factions[factionid][fUniformZ], -1, -1, -1, 100.0);
			total++;
			factionid++;
		}
    }
	format(msg,sizeof(msg), "Loaded %d dynamic factions from MySQL.", total);
	printf(msg);
    return 1;
}

public LoadDynamicJobs()
{
    new rows, fields;
	new total = 0, jobid = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
		while(total < rows)
		{
			jobid = cache_get_row_int(total, 1);
			JobsInfo[jobid][jobID] = cache_get_row_int(total, 0);
			cache_get_row(total, 2, JobsInfo[jobid][jobName], dbHandle, 128);
			JobsInfo[jobid][jobX] = cache_get_row_float(total, 3);
			JobsInfo[jobid][jobY] = cache_get_row_float(total, 4);
			JobsInfo[jobid][jobZ] = cache_get_row_float(total, 5);
			JobsInfo[jobid][jobRanks] = cache_get_row_int(total, 6);
			JobsInfo[jobid][jobHighRank] = cache_get_row_int(total, 7);
			cache_get_row(total, 8, JobsInfo[jobid][jobRank1], dbHandle, 128);
			cache_get_row(total, 9, JobsInfo[jobid][jobRank2], dbHandle, 128);
			cache_get_row(total, 10, JobsInfo[jobid][jobRank3], dbHandle, 128);
			cache_get_row(total, 11, JobsInfo[jobid][jobRank4], dbHandle, 128);
			cache_get_row(total, 12, JobsInfo[jobid][jobRank5], dbHandle, 128);
			cache_get_row(total, 13, JobsInfo[jobid][jobRank6], dbHandle, 128);
			cache_get_row(total, 14, JobsInfo[jobid][jobRank7], dbHandle, 128);
			cache_get_row(total, 15, JobsInfo[jobid][jobRank8], dbHandle, 128);
			cache_get_row(total, 16, JobsInfo[jobid][jobRank9], dbHandle, 128);
			cache_get_row(total, 17, JobsInfo[jobid][jobRank10], dbHandle, 128);
			JobsInfo[jobid][jobSideJob] = cache_get_row_int(total, 18);
			JobsInfo[jobid][jobOn] = 1;
			JobsInfo[jobid][jobPickUp] = CreateDynamicPickup(1314, 1, JobsInfo[jobid][jobX], JobsInfo[jobid][jobY], JobsInfo[jobid][jobZ], -1, -1, -1, 100.0);
			if(JobsInfo[jobid][jobSideJob] == 1)
				format(msg, sizeof(msg), ""EMBED_GREEN"["EMBED_RED"SIDE JOB"EMBED_GREEN"]");
			else
				format(msg, sizeof(msg), ""EMBED_GREEN"["EMBED_RED"JOB"EMBED_GREEN"]");
			JobsInfo[jobid][jobLabel] = CreateDynamic3DTextLabel(msg, -1, JobsInfo[jobid][jobX], JobsInfo[jobid][jobY], JobsInfo[jobid][jobZ]+0.4, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			total++;
		}
    }
	format(msg,sizeof(msg), "Loaded %d dynamic jobs from MySQL.", total);
	printf(msg);
    return 1;
}

public LoadRadios()
{
    new rows, fields;
	new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
		while(total < rows)
		{
			RadiosInfo[total][radioID] = cache_get_row_int(total, 0),
			RadiosInfo[total][radioChannel] = cache_get_row_int(total, 1),
			cache_get_row(total, 2, RadiosInfo[total][radioOwner], dbHandle, 128),
			cache_get_row(total, 3, RadiosInfo[total][radioPass], dbHandle, 128);
			RadiosInfo[total][radioOn] = 1;
			total++;
		}
    }
	format(msg,sizeof(msg), "Loaded %d player radios from MySQL.", total);
	printf(msg);
    return 1;
}

public LoadDynamicDealerShips()
{
    new rows, fields;
	new total = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
		while(total < rows)
		{
			DealersInfo[total][dealerID] = cache_get_row_int(total, 0),
			DealersInfo[total][dealerPosX] = cache_get_row_float(total, 1),
			DealersInfo[total][dealerPosY] = cache_get_row_float(total, 2),
			DealersInfo[total][dealerPosZ] = cache_get_row_float(total, 3),
			cache_get_row(total, 4, DealersInfo[total][dealerInfo], dbHandle, 128);
			DealersInfo[total][dealerPickUp] = CreateDynamicPickup(1239, 2, DealersInfo[total][dealerPosX], DealersInfo[total][dealerPosY], DealersInfo[total][dealerPosZ], -1, -1, -1, 100.0);
			DealersInfo[total][dealerOn] = 1;
			total++;
		}
    }
	format(msg,sizeof(msg), "Loaded %d dynamic dealerships from MySQL.", total);
	printf(msg);
    return 1;
}

public OOCMSG(color,string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(PlayerIsOn(i))
		{
		    if(gOOC{i} == true)
		    {
				SCM(i, color, string);
			}
		}
	}
}

public RegSkinMenu(playerid)
{
	ServerMSG(playerid, "Thank you complete registration. Choose your skin, then pass the tutorial!");
	ShowSkinMenu(playerid);
	return 1;
}

public OnLabelInsert(LabelID)
{
	LabelsInfo[LabelID][tID] = cache_insert_id();
	return 1;
}

public OnDoorInsert(DoorID)
{
	DoorInfo[DoorID][dID] = cache_insert_id();
	return 1;
}

public OnFactionDoorInsert(DoorID)
{
	FactionDoors[DoorID][dID] = cache_insert_id();
	return 1;
}

public OnTeleportInsert(TeleID)
{
	HouseInteriors[TeleID][aID] = cache_insert_id();
	return 1;
}

public OnObjectInsert(ObjectID)
{
	ObjectsInfo[ObjectID][oID] = cache_insert_id();
	return 1;
}

public OnCameraInsert(ObjectID)
{
	CCTVInfo[ObjectID][tvID] = cache_insert_id();
	return 1;
}

public OnMoveDoorInsert(ObjectID)
{
	Doors[ObjectID][doorID] = cache_insert_id();
	return 1;
}

public OnGateInsert(ObjectID)
{
	Gates[ObjectID][gateID] = cache_insert_id();
	return 1;
}

public OnVehicleInsert(VehicleID)
{
	CityVehicles[VehicleID][vID] = cache_insert_id();
	return 1;
}

public OnHouseInsert(HouseID)
{
	HouseInfo[HouseID][hID] = cache_insert_id();
	return 1;
}

public OnBizInsert(BizID)
{
	BizInfo[BizID][bizID] = cache_insert_id();
	return 1;
}

public OnFactionInsert(FactionID)
{
	Factions[FactionID][fID] = cache_insert_id();
	return 1;
}

public OnJobInsert(JobID)
{
	JobsInfo[JobID][jobID] = cache_insert_id();
	return 1;
}

public OnFoodStandInsert(StandID)
{
	FoodStand[StandID][fID] = cache_insert_id();
	return 1;
}

public OnParkMeterInsert(ParkID)
{
	ParkMeters[ParkID][parkID] = cache_insert_id();
	return 1;
}

public OnInfoInsert(InfoID)
{
	CPTInfo[InfoID][cID] = cache_insert_id();
	return 1;
}

public OnDealerShipInsert(DealerID)
{
	DealersInfo[DealerID][dealerID] = cache_insert_id();
	return 1;
}

public OnBankInsert(BankID)
{
	BankInfo[BankID][bID] = cache_insert_id();
	return 1;
}

public OnATMInsert(AtmID)
{
	ATMInfo[AtmID][atmID] = cache_insert_id();
	return 1;
}

public OnStationInsert(StationID)
{
	GasStation[StationID][gID] = cache_insert_id();
	return 1;
}

public KickPlayer(playerid)
{
	Kick(playerid);
}

public BanPlayer(playerid)
{
	Ban(playerid);
}

public BanPlayerEx(playerid, reason[])
{
	BanEx(playerid, reason);
}

public ShowAmount(playerid, text[])
{
	new rows, fields, count = 0;
	cache_get_data(rows, fields);
	if(rows)
	{
		while(count < rows)
		{
			count++;
		}
	}
	format(msg, sizeof(msg), "%s amount: %d", text, count);
	SCM(playerid, COLOR_GRAD2, msg);
	return 1;
}

public OnPlayerPause(playerid)
{
	if(!isAFK{playerid})
	{
		isAFK{playerid} = true;
		AFKTime[playerid] = 1;
	}
	return 1;
}

public OnPlayerUnpause(playerid)
{
	if(isAFK{playerid})
	{
		isAFK{playerid} = false;
		AFKTime[playerid] = 0;
	}
	return 1;
}

stock RemoveVar(playerid, varname[])
{
	return DeletePVar(playerid, varname);
}

/*===================PVar-int=====================*/
stock SetIntVar(playerid, varname[], value)
{
	return SetPVarInt(playerid, varname, value);
}

stock GetIntVar(playerid, varname[])
{
	return GetPVarInt(playerid, varname);
}
/*===================PVar-int=====================*/

/*===================PVar-float=====================*/
stock SetFloatVar(playerid, varname[], Float:value)
{
	return SetPVarFloat(playerid, varname, Float:value);
}
stock Float:GetFloatVar(playerid, varname[])
{
	return GetPVarFloat(playerid, varname);
}
/*===================PVar-float=====================*/

/*===================PVar-string=====================*/
stock SetStringVar(playerid, varname[], value[])
{
	return SetPVarString(playerid, varname, value);
}
stock GetStringVar(playerid, varname[])
{
	new str[256];
	GetPVarString(playerid, varname, str, sizeof(str));
	return str;
}
/*===================PVar-string=====================*/
public IsAtGasStation(playerid)
{
	if(PlayerIsOn(playerid))
	{
		for(new i = 0; i < sizeof(GasStation); i++)
		{
			if(PlayerToPoint(6.0,playerid,GasStation[i][gPosX],GasStation[i][gPosY],GasStation[i][gPosZ]))
			{
				return 1;
			}
		}
	}
	return 0;
}

public IsAtBank(playerid)
{
	if(PlayerIsOn(playerid))
	{
		for(new i = 0; i < sizeof(BankInfo); i++)
		{
			if(PlayerToPoint(12.0,playerid,BankInfo[i][bPosX],BankInfo[i][bPosY],BankInfo[i][bPosZ]))
			{
				return 1;
			}
		}
	}
	return 0;
}

public IsAtPullMachine(playerid)
{
	if(PlayerIsOn(playerid))
	{
		if(PlayerToPoint(11.0,playerid,1963.8254,1037.0972,992.4745) || PlayerToPoint(11.0,playerid,1961.2341,1042.9020,992.4688) || PlayerToPoint(11.0,playerid,1956.9388,1047.3190,992.4688) || PlayerToPoint(11.0,playerid,1963.8536,998.6488,992.4688))
		{
			return 1;
		}
		if(PlayerToPoint(11.0,playerid,1961.3259,992.5931,992.4688) || PlayerToPoint(11.0,playerid,1957.0258,988.2960,992.4688))
		{
			return 1;
		}
	}
	return 0;
}

public IsAtATM(playerid)
{
	if(PlayerIsOn(playerid))
	{
		for(new i = 0; i < sizeof(ATMInfo); i++)
		{
			if(PlayerToPoint(10.0,playerid,ATMInfo[i][atmPosX],ATMInfo[i][atmPosY],ATMInfo[i][atmPosZ]))
			{
				return 1;
			}
		}
	}
	return 0;
}

public IsAtBoatPlace(playerid)
{
  if(PlayerIsOn(playerid))
  {
      if(PlayerToPoint(50.0,playerid,418.4906,-2155.7886,0.0295))
    {
        return 1;
    }
  }
  return 0;
}

public IsAtFishPlace(playerid)
{
	if(PlayerIsOn(playerid))
	{
	    if(PlayerToPoint(5.0,playerid,354.5123,-2088.7976,7.8359) || PlayerToPoint(5.0,playerid,362.2866,-2088.7856,7.8359))
		{
		    return 1;
		}
		else if(PlayerToPoint(5.0,playerid,367.4278,-2088.7903,7.8359) || PlayerToPoint(5.0,playerid,369.9985,-2088.7979,7.8359))
		{
		    return 1;
		}
		else if(PlayerToPoint(5.0,playerid,375.1901,-2088.7979,7.8359) || PlayerToPoint(5.0,playerid,383.4686,-2088.7971,7.8359))
		{
		    return 1;
		}
		else if(PlayerToPoint(5.0,playerid,391.1095,-2088.7983,7.8359) || PlayerToPoint(5.0,playerid,396.5252,-2088.7983,7.8359))
		{
		    return 1;
		}
		else if(PlayerToPoint(5.0,playerid,398.9523,-2088.7983,7.8359) || PlayerToPoint(5.0,playerid,403.9178,-2088.7983,7.8359))
		{
		    return 1;
		}
	}
	return 0;
}


//=========================Destroying vehicles and recreating them from MySQL=========================//
public RecreateCityVehicle(vehicle)
{
	if(CityVehicles[vehicle][vCarOn])
	{
		DestoryCar(CityVehicles[vehicle][vVehicle]);
		CityVehicles[vehicle][vVehicle] = CreateVehicle(CityVehicles[vehicle][vModel], CityVehicles[vehicle][vPosX], CityVehicles[vehicle][vPosY], CityVehicles[vehicle][vPosZ], CityVehicles[vehicle][vPosA], CityVehicles[vehicle][vColor1], CityVehicles[vehicle][vColor2], -1);
		SetVehicleNumberPlate(CityVehicles[vehicle][vVehicle], CityVehicles[vehicle][vPlate]);
	}
	return 1;
}
//=========================Destroying vehicles and recreating them from MySQL=========================//

//=========================Vehicles Checking from MySQL=========================//
public IsARentCar(vehicle)
{
	if(CityVehicles[vehicle][vType] == RENT_VEHICLE)
		return true;
	return false;
}

public IsARentBike(vehicle)
{
	if(CityVehicles[vehicle][vType] == RENT_BIKE && CityVehicles[vehicle][vCarOn])
		return true;
	return false;
}

public IsADMVCar(vehicle)
{
	if(CityVehicles[vehicle][vType] == DMV_VEHICLE && CityVehicles[vehicle][vCarOn])
		return true;
	return false;
}

public IsASweepCar(vehicle)
{
	if(CityVehicles[vehicle][vType] == SWEEP_CAR && CityVehicles[vehicle][vCarOn])
		return true;
	return false;
}

public IsADMVHeli(vehicle)
{
	if(CityVehicles[vehicle][vType] == DMV_HELICOPTER && CityVehicles[vehicle][vCarOn])
		return true;
	return false;
}

public IsACopCar(vehicle)
{
	if(CityVehicles[vehicle][vType] == POLICE_CAR && CityVehicles[vehicle][vCarOn])
		return true;
	return false;
}

public IsACopTowTruck(vehicle)
{
	if(CityVehicles[vehicle][vType] == POLICE_TOWTRUCK && CityVehicles[vehicle][vCarOn])
		return true;
	return false;
}

public IsAFDCar(vehicle)
{
	if(CityVehicles[vehicle][vType] == LSFD_CAR && CityVehicles[vehicle][vCarOn])
		return true;
	return false;
}
public IsAGovCar(vehicle)
{
	if(CityVehicles[vehicle][vType] == GOV_CAR && CityVehicles[vehicle][vCarOn])
		return true;
	return false;
}

public IsABicycle(vehicle)
{
    new model = GetVehicleModel(vehicle);
	if(model == 481 || model == 509 || model == 510)
	{
		return 1;
	}
	return 0;
}

public IsATowTruck(vehicle)
{
	new model = GetVehicleModel(vehicle);
	if(model == 525)
	{
		return 1;
	}
	return 0;
}

public IsAPlane(vehicle)
{
    new model = GetVehicleModel(vehicle);
	if(model == 592 || model == 577 || model == 511 || model == 512 || model == 593 || model == 520 || model == 553 ||
	   model == 476 || model == 519 || model == 460 || model == 513 || model == 548 || model == 417 || model == 487 ||
       model == 488 || model == 497 || model == 563 || model == 447 || model == 469 )
	{
		return 1;
	}
	return 0;
}

public IsAHelicopter(vehicle)
{
	new model = GetVehicleModel(vehicle);
	if(model == 548 || model == 425 || model == 417 || model == 487 || model == 488 || model == 497 || model == 563 || model == 447 || model == 469)
	{
		return 1;
	}
	return 0;
}

public IsATruckJob(vehicle)
{
	if(CityVehicles[vehicle][vType] == TRUCKER_CAR && CityVehicles[vehicle][vCarOn])
	{
		return 1;
	}
	return 0;
}

public IsATruckOne(vehicle)
{
	new model = GetVehicleModel(vehicle);
	if(model == 422)
	{
		return 1;
	}
	return 0;
}

public IsATruckTwo(vehicle)
{
	new model = GetVehicleModel(vehicle);
	if(model == 456)
	{
		return 1;
	}
	return 0;
}

public IsATruckThree(vehicle)
{
	new model = GetVehicleModel(vehicle);
	if(model == 524)
	{
		return 1;
	}
	return 0;
}

public IsATruckFour(vehicle)
{
	new model = GetVehicleModel(vehicle);
	if(model == 403)
	{
		return 1;
	}
	return 0;
}

public IsATrailer(vehicle)
{
	new model = GetVehicleModel(vehicle);
	if(model == 584)
	{
		return 1;
	}
	return 0;
}

public IsATaxi(vehicle)
{
	new model = GetVehicleModel(vehicle);
	if(model == 420 || model == 438)
	{
		return 1;
	}
	return 0;
}

public IsABiker(vehicleid)
{
	new model = GetVehicleModel(vehicleid);
 	if(model == 522 || model == 521 || model == 461 || model == 463 || model == 581 || model == 448 || model == 586 || model == 523 || model == 468 || model == 471 || model == 462)
	{
		return 1;
	}
	return 0;
}

public IsABoat(vehicleid)
{
	new model = GetVehicleModel(vehicleid);
 	if(model == 472 || model == 473 || model == 493 || model == 595 || model == 484 || model == 430 || model == 453 || model == 452 || model == 446 || model == 454)
	{
		return 1;
	}
	return 0;
}

public IsADonateCar(vehicleid)
{
	new model = GetVehicleModel(vehicleid);
	for(new i = 0; i < sizeof(DonateCars); i++)
		if(DonateCars[i][dCarModel] == model)
			return true;
	return false;
}

public IsABronzeCar(model)
{
	if(model == 481 || model == 509)
	{
		return 1;
	}
	return 0;
}

public IsASilverCar(model)
{
	if(model == 477 || model == 468)
	{
		return 1;
	}
	return 0;
}

public IsAGoldCar(model)
{
	if(model == 429 || model == 541 || model == 521)
	{
		return 1;
	}
	return 0;
}

public IsABoatModel(model)
{
 	if(model == 472 || model == 473 || model == 493 || model == 595 || model == 484 || model == 430 || model == 453 || model == 452 || model == 446 || model == 454)
	{
		return 1;
	}
	return 0;
}

public IsAPlaneModel(model)
{
	if(model == 592 || model == 577 || model == 511 || model == 512 || model == 593 || model == 520 || model == 553 ||
	   model == 476 || model == 519 || model == 460 || model == 513 || model == 548 || model == 417 || model == 487 ||
       model == 488 || model == 497 || model == 563 || model == 447 || model == 469 )
	{
		return 1;
	}
	return 0;
}

//=========================Vehicles Checking from MySQL=========================//
public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	if(listid == skinlist)
	{
		if(response)
		{
			if(GetIntVar(playerid, "RegisterPart") != 0)
			{
				SetSkin(playerid, modelid);
				SetIntVar(playerid, "RegisterPart", 7);
				SCM(playerid, COLOR_YELLOWG, "SERVER: The next step is tutorial, be careful.");
				SetIntVar(playerid, "MovingToTutorial", 1);
				SetTimerEx("ShowTutorialLocations", 5000, 0, "i", playerid);
			}
			else
			{
				SetSkin(playerid,modelid);
			}
		}
		else if(GetIntVar(playerid, "RegisterPart") != 0)
		{
			ShowSkinMenu(playerid);
			SCM(playerid, -1, "You can't get out of this menu during recording!");
		}
		else return SCM(playerid, 0xFF0000FF, "Canceled skin selection.");
		return 1;
	}
	if(listid == vehiclelist)
	{
		if(response)
		{
			new Float:cPos[4];
			GetPlayerPos(playerid, cPos[0], cPos[1], cPos[2]);
			GetPlayerFacingAngle(playerid, cPos[3]);
			SetFloatVar(playerid, "cPosX", cPos[0]);
			SetFloatVar(playerid, "cPosY", cPos[1]);
			SetFloatVar(playerid, "cPosZ", cPos[2]);
			SetFloatVar(playerid, "cPosA", cPos[3]);
			SetIntVar(playerid, "cModel", modelid);
			ShowDialog(playerid, Show:<SpawnAdminVehicle>, DIALOG_STYLE_INPUT, ""EMBED_RED"Select the vehicle color."EMBED_WHITE"", ""EMBED_WHITE"The color must be betweem (0-255)!", "Spawn", "Exit");
			return 1;
		}
		else return SCM(playerid, 0xFF0000FF, "Canceled vehicle selection.");
	}
	if(listid == weaponlist)
	{
		if(response)
		{
			switch(modelid)
			{
	        	case 331: SetIntVar(playerid, "SelectingWeapon", 1); // Brass Knuckles
	        	case 333: SetIntVar(playerid, "SelectingWeapon", 2); // Golf Club
	        	case 334: SetIntVar(playerid, "SelectingWeapon", 3); // Nightstick
	        	case 335: SetIntVar(playerid, "SelectingWeapon", 4); // Knife
	        	case 336: SetIntVar(playerid, "SelectingWeapon", 5); // Baseball Bat
	        	case 337: SetIntVar(playerid, "SelectingWeapon", 6); // Shovel
	        	case 338: SetIntVar(playerid, "SelectingWeapon", 7); // Pool Cue
	        	case 339: SetIntVar(playerid, "SelectingWeapon", 8); // Katana
	        	case 341: SetIntVar(playerid, "SelectingWeapon", 9); // Chainsaw
	        	case 321: SetIntVar(playerid, "SelectingWeapon", 10); // Double-ended Dildo
	        	case 325: SetIntVar(playerid, "SelectingWeapon", 14); // Flowers
	        	case 326: SetIntVar(playerid, "SelectingWeapon", 15); // Cane
	        	case 342: SetIntVar(playerid, "SelectingWeapon", 16); // Grenade
	        	case 343: SetIntVar(playerid, "SelectingWeapon", 17); // Tear Gas
	        	case 344: SetIntVar(playerid, "SelectingWeapon", 18); // Molotov Cocktail
	        	case 346: SetIntVar(playerid, "SelectingWeapon", 22); // 9mm
	        	case 347: SetIntVar(playerid, "SelectingWeapon", 23); // Silenced 9mm
	        	case 348: SetIntVar(playerid, "SelectingWeapon", 24); // Desert Eagle
	        	case 349: SetIntVar(playerid, "SelectingWeapon", 25); // Shotgun
	        	case 350: SetIntVar(playerid, "SelectingWeapon", 26); // Sawnoff
	        	case 351: SetIntVar(playerid, "SelectingWeapon", 27); // Combat Shotgun
	        	case 352: SetIntVar(playerid, "SelectingWeapon", 28); // Micro SMG/Uzi
	        	case 353: SetIntVar(playerid, "SelectingWeapon", 29); // MP5
	        	case 355: SetIntVar(playerid, "SelectingWeapon", 30); // AK-47
	        	case 356: SetIntVar(playerid, "SelectingWeapon", 31); // M4
	        	case 372: SetIntVar(playerid, "SelectingWeapon", 32); // Tec-9
	        	case 357: SetIntVar(playerid, "SelectingWeapon", 33); // Country Rifle
	        	case 358: SetIntVar(playerid, "SelectingWeapon", 34); // Sniper Rifle
	        	case 359: SetIntVar(playerid, "SelectingWeapon", 35); // RPG
	        	case 360: SetIntVar(playerid, "SelectingWeapon", 36); // HS Rocket
	        	case 361: SetIntVar(playerid, "SelectingWeapon", 37); // Flamethrower
	        	case 362: SetIntVar(playerid, "SelectingWeapon", 38); // Minigun
	        	case 363: SetIntVar(playerid, "SelectingWeapon", 39);
	        	case 365: SetIntVar(playerid, "SelectingWeapon", 41); // Spraycan
	        	case 366: SetIntVar(playerid, "SelectingWeapon", 42); // Fire Extinguisher
			}
			ShowDialog(playerid, Show:<SpawnAdminWeapon>, DIALOG_STYLE_INPUT, ""EMBED_RED"Add a quantity of bullets."EMBED_WHITE"", ""EMBED_WHITE"How many bullets you would like to be gun?", "Acquire", "Exit");
	    }
		else return SCM(playerid, 0xFF0000FF, "You have cancelled the weapon selection.");
		return 1;
	}
	if(listid == buyable)
	{
		if(response)
		{
			new Float:ParkX, Float:ParkY, Float:ParkZ;
			if(GetOwnedVehicles(playerid) == MAX_OWNED_VEHICLES) return SCM(playerid, COLOR_GRAY, "You've reached the maximum number of vehicles owned.");
			if(IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return SCM(playerid, COLOR_GREY, "Respawn your car that it have spawned.");
			if(PlayerInfo[playerid][pDonateRank] == 0)
			{
				if(IsABronzeCar(modelid) || IsASilverCar(modelid) || IsAGoldCar(modelid)) return SCM(playerid, COLOR_INFO, "Only donors are allowed to purchase this vehicle.");
			}
			if(PlayerInfo[playerid][pDonateRank] == 1)
			{
				if(IsASilverCar(modelid) || IsAGoldCar(modelid)) return SCM(playerid, COLOR_INFO, "You must be donor silver / gold that you can buy it.");
			}
			if(PlayerInfo[playerid][pDonateRank] == 2)
			{
				if(IsAGoldCar(modelid)) return SCM(playerid, COLOR_INFO, "You must be donor gold to purchase this vehicle.");
			}
			new price = GetVehiclePrice(modelid);
			if(GetCash(playerid) < price) return NoCashMSG(playerid);
			format(msg, sizeof(msg), "You have bought a vehicle (%s) for the amount of $%d.", VehicleNames[modelid-400], price);
			SCM(playerid, COLOR_WHITE, msg);
			GiveCash(playerid, -price);
			new slot;
			if(!strcmp(PlayerVehicle[playerid][pVeh1], "None", true))
				slot = 1;
			else if(!strcmp(PlayerVehicle[playerid][pVeh2], "None", true))
				slot = 2;
			else if(!strcmp(PlayerVehicle[playerid][pVeh3], "None", true))
				slot = 3;
			if(IsABoatModel(modelid))
			{
				ParkX = 719.8029;
				ParkY = -1628.7454;
				ParkZ = -0.0051;
			}
			else if(IsAPlaneModel(modelid))
			{
				ParkX = 1943.5498;
				ParkY = -2397.6553;
				ParkZ = 13.5469;
			}
			else
			{
				ParkX = 1015.630;
				ParkY = -1352.2527;
				ParkZ = 13.2715;
			}
			PlayerInfo[playerid][pCarKey] = CreateVehicle(modelid, ParkX, ParkY, ParkZ, -90.0, -1, -1, -1);
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carModel] = modelid;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carColor1] = 1;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carColor2] = 1;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carParkX] = ParkX;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carParkY] = ParkY;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carParkZ] = ParkZ;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carParkA] = 0.0;
			format(VehicleInfo[PlayerInfo[playerid][pCarKey]][carPlate], 128, "%s%d", FirstNameLetters(GetName(playerid)), randomEx(10000, 99999));
			format(VehicleInfo[PlayerInfo[playerid][pCarKey]][carOwner], 128, "%s", GetName(playerid));
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carOwned] = 1;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carSpawned] = 1;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carOn] = 1;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carAlarm] = 0;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carLock] = 0;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carImmob] = 0;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carInsurances] = 1;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carDestroyed] = 0;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carGps] = 0;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carOwnerSlot] = 0;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carFuel] = 100;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carRegistered] = 1;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carBroken] = 0;
			for(new i = 0; i < MAX_VEHICLE_WEAPONS; i++)
			{
				VehicleInfo[PlayerInfo[playerid][pCarKey]][carTrunkWep][i] = 0;
				VehicleInfo[PlayerInfo[playerid][pCarKey]][carTrunkAmmo][i] = 0;
			}
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][0] = 0;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][1] = 0;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][2] = 0;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][3] = 0;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][4] = 0;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][5] = 0;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][6] = 0;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][7] = 0;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][8] = 0;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][9] = 0;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][10] = 0;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][11] = 0;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][12] = 0;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][13] = 0;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carPaintJob] = 3;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carRadio] = 0;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carDupKey] = randomEx(1234567, 9999999);
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carComps] = 0;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carEngineLife] = 100;
			VehicleInfo[PlayerInfo[playerid][pCarKey]][carBatteryLife] = 100;
			for(new i = 0; i < MAX_DRUGS; i++)
			{
				VehicleInfo[PlayerInfo[playerid][pCarKey]][carDrug][i] = 0;
				VehicleInfo[PlayerInfo[playerid][pCarKey]][carDrugAmount][i] = 0;
			}
			for(new i = 0; i < MAX_CAR_TICKETS; i++)
			{
				VehicleInfo[PlayerInfo[playerid][pCarKey]][carTicket][i] = 0;
			}
			DestoryCar(GetIntVar(playerid, "RentVehKey"));
			RemoveVar(playerid, "RentedCar");
			RemoveVar(playerid, "RentVehKey");
      format(msg, sizeof(msg), "~w~YOUR NEW PLATE HAS BEEN SET ~n~~y~%s.", VehicleInfo[PlayerInfo[playerid][pCarKey]][carPlate]);
      JobMessage(playerid, msg, 8);
			PlayerInfo[playerid][pVehicles]++;
			OnPlayerBuyCar(playerid, PlayerInfo[playerid][pCarKey], modelid, 1, 1, slot, ParkX, ParkY, ParkZ, 0.0, VehicleInfo[PlayerInfo[playerid][pCarKey]][carPlate], VehicleInfo[PlayerInfo[playerid][pCarKey]][carOwner]);
      DestoryCar(PlayerInfo[playerid][pCarKey]);
			CheckOwnedVehicles(playerid);
	    }
		else return SCM(playerid, COLOR_WHITE, "You have canceled the car selection.");
		return 1;
	}
	if(listid == rentablecar)
	{
		if(response)
		{
		    new Float:ParkX, Float:ParkY, Float:ParkZ;
		    if(GetIntVar(playerid, "RentedCar") == 1) return RentMSG(playerid, "Already rent a car, use /unrentcar.");
			new price = GetRentPrice(modelid);
			if(GetCash(playerid) < price) return SCM(playerid,COLOR_GREY,"You do not have enough money to rent this vehicle.");
			SCM(playerid,COLOR_GREEN,"You have rent a vehicle in our office! Thank you rent from us.");
			PlaySound(playerid, 1052);
			GiveCash(playerid, -price);
   			if(IsABoatModel(modelid))
			{
				ParkX = 310.3268;
				ParkY = -1941.7601;
				ParkZ = 1.3952;
			}
			else if(IsAPlaneModel(modelid))
			{
				ParkX = 1943.5498;
				ParkY = -2397.6553;
				ParkZ = 13.5469;
			}
			else
			{
				ParkX = 1690.5704;
				ParkY = -1874.2775;
				ParkZ = 13.1545;
			}
			new rentveh = CreateVehicle(modelid, ParkX, ParkY, ParkZ, 0.0000, -1, -1, -1);
			SetIntVar(playerid, "RentedCar", 1);
			SetIntVar(playerid, "RentVehKey", rentveh);
			SetVehicleNumberPlate(rentveh, "LS-RENT");
			CityVehicles[rentveh][vType] = RENT_VEHICLE;
	    }
		else return SCM(playerid, COLOR_WHITE, "You canceled the rental car.");
		return 1;
	}
	return 1;
}


/* Encodes */
encode_tires(tire1, tire2, tire3, tire4) return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
encode_panels(flp, frp, rlp, rrp, windshield, front_bumper, rear_bumper)
{
	return flp | (frp << 4) | (rlp << 8) | (rrp << 12) | (windshield << 16) | (front_bumper << 20) | (rear_bumper << 24);
}
encode_doors(b1, b2, driver_door, passenger_door, behind_driver_door, behind_passenger_door)
{
	#pragma unused behind_driver_door
	#pragma unused behind_passenger_door
	return b1 | (b2 << 8) | (driver_door << 16) | (passenger_door << 24);
}
encode_lights(light1, light2, light3, light4)
{
	return light1 | (light2 << 1) | (light3 << 2) | (light4 << 3);
}
/* Encodes */

public CheckStatus()
{
	new string[128];
	//Global variable for spawning owned vehicle.
	if(VehSpawned != 0)
	{
		if(VehSpawned == 1)
		{
			VehSpawned = 0;
		}
		else
		{
			VehSpawned--;
		}
	}
	//Global variable for spawning owned vehicle.
	//Tolls
	TollUpdate();
	//Tolls
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		if(IsATaxi(i))
		{
			new driver = GetVehicleDriver(i);
			if(driver != INVALID_PLAYER_ID)
			{
				if(TaxiDuty{driver} && TaxiStart{driver} && CountVehiclePlayers(i) > 0)
				{
					format(msg, sizeof(msg), "~y~TAXIMETER: $%d", TaxiMade[driver]);
					GameTextForPlayer(driver, msg, 1000, 6);
					for(new p = 0; p < MAX_PLAYERS; p++)
					{
						if(PlayerIsOn(p) && PlayerInCar(p) && GetPlayerState(p) != PLAYER_STATE_DRIVER && GetPlayerVehicleID(p) == GetPlayerVehicleID(driver))
						{
							format(msg, sizeof(msg), "~y~TAXIMETER: $%d", TaxiMoney[p]);
							GameTextForPlayer(p, msg, 1000, 6);
							TaxiMoney[p] += TaxiFare{driver};
							TaxiMade[driver] += TaxiFare{driver};
						}
					}
				}
			}
		}
	}
	foreach(Player, i)
	{
		new vehicle = GetPlayerVehicleID(i);
		//Plant picking
		if(PickingTime{i} > 0)
		{
			if(PickingTime{i} == 1)
			{
				new crop = GetIntVar(i, "PlantPicking");
				GivePlayerDrug(i, DRUG_MARIJUANA, CropsInfo[crop][pMade]);
				SCMEx(i, COLOR_YELLOWG, "You picked the plant successfully. Marijuana: %d", CropsInfo[crop][pMade]);
				UnFreezePlayer(i);
				StopPlayerAnims(i);
				DestroyCrop(crop);
				PickingTime{i} = 0;
				RemoveVar(i, "PlantPicking");
			}
			else
			{
				PickingTime{i}--;
				format(msg, sizeof(msg), "~y~Collection... %d", PickingTime{i});
				GameTextForPlayer(i, msg, 1000, 4);
			}
		}
		if(PlantingTime{i} > 0)
		{
			if(PlantingTime{i} == 1)
			{
			    new location[MAX_ZONE_NAME];
				GetPlayer2DZone(i, location, MAX_ZONE_NAME);
				new plant = GetNextPlantID();
				new Float:x = PlayerPosX(i), Float:y = PlayerPosY(i), Float:z = PlayerPosZ(i)-2.5;
				format(CropsInfo[plant][pPlanter], MAX_PLAYER_NAME, "%s", GetNameEx(i));
				format(msg, sizeof(msg), "AdmCmd: %s planted a seed with ID: %d and location: %s.", GetNameEx(i), CropsInfo[plant][pID], location);
				AMSG(COLOR_LIGHTRED, msg);
				CropsInfo[plant][pGrowTime] = 0;
				CropsInfo[plant][pMade] = 0;
				CropsInfo[plant][pX] = x;
				CropsInfo[plant][pY] = y;
				CropsInfo[plant][pZ] = z;
				CropsInfo[plant][pPlanted] = 1;
				CropsInfo[plant][pObject] = CreateDynamicObject(3409, x, y, z, 0.0, 0.0, 0.0, -1, -1, -1, 200.0);
				format(msg, sizeof(msg), ""EMBED_YELLOW"THE PLANT: %d MINUTES\nPRODUCT: %d", 0, 0);
				CropsInfo[plant][pLabel] = CreateDynamic3DTextLabel(msg, -1, x, y, z+2.0, 1.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
				SCM(i, COLOR_YELLOWG, "You have planted a seed, it can be collected by the anyone.");
				PlayerInfo[i][pSeeds] -= 5;
				AddSeedToFile(plant, GetName(i), x, y, z);
				UnFreezePlayer(i);
				StopPlayerAnims(i);
				PlantingTime{i} = 0;
			}
			else
			{
				PlantingTime{i}--;
				format(msg, sizeof(msg), "~y~Planting the seed... %d", PlantingTime{i});
				GameTextForPlayer(i, msg, 1000, 4);
			}
		}
		//Plant picking
		//Getting call
		if(GetIntVar(i, "GettingCall") == 1)
		{
			if(cellRingTime{i} > 0)
			{
				if(cellRingTime{i} == 1)
				{
					foreach(Player, p)
					{
						if(PlayerNearPlayer(10.0, i,p))
						{
							PlayRingSoundTwice(p);
							format(msg, sizeof(msg), "* %s's phone sound.", GetNameWithMask(i));
							SCM(p, COLOR_PURPLE, msg);
						}
					}
					cellRingTime{i} = 5;
				}
				else
				{
					cellRingTime{i}--;
				}
			}
		}
		//Getting call
		//Mechanic fixing
		if(RepairTime{i} > 0)
		{
			if(RepairService[i][REPAIR_DEAD] == 1 || RepairService[i][REPAIR_ENGINE] == 1 || RepairService[i][REPAIR_BODY] == 1 || RepairService[i][REPAIR_PAINT] == 1)
			{
				new Float:x, Float:y, Float:z;
				GetVehiclePos(VehicleToRepair[i], x, y, z);
				if(RepairTime{i} == 1)
				{
					if(RepairService[i][REPAIR_ENGINE] == 1)
					{
						JobMessage(i, "~h~~p~ENGINE REPAIRED.", 6);
						RemovePlayerWeapon(i, 41);
						SetVehicleHealth(VehicleToRepair[i], 1000.0);
						RepairService[i][REPAIR_ENGINE] = 0;
						RemoveVar(i, "CurrentTowTruck");
					}
					if(RepairService[i][REPAIR_BODY] == 1)
					{
						JobMessage(i, "~h~~p~THE BODYWORK REPAIRED.", 6);
						RemovePlayerWeapon(i, 41);
						RepairVehicleBody(VehicleToRepair[i]);
						RepairService[i][REPAIR_BODY] = 0;
						RemoveVar(i, "CurrentTowTruck");
					}
					if(RepairService[i][REPAIR_DEAD] == 1)
					{
						JobMessage(i, "~h~~p~REPAIRED THE ENGINE DEAD.", 6);
						RemovePlayerWeapon(i, 41);
						VehicleInfo[VehicleToRepair[i]][carBroken] = 0;
						RepairService[i][REPAIR_DEAD] = 0;
						RemoveVar(i, "CurrentTowTruck");
					}
					if(RepairService[i][REPAIR_PAINT] == 1)
					{
						JobMessage(i, "~h~~p~PAINTED SUCCESSFULLY.", 6);
						RemovePlayerWeapon(i, 41);
						RepairService[i][REPAIR_PAINT] = 0;
						ChangeVehicleColor(VehicleToRepair[i], GetIntVar(i, "color1"), GetIntVar(i, "color1"));
						VehicleInfo[VehicleToRepair[i]][carColor1] = GetIntVar(i, "color1");
						VehicleInfo[VehicleToRepair[i]][carColor2] = GetIntVar(i, "color2");
						RemoveVar(i, "color1");
						RemoveVar(i, "color2");
						RemoveVar(i, "CurrentTowTruck");
					}
					RepairTime{i} = 0;
					RepairOffer[i] = INVALID_PLAYER_ID;
					VehicleToRepair[i] = INVALID_VEHICLE_ID;
				}
				else if(IsPlayerInRangeOfPoint(i, 4.2, x, y, z))
				{
					if(HoldingKey(i, KEY_FIRE) && GetPlayerState(i) == PLAYER_STATE_ONFOOT && PlayerHoldingWeapon(i, 41))
					{
						new veh = GetIntVar(i, "CurrentTowTruck");
						if(RepairService[i][REPAIR_ENGINE] == 1)
						{
							format(msg, sizeof(msg), "~h~~p~ENGINE REPAIR.~n~~w~TOWTRUCK HAS ~b~%d~w~ REMAINING COMPONENTS", VehicleInfo[veh][carComps]);
							ShowJobMessage(i, msg);
							VehicleInfo[veh][carComps] -= 4;
						}
						if(RepairService[i][REPAIR_BODY] == 1)
						{
							format(msg, sizeof(msg), "~h~~p~BODYWORK REPAIR.~n~~w~TOWTRUCK HAS ~b~%d~w~ REMAINING COMPONENTS", VehicleInfo[veh][carComps]);
							ShowJobMessage(i, msg);
							VehicleInfo[veh][carComps] -= 5;
						}
						if(RepairService[i][REPAIR_DEAD] == 1)
						{
							format(msg, sizeof(msg), "~h~~p~ENGINE RESTORATION.~n~~w~TOWTRUCK HAS ~b~%d~w~ REMAINING COMPONENTS~n~~y~TIME LEFT: %d", VehicleInfo[veh][carComps], RepairTime{i});
							ShowJobMessage(i, msg);
							VehicleInfo[veh][carComps] -= 5;
						}
						if(RepairService[i][REPAIR_PAINT] == 1)
						{
							format(msg, sizeof(msg), "~h~~p~VOPSIRE MASINA.~n~~w~TOWTRUCK HAS ~b~%d~w~ REMAINING COMPONENTS~n~~y~TIME LEFT: %d", VehicleInfo[veh][carComps], RepairTime{i});
							ShowJobMessage(i, msg);
							VehicleInfo[veh][carComps] -= 3;
						}
						RepairTime{i}--;
					}
				}
				else
				{
					ShowJobMessage(i, "~h~~p~YOU MUST CLOSE NEAR THE VEHICLE.");
				}
			}
		}
		//Mechanic fixing
		//Trucking checkpoints
		if(GetIntVar(i, "HideTrucker") > 0)
		{
			if(GetIntVar(i, "HideTrucker") == 1)
			{
				HideTextDraw(i, TruckerDraw[i]);
				RemoveVar(i, "HideTrucker");
			}
			else
			{
				UpdateIntVar(i, "HideTrucker", -1);
			}
		}
		if(Trucking{i} && IsDriver(i) && IsATruckFour(vehicle))
		{
			if(GetTruckStage(i) == 6)
			{
				if(IsTrailerAttachedToVehicle(vehicle))
				{
					TruckTrailer[i] = GetVehicleTrailer(vehicle);
					SetRandomDestination(i);
				}
			}
			else if(GetTruckStage(i) > 0)
			{
				if(!IsTrailerAttachedToVehicle(vehicle))
				{
					TextDrawSetString(TruckerDraw[i], "~r~PLEASE ATTACHED TO TRUCK TRAILER.");
				}
				else if(IsTrailerAttachedToVehicle(vehicle))
				{
					if(GetTruckStage(i) == 2 && !IsPlayerInCheckpoint(i) && !PlayerToPoint(9.0, i, GatherX[i], GatherY[i], GatherZ[i]) && GetIntVar(i, "PlayerCP") == 26 || GetTruckStage(i) == 3 && !PlayerToPoint(9.0, i, DropOffX[i], DropOffY[i], DropOffZ[i]) && !IsPlayerInCheckpoint(i) && GetIntVar(i, "PlayerCP") == 27 && DroppingOff{i})
					{
						TextDrawSetString(TruckerDraw[i], "~y~GO BACK TO THE CHECKPOINT TO CONTINUE.");
					}
					else
					{
						SetTruckerText(i);
					}
				}
			}
		}
		if(Trucking{i} && PlayerToPoint(9.0, i, GatherX[i], GatherY[i], GatherZ[i]) && IsPlayerInCheckpoint(i) && GetIntVar(i, "PlayerCP") == 26)
		{
			if(LoadingTruck{i} > 0 && IsDriver(i))
			{
				if(IsATruckFour(vehicle) && !IsTrailerAttachedToVehicle(vehicle))
				{
					//Should not do anything.
				}
				else if(LoadingTruck{i} == 1)
				{
					SetRandomDestination2(i);
					LoadingTruck{i} = 0;
				}
				else
				{
					if(IsATruckOne(vehicle))
					{
						TruckComps[vehicle] += 20;
						TruckingMoney[i] += 8;
					}
					else if(IsATruckTwo(vehicle))
					{
						TruckComps[vehicle] += 25;
						TruckingMoney[i] += 10;
					}
					else if(IsATruckThree(vehicle))
					{
						TruckComps[vehicle] += 29;
						TruckingMoney[i] += 12;
					}
					else if(IsATruckFour(vehicle))
					{
						TruckComps[vehicle] += 33;
						TruckingMoney[i] += 14;
					}
					//TruckingMoney[i] += 50;
					SetTruckerText(i);
					LoadingTruck{i}--;
					if(TruckComps[vehicle] >= GetMaxTruckComps(vehicle))
					{
						LoadingTruck{i} = 0;    
						SetTruckStage(i, 3);
						SetCheckPoint(i, TRUCKDROP, DropOffX[i], DropOffY[i], DropOffZ[i], 9.0);
					}
				}
			}
		}
		if(Trucking{i} && PlayerToPoint(9.0, i, DropOffX[i], DropOffY[i], DropOffZ[i]) && IsPlayerInCheckpoint(i) && GetIntVar(i, "PlayerCP") == 27 && DroppingOff{i})
		{
			if(TruckComps[vehicle] > 0 && IsDriver(i))
			{
				if(IsATruckFour(vehicle) && !IsTrailerAttachedToVehicle(vehicle))
				{
					//Should not do anything.
				}
				else if(TruckComps[vehicle] >= 200)
				{
					TruckComps[vehicle] -= randomEx(50, 120);
					SetTruckerText(i);
				}
				else if(TruckComps[vehicle] < 200)
				{
					if(!VehicleInfo[vehicle][carOwned])
					{
						SetTruckStage(i, 5);
						SetTruckerText(i);
						LoadingTruck{i} = 0;
						DroppingOff{i} = false;
						SetCheckPoint(i, TRUCKRETURN, CityVehicles[vehicle][vPosX], CityVehicles[vehicle][vPosY], CityVehicles[vehicle][vPosZ], 9.0);
					}
					else
					{
						DroppingOff{i} = false;
						LoadingTruck{i} = 0;
						Trucking{i} = false;
						TruckVehicle[i] = INVALID_VEHICLE_ID;
						TruckComps[GetPlayerVehicleID(i)] = 0;
						SetTruckStage(i, 0);
						PlayerInfo[i][pPayCheckMade] += TruckingMoney[i];
						TruckingMoney[i] = 0;
						format(msg, sizeof(msg), "~g~MISSION COMPLETED~n~~w~YOUR PAYCHECK: ~g~$%d~n~~r~/PAYCHECK ~y~IN THE BANK ~w~TO COLLECT.", PlayerInfo[i][pPayCheckMade]);
						JobMessage(i, msg, 6);
						if(TruckTrailer[i] != INVALID_VEHICLE_ID)
						{
							DetachTrailerFromVehicle(GetPlayerVehicleID(i));
							RespawnVehicle(TruckTrailer[i]);
							TruckTrailer[i] = INVALID_VEHICLE_ID;
						}
						RemoveVar(i, "TruckGather");
						RemoveVar(i, "TruckDrop");
						RemoveVar(i, "TruckDest");
						RemoveCheckPoint(i);
					}
				}
			}
		}
		//Trucking checkpoints
		//Checking armour
		if(PlayerInfo[i][pArmour] > 0.0 && PlayerInfo[i][pHasArmour] == 1)
		{
			if(GetArmour(i) == 0.0)
			{
				PlayerInfo[i][pHasArmour] = 0;
				PlayerInfo[i][pArmour] = 0.0;
			}
			else
			{
				PlayerInfo[i][pArmour] = GetArmour(i);
			}
		}
		//Checking armour
		//Let's find some faggots hackers
		new money = GetPlayerMoney(i);
		if(money > PlayerInfo[i][pCash])
		{
			SetCash(i, PlayerInfo[i][pCash]);
		}
		if (GetPlayerWeapon(i) != 0 && !Weapons[i][GetPlayerWeapon(i)] && GetPlayerWeapon(i) != 46)
		{
			FullResetPlayerWeapons(i);
		}
		//Let's find some faggots hackers
		//Vehicle Fuel & Speed
		if(PlayerInCar(i))
		{
			if(IsDriver(i))
			{
				for(new a = 0; a < MAX_OBJECTS; a++)
				{
					if(SpikeInfo[a][sCreated] == 1)
					{
						if(IsPlayerInRangeOfPoint(i, 3.5, SpikeInfo[a][sX], SpikeInfo[a][sY], SpikeInfo[a][sZ]))
						{
							new panels, doorsd, lightsf, tires;
							new carid = GetPlayerVehicleID(i);
							GetVehicleDamageStatus(carid, panels, doorsd, lightsf, tires);
							tires = encode_tires(1, 1, 1, 1);
							UpdateVehicleDamageStatus(carid, panels, doorsd, lightsf, tires);
						}
					}
				}
			}
			new kmh = GetVehicleSpeed(vehicle);
			format(string, 64, "~b~Km/h: ~h~~g~%d", kmh);
			TextDrawSetString(SpeedText[i], string);
			format(string, 64, "~b~Fuel: ~h~~g~%d", Gas{vehicle});
			TextDrawSetString(FuelText[i], string);
		}
		//Vehicle Fuel & Speed

		//AFK Timer
		if(isAFK{i})
		{
			AFKTime[i]++;
			if(AFKTime[i] >= 1500)
			{
			    isAFK{i} = false;
			    AFKTime[i] = 0;
				SetTimerEx("KickPlayer",1000,0,"d",i);
			}
		}
		//AFK Timer

		//Cellphone talking air time
		if(GetIntVar(i, "OnCall") == 1)
		{
			new caller = GetIntVar(i, "CallWith");
			if(GetIntVar(caller, "OnCall") == 1 && GetIntVar(caller, "CallWith") == i)
			{
				UpdateIntVar(i, "CallTime", 1);
				UpdateIntVar(caller, "CallTime", 1);
			}
		}
		//Cellphone talking air time

		//Driving license exam
		new veh = GetPlayerVehicleID(i);
		new Float:health;
		if(GetIntVar(i, "LessonSeconds") != 0 && GetIntVar(i, "LessonStarted") == 1 && GetIntVar(i, "InDriveTest") == 1)
		{
			GetVehicleHealth(veh, health);
			if(health < 900)
			{
				RemoveVar(i, "LessonSeconds");
				RemoveVar(i, "InDriveTest");
				DmvMSG(i, "The vehicle was hit. FAILED!");
				RemoveCheckPoint(i);
				RespawnVehicle(GetPlayerVehicleID(i));
			}
			else
			{
				format(string, sizeof(string), "~w~%d", GetIntVar(i, "LessonSeconds"));
				GameTextForPlayer(i, string, 1200, 3);
				UpdateIntVar(i, "LessonSeconds", -1);
			}
		}
		else if(GetIntVar(i, "LessonStarted") == 1 && GetIntVar(i, "InDriveTest") == 1)
		{
			RemoveVar(i, "LessonStarted");
			RemoveVar(i, "LessonSeconds");
			RemoveVar(i, "InDriveTest");
			DmvMSG(i, "You have exceeded the time. FAILED!");
			RemoveCheckPoint(i);
			RespawnVehicle(GetPlayerVehicleID(i));
		}

		if(GetIntVar(i, "LessonSeconds") != 0 && GetIntVar(i, "LessonStarted") == 1 && GetIntVar(i, "InFlyTest") == 1)
		{
			GetVehicleHealth(veh, health);
			if(health < 950)
			{
				RemoveVar(i, "LessonSeconds");
				RemoveVar(i, "LessonStarted");
				RemoveVar(i, "InFlyTest");
				DmvMSG(i, "The helicopter was damaged. FAILED!");
				RemoveRaceCheckPoint(i);
				RespawnVehicle(GetPlayerVehicleID(i));
				SetPlayerPos(i, 1765.36, -2272.22, 26.796);
				SetPlayerWeapons(i);
			}
			else
			{
				format(string, sizeof(string), "~w~%d", GetIntVar(i, "LessonSeconds"));
				GameTextForPlayer(i, string, 1200, 3);
				UpdateIntVar(i, "LessonSeconds", -1);
			}
		}
		else if(GetIntVar(i, "LessonStarted") == 1 && GetIntVar(i, "InFlyTest") == 1)
		{
			RemoveVar(i, "LessonStarted");
			RemoveVar(i, "LessonSeconds");
			RemoveVar(i, "InFlyTest");
			DmvMSG(i, "You have exceeded the time of flight. FAILED!");
			RemoveRaceCheckPoint(i);
			RespawnVehicle(GetPlayerVehicleID(i));
			SetPlayerPos(i, 1765.36, -2272.22, 26.796);
			SetPlayerWeapons(i);
		}
		//Driving license exam

		//Changing vehicle color
		if(Painting{i} != 0)
		{
			if(Painting{i} == 1)
			{
				new dealerid = GetClosestDealerShip(i);
				if(dealerid != -1)
				{
					ChangeVehicleColor(vehicle, VehColor1{i}, VehColor2{i});
					VehicleInfo[vehicle][carColor1] = VehColor1{i};
					VehicleInfo[vehicle][carColor2] = VehColor2{i};
					SCM(i, COLOR_GREEN, "You have successfully changed the color of the car for $ 350.");
					GiveCash(i, -350); // Must dynamic
					Painting{i} = 0;
					format(query, sizeof(query), "UPDATE `ownedvehicles` SET `color1` = %d, `color2` = %d WHERE `owner` = '%s' AND `slot` = %d", VehColor1{i}, VehColor2{i}, GetName(i), PlayerInfo[i][pVehSlot]);
					mysql_function_query(dbHandle, query, false, "", "");
				}
				else
				{
					Painting{i} = 0;
					SCM(i, COLOR_FADE2, "You walked away from dealership...");
				}
			}
			else
			{
				Painting{i}--;
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~b~It painted... ~b~Takes %d ~b~seconds",Painting{i});
				GameTextForPlayer(i, string, 1600, 3);
			}
		}
		//Changing vehicle color

		//Gas Station Refueling
		if(GetIntVar(i, "RefuelTime") != 0 && GetIntVar(i, "IsRefueling") == 1)
		{
			if(GetIntVar(i, "RefuelTime") == 1)
			{
				new toFill = 100 - Gas{vehicle};
				UnFreezePlayer(i);
				Gas{vehicle} += toFill;
				format(string, sizeof(string), "You have added gasoline for $ 100 $%d", GetIntVar(i, "RefuelCost"));
				SCM(i, COLOR_WHITE, string);
				GiveCash(i, - GetIntVar(i, "RefuelCost"));
				RemoveVar(i, "RefuelCost");
				RemoveVar(i, "IsRefueling");
				RemoveVar(i, "RefuelTime");
			}
			else
			{
				UpdateIntVar(i, "RefuelTime", -1);
				format(string, sizeof(string), "~w~Filling the tank... ~b~%d", GetIntVar(i, "RefuelTime"));
				GameTextForPlayer(i, string, 1000, 3);
			}
		}
		//Gas Station Refueling

		//ERROR Message refresher
		for(new a = 0; a < 3; a ++)
		{
			if(ErrorInfo[i][a][eExpire] > 1)
			{
				ErrorInfo[i][a][eExpire]--;
				if(ErrorInfo[i][a][eExpire] == 1)
				{
					ErrorInfo[i][a][eExpire] = 0;
					RefreshErrorMsg(i);
				}
			}
		}
		//ERROR Message refresher

		//Checking jail time
		if(PlayerInfo[i][pJailTime] > 1 && PlayerInfo[i][pJailed] == 1)
		{
			PlayerInfo[i][pJailTime]--;
			format(msg,sizeof(msg),"~p~time left: ~w~%d seconds",PlayerInfo[i][pJailTime]);
			TextDrawSetString(jail_timeleft[i],msg);
			ShowTextDraw(i,jail_timeleft[i]);
		}
		else if(PlayerInfo[i][pJailTime] == 1 && PlayerInfo[i][pJailed] == 1)
		{

			PlayerInfo[i][pJailTime] = 0;
			PlayerInfo[i][pJailed] = 0;
			SetPlayerSpawn(i);
			GameTextForPlayer(i,"~g~You were released",5000,1);
			HideTextDraw(i,jail_timeleft[i]);
		}
		//Checking jail time

		//Checking jail time 2
        if(PlayerInfo[i][pJailTime2] > 1 && PlayerInfo[i][pJailed] == 2)
		{
			PlayerInfo[i][pJailTime2]--;
			format(msg,sizeof(msg),"~p~time left : ~w~%d seconds",PlayerInfo[i][pJailTime2]);
			TextDrawSetString(jail_timeleft[i],msg);
			ShowTextDraw(i,jail_timeleft[i]);
		}
		else if(PlayerInfo[i][pJailTime2] == 1 && PlayerInfo[i][pJailed] == 2)
		{

			PlayerInfo[i][pJailTime2] = 0;
			PlayerInfo[i][pJailed] = 0;
			SetPlayerSpawn(i);
			GameTextForPlayer(i,"~g~You were released",5000,1);
			HideTextDraw(i,jail_timeleft[i]);
		}
		
		///CHECKING
		if(PlayerInfo[i][pJailTime2] > 1 && PlayerInfo[i][pJailed] == 3)
		{
		  PlayerInfo[i][pJailTime2]--;
		  format(msg,sizeof(msg),"~p~time left: ~w~%d seconds",PlayerInfo[i][pJailTime2]);
		  TextDrawSetString(jail_timeleft[i],msg);
		  ShowTextDraw(i,jail_timeleft[i]);
		}
		else if(PlayerInfo[i][pJailTime2] == 1 && PlayerInfo[i][pJailed] == 3)
		{

		  PlayerInfo[i][pJailTime2] = 0;
		  PlayerInfo[i][pJailed] = 0;
		  SetPlayerSpawn(i);
		  GameTextForPlayer(i,"~g~You were released",5000,1);
		  HideTextDraw(i,jail_timeleft[i]);
		}

		//Checking jail time
		if(HospitalWait{i} > 1)
		{
			HospitalWait{i}--;
			format(msg,sizeof(msg),"~b~recovery time: ~w~%d seconds",HospitalWait{i});
			TextDrawSetString(hospital_timeleft[i],msg);
			ShowTextDraw(i,hospital_timeleft[i]);
		}
		else if(HospitalWait{i} == 1)
		{
			StopPlayerSpec(i);
			SetCameraBehindPlayer(i);
			SetPlayerHealth(i, 50.0);
			StopPlayerAnims(i);
			SCM(i,COLOR_LIGHTRED,"You have been released from the hospital.");
			format(string, sizeof(string), "~w~Try to only get into danger");
			GameTextForPlayer(i, string, 5000, 1);
			RemoveVar(i, "JustAcceptedDeath");
			HospitalWait{i} = 0;
			PutPlayer(i, 1177.4866,-1323.9749,14.0731);
			SetPlayerFacingAngle(i, 270.0);
			SetInterior(i, 0);
			UnFreezePlayer(i);
			HideTextDraw(i,hospital_timeleft[i]);
		}
		//Checking jail time

		//Info TextDraw Exire
		if(infotxt_expire{i} > 0)
		{
			infotxt_expire{i}--;
			if(infotxt_expire{i} == 1)
			{
				TextDrawHideForPlayer(i, infotxt[i]);
				infotxt_expire{i} = 0;
			}
		}
		//Info TextDraw Exire

		//Hotwiring vehicle engine
		if(JackingEngine[i] != 0)
		{
			if(JackingEngine[i] == 2 || JackingEngine[i] == 1)
			{
				JackingEngine[i] = 0;
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~r~Engine start...");
				GameTextForPlayer(i, string, 999, 3);
				ToggleVehicleEngine(vehicle, i);
				UnFreezePlayer(i);
			}
			else
			{
				JackingEngine[i]--;
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~r~Engine start... ~g~%d seconds", JackingEngine[i]);
				GameTextForPlayer(i, string, 1000, 3);
			}
		}
		//Hotwiring vehicle engine

		//Hotwiring vehicle lock
		if(JackingLock[i] != 0)
		{
			if(JackingLock[i] == 2 || JackingLock[i] == 1)
			{
				JackingLock[i] = 0;
				vLocked[DoorJacking[i]] = 0;
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~r~Housebreaking clasp...");
				GameTextForPlayer(i, string, 1600, 3);
				PlaySound(i, 1145);
				ToggleVehicleLock(DoorJacking[i], false);
				ToggleVehicleLockForPlayer(i, DoorJacking[i], false);
				DoorJacking[i] = 0;
				UnFreezePlayer(i);
			}
			else
			{
				JackingLock[i]--;
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~r~Housebreaking clasp... ~g~%d seconds",JackingLock[i]);
				GameTextForPlayer(i, string, 1600, 3);
			}
		}
		//Hotwiring vehicle lock
	}
	return 1;
}

public CheckGas()
{
    for(new i = 0; i < MAX_VEHICLES; i++)
    {
        if(IsABicycle(i) || IsADMVCar(i) || IsADMVHeli(i) || IsARentCar(i) || IsARentBike(i) || !engineOn{i}) continue;
        Gas{i}--;
        if(Gas{i} == 0)
		{
			VehicleEngine(i, false);
			GameTextForPlayer(GetDriver(i), "The vehicle has no fuel", 5000, 3);
		}
    }
    return 1;
}

public PayDay()
{
	foreach(Player, i)
	{
		if(PlayerIsOn(i))
		{
			if(PlayerInfo[i][pPayDayTime] >= 7)
			{
				new pName[MAX_PLAYER_NAME];
				GetPlayerName(i, pName, sizeof(pName));

				//To display old bank balance
				new oldbank = PlayerInfo[i][pBank];
				new oldsavings = PlayerInfo[i][pSavings];
				new house = PlayerInfo[i][pHouseKey];
				new checks = PlayerInfo[i][pPayCheckMade];
				//To display old bank balance

				//Checking job ranks
				if(PlayerInfo[i][pJob] == TRUCKER)
				{
					PlayerInfo[i][pCareer]++;
					new rank = PlayerInfo[i][pJobRank];
					switch(rank)
					{
						case TRUCKER_RANK1:
						{
							if(PlayerInfo[i][pCareer] == TRUCKER_TORANK_2)
							{
								PlayerInfo[i][pJobRank] = TRUCKER_RANK2;
								format(msg, sizeof(msg), "~w~CONGRATULATIONS, YOU ARE NOW ~g~%s.~n~~w~YOUR PAYCHECK IS NOW ~g~$%d.~n~~YOU GET A BONUS.", GetJobRank(i), TRUCKER_2_PAYCHECK);
								JobMessage(i, msg, 6);
								checks += 800;
							}
						}
						case TRUCKER_RANK2:
						{
							if(PlayerInfo[i][pCareer] == TRUCKER_TORANK_3)
							{
								PlayerInfo[i][pJobRank] = TRUCKER_RANK3;
								format(msg, sizeof(msg), "~w~CONGRATULATIONS, YOU ARE NOW ~g~%s.~n~~w~YOUR PAYCHECK IS NOW ~g~$%d.~n~~YOU GET A BONUS", GetJobRank(i), TRUCKER_3_PAYCHECK);
								JobMessage(i, msg, 6);
								checks += 1200;
							}
						}
						case TRUCKER_RANK3:
						{
							if(PlayerInfo[i][pCareer] == TRUCKER_TORANK_4)
							{
								PlayerInfo[i][pJobRank] = TRUCKER_RANK4;
								format(msg, sizeof(msg), "~w~CONGRATULATIONS, YOU ARE NOW ~g~%s.~n~~w~YOUR PAYCHECK IS NOW ~g~$%d.~n~~YOU GET A BONUS", GetJobRank(i), TRUCKER_4_PAYCHECK);
								JobMessage(i, msg, 6);
								checks += 1600;
							}
						}
					}
				}
                if(PlayerInfo[i][pJob] == SWEEPER)
				{
					if(SweepTura[i] == 1)
					{
					    SweepTura[i] = 0;
					}
				}
				//Checking job ranks

				//Adding random paychecks & by level.
				if(PlayerInfo[i][pLevel] == 1)
				{
					checks += 2000;
				}
				if(PlayerInfo[i][pLevel] >= 2)
				{
     				checks += randomEx(450,500) + PlayerInfo[i][pLevel]*(10);
				}
				if(PlayerInfo[i][pFaction] != 0)
				{
					if(PlayerInfo[i][pFaction] == LSPD)
					{
						switch(PlayerInfo[i][pRank])
						{
						    case 1: checks+= 300;
							case 2: checks+= 400;
							case 3,4,5: checks+= 700;
							case 6,9: checks+= 800;
							case 7,10: checks+= 1250;
							case 8,11: checks+= 1560;
							case 12,13,14: checks+= 2150;
							case 15,16: checks+= 2650;
							case 17,18: checks+= 3050;
						}
					}
					if(PlayerInfo[i][pFaction] == LSFD)
					{
						checks += randomEx(400, 1250);
					}
					if(PlayerInfo[i][pFaction] == GOV)
					{
						switch(PlayerInfo[i][pRank])
						{
						  case 1: checks+= 200;
						  case 2: checks+= 400;
						  case 3: checks+= 600;
						  case 4: checks+= 900;
						  case 5: checks+= 1000;
						  case 6: checks+= 1200;
						  case 7: checks+= 1500;
						  case 8: checks+= 2200;
						}
					}
				}
				//Adding random paychecks & by level.

				//Mechanic Job paycheck
				if(PlayerInfo[i][pSideJob] == MECHANIC)
				{
					SCM(i, COLOR_WHITE, "You have received $ 300 for the job of mechanic.");
					checks += 300; // Must dynamic
				}
				//Mechanic Job paycheck

				//Taking a tax from a player
				new TaxPay = randomEx(4,6) + ((oldbank / 2) / 6000);
				PlayerInfo[i][pBank] -= TaxPay;
				//Taking a tax from a player

				//Adding random paychecks & by level.
				new newsavings = (oldsavings * 1) / 100;
				//Adding random paychecks & by level.

				//Interest rate.
				new interestrate = 1;
				new interest = ((oldbank / 2) / 2000) * 5;
				PlayerInfo[i][pBank] += interest;
				//Interest rate.

				//House - Rent Bills & Electricity Bills.
				new rentbills;
				new ebill = ((oldbank / 100) / 110);
				//House - Rent Bills & Electricity Bills.

				SCM(i, COLOR_GREEN, "|___ PAYCHECK ___|");
				format(msg, sizeof(msg), "  Balance: $%d", oldbank);
				SCM(i, COLOR_WHITE, msg);
				format(msg, sizeof(msg), "  Paycheck: $%d", checks);
				SCM(i, COLOR_WHITE, msg);
				format(msg, sizeof(msg), "  Interest rate: 0.%d  Interest: $%d", interestrate, interest);
				SCM(i, COLOR_WHITE, msg);
				if(PlayerInfo[i][pHouseKey] != -1 && strcmp(GetName(i), HouseInfo[PlayerInfo[i][pHouseKey]][hOwner], true) == 0)
				{
					PlayerInfo[i][pBank] -= ebill;
					format(msg, sizeof(msg), "  The current Bill: $%d", ebill);
					SCM(i, COLOR_GRAD1, msg);
				}
				else if(house != -1)
				{
					rentbills = HouseInfo[house][hRentprice];
					PlayerInfo[i][pBank] -= rentbills;
					format(msg, sizeof(msg), "  Rent: $%d", rentbills);
					SCM(i, COLOR_GRAD1, msg);
				}
				if(GetSavings(i) > 0)
				{
					if(GetSavings(i) < 5000000)
					{
						PlayerInfo[i][pSavings] += newsavings;
						format(msg, sizeof(msg), "	Savings: $%d, at the rate of: 0.5", newsavings);
						SCM(i, COLOR_WHITE, msg);
						format(msg, sizeof(msg), "  Savings balance: $%d.", oldsavings+newsavings);
						SCM(i, COLOR_WHITE, msg);
					}
					if(GetSavings(i) >= 5000000)
					{
						SetSavings(i, 5000000);
						format(msg, sizeof(msg), "  Savings balance: $%d.", oldsavings);
						SCM(i, COLOR_WHITE, msg);
						SCM(i, COLOR_WHITE, "  Your savings account has reached the maximum.");
					}
				}
				format(msg, sizeof(msg), "  Fees paid: $%d", TaxPay);
				SCM(i, COLOR_WHITE, msg);
				SCM(i, COLOR_GREEN, "|--------------------------------------|");
				format(msg, sizeof(msg), "  New balance: $%d", PlayerInfo[i][pBank]);
				SCM(i, COLOR_GRAD5, msg);
				SCM(i, COLOR_YELLOWG, "HINT: You can pick up salary to Bank in Rodeo!");

				PlayerInfo[i][pPayDayTime] = 0;
				PlayerInfo[i][pPayCheckMoney] += checks;
				PlayerInfo[i][pExp]++;
				PlayerInfo[i][pPayCheckMade] = 0;
				PlayerInfo[i][pHours] += 1;
				SweepTura[i] = 0;
        		PlayerInfo[i][pCanJob] = 0;

				//Checking if player has leveled up
				new nxtlevel = PlayerInfo[i][pLevel]+1;
				new expamount = nxtlevel*levelexp;
				if (PlayerInfo[i][pExp] >= expamount)
				{
					format(msg, sizeof(msg), "~g~LEVEL UP~n~~w~Now you are level: %d", nxtlevel);
					PlaySound(i, 1052);
					PlayerInfo[i][pLevel]++;
					PlayerInfo[i][pExp] = 0;
					PlayerInfo[i][pUpgrade] += 2;
					GameTextForPlayer(i, msg, 5000, 1);
					format(msg, 256, "   Acum esti nivel %d. Type /upgrade.", nxtlevel);
					SCM(i, COLOR_GRAD1, msg);
					format(msg, 256, "  You have %d Upgrade Points unused.",PlayerInfo[i][pUpgrade]);
					SCM(i, COLOR_GRAD2, msg);
				}
				//Checking if player has leveled up
			}
			else
			{
				SCM(i, COLOR_WHITE, "* You haven't played enough to get a Payday loan.");
			}
		}
	}
	return 1;
}

public OneMinuteTimer()
{
	//=============================================================================
	new string[64];
	new tmphour;
	new tmpminute;
	new tmpsecond;
	gettime(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	tmphour = shifthour;
	if ((tmphour > ghour) || (tmphour == 0 && ghour == 23))
	{
		format(string, sizeof(string), "SERVER: Now the time is: %d:00.",tmphour);
		SCMALL(COLOR_WHITE,string);
		ghour = tmphour;
		PayDay();
		SetWorldTime(tmphour);
	}
	//=============================================================================
	for(new i = 0; i < MAX_PARK_METERS; i++)
	{
		if(ParkMeters[i][parkOn])
		{
			if(ParkMeters[i][parkMinutes] > 0)
			{
				ParkMeters[i][parkMinutes]--;
				format(string, sizeof(string), ""EMBED_CYAN"%d minute", ParkMeters[i][parkMinutes]);
				UpdateDynamic3DTextLabelText(Text3D:ParkMeters[i][parkLabel], -1, string);
			}    
		}
	}
	//=============================================================================
	for(new i = 0; i < MAX_PLANTS; i++)
	{
		if(CropsInfo[i][pPlanted])
		{
			new Float:x, Float:y, Float:z;
			CropsInfo[i][pGrowTime]++;
			if(CropsInfo[i][pGrowTime] == 20)
				CropsInfo[i][pMade] += randomEx(1, 3);
			if(CropsInfo[i][pGrowTime] == 40)
				CropsInfo[i][pMade] += randomEx(1, 3);
			if(CropsInfo[i][pGrowTime] == 60)
				CropsInfo[i][pMade] += randomEx(3, 5);
			if(CropsInfo[i][pGrowTime] == 80)
				CropsInfo[i][pMade] += randomEx(5, 7);
			if(CropsInfo[i][pGrowTime] == 100)
				CropsInfo[i][pMade] += randomEx(5, 8);
			if(CropsInfo[i][pGrowTime] == 120)
				CropsInfo[i][pMade] += randomEx(5, 9);
			GetDynamicObjectPos(CropsInfo[i][pObject], x, y, z);
			if(CropsInfo[i][pGrowTime] == 20)
				SetDynamicObjectPos(CropsInfo[i][pObject], x, y, z+0.1);
			if(CropsInfo[i][pGrowTime] == 40)
				SetDynamicObjectPos(CropsInfo[i][pObject], x, y, z+0.1);
			if(CropsInfo[i][pGrowTime] == 60)
				SetDynamicObjectPos(CropsInfo[i][pObject], x, y, z+0.3);
			if(CropsInfo[i][pGrowTime] == 80)
				SetDynamicObjectPos(CropsInfo[i][pObject], x, y, z+0.3);
			if(CropsInfo[i][pGrowTime] == 100)
				SetDynamicObjectPos(CropsInfo[i][pObject], x, y, z+0.3);
			GetDynamicObjectPos(CropsInfo[i][pObject], x, y, z);
			CropsInfo[i][pX] = x;
			CropsInfo[i][pY] = y;
			CropsInfo[i][pZ] = z;
			format(string, sizeof(string), ""EMBED_YELLOW"THE PLANT: %d MINUTES\nPRODUCT: %d", CropsInfo[i][pGrowTime], CropsInfo[i][pMade]);
			UpdateDynamic3DTextLabelText(Text3D:CropsInfo[i][pLabel], -1, string);
			if(CropsInfo[i][pGrowTime] == 180)
			{
				DestroyCrop(i); //Destroy it due to wilting
			}
		}
	}
	//=============================================================================
}

public FixHour(hour)
{
	hour = timeshift+hour;
	if (hour < 0)
	{
		hour = hour+24;
	}
	else if (hour > 23)
	{
		hour = hour-24;
	}
	shifthour = hour;
	return 1;
}

public HangUpAnim(playerid)
{
	phoneAnim(playerid, 0);
	return 1;
}

public PlayRingSound(playerid)
{
	PlaySound(playerid, 1138);
}

public ShowTenantsAmount(playerid)
{
	new rows, fields, total = 0;
	new tenantname[128];
	cache_get_data(rows, fields);
	if(!rows) return HouseMSG(playerid, "You do not have tenants in the house.");
	SCM(playerid, COLOR_YELLOWG, "|_______________Tenants_______________|");
	while(total < rows)
	{
		cache_get_row(total, 1, tenantname);
		format(msg, sizeof(msg), "[Tenant %d] %s.", total, tenantname);
		if(strcmp(tenantname, GetName(playerid), true))
		{
			SCM(playerid, COLOR_GREEN, msg);
		}
		total++;
	}
	SCM(playerid, COLOR_YELLOWG, "|_______________Tenants_______________|");
	return 1;
}

public OnPlayerSellHouse(house)
{
	foreach(Player, i)
	{
		if(PlayerInfo[i][pHouseKey] == house)
		{
			HouseMSG(i, "The house in which you were rent, was sold. You do not have a home.");
			PlayerInfo[i][pHouseKey] = -1;
		}
	}
	return 1;
}

public DeadAnim(playerid)
{
	OnAnim{playerid} = true;
	OnPlayAnim(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 1, 1, 1, 0);
	return 1;
}

public RespawnDeath(playerid)
{
	SCM(playerid, COLOR_YELLOWG, "Now you can use /acceptdeath to respawn.");
	TimerDeath1[playerid] = 1;
	return 1;
}

public InjuredFinish(playerid)
{
  KillTimer(InjuredTimer[playerid]);
  StopPlayerAnims(playerid);
  UnFreezePlayer(playerid);
  Delete3DTextLabel(Injured[playerid]);
  RemoveVar(playerid, "Injured");
  InjuredMSG[playerid] = 0;
  return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(GetIntVar(playerid, "EditingPolice") == 1)
	{
		if(response)
		{
			RemoveVar(playerid, "EditingPolice");
			RemovePlayerAttachedObject(playerid, index);
			SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
		}
		else
		{
			SetIntVar(playerid, "EditingPolice", 1);
			SCM(playerid, COLOR_WHITE, "Click on the SAVE button to finish.");
			EditAttachedObject(playerid, index);
		}
	}
	if(GetIntVar(playerid, "EditingOwnedToy") == 1)
	{
		new i = GetIntVar(playerid, "ToySlotEditing");
		if(response)
		{
			PlayerToys[playerid][i][ptOffsetX] = fOffsetX;
			PlayerToys[playerid][i][ptOffsetY] = fOffsetY;
			PlayerToys[playerid][i][ptOffsetZ] = fOffsetZ;
			PlayerToys[playerid][i][ptRotX] = fRotX;
			PlayerToys[playerid][i][ptRotY] = fRotY;
			PlayerToys[playerid][i][ptRotZ] = fRotZ;
			PlayerToys[playerid][i][ptScaleX] = fScaleX;
			PlayerToys[playerid][i][ptScaleY] = fScaleY;
			PlayerToys[playerid][i][ptScaleZ] = fScaleZ;
			UpdatePlayerToy(playerid, i, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
			RemoveVar(playerid, "ToySlotEditing");
			RemoveVar(playerid, "EditingOwnedToy");
			RemovePlayerAttachedObject(playerid, i);
			SetPlayerAttachedObject(playerid, i, modelid, boneid, PlayerToys[playerid][i][ptOffsetX], PlayerToys[playerid][i][ptOffsetY], PlayerToys[playerid][i][ptOffsetZ], PlayerToys[playerid][i][ptRotX], PlayerToys[playerid][i][ptRotY], PlayerToys[playerid][i][ptRotZ], PlayerToys[playerid][i][ptScaleX], PlayerToys[playerid][i][ptScaleY], PlayerToys[playerid][i][ptScaleZ]);
		}
		else
		{
			RemovePlayerAttachedObject(playerid, i);
			SetPlayerAttachedObject(playerid, i, modelid, boneid, PlayerToys[playerid][i][ptOffsetX], PlayerToys[playerid][i][ptOffsetY], PlayerToys[playerid][i][ptOffsetZ], PlayerToys[playerid][i][ptRotX], PlayerToys[playerid][i][ptRotY], PlayerToys[playerid][i][ptRotZ], PlayerToys[playerid][i][ptScaleX], PlayerToys[playerid][i][ptScaleY], PlayerToys[playerid][i][ptScaleZ]);
			RemoveVar(playerid, "ToySlotEditing");
			RemoveVar(playerid, "EditingOwnedToy");
		}
	}
	if(GetIntVar(playerid, "JustBoughtToy") == 1)
	{
		new i = GetIntVar(playerid, "ToySlotEditing");
		if(response)
		{
			RemovePlayerAttachedObject(playerid, i);
			PlayerToys[playerid][i][ptOffsetX] = fOffsetX;
			PlayerToys[playerid][i][ptOffsetY] = fOffsetY;
			PlayerToys[playerid][i][ptOffsetZ] = fOffsetZ;
			PlayerToys[playerid][i][ptRotX] = fRotX;
			PlayerToys[playerid][i][ptRotY] = fRotY;
			PlayerToys[playerid][i][ptRotZ] = fRotZ;
			PlayerToys[playerid][i][ptScaleX] = fScaleX;
			PlayerToys[playerid][i][ptScaleY] = fScaleY;
			PlayerToys[playerid][i][ptScaleZ] = fScaleZ;
			UpdatePlayerToy(playerid, i, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
			SetPlayerAttachedObject(playerid, i, modelid, boneid, PlayerToys[playerid][i][ptOffsetX], PlayerToys[playerid][i][ptOffsetY], PlayerToys[playerid][i][ptOffsetZ], PlayerToys[playerid][i][ptRotX], PlayerToys[playerid][i][ptRotY], PlayerToys[playerid][i][ptRotZ], PlayerToys[playerid][i][ptScaleX], PlayerToys[playerid][i][ptScaleY], PlayerToys[playerid][i][ptScaleZ]);
			RemoveVar(playerid, "ToyModelBuying");
			RemoveVar(playerid, "ToyBoneBuying");
			RemoveVar(playerid, "ToyPriceBuying");
			RemoveVar(playerid, "ToyNameBuying");
			RemoveVar(playerid, "ToySlotEditing");
			RemoveVar(playerid, "JustBoughtToy");
		}
		else
		{
		    format(msg, sizeof(msg), "You canceled buying an item, you get %d back", GetIntVar(playerid, "ToyPriceBuying"));
			SCM(playerid, COLOR_YELLOWG, msg);
			GiveCash(playerid, GetIntVar(playerid, "ToyPriceBuying"));
			RemovePlayerToyFromSlot(playerid, i);
			RemovePlayerAttachedObject(playerid, i);
			RemoveVar(playerid, "ToyModelBuying");
			RemoveVar(playerid, "ToyBoneBuying");
			RemoveVar(playerid, "ToyPriceBuying");
			RemoveVar(playerid, "ToyNameBuying");
			RemoveVar(playerid, "ToySlotEditing");
			RemoveVar(playerid, "JustBoughtToy");
		}
	}
    return 1;
}
forward OnPlayerLoadFines();
public OnPlayerLoadFines()
{
  new rows, fields, total = 0;
  cache_get_data(rows, fields);
  if(rows)
  {
    while(total < rows)
    {
      FineInfo[total][fineID] = cache_get_row_int(total, 0);
      cache_get_row(total, 1, FineInfo[total][fineName], dbHandle, 128);
      cache_get_row(total, 2, FineInfo[total][fineAgency], dbHandle, 128);
      cache_get_row(total, 3, FineInfo[total][fineCop], dbHandle, 128);
      FineInfo[total][finePrice] = cache_get_row_int(total, 4);
      cache_get_row(total, 5, FineInfo[total][fineReason], dbHandle, 128);
      FineInfo[total][fineOn] = cache_get_row_int(total, 6);
      total++;
    }
  }
  return 1;
}

public OnPlayerLoadToys(playerid)
{
	new rows, fields, total = 0;
	cache_get_data(rows, fields);
	if(rows)
	{
		while(total < rows)
		{
			PlayerToys[playerid][total][ptID] = cache_get_row_int(total, 0);
			cache_get_row(total, 2, PlayerToys[playerid][total][ptName], dbHandle, 128);
			PlayerToys[playerid][total][ptModelID] = cache_get_row_int(total, 3);
			PlayerToys[playerid][total][ptBoneID] = cache_get_row_int(total, 4);
			PlayerToys[playerid][total][ptOffsetX] = cache_get_row_float(total, 5);
			PlayerToys[playerid][total][ptOffsetY] = cache_get_row_float(total, 6);
			PlayerToys[playerid][total][ptOffsetZ] = cache_get_row_float(total, 7);
			PlayerToys[playerid][total][ptRotX] = cache_get_row_float(total, 8);
			PlayerToys[playerid][total][ptRotY] = cache_get_row_float(total, 9);
			PlayerToys[playerid][total][ptRotZ] = cache_get_row_float(total, 10);
			PlayerToys[playerid][total][ptScaleX] = cache_get_row_float(total, 11);
			PlayerToys[playerid][total][ptScaleY] = cache_get_row_float(total, 12);
			PlayerToys[playerid][total][ptScaleZ] = cache_get_row_float(total, 13);
			PlayerToys[playerid][total][ptToyOn] = 1;
			if(PlayerInfo[playerid][pJailed] < 1)
			{
				SetPlayerAttachedObject(playerid, total, PlayerToys[playerid][total][ptModelID],PlayerToys[playerid][total][ptBoneID],PlayerToys[playerid][total][ptOffsetX],PlayerToys[playerid][total][ptOffsetY],PlayerToys[playerid][total][ptOffsetZ],PlayerToys[playerid][total][ptRotX],PlayerToys[playerid][total][ptRotY],PlayerToys[playerid][total][ptRotZ],PlayerToys[playerid][total][ptScaleX],PlayerToys[playerid][total][ptScaleY],PlayerToys[playerid][total][ptScaleZ]);
			}
			total++;
		}
	}
	return 1;
}

public OnPlayerRemovedToy(playerid, toyslot)
{
	PlayerToys[playerid][toyslot][ptToyOn] = 0;
	PlayerToys[playerid][toyslot][ptModelID] = 0;
	PlayerToys[playerid][toyslot][ptBoneID] = 0;
	PlayerToys[playerid][toyslot][ptOffsetX] = 0.0;
	PlayerToys[playerid][toyslot][ptOffsetY] = 0.0;
	PlayerToys[playerid][toyslot][ptOffsetZ] = 0.0;
	PlayerToys[playerid][toyslot][ptRotX] = 0.0;
	PlayerToys[playerid][toyslot][ptRotY] = 0.0;
	PlayerToys[playerid][toyslot][ptRotZ] = 0.0;
	PlayerToys[playerid][toyslot][ptScaleX] = 0.0;
	PlayerToys[playerid][toyslot][ptScaleY] = 0.0;
	PlayerToys[playerid][toyslot][ptScaleZ] = 0.0;
	RemovePlayerAttachedObject(playerid, toyslot);
	return 1;
}

public OnToyInsert(playerid, toyslot, model, bone, name[])
{
	PlayerToys[playerid][toyslot][ptID] = cache_insert_id();
	PlayerToys[playerid][toyslot][ptModelID] = model;
	PlayerToys[playerid][toyslot][ptBoneID] = bone;
	format(PlayerToys[playerid][toyslot][ptName], 128, "%s", name);
	PlayerToys[playerid][toyslot][ptToyOn] = 1;
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	foreach(Player, i)
	{
		if(areaid == GetIntVar(i, "BoomBoxArea") && GetIntVar(i, "BoomBoxMusicOn") == 1)
		{
			PlayAudioStreamForPlayer(playerid, GetStringVar(i, "BoomBoxURL"), GetFloatVar(i, "BoomBoxX"), GetFloatVar(i, "BoomBoxY"), GetFloatVar(i, "BoomBoxZ"), 50.0, 1);
		}
	}
	for(new i = 0; i < MAX_PARK_METERS; i++)
	{
		if(areaid == ParkMeters[i][parkArea] && ParkMeters[i][parkOn])
		{
			GameTextForPlayer(playerid, "~p~/parkmeter", 4000, 4);
		}
	}
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	foreach(Player, i)
	{
		if(areaid == GetIntVar(i, "BoomBoxArea"))
		{
			StopAudioStreamForPlayer(playerid);
		}
	}
}

public OnFurnitureInsert(houseid, interior, world, furnitureslot, model, price, name[], Float:x, Float:y, Float:z)
{
	FurnitureInfo[houseid][furnitureslot][fID] = cache_insert_id();
	FurnitureInfo[houseid][furnitureslot][fHouseID] = houseid;
	FurnitureInfo[houseid][furnitureslot][fInterior] = interior;
	FurnitureInfo[houseid][furnitureslot][fVirtualWorld] = world;
	FurnitureInfo[houseid][furnitureslot][fMarketPrice] = price;
	FurnitureInfo[houseid][furnitureslot][fModel] = model;
	FurnitureInfo[houseid][furnitureslot][fPosX] = x;
	FurnitureInfo[houseid][furnitureslot][fPosY] = y;
	FurnitureInfo[houseid][furnitureslot][fPosZ] = z;
	FurnitureInfo[houseid][furnitureslot][fPosRX] = 0.0;
	FurnitureInfo[houseid][furnitureslot][fPosRY] = 0.0;
	FurnitureInfo[houseid][furnitureslot][fPosRZ] = 0.0;
	format(FurnitureInfo[houseid][furnitureslot][fName], 128, "%s", name);
	FurnitureInfo[houseid][furnitureslot][fOn] = 1;
	return 1;
}

public OnFurnitureUpdatePos(playerid, furnitureslot, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	FurnitureInfo[PlayerInfo[playerid][pHouseKey]][furnitureslot][fPosX] = x;
	FurnitureInfo[PlayerInfo[playerid][pHouseKey]][furnitureslot][fPosY] = y;
	FurnitureInfo[PlayerInfo[playerid][pHouseKey]][furnitureslot][fPosZ] = z;
	FurnitureInfo[PlayerInfo[playerid][pHouseKey]][furnitureslot][fPosRX] = rx;
	FurnitureInfo[PlayerInfo[playerid][pHouseKey]][furnitureslot][fPosRY] = ry;
	FurnitureInfo[PlayerInfo[playerid][pHouseKey]][furnitureslot][fPosRZ] = rz;
	return 1;
}

public OnPlayerSoldFurniture(playerid, houseid, furnitureslot)
{
	FurnitureInfo[houseid][furnitureslot][fInterior] = 0;
	FurnitureInfo[houseid][furnitureslot][fVirtualWorld] = 0;
	FurnitureInfo[houseid][furnitureslot][fMarketPrice] = 0;
	FurnitureInfo[houseid][furnitureslot][fModel] = 0;
	FurnitureInfo[houseid][furnitureslot][fPosX] = 0.0;
	FurnitureInfo[houseid][furnitureslot][fPosY] = 0.0;
	FurnitureInfo[houseid][furnitureslot][fPosZ] = 0.0;
	FurnitureInfo[houseid][furnitureslot][fPosRX] = 0.0;
	FurnitureInfo[houseid][furnitureslot][fPosRY] = 0.0;
	FurnitureInfo[houseid][furnitureslot][fPosRZ] = 0.0;
	format(FurnitureInfo[houseid][furnitureslot][fName], 128, "Null");
	FurnitureInfo[houseid][furnitureslot][fOn] = 0;
	HouseInfo[houseid][hFurnitures] -= 1;
	UpdateHouseInfo(houseid);
	return 1;
}

public OnChannelInsert(channelslot)
{
	RadiosInfo[channelslot][radioID] = cache_insert_id();
	return 1;
}

public TalkTimer(playerid)
{
	if(!PlayerInCar(playerid))
	{
		if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_ENTER_VEHICLE && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_EXIT_VEHICLE)
		{
			ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
			OnAnim{playerid} = false;
		}
	}
	return 1;
}

public CheckPlayerLogged(playerid)
{
	if(!PlayerLogged(playerid))
	{
		KickEx2(playerid, "60 seconds have passed and you have not yet logged in.");
	}
	return 1;
}

public OnPlayerSpawnVehicle(playerid, slot)
{
	new rows, fields;
	new sqlid, model, color1, color2, alarmbuyed, lock, immob, insurances, destroyed, gps, fuel, batterylife, enginelife, registered, broken, Float:X, Float:Y, Float:Z, Float:A, plate[128], owner[128];
	new component[14], paintjob, radio, tickets[265], weapons[256], drugs[256], dupkey, comps;
	cache_get_data(rows, fields);
	if(rows)
	{
		sqlid = cache_get_row_int(0, 0),
		model = cache_get_row_int(0, 1),
		color1 = cache_get_row_int(0, 2),
		color2 = cache_get_row_int(0, 3),
		X = cache_get_row_float(0, 4),
		Y = cache_get_row_float(0, 5),
		Z = cache_get_row_float(0, 6),
		A = cache_get_row_float(0, 7),
		cache_get_row(0, 8, plate, dbHandle, 128),
		cache_get_row(0, 9, owner, dbHandle, 128),
		alarmbuyed = cache_get_row_int(0, 12),
		lock = cache_get_row_int(0, 13),
		immob = cache_get_row_int(0, 14),
		insurances = cache_get_row_int(0, 15),
		destroyed = cache_get_row_int(0, 16),
		gps = cache_get_row_int(0, 17),
		fuel = cache_get_row_int(0, 18),
		registered = cache_get_row_int(0, 19),
		broken = cache_get_row_int(0, 20),
        cache_get_row(0, 21, weapons, dbHandle, 256),
		component[0] = cache_get_row_int(0, 22),
		component[1] = cache_get_row_int(0, 23),
		component[2] = cache_get_row_int(0, 24),
		component[3] = cache_get_row_int(0, 25),
		component[4] = cache_get_row_int(0, 26),
		component[5] = cache_get_row_int(0, 27),
		component[6] = cache_get_row_int(0, 28),
		component[7] = cache_get_row_int(0, 29),
		component[8] = cache_get_row_int(0, 30),
		component[9] = cache_get_row_int(0, 31),
		component[10] = cache_get_row_int(0, 32),
		component[11] = cache_get_row_int(0, 33),
		component[12] = cache_get_row_int(0, 34),
		component[13] = cache_get_row_int(0, 35),
		paintjob = cache_get_row_int(0, 36),
		radio = cache_get_row_int(0, 37),
		cache_get_row(0, 38, tickets, dbHandle, 128),
		dupkey = cache_get_row_int(0, 39),
		comps = cache_get_row_int(0, 40),
		cache_get_row(0, 41, drugs, dbHandle, 128);
        enginelife = cache_get_row_int(0, 42),
        batterylife = cache_get_row_int(0, 43),
		PlayerInfo[playerid][pCarKey] = CreateVehicle(model, X, Y, Z, A, color1, color2, -1);
		SetVehicleNumberPlate(PlayerInfo[playerid][pCarKey], plate);
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carID] = sqlid;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carModel] = model;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carColor1] = color1;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carColor2] = color2;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carParkX] = X;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carParkY] = Y;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carParkZ] = Z;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carParkA] = A;
		format(VehicleInfo[PlayerInfo[playerid][pCarKey]][carPlate], 128, "%s", plate);
		format(VehicleInfo[PlayerInfo[playerid][pCarKey]][carOwner], 128, "%s", owner);
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carOwned] = 1;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carSpawned] = 1;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carOn] = 1;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carAlarm] = alarmbuyed;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carLock] = lock;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carImmob] = immob;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carInsurances] = insurances;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carDestroyed] = destroyed;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carGps] = gps;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carOwnerSlot] = slot;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carFuel] = fuel;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carRegistered] = registered;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carBroken] = broken;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][0] = component[0];
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][1] = component[1];
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][2] = component[2];
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][3] = component[3];
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][4] = component[4];
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][5] = component[5];
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][6] = component[6];
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][7] = component[7];
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][8] = component[8];
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][9] = component[9];
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][10] = component[10];
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][11] = component[11];
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][12] = component[12];
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carComponent][13] = component[13];
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carPaintJob] = paintjob;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carRadio] = radio;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carDupKey] = dupkey;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carComps] = comps;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carEngineLife] = enginelife;
		VehicleInfo[PlayerInfo[playerid][pCarKey]][carBatteryLife] = batterylife;
		VehicleTrunk(PlayerInfo[playerid][pCarKey], true);
		AssignVehicleTickets(PlayerInfo[playerid][pCarKey], tickets);
		AssignCarWeapons(PlayerInfo[playerid][pCarKey], weapons);
		AssignVehicleDrugs(PlayerInfo[playerid][pCarKey], drugs);
		Gas{PlayerInfo[playerid][pCarKey]} = fuel;
		vLocked{PlayerInfo[playerid][pCarKey]} = 1;
		PlayerInfo[playerid][pVehSlot] = slot;
		LoadComp(PlayerInfo[playerid][pCarKey]);
		SCMEx(playerid, COLOR_GREEN, "%s has been spawned at its parking place", VehicleNames[model-400]);
		format(msg, sizeof(msg), "Alarm[%d], Lock[%d], Immob[%d], Insurance[%d]",alarmbuyed, lock, immob, insurances);
		SCM(playerid, COLOR_WHITE, msg);
		format(msg, sizeof(msg), "Life Span: Battery Life: [%d], Engine Life: [%d]",VehicleInfo[PlayerInfo[playerid][pCarKey]][carBatteryLife], VehicleInfo[PlayerInfo[playerid][pCarKey]][carEngineLife]);
		SCM(playerid, COLOR_WHITE, msg);
		SCM(playerid, COLOR_PINK, "Hint: Follow the red market to find your vehicle");
		SetCheckPoint(playerid, FINEVEH, VehicleInfo[PlayerInfo[playerid][pCarKey]][carParkX],VehicleInfo[PlayerInfo[playerid][pCarKey]][carParkY],VehicleInfo[PlayerInfo[playerid][pCarKey]][carParkZ], 6.0);
	}
	else return SCM(playerid, COLOR_LIGHTRED, "You do not have a slot car.");
	return 1;
}


public Float:GetDistanceBetweenPlayers(p1,p2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	if(!PlayerIsOn(p1) || !PlayerIsOn(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

public SendProxRadioMessage(playerid, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(PlayerIsOn(i))
		{
		    if(i != playerid)
		    {
			    if(GetDistanceBetweenPlayers(playerid,i) < 8)
			    { SCM(i, COLOR_FADE1, string); }
				else if(GetDistanceBetweenPlayers(playerid,i) < 8)
			    { SCM(i, COLOR_FADE2, string); }
				else if(GetDistanceBetweenPlayers(playerid,i) < 12)
			    { SCM(i, COLOR_FADE3, string); }
				else if(GetDistanceBetweenPlayers(playerid,i) < 16)
			    { SCM(i, COLOR_FADE4, string); }
				else if(GetDistanceBetweenPlayers(playerid,i) < 20)
			    { SCM(i, COLOR_FADE5, string); }
			}
		}
	}
}

public SendLowProxRadioMessage(playerid, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(PlayerIsOn(i))
		{
		    if(i != playerid)
		    {
			    if(GetDistanceBetweenPlayers(playerid,i) < 3)
			    { SCM(i, COLOR_FADE1, string); }
				else if(GetDistanceBetweenPlayers(playerid,i) < 3)
			    { SCM(i, COLOR_FADE2, string); }
				else if(GetDistanceBetweenPlayers(playerid,i) < 5)
			    { SCM(i, COLOR_FADE3, string); }
				else if(GetDistanceBetweenPlayers(playerid,i) < 7)
			    { SCM(i, COLOR_FADE4, string); }
				else if(GetDistanceBetweenPlayers(playerid,i) < 9)
			    { SCM(i, COLOR_FADE5, string); }
			}
		}
	}
}

public SendRadioMessage(playerid, channel, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(PlayerIsOn(i))
		{
 			if(PlayerInfo[i][pChannel] == channel && PlayerInfo[i][pSlot] == PlayerInfo[playerid][pSlot])
	  		{
	  		    if(PlayerInfo[i][pAuthed] == 1)
				{
		        	SCM(i, color, string);
				}
			}
		}
	}
}

public ActionMessage(playerid,Float:radius,message[])
{
	new str[256];
	new str2[256];
	format(str2, sizeof(str2), "%s", message);
	if(strlen(str2) > MAXLEN)
	{
		new pos = MAXLEN;
	    if(pos < MAXLEN-1) pos = MAXLEN;
		format(str, sizeof(str), "* %s %.*s ...", GetNameWithMask(playerid), pos, str2);
		ProxDetector(20.0, playerid, str, COLOR_PURPLE);
		format(str, sizeof(str), "* ... %s ((%s))", str2[pos], GetNameWithMask(playerid));
		ProxDetector(20.0, playerid, str, COLOR_PURPLE);
	}
	else
	{
		format(str, sizeof(str), "* %s %s", GetNameWithMask(playerid), str2);
		ProxDetector(20.0, playerid, str, COLOR_PURPLE);
	}
	return 1;
}

public LoadComp(vehicle)
{
	if(VehicleInfo[vehicle][carPaintJob] != 3)
	{
		ChangeVehiclePaintjob(vehicle, VehicleInfo[vehicle][carPaintJob]);
	}
	for(new i = 0; i < 14; i++)
	{
		if(VehicleInfo[vehicle][carComponent][i] != 0)
		{
			AddVehicleComponent(vehicle, VehicleInfo[vehicle][carComponent][i]);
		}
	}
	return 1;
}

public OnAdminSellBusiness(bizid)
{
	BizInfo[bizid][bizCash] = 0;
	BizInfo[bizid][bizOwned] = 0;
	BizInfo[bizid][bizEntrance] = 0;
	BizInfo[bizid][bizRadio] = 0;
	BizInfo[bizid][bizRadioOn] = 0;
	BizInfo[bizid][bizLocked] = 1;
	format(BizInfo[bizid][bizOwner], 64, "The State");
	BizInfo[bizid][bizOn] = 1;
	return 1;
}

public GivePlayerBizMoney(cash, bizid)
{
	new rows, fields, cash2;
	cache_get_data(rows, fields);
	if(rows)
	{
		cash2 = cache_get_row_int(0, 5);
		cash += cash2;
		OnBizGiveMoney(cash, BizInfo[bizid][bizOwner]);
	}
}

/*public AfterSpray(playerid)
{
	if(PlayerIsOn(playerid))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			new vehicle = GetPlayerVehicleID(playerid);
			ChangeVehicleColor(vehicle, VehColor1{playerid}, VehColor2{playerid});
			VehColor1{playerid} = 0;
			VehColor2{playerid} = 0;
			UnFreezePlayer(playerid);
			SetVehiclePos(vehicle, GetFloatVar(playerid, "SprayX"),GetFloatVar(playerid, "SprayY"),GetFloatVar(playerid, "SprayZ"));
			RepairVehicle(vehicle);
			SetVehicleHealth(vehicle, 1000.0);
			RemoveVar(playerid, "SprayX");RemoveVar(playerid, "SprayY");RemoveVar(playerid, "SprayZ");
		}
	}
	return 1;
}*/

public SetUnTazed(playerid)
{
	Tazed{playerid} = false;
	UnFreezePlayer(playerid);
	return 1;
}
public SetUnBeanbag(playerid)
{
	Beanbag{playerid} = false;
	UnFreezePlayer(playerid);
	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	new str[500];
	if(CheckingBot{playerid})
	{
		for(new i = 4; i < sizeof(Captcha); i++)
		{
			if(playertextid == Captcha[i])
			{
				new step = GetIntVar(playerid, "CaptchaStep"), sstring[96];
				GetPVarString(playerid, "CaptchaText", sstring, sizeof(sstring));
				switch(step)
				{
					case 0: format(sstring, sizeof(sstring), "%c", TextArray[i - 4]), strcat(sstring, "----"), SetPVarString(playerid, "CaptchaText", sstring);
					case 1: format(sstring, sizeof(sstring), "%s%c", sstring, TextArray[i - 4]), strdel(sstring, 1, 5), strcat(sstring, "---"), SetPVarString(playerid, "CaptchaText", sstring);
					case 2: format(sstring, sizeof(sstring), "%s%c", sstring, TextArray[i - 4]), strdel(sstring, 2, 5), strcat(sstring, "--"), SetPVarString(playerid, "CaptchaText", sstring);
					case 3: format(sstring, sizeof(sstring), "%s%c", sstring, TextArray[i - 4]), strdel(sstring, 3, 5), strcat(sstring, "-"), SetPVarString(playerid, "CaptchaText", sstring);
					case 4:
					{
						strdel(sstring, 4, 5);
						format(sstring, sizeof(sstring), "%s%c", sstring, TextArray[i - 4]);
						PlayerTextDrawSetString(playerid, Captcha[3], sstring);
						new cstring[24];
						GetPVarString(playerid, "CaptchaCode", cstring, sizeof(cstring));
						if(strcmp(cstring, sstring) != 0)
						{
							format(cstring, sizeof(cstring), "%c%c%c%c%c", TextArray[random(sizeof(TextArray) - 1)], TextArray[random(sizeof(TextArray) - 1)], TextArray[random(sizeof(TextArray) - 1)], TextArray[random(sizeof(TextArray) - 1)], TextArray[random(sizeof(TextArray) - 1)]);
							PlayerTextDrawSetString(playerid, Captcha[1], cstring);
							SetStringVar(playerid, "CaptchaCode", cstring);
							PlayerTextDrawSetString(playerid, Captcha[3], "-----");
							//If they we're wrong
							SCM(playerid, 0xFF0000FF, "Wrong anti-bot capthcha! Try again...");
							//If they we're wrong
							RemoveVar(playerid, "CaptchaStep");
							RemoveVar(playerid, "CaptchaText");
							return 1;
						}
						else
						{
							for(new l = 0; l < sizeof(Captcha); l++) PlayerTextDrawHide(playerid, Captcha[l]);
							RemoveVar(playerid, "CaptchaStep");
							RemoveVar(playerid, "CaptchaCode");
							RemoveVar(playerid, "CaptchaText");
							SetIntVar(playerid, "CaptchaPass", 1);
							CancelSelectTextDraw(playerid);
							//Send registration dialog
							CheckingBot{playerid} = false;
							SCM(playerid, COLOR_LIGHTRED, "You are not a bot.");
							SetIntVar(playerid, "RegisterPart", 1);
							format(str, sizeof(str), ""EMBED_WHITE"Welcome to "ServerName", "EMBED_RED"%s\n"EMBED_WHITE"This user was not found in the database, please enter your password to register.", GetNameEx(playerid));
							ShowDialog(playerid, Show:<Register>, DIALOG_STYLE_INPUT, ""EMBED_YELLOW"Registration"EMBED_WHITE"", str, "Register", "Iesire");
							//Send registration dialog
							return 1;
						}
					}
				}
				SetIntVar(playerid, "CaptchaStep", step + 1);
				PlayerTextDrawSetString(playerid, Captcha[3], sstring);
			}
		}
	}
	if(playertextid == phone12[playerid])
	{
		CancelSelectTextDraw(playerid);
		HidePhone(playerid);
	}
	else if(playertextid == phone6[playerid])
	{
		CancelSelectTextDraw(playerid);
		HidePhone(playerid);
	}
	else if(playertextid == phone5[playerid])//right
	{
		 CancelSelectTextDraw(playerid);
		 HidePhone(playerid); 
		 SCM(playerid, COLOR_YELLOWG,"The menu is in training course...");
	}
	if(GetIntVar(playerid, "SelectingUniform") == 1)
	{
		if(playertextid == NextButton[playerid])
		{
			if(SkinSlot[playerid] >= sizeof(LSPDSkins)-1) return 1;
			SkinSlot[playerid]++;
			SetPlayerSkin(playerid, LSPDSkins[SkinSlot[playerid]]);
			SetIntVar(playerid, "SkinChosen", LSPDSkins[SkinSlot[playerid]]);
			OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
		}
		if(playertextid == PrevButton[playerid])
		{
			if(SkinSlot[playerid] == 0) return 1;
			SkinSlot[playerid]--;
			SetPlayerSkin(playerid, LSPDSkins[SkinSlot[playerid]]);
			SetIntVar(playerid, "SkinChosen", LSPDSkins[SkinSlot[playerid]]);
			OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
		}
		if(playertextid == WearButton[playerid])
		{
			new skin = GetIntVar(playerid, "SkinChosen");
			if(skin == 281)
			{
    			SetPlayerSkin(playerid, skin);
				SetCameraBehindPlayer(playerid);
				CancelSelectTextDraw(playerid);
				PlayerTextDrawHide(playerid, NextButton[playerid]);
				PlayerTextDrawHide(playerid, PrevButton[playerid]);
				PlayerTextDrawHide(playerid, WearButton[playerid]);
				PlayerTextDrawHide(playerid, Dusule1[playerid]);
				PlayerTextDrawHide(playerid, Dusule2[playerid]);
				PlayerTextDrawHide(playerid, Dusule3[playerid]);
				SCM(playerid,COLOR_LIGHTRED,"{9C4C42}[ ! ]{FFFFFF} Uniform changed.");
				UnFreezePlayer(playerid);
				StopPlayerAnims(playerid);
			}
			else if(skin == 265 || skin == 266 || skin == 267 || skin == 280 || skin == 284 || skin == 300 || skin == 301 || skin == 303 || skin == 304 || skin == 305 || skin == 306 || skin == 307 || skin == 309)
			{
				SetPlayerSkin(playerid, skin);
				SetCameraBehindPlayer(playerid);
				CancelSelectTextDraw(playerid);
				PlayerTextDrawHide(playerid, NextButton[playerid]);
				PlayerTextDrawHide(playerid, PrevButton[playerid]);
				PlayerTextDrawHide(playerid, WearButton[playerid]);
				PlayerTextDrawHide(playerid, Dusule1[playerid]);
				PlayerTextDrawHide(playerid, Dusule2[playerid]);
				PlayerTextDrawHide(playerid, Dusule3[playerid]);
				UnFreezePlayer(playerid);
				SCM(playerid,COLOR_LIGHTRED,"{9C4C42}[ ! ]{FFFFFF} Uniform changed.");
				StopPlayerAnims(playerid);
			}
		}
	}
	if(GetIntVar(playerid, "SelectingUniform") == 2)
	{
		if(playertextid == NextButton[playerid])
		{
			if(SkinSlot[playerid] >= sizeof(LSFDSkins)-1) return 1;
			SkinSlot[playerid]++;
			SetPlayerSkin(playerid, LSFDSkins[SkinSlot[playerid]]);
			SetIntVar(playerid, "SkinChosen", LSFDSkins[SkinSlot[playerid]]);
			OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
		}
		if(playertextid == PrevButton[playerid])
		{
			if(SkinSlot[playerid] == 0) return 1;
			SkinSlot[playerid]--;
			SetPlayerSkin(playerid, LSFDSkins[SkinSlot[playerid]]);
			SetIntVar(playerid, "SkinChosen", LSFDSkins[SkinSlot[playerid]]);
			OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
		}
		if(playertextid == WearButton[playerid])
		{
			new skin = GetIntVar(playerid, "SkinChosen");
			SetPlayerSkin(playerid, skin);
			SetCameraBehindPlayer(playerid);
			CancelSelectTextDraw(playerid);
			PlayerTextDrawHide(playerid, NextButton[playerid]);
			PlayerTextDrawHide(playerid, PrevButton[playerid]);
			PlayerTextDrawHide(playerid, WearButton[playerid]);
			PlayerTextDrawHide(playerid, Dusule1[playerid]);
			PlayerTextDrawHide(playerid, Dusule2[playerid]);
			PlayerTextDrawHide(playerid, Dusule3[playerid]);
			UnFreezePlayer(playerid);
			StopPlayerAnims(playerid);
		}
	}
    if(GetIntVar(playerid, "SelectingUniform") == 3)
	{
		if(playertextid == NextButton[playerid])
		{
			if(SkinSlot[playerid] >= sizeof(GovSkins)-1) return 1;
			SkinSlot[playerid]++;
			SetPlayerSkin(playerid, GovSkins[SkinSlot[playerid]]);
			SetIntVar(playerid, "SkinChosen", GovSkins[SkinSlot[playerid]]);
			OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
		}
		if(playertextid == PrevButton[playerid])
		{
			if(SkinSlot[playerid] == 0) return 1;
			SkinSlot[playerid]--;
			SetPlayerSkin(playerid, GovSkins[SkinSlot[playerid]]);
			SetIntVar(playerid, "SkinChosen", GovSkins[SkinSlot[playerid]]);
			OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
		}
		if(playertextid == WearButton[playerid])
		{
			new skin = GetIntVar(playerid, "SkinChosen");
			SetPlayerSkin(playerid, skin);
			SetCameraBehindPlayer(playerid);
			CancelSelectTextDraw(playerid);
			PlayerTextDrawHide(playerid, NextButton[playerid]);
			PlayerTextDrawHide(playerid, PrevButton[playerid]);
			PlayerTextDrawHide(playerid, WearButton[playerid]);
			PlayerTextDrawHide(playerid, Dusule1[playerid]);
			PlayerTextDrawHide(playerid, Dusule2[playerid]);
			PlayerTextDrawHide(playerid, Dusule3[playerid]);
			UnFreezePlayer(playerid);
			StopPlayerAnims(playerid);
		}
  }
  if(GetIntVar(playerid, "SelectingUniform") == 4)
  {
    if(playertextid == NextButton[playerid])
    {
      if(SkinSlot[playerid] >= sizeof(NewsSkins)-1) return 1;
      SkinSlot[playerid]++;
      SetPlayerSkin(playerid, NewsSkins[SkinSlot[playerid]]);
      SetIntVar(playerid, "SkinChosen", NewsSkins[SkinSlot[playerid]]);
      OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
    }
    if(playertextid == PrevButton[playerid])
    {
      if(SkinSlot[playerid] == 0) return 1;
      SkinSlot[playerid]--;
      SetPlayerSkin(playerid, NewsSkins[SkinSlot[playerid]]);
      SetIntVar(playerid, "SkinChosen", NewsSkins[SkinSlot[playerid]]);
      OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
    }
    if(playertextid == WearButton[playerid])
    {
      new skin = GetIntVar(playerid, "SkinChosen");
      SetPlayerSkin(playerid, skin);
      SetCameraBehindPlayer(playerid);
      CancelSelectTextDraw(playerid);
      PlayerTextDrawHide(playerid, NextButton[playerid]);
      PlayerTextDrawHide(playerid, PrevButton[playerid]);
      PlayerTextDrawHide(playerid, WearButton[playerid]);
      PlayerTextDrawHide(playerid, Dusule1[playerid]);
      PlayerTextDrawHide(playerid, Dusule2[playerid]);
      PlayerTextDrawHide(playerid, Dusule3[playerid]);
      UnFreezePlayer(playerid);
      StopPlayerAnims(playerid);
    }
	}
	return 1;
}

public SetToCamera(playerid, objectid)
{
	PlayerSpec(playerid);
	AttachCameraToDynamicObject(playerid, objectid);
	return 1;
}

public StopGateSound(gate, soundid, Float:x, Float:y, Float:z)
{
	Gates[gate][gateOpening] = 0;
	foreach(Player, i)
	{
		if(PlayerToPoint(20.0, i, x, y ,z))
		{
			PlayerPlaySound(i, soundid+1, x, y, z);
		}
	}
	return 1;
}

public TollUpdate() // Needs to be called in the OnPlayerUpdate function
{
	for(new i = 0; i < MAX_TOLLS; i++)
	{
		if(aTolls[i][E_tOpenTime] > 0)
		{
			aTolls[i][E_tOpenTime]--;
			if(aTolls[i][E_tOpenTime] == 1)
			{
				Toll_CloseToll(i);
			}
		}
	}
}

Toll_CloseToll(TollID)
{
	if(TollID == RichmanToll)
	{
		SetDynamicObjectRot(L_a_TollObject[0], 0.000000, -90.000000, 23.81982421875);
		SetDynamicObjectRot(L_a_TollObject[1], 0.000000, -90.000000, 214.37744140625);
	}
	else if(TollID == FlintToll)
	{
		SetDynamicObjectRot(L_a_TollObject[2], 0.000000, -90.000000, 270.67565917969);
		SetDynamicObjectRot(L_a_TollObject[3], 0.000000, -90.000000, 87.337799072266);
	}
	else if(TollID == LVToll)
	{
		SetDynamicObjectRot(L_a_TollObject[4], 0.000000, -90.000000, 348.10229492188);
		SetDynamicObjectRot(L_a_TollObject[5], 0.000000, -90.000000, 169.43664550781);
	}
	else if(TollID == BlueberryTollR)
	{
		SetDynamicObjectRot(L_a_TollObject[6], 0.00000, -90.00000, 35.00000);
		SetDynamicObjectRot(L_a_TollObject[7], 0.00000, -90.00000, 215.92000);
	}
	else if(TollID == BlueberryTollL)
	{
		SetDynamicObjectRot(L_a_TollObject[8], 0.00000, -90.00000, -14.94000);
		SetDynamicObjectRot(L_a_TollObject[9], 0.00000, -90.00000, -195.00000);
	}
	return 1;
}

Toll_OpenToll(TollID)
{
	if(TollID == RichmanToll)
	{
		aTolls[RichmanToll][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[0], 0.000000, 0.000000, 23.81982421875);
		SetDynamicObjectRot(L_a_TollObject[1], 0.000000, 0.000000, 214.37744140625);
	}
	else if(TollID == FlintToll)
	{
		aTolls[FlintToll][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[2], 0.000000, 0.000000, 270.67565917969);
		SetDynamicObjectRot(L_a_TollObject[3], 0.000000, 0.000000, 87.337799072266);
	}
	else if(TollID == LVToll)
	{
		aTolls[LVToll][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[4], 0.000000, 0.000000, 348.10229492188);
		SetDynamicObjectRot(L_a_TollObject[5], 0.000000, 0.000000, 169.43664550781);
	}
	else if(TollID == BlueberryTollR)
	{
		aTolls[BlueberryTollR][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[6], 0.000000, 0.000000, 35.00000);
		SetDynamicObjectRot(L_a_TollObject[7], 0.000000, 0.000000, 215.92000);
	}
	else if(TollID == BlueberryTollL)
	{
		aTolls[BlueberryTollL][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[8], 0.000000, 0.000000, -14.94000);
		SetDynamicObjectRot(L_a_TollObject[9], 0.000000, 0.000000, -195.00000);
	}
}

Toll_TimePassedCivil(TollID, playerid) // People have to wait <TollDelayCivilian> seconds between every /opentoll on the same toll
{
	if(aTolls[TollID][E_tOpenTime] > 0)
	{
		SCM(playerid, COLOR_LIGHTRED, "The barrier is already open. Skip up closes!");
		return 0;
	}
	return 1;
}

Toll_TimePassedCops(playerid) // Cops have to wait for <TollDelayCop> seconds between every /toll (Global)
{
	new L_i_tick = GetUnixTime();
	if(L_a_RequestAllowedCop > L_i_tick && L_a_RequestAllowedCop != 0)
	{
		new TollString[63];
		format(TollString, 63, "You must wait at least %d seconds so you can make a change.", TollDelayCop);
		SCM(playerid, COLOR_LIGHTRED, TollString);
		return 0;
	}
	L_a_RequestAllowedCop = (L_i_tick + TollDelayCop);
	return 1;
}

public GetUnixTime()
{
	new Year, Month, Day,Hour,Minute,Second;
	getdate(Year, Month, Day);
	gettime(Hour,Minute,Second);
	return mktime(Hour,Minute,Second,Day,Month,Year);
}

public OnPlantInsert(plant)
{
	CropsInfo[plant][pID] = cache_insert_id();
}

public OnPlantsAdd()
{
	new rows, fields, total = 0;
	cache_get_data(rows, fields);
	if(rows)
	{
		while(total < rows)
		{
			CropsInfo[total][pID] = cache_get_row_int(total, 0);
			cache_get_row(total, 1, CropsInfo[total][pPlanter], dbHandle, 128);
			CropsInfo[total][pGrowTime] = cache_get_row_int(total, 2);
			CropsInfo[total][pX] = cache_get_row_float(total, 3);
			CropsInfo[total][pY] = cache_get_row_float(total, 4);
			CropsInfo[total][pZ] = cache_get_row_float(total, 5);
			CropsInfo[total][pMade] = cache_get_row_int(total, 6);
			CropsInfo[total][pPlanted] = 1;
			CropsInfo[total][pObject] = CreateDynamicObject(3409, CropsInfo[total][pX], CropsInfo[total][pY], CropsInfo[total][pZ], 0.0, 0.0, 0.0, -1, -1, -1, 200.0);
			format(msg, sizeof(msg), ""EMBED_YELLOW"THE PLANT: %d MINUTES\nPRODUCT: %d", CropsInfo[total][pGrowTime], CropsInfo[total][pMade]);
			CropsInfo[total][pLabel] = CreateDynamic3DTextLabel(msg, -1, CropsInfo[total][pX], CropsInfo[total][pY], CropsInfo[total][pZ]+2.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			total++;
		}
	}
	format(msg, sizeof(msg), "Loaded %d plants from MySQL.", total);
	printf(msg);
}

public OnScriptUpdate()
{		
	foreach(Player, i) {
		new pPing = GetPlayerPing(i);
		new Float:pPacket = GetPlayerPacketLoss(i);
		new iString[128];
		format(iString,sizeof(iString),"~w~~h~~h~Ping ~r~~h~~h~%d			~w~~h~~h~PacketLoss ~r~~h~~h~%.1f%%", pPing, pPacket);
		PlayerTextDrawSetString(i, FPSPingPacket[i], iString);
		
		// Clock
		new string[128], Day, Month, Year, thour, tmin, tsec;
		getdate(Year, Month, Day);
		gettime(thour, tmin, tsec);
		format(string, sizeof(string), "%02d/%02d/%d~n~%02d:%02d:%02d", Day, Month, Year, thour, tmin, tsec);
		TextDrawSetString(TimeTD[i], string);
	}
}

stock Float:GetPlayerPacketLoss(playerid)
{
    new stats[401], stringstats[70];
    GetPlayerNetworkStats(playerid, stats, sizeof(stats));
    new len = strfind(stats, "Packetloss: ");
    new Float:packetloss = 0.0;
    if(len != -1) {
        strmid(stringstats, stats, len, strlen(stats));
        new len2 = strfind(stringstats, "%");
        if(len != -1) {
            strdel(stats, 0, strlen(stats));
            strmid(stats, stringstats, len2-3, len2);
            packetloss = floatstr(stats);
		}
    }
    return packetloss;
}

public Zones_Update()
{
	new zone[MAX_ZONE_NAME], string[30];
	for(new i=0; i<MAX_PLAYERS; i++){
		GetPlayer2DZone(i, zone, MAX_ZONE_NAME);
		format(string,sizeof(string),"%s", zone);
		TextDrawSetString(Zones[i], string);
		//TextDrawShowForPlayer(i, Zones[i]);
	}
	return 1;
}
/* =================== Publics =================== */
/* =================== Dialogs =================== */
Dialog:DIALOG_SELECT(playerid, response, listitem, inputtext[])
{
        if(response)
        {
            switch(listitem)
            {
                case 0: GRAFFINPUT
                case 1:
				{
				    	new string[ 500 ];
//						new PickupD = nGraffiti();
						//for(new ID = 0; ID < 30; ID++)
		    			new d[96];
    					format(d, sizeof(d),"List");
   						new stringz[128];
						new c;
						for(new ID = 0; ID < gammount; ID++)
						{
							c = strlen(gInfo[ID][graffname]);
                            format(stringz, sizeof(stringz),"/Graffitis/%d.ini",ID);
							if( c > 1 && fexist(stringz))
							{
								format(string, sizeof(string), "%s\nName: %s "COL_ORANGE"(%d) (Creator: %s)\n",string, gInfo[ID][graffname], ID,gInfo[ID][graffcreator]);
								ShowPlayerDialog(playerid,DIALOG_LIST,DIALOG_STYLE_LIST,d,string,"Delete","Cancel");
							}
						}
				}
            }
        }
	    else return GameTextForPlayer(playerid, "] Menu locked [",5000, 5);
        return 1; // We handled a dialog, so return 1. Just like OnPlayerCommandText.
}
Dialog:DIALOG_LIST(playerid, response, listitem, inputtext[])
{
        if(response) // If they clicked 'Select' or double-clicked a weapon
        {
            new id = listitem;
           	new string[128];
			format(string, sizeof(string),"/Graffitis/%d.ini",id);
			if(!IsPlayerAdmin(playerid)) return GameTextForPlayer( playerid, "~r~You are not authorized \nto remove graffiti!]",10000,5);
			if(!fexist(string))
			{
			format(string,sizeof(string),"~y~]~r~Something has happened, try again~y~]",id);
			GameTextForPlayer(playerid, string,7000,3);
			return 1;
			}
    		fremove(string);
    		format(string,sizeof(string),"~y~]~g~Graffiti ~r~%d ~g~You've successfully removed!~y~]",id);
    		GameTextForPlayer(playerid, string,7000,3);
    		DestroyDynamicObject( gInfo[id][OBJECTID] );


        }
        else return GRAFFDIALOG
        return 1; // We handled a dialog, so return 1. Just like OnPlayerCommandText.
}
Dialog:DIALOG_COLOR(playerid, response, listitem, inputtext[])
{
        if(response) // If they clicked 'Select' or double-clicked a weapon
        {

            switch(listitem)
            {

                case 0: POBJECTC[playerid] = "000000";// BLACK

                case 1: POBJECTC[playerid] = "FFFFFF"; // WHITE

                case 2: POBJECTC[playerid] = "F81414"; // RED

                case 3: POBJECTC[playerid] = "00FF22"; // GREEN

                case 4: POBJECTC[playerid] = "00CED1"; // LIGHTBLUE

                case 5: POBJECTC[playerid] = "C3C3C3";  // GREY


            }
   			new string2[96];
			format(string2, sizeof(string2),"{%s} %s",POBJECTC[playerid],POBJECTN[playerid]);
   			POBJECTN[playerid] = string2;
            //startgraff(playerid);
            GRAFFFONT

        }
        else return GRAFFINPUT
        return 1; // We handled a dialog, so return 1. Just like OnPlayerCommandText.
}
Dialog:DIALOG_FONT(playerid, response, listitem, inputtext[])
{
        if(response) // If they clicked 'Select' or double-clicked a weapon
        {

            switch(listitem)
            {

                case 0: format(POBJECTF[playerid], 50, "Comic Sans");
				//POBJECTF[playerid] = "Comic Sans";

                case 1: format(POBJECTF[playerid], 50, "LeviBrush");

                case 2: format(POBJECTF[playerid], 50, "Dripping");

                case 3: format(POBJECTF[playerid], 50, "Diploma");


            }
            startgraff(playerid);



        }
        else return GRAFFINPUT
        return 1; // We handled a dialog, so return 1. Just like OnPlayerCommandText.
}
Dialog:DIALOG_HAPPY(playerid, response, listitem, inputtext[])
{
        if(response) // If they clicked 'Yes' or pressed enter
        {
            startgraff(playerid);
        }
        else // Pressed ESC or clicked cancel
        {
			GRAFFINPUT
        }
        return 1; // We handled a dialog, so return 1. Just like OnPlayerCommandText.
}
Dialog:DIALOG_INPUTGRAFF(playerid, response, listitem, inputtext[])
{
        if(!response) return GRAFFDIALOG

       	if(isnull(inputtext)) return GRAFFINPUTER
       	else
       	{
       	    new string[96];
       	    format(string, sizeof(string),"%s",inputtext);
       	    POBJECTN[playerid] = string;
       	    sprayammountch[playerid] = strlen(string); // All characters input counted
       	    GRAFFCOLOR
		}


        return 1; // We handled a dialog, so return 1. Just like OnPlayerCommandText.
}
Dialog:AdminTeles(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		PutPlayer(playerid, HouseInteriors[listitem][aPosX], HouseInteriors[listitem][aPosY], HouseInteriors[listitem][aPosZ]);
		SetInterior(playerid, HouseInteriors[listitem][aInterior]);
	}
	else
	{
		SCM(playerid, -1, "You've canceled the admin teleport(s) menu.");
	}
	return 1;
}

Dialog:ShowVehicles(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		PutPlayer(playerid, CityVehicles[listitem+1][vPosX], CityVehicles[listitem+1][vPosY], CityVehicles[listitem+1][vPosZ]+2);
		SCM(playerid, -1, "Teleported");
	}
	else
	{
		SCM(playerid, -1, "You've canceled the admin vehicle(s) menu.");
	}
	return 1;
}

Dialog:ShowPlants(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		PutPlayer(playerid, CropsInfo[listitem][pX], CropsInfo[listitem][pY], CropsInfo[listitem][pZ]+3.0);
		SCM(playerid, -1, "You have been teleported.");
	}
	else
	{
		SCM(playerid, -1, "You've canceled the admin plant(s) menu.");
	}
	return 1;
}

Dialog:ShowATMS(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		PutPlayer(playerid, ATMInfo[listitem][atmPosX], ATMInfo[listitem][atmPosY], ATMInfo[listitem][atmPosZ]);
		SetInterior(playerid, ATMInfo[listitem][atmInterior]);
		SCM(playerid, -1, "You have been teleported.");
	}
	else
	{
		SCM(playerid, -1, "You've canceled the admin ATM(s) menu.");
	}
	return 1;
}
Dialog:ShowFoodStalls(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		PutPlayer(playerid, FoodStand[listitem][fPosX], FoodStand[listitem][fPosY], FoodStand[listitem][fPosZ]);
		SCM(playerid, -1, "You have been teleported.");
	}
	else
	{
		SCM(playerid, -1, "You've canceled the admin food stall(s) menu.");
	}
	return 1;
}

Dialog:ShowStations(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		PutPlayer(playerid, GasStation[listitem][gPosX], GasStation[listitem][gPosY], GasStation[listitem][gPosZ]);
		SCM(playerid, -1, "You have been teleported.");
	}
	else
	{
		SCM(playerid, -1, "You've canceled the admin gas station(s) menu.");
	}
	return 1;
}

Dialog:ShowParkMeters(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		PutPlayer(playerid, ParkMeters[listitem][parkPosX], ParkMeters[listitem][parkPosY], ParkMeters[listitem][parkPosZ]+1);
		SCM(playerid, -1, "Teleported");
	}
	else
	{
		SCM(playerid, -1, "You've canceled the admin park meter(s) menu.");
	}
	return 1;
}

Dialog:ShowInfos(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		PutPlayer(playerid, CPTInfo[listitem][cPosX], CPTInfo[listitem][cPosY], CPTInfo[listitem][cPosZ]);
		SetWorld(playerid, CPTInfo[listitem][cVirtualWorld]);
		SCM(playerid, -1, "Teleported");
	}
	else
	{
		SCM(playerid, -1, "You've canceled the admin info(s) menu.");
	}
	return 1;
}

Dialog:ShowDealerships(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		PutPlayer(playerid, DealersInfo[listitem][dealerPosX], DealersInfo[listitem][dealerPosY], DealersInfo[listitem][dealerPosZ]);
		SCM(playerid, -1, "Teleported");
	}
	else
	{
		SCM(playerid, -1, "You've canceled the admin dealer(s) menu.");
	}
	return 1;
}

Dialog:ShowBanks(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		PutPlayer(playerid, BankInfo[listitem][bPosX], BankInfo[listitem][bPosY], BankInfo[listitem][bPosZ]);
		SetInterior(playerid, BankInfo[listitem][bInterior]);
		SCM(playerid, -1, "Teleported");
	}
	else
	{
		SCM(playerid, -1, "You've canceled the admin bank(s) menu.");
	}
	return 1;
}

Dialog:ChangeFight(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				format(msg, sizeof(msg), "AdmCmd: %s changed %s fighting style to Normal.", GetNameEx(playerid), GetNameEx(GetIntVar(playerid, "ChangeFightTo")));
				AMSG(COLOR_LIGHTRED, msg);
				format(msg, sizeof(msg), "Your style of fighting was changed to Normal by %s.", GetNameEx(playerid));
				SCM(GetIntVar(playerid, "ChangeFightTo"), COLOR_LIGHTRED, msg);
				SetFightStyle(GetIntVar(playerid, "ChangeFightTo"), F_NORMAL);
				RemoveVar(playerid, "ChangeFightTo");
			}
			case 1:
			{
				format(msg, sizeof(msg), "AdmCmd: %s changed %s fighting style to Boxing.", GetNameEx(playerid), GetNameEx(GetIntVar(playerid, "ChangeFightTo")));
				AMSG(COLOR_LIGHTRED, msg);
				format(msg, sizeof(msg), "Your style of fighting was changed to Boxing by %s.", GetNameEx(playerid));
				SCM(GetIntVar(playerid, "ChangeFightTo"), COLOR_LIGHTRED, msg);
				SetFightStyle(GetIntVar(playerid, "ChangeFightTo"), F_BOXING);
				RemoveVar(playerid, "ChangeFightTo");
			}
			case 2:
			{
				format(msg, sizeof(msg), "AdmCmd: %s changed %s fighting style to KungFu.", GetNameEx(playerid), GetNameEx(GetIntVar(playerid, "ChangeFightTo")));
				AMSG(COLOR_LIGHTRED, msg);
				format(msg, sizeof(msg), "Your style of fighting was changed to KungFu by %s.", GetNameEx(playerid));
				SCM(GetIntVar(playerid, "ChangeFightTo"), COLOR_LIGHTRED, msg);
				SetFightStyle(GetIntVar(playerid, "ChangeFightTo"), F_KUNGFU);
				RemoveVar(playerid, "ChangeFightTo");
			}
			case 3:
			{
				format(msg, sizeof(msg), "AdmCmd: %s changed %s fighting style to KneeHead.", GetNameEx(playerid), GetNameEx(GetIntVar(playerid, "ChangeFightTo")));
				AMSG(COLOR_LIGHTRED, msg);
				format(msg, sizeof(msg), "Your style of fighting was changed to KneeHead by %s.", GetNameEx(playerid));
				SCM(GetIntVar(playerid, "ChangeFightTo"), COLOR_LIGHTRED, msg);
				SetFightStyle(GetIntVar(playerid, "ChangeFightTo"), F_KNEEHEAD);
				RemoveVar(playerid, "ChangeFightTo");
			}
			case 4:
			{
				format(msg, sizeof(msg), "AdmCmd: %s changed %s fighting style to GrabKick.", GetNameEx(playerid), GetNameEx(GetIntVar(playerid, "ChangeFightTo")));
				AMSG(COLOR_LIGHTRED, msg);
				format(msg, sizeof(msg), "Your style of fighting was changed to GrabKick by %s.", GetNameEx(playerid));
				SCM(GetIntVar(playerid, "ChangeFightTo"), COLOR_LIGHTRED, msg);
				SetFightStyle(GetIntVar(playerid, "ChangeFightTo"), F_GRABKICK);
				RemoveVar(playerid, "ChangeFightTo");
			}
			case 5:
			{
				format(msg, sizeof(msg), "AdmCmd: %s changed %s fighting style to Elbow.", GetNameEx(playerid), GetNameEx(GetIntVar(playerid, "ChangeFightTo")));
				AMSG(COLOR_LIGHTRED, msg);
				format(msg, sizeof(msg), "Your style of fighting was changed to Elbow by %s.", GetNameEx(playerid));
				SCM(GetIntVar(playerid, "ChangeFightTo"), COLOR_LIGHTRED, msg);
				SetFightStyle(GetIntVar(playerid, "ChangeFightTo"), F_ELBOW);
				RemoveVar(playerid, "ChangeFightTo");
			}
		}
	}
	else
	{
		SCM(playerid, -1, "You have cancelled the fight style changes menu..");
	}
	return 1;
}

Dialog:CopFines(playerid, response, listitem, inputtext[])
{
  if(response)
  {
    new string[255],string2[255],string3[255];
    format(string, sizeof(string), "{A9C4E4}Agency: \t\t {98A4B3}%s", FineInfo[listitem][fineAgency]);
    format(string3, sizeof(string3), "\n{A9C4E4}Addressed: \t\t {98A4B3}%s\n{A9C4E4}Policeman: \t\t {98A4B3}%s", GetNameEx(FinesID), FineInfo[listitem][fineCop]);
    strcat(string,string3);
    format(string2, sizeof(string2), "\n\n{A9C4E4}Price: \t\t\t {98A4B3}$%d\n{A9C4E4}For:\t\t\t {98A4B3}%s", FineInfo[listitem][finePrice], FineInfo[listitem][fineReason]);
    strcat(string, string2);
    ShowDialog(playerid,Show:<CopFines>,DIALOG_STYLE_MSGBOX,"Fine Details",string,"Close","");
  }
  return 1;
}

Dialog:PlayerFines(playerid, response, listitem, inputtext[])
{
  if(response)
  {
    if(!PlayerToPoint(10.0, playerid, 362.2117,173.5344,1008.3828)) return SCM(playerid, COLOR_YELLOWG, "You're not at City Hall.");
    if(GetCash(playerid) < FineInfo[listitem][finePrice]) return SCM(playerid,COLOR_GREY,"You don't have enough money for the payment of this fine!");
    PlayerInfo[playerid][pFines] -= 1;
    GiveCash(playerid, -FineInfo[listitem][finePrice]);
    SCMEx(playerid, COLOR_WHITE, "[!] You paid a fine #%d, amount paid: $%d", FineInfo[listitem][fineID], FineInfo[listitem][finePrice]);
    format(query, sizeof(query), "DELETE FROM `fines` WHERE `ID` = %d", FineInfo[listitem][fineID]);
    mysql_function_query(dbHandle, query, true, "","");
  }
  else{
    new string[255],string2[255],string3[255];
    format(string, sizeof(string), "{A9C4E4}Agency: \t\t {98A4B3}%s", FineInfo[listitem][fineAgency]);
    format(string3, sizeof(string3), "\n{A9C4E4}Addressed: \t\t {98A4B3}%s\n{A9C4E4}Policeman: \t\t {98A4B3}%s", GetNameEx(playerid), FineInfo[listitem][fineCop]);
    strcat(string,string3);
    format(string2, sizeof(string2), "\n\n{A9C4E4}Price: \t\t\t {98A4B3}$%d\n{A9C4E4}For:\t\t\t {98A4B3}%s", FineInfo[listitem][finePrice], FineInfo[listitem][fineReason]);
    strcat(string, string2);
    ShowDialog(playerid,Show:<PlayerFines>,DIALOG_STYLE_MSGBOX,"Fine Details",string,"Close","");
  }
  return 1;
}

Dialog:AdminComplex(playerid, response, listitem, inputtext[])
{
  if(response)
  {
    PutPlayer(playerid, ComplexInfo[listitem][cxEnterX], ComplexInfo[listitem][cxEnterY], ComplexInfo[listitem][cxEnterZ]);
    SCM(playerid, -1, "You have been teleported successfully.");
  }
  else
  {
    SCM(playerid, -1, "You've canceled the admin complex(s) menu.");
  }
  return 1;
}

Dialog:AdminDoors(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		PutPlayer(playerid, DoorInfo[listitem][dEnterX], DoorInfo[listitem][dEnterY], DoorInfo[listitem][dEnterZ]);
		SetInterior(playerid, DoorInfo[listitem][dEnterInterior]);
		SCM(playerid, -1, "You have been teleported successfully.");
	}
	else
	{
		SCM(playerid, -1, "You've canceled the admin door(s) menu.");
	}
	return 1;
}

Dialog:AdminFactionDoors(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		PutPlayer(playerid, FactionDoors[listitem][dEnterX], FactionDoors[listitem][dEnterY], FactionDoors[listitem][dEnterZ]);
		SetInterior(playerid, FactionDoors[listitem][dEnterInterior]);
		SCM(playerid, -1, "You have been teleported successfully.");
	}
	else
	{
		SCM(playerid, -1, "You've canceled the admin faction door(s) menu.");
	}
	return 1;
}

Dialog:AdminBusinesses(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		PutPlayer(playerid, BizInfo[listitem][bizPosX], BizInfo[listitem][bizPosY], BizInfo[listitem][bizPosZ]);
		SCM(playerid, -1, "You have been teleported successfully.");
	}
	else
	{
		SCM(playerid, -1, "You've canceled the admin business(s) menu.");
	}
	return 1;
}

Dialog:Secret(playerid, response, listitem, inputtext[])
{
	new escsecret[100];
    if (response)
    {
		if(isnull(inputtext))
		{
			ShowDialog(playerid, Show:<Secret>, DIALOG_STYLE_INPUT, ""EMBED_YELLOW"Registration"EMBED_WHITE"", ""EMBED_WHITE"To play you must enter the secret word below.\n("EMBED_BLUE"You can save somewhere on your Desktop"EMBED_WHITE")", "Continue", "Quit");
			return 1;
		}
		if(strlen(inputtext) <= 6)
		{
			ShowDialog(playerid, Show:<Secret>, DIALOG_STYLE_INPUT, ""EMBED_YELLOW"Registration"EMBED_WHITE"", ""EMBED_WHITE"To play you must enter the secret word below, in case you lose your password.\nPlease write more than 6 letters.\n("EMBED_BLUE"Write this down in your computer"EMBED_WHITE")", "Continue", "Quit");
			return 1;
		}
		mysql_real_escape_string(inputtext, escsecret);
		InsertPlayerSecretWord(playerid, escsecret);
    }
    else
    {
		LeftServerMSG(playerid);
		Kick(playerid);
    }
	return 1;
}
Dialog:RentQueue(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		ShowRentCars(playerid);
	}
	else
	{
		SCM(playerid, COLOR_GREEN, "You refused so the contract has been terminated.");
	}
	return 1;
}
Dialog:Sex(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		//Choosed MALE:
		PlayerInfo[playerid][pSex] = 1;
		SetIntVar(playerid, "RegisterPart", 4);
		ShowDialog(playerid, Show:<Age>, DIALOG_STYLE_INPUT, ""EMBED_YELLOW"Registration"EMBED_WHITE"", "What is the age of your character?", "Continue", "Quit");
	}
	else
	{
		//Choosed FEMALE:
		PlayerInfo[playerid][pSex] = 2;
		SetIntVar(playerid, "RegisterPart", 4);
		ShowDialog(playerid, Show:<Age>, DIALOG_STYLE_INPUT, ""EMBED_YELLOW"Registration"EMBED_WHITE"", "What is the age of your character?", "Continue", "Quit");
	}
	return 1;
}

Dialog:Age(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(isnull(inputtext)) return ShowDialog(playerid, Show:<Age>, DIALOG_STYLE_INPUT, ""EMBED_YELLOW"Registration"EMBED_WHITE"", "What is the age of your character?", "Continue", "Quit");
		new age = strvalEx(inputtext);
		if(age < 16 || age > 90)
		{
			ShowDialog(playerid, Show:<Age>, DIALOG_STYLE_INPUT, ""EMBED_YELLOW"Registration"EMBED_WHITE"", "What is the age of your character? ("EMBED_BLUE"Between 16-90"EMBED_WHITE")", "Continue", "Quit");
			return 0;
		}
		PlayerInfo[playerid][pAge] = age;
		SetIntVar(playerid, "RegisterPart", 5);
		format(msg, sizeof(msg), "{AFAFAF}SERVER:{FFFFFF} Your age is: %d.",age);
		SCM(playerid, COLOR_WHITE, msg);
		SCM(playerid, COLOR_NICEBLUE, "What is your origin? (Asian, African-American, Caucasian, Latino)");
		ShowDialog(playerid, Show:<Origin>, DIALOG_STYLE_LIST, "Choose your origin:", "Asiatic(a)\nAfrican-American(a)\nCaucasian(a)\nLatino", "Before", "Exit");
	}
	else
	{
		LeftServerMSG(playerid);
		Kick(playerid);
		return 1;
	}
	return 1;
}

Dialog:Withdraw(playerid, response, listitem, inputtext[])
{
    if (response)
    {
		if(isnull(inputtext)) return ShowDialog(playerid, Show:<Withdraw>, DIALOG_STYLE_INPUT, "Withdraw", "Enter the amount you wish to withdraw", "Continue", "Cancel");
		new amount = strvalEx(inputtext);
		if (amount > GetBankCash(playerid) || amount < 1) return SCM(playerid, COLOR_GRAD2, "[INFO]: You do not have this amount of money.");
		GiveCash(playerid,amount);
		GiveBankCash(playerid, -amount);
		format(msg, sizeof(msg), "[INFO]: You have withdrawn $%d from your bank account. Current balance: $%d ", amount,GetBankCash(playerid));
		SCM(playerid, COLOR_YELLOWG, msg);
    }
    else
    {
		ServerMSG(playerid, "You have canceled the dialogue.");
    }
    return 1;
}

Dialog:Deposit(playerid, response, listitem, inputtext[])
{
    if (response)
    {
		if(isnull(inputtext)) return ShowDialog(playerid, Show:<Deposit>, DIALOG_STYLE_INPUT, "Deposit money", "Enter an amount to deposit money into your account", "Continue", "Cancel");
		new amount = strvalEx(inputtext);
		if (amount > GetCash(playerid) || amount < 1) return SCM(playerid, COLOR_GRAD2, "[Bank]: You don't have that money.");
		GiveCash(playerid,-amount);
		SCM(playerid, COLOR_WHITE, "|___ BANK STATMENT ___|");
		format(msg, sizeof(msg), "  Old balance: $%d", GetBankCash(playerid));
		SCM(playerid, COLOR_YELLOWG, msg);
		GiveBankCash(playerid, amount);
		format(msg, sizeof(msg), "  You deposited: $%d",amount);
		SCM(playerid, COLOR_YELLOWG, msg);
		format(msg, sizeof(msg), "  New balance: $%d", GetBankCash(playerid));
		SCM(playerid, COLOR_WHITE, msg);
		SCM(playerid, COLOR_WHITE, "|-----------------------------------------|");
    }
    else
    {
		ServerMSG(playerid, "You have canceled to take money from the bank.");
    }
    return 1;
}

Dialog:ATMDialog(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
       			ShowDialog(playerid, Show:<Withdraw>, DIALOG_STYLE_INPUT, "Withdraw", "Enter the amount you wish to withdraw from the account", "Continua", "Cancel");
			}
			case 1:
			{
			    format(msg, sizeof(msg), "[INFO]: Your bank account balance is $%d .", PlayerInfo[playerid][pBank]);
				SCM(playerid, COLOR_YELLOWG, msg);
			}
		}
	}
	return 1;
}

Dialog:Origin(playerid, response, listitem, inputtext[])
{
	new date[3];
	getdate(date[0], date[1], date[2]);
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				format(PlayerInfo[playerid][pOrigin],256,"Asiatic");
				SetIntVar(playerid, "RegisterPart", 6);
				format(msg, sizeof(msg), "{AFAFAF}SERVER{FFFFFF}: You set your character's age to %d (born in %d)", PlayerInfo[playerid][pAge], date[0] - PlayerInfo[playerid][pAge]);
				SCM(playerid, COLOR_WHITE, msg);
				SetTimerEx("RegSkinMenu",5000,0,"d",playerid);
				SCM(playerid, COLOR_GREEN, "{AFAFAF}SERVER{FFFFFF}: Please wait untill the account setup...");
			}
			case 1:
			{
				format(PlayerInfo[playerid][pOrigin],256,"Afro-American");
				SetIntVar(playerid, "RegisterPart", 6);
				format(msg, sizeof(msg), "{AFAFAF}SERVER{FFFFFF}: You set your character's age to %d (born in %d)", PlayerInfo[playerid][pAge], date[0] - PlayerInfo[playerid][pAge]);
				SCM(playerid, COLOR_WHITE, msg);
				SetTimerEx("RegSkinMenu",5000,0,"d",playerid);
				SCM(playerid, COLOR_GREEN, "{AFAFAF}SERVER{FFFFFF}: Please wait untill the account setup...");
			}
			case 2:
			{
				format(PlayerInfo[playerid][pOrigin],256,"Caucasian");
				SetIntVar(playerid, "RegisterPart", 6);
				format(msg, sizeof(msg), "{AFAFAF}SERVER{FFFFFF}: You set your character's age to %d (born in %d)", PlayerInfo[playerid][pAge], date[0] - PlayerInfo[playerid][pAge]);
				SCM(playerid, COLOR_WHITE, msg);
				SetTimerEx("RegSkinMenu",5000,0,"d",playerid);
				SCM(playerid, COLOR_GREEN, "{AFAFAF}SERVER{FFFFFF}: Please wait untill the account setup...");
			}
			case 3:
			{
				format(PlayerInfo[playerid][pOrigin],256,"Latino");
				SetIntVar(playerid, "RegisterPart", 6);
				format(msg, sizeof(msg), "{AFAFAF}SERVER{FFFFFF}: You set your character's age to %d (born in %d)", PlayerInfo[playerid][pAge], date[0] - PlayerInfo[playerid][pAge]);
				SCM(playerid, COLOR_WHITE, msg);
				SetTimerEx("RegSkinMenu",5000,0,"d",playerid);
				SCM(playerid, COLOR_GREEN, "{AFAFAF}SERVER{FFFFFF}: Please wait untill the account setup...");
			}
		}
	}
	else
	{
		LeftServerMSG(playerid);
		Kick(playerid);
		return 1;
	}
	return 1;
}
Dialog:Register(playerid, response, listitem, inputtext[])
{
    if (response)
    {
		if(isnull(inputtext))
		{
			format(msg, sizeof(msg), ""EMBED_WHITE"Welcome to "ServerName".\nYou must enter your password to login! ("EMBED_GREEN"More than 6 letters!"EMBED_WHITE")"EMBED_WHITE"");
			ShowDialog(playerid, Show:<Register>, DIALOG_STYLE_INPUT, ""EMBED_YELLOW"Registration"EMBED_WHITE"", msg, "Register", "Quit");
			return 1;
		}
		if(strlen(inputtext) <= 6)
		{
			format(msg, sizeof(msg), ""EMBED_WHITE"Welcome to "ServerName".\nYou must enter your password to login! ("EMBED_GREEN"More than 6 letters!"EMBED_WHITE")"EMBED_WHITE"");
			ShowDialog(playerid, Show:<Register>, DIALOG_STYLE_INPUT, ""EMBED_YELLOW"Registration"EMBED_WHITE"", msg, "Register", "Quit");
			return 1;
		}
		new escpass[100];
		mysql_real_escape_string(inputtext, escpass);
		CreatePlayerAccount(playerid, escpass);
    }
    else
    {
		LeftServerMSG(playerid);
		Kick(playerid);
    }
    return 1;
}

Dialog:Login(playerid, response, listitem, inputtext[])
{
    if (response)
    {
		if(isnull(inputtext))
		{
			format(msg, sizeof(msg), "Please enter your password:");
			ShowDialog(playerid, Show:<Login>, DIALOG_STYLE_PASSWORD, "Login", msg, "Login", "Quit");
			return 1;
		}
		new escapedPlayerName[MAX_PLAYER_NAME], escapepass[100];
		mysql_real_escape_string(inputtext, escapepass);
		mysql_real_escape_string(GetName(playerid), escapedPlayerName);

		format(query, sizeof(query), "SELECT * FROM `users` WHERE `name` = '%s' AND `password` = '%s' LIMIT 0,1", escapedPlayerName, escapepass);
		mysql_function_query(dbHandle, query, true, "LoginPlayer", "i", playerid);
    }
    else
    {
		LeftServerMSG(playerid);
		Kick(playerid);
    }
    return 1;
}

Dialog:ConfirmWord(playerid, response, listitem, inputtext[])
{
    if (response)
    {
		if(isnull(inputtext))
		{
			ShowDialog(playerid, Show:<ConfirmWord>, DIALOG_STYLE_INPUT, ""EMBED_RED"Confirm secret word"EMBED_WHITE"", ""EMBED_WHITE"This IP is also not as was originally on this account, please enter secret word.", "Okay", "Exit");
			return 1;
		}
		new escapedPlayerName[MAX_PLAYER_NAME], escapesecret[100];
		mysql_real_escape_string(inputtext, escapesecret);
		mysql_real_escape_string(GetName(playerid), escapedPlayerName);
		format(query, sizeof(query), "SELECT * FROM `users` WHERE `name` = '%s' AND `secret` = '%s' LIMIT 0,1", escapedPlayerName, escapesecret);
		mysql_function_query(dbHandle, query, true, "CheckSecretWord", "i", playerid);
    }
    else
    {
		Kick(playerid);
    }
    return 1;
}


Dialog:ChangePass(playerid, response, listitem, inputtext[])
{
    if (response)
    {
		if(isnull(inputtext))
		{
			ShowDialog(playerid, Show:<ChangePass>, DIALOG_STYLE_INPUT, ""EMBED_RED"Confirm secret word"EMBED_WHITE"", "Please enter secret word with which you registered!", "Change", "Exit");
			return 1;
		}
		new escapedPlayerName[MAX_PLAYER_NAME], escapesecret[100];
		mysql_real_escape_string(inputtext, escapesecret);
		mysql_real_escape_string(GetName(playerid), escapedPlayerName);
		format(query, sizeof(query), "SELECT * FROM `users` WHERE `name` = '%s' AND `secret` = '%s' LIMIT 0,1", escapedPlayerName, escapesecret);
		mysql_function_query(dbHandle, query, true, "OnPlayerChangePass", "i", playerid);
    }
    else
    {
		ServerMSG(playerid, "You've canceled the password changing.");
    }
    return 1;
}

Dialog:ChangeSecret(playerid, response, listitem, inputtext[])
{
    if (response)
    {
		if(isnull(inputtext))
		{
			ShowDialog(playerid, Show:<ChangeSecret>, DIALOG_STYLE_INPUT, ""EMBED_RED"Confirm secret word"EMBED_WHITE"", ""EMBED_WHITE"Please enter the current secret word with which you registered.", "Change", "Exit");
			return 1;
		}
		new escapedPlayerName[MAX_PLAYER_NAME], escapesecret[100];
		mysql_real_escape_string(inputtext, escapesecret);
		mysql_real_escape_string(GetName(playerid), escapedPlayerName);
		format(query, sizeof(query), "SELECT * FROM `users` WHERE `name` = '%s' AND `secret` = '%s' LIMIT 0,1", escapedPlayerName, escapesecret);
		mysql_function_query(dbHandle, query, true, "OnPlayerChangeSecret", "i", playerid);
    }
    else
    {
		ServerMSG(playerid, "You've canceled the secret word changing.");
    }
    return 1;
}
Dialog:DmvDialog(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
			    if(PlayerInfo[playerid][pCarLic])
			    {
			        SCM(playerid,COLOR_LIGHTBLUE,"You already have a driving license type B.");
				}
				else
				{
				    SCM(playerid,COLOR_LIGHTBLUE,"Climb into a Primo and follows the checkpoint to receive a license type B.");
				    CarLicDmv[playerid] = 1;
				}
			}
            case 1:
			{
       			if(PlayerInfo[playerid][pTaxiLic])
			    {
			        SCM(playerid,COLOR_LIGHTBLUE,"You already have a driving license type C.");
				}
				else
				{
				    PlayerInfo[playerid][pTaxiLic] = 1;
				    GivePlayerMoney(playerid, -1500);
				    SCM(playerid,COLOR_YELLOWG,"You bought a taxi license.");
				}
			}
			case 2:
			{
			    if(PlayerInfo[playerid][pFlyLic])
			    {
			        SCM(playerid,COLOR_LIGHTBLUE,"You already have a pilot license.");
				}
				else
				{
				    SCM(playerid,COLOR_LIGHTBLUE,"Go to checkpoint-set on the map to give the test.");
				    FlyLicDmv[playerid] = 1;
				    SetCheckPoint(playerid, COMPSPOT, 1766.4457, -2282.8083, 26.7717, 10.0);
				}
			}
		}
	}
}
Dialog:SpawnAdminVehicle(playerid, response, listitem, inputtext[])
{
    if (response)
    {
		new modelcolor = strval(inputtext);
		if(isnull(inputtext)) return ShowDialog(playerid, Show:<SpawnAdminVehicle>, DIALOG_STYLE_INPUT, ""EMBED_RED"Select the vehicle color."EMBED_WHITE"", ""EMBED_WHITE"The color must be betweem (0-255)!", "Spawn", "Exit");
		if(modelcolor > 255 || modelcolor < 0) return ShowDialog(playerid, Show:<SpawnAdminVehicle>, DIALOG_STYLE_INPUT, ""EMBED_RED"Select the vehicle color."EMBED_WHITE"", ""EMBED_WHITE"The color must be betweem (0-255)!", "Spawn", "Exit");
		CreateVehicle(GetIntVar(playerid, "cModel"), GetFloatVar(playerid, "cPosX"), GetFloatVar(playerid, "cPosY")-3, GetFloatVar(playerid, "cPosZ"), GetFloatVar(playerid, "cPosA"), modelcolor, modelcolor, -1);
		RemoveVar(playerid, "cModel");
		RemoveVar(playerid, "cPosX");
		RemoveVar(playerid, "cPosY");
		RemoveVar(playerid, "cPosZ");
		RemoveVar(playerid, "cPosA");
    }
    else
    {
		ServerMSG(playerid, "You've canceled the vehicle selecting.");
    }
    return 1;
}

Dialog:SpawnAdminWeapon(playerid, response, listitem, inputtext[])
{
    if (response)
    {
		new ammo = strval(inputtext);
		if(isnull(inputtext)) return ShowDialog(playerid, Show:<SpawnAdminWeapon>, DIALOG_STYLE_INPUT, ""EMBED_RED"Please enter the ammo quantity."EMBED_WHITE"", ""EMBED_WHITE"How much ammo would you like to get?", "GetGun", "Exit");
		if(ammo < 0) return ShowDialog(playerid, Show:<SpawnAdminWeapon>, DIALOG_STYLE_INPUT, ""EMBED_RED"Please enter the ammo quantity."EMBED_WHITE"", ""EMBED_WHITE"How much ammo would you like to get?", "GetGun", "Exit");
		GiveWeapon(playerid, GetIntVar(playerid, "SelectingWeapon"), ammo);
		format(msg, sizeof(msg), "AdmCmd: %s gave him a gun %s, Ammo: %d", GetNameEx(playerid), GetWeaponNameEx(GetIntVar(playerid, "SelectingWeapon")), ammo);
		AMSG(COLOR_LIGHTRED, msg);
		RemoveVar(playerid, "SelectingWeapon");
    }
    else
    {
		ServerMSG(playerid, "You've canceled a weapon selection.");
    }
    return 1;
}

Dialog:Teles(playerid, response, listitem, inputtext[])
{
	if(!response) return SCM(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have canceled the teleport.");
	switch(listitem)
		{
		    case 0:
		    {
		        SetPlayerPos(playerid, -25.884498,-185.868988,1003.546875);
		        SetInterior(playerid, 17);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}24/7 1");
			    return 1;
		    }
		    case 1:
		    {
		        SetPlayerPos(playerid, 6.091179,-29.271898,1003.549438);
		        SetInterior(playerid, 10);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}24/7 2");
			    return 1;
		    }
		    case 2:
		    {
		        SetPlayerPos(playerid, -30.946699,-89.609596,1003.546875);
		        SetInterior(playerid, 18);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}24/7 3");
			    return 1;
		    }
		    case 3:
		    {
		        SetPlayerPos(playerid, -25.132598,-139.066986,1003.546875);
		        SetInterior(playerid, 16);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}24/7 4");
			    return 1;
		    }
		    case 4:
		    {
		        SetPlayerPos(playerid, -27.312299,-29.277599,1003.557250);
		        SetInterior(playerid, 4);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}24/7 5");
			    return 1;
		    }
		    case 5:
		    {
		        SetPlayerPos(playerid, -26.691598,-55.714897,1003.546875);
		        SetInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}24/7 6");
			    return 1;
		    }
		    case 6:
		    {
		        SetPlayerPos(playerid, -1827.147338,7.207417,1061.143554);
		        SetInterior(playerid, 14);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Airoport Ticket Desk");
			    return 1;
		    }
		    case 7:
		    {
		        SetPlayerPos(playerid, -1861.936889,54.908092,1061.143554);
		        SetInterior(playerid, 14);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Airoport Baggage Reclaim");
			    return 1;
		    }
		    case 8:
		    {
		        SetPlayerPos(playerid, 1.808619,32.384357,1199.593750);
		        SetInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Shamal");
			    return 1;
		    }
		    case 9:
		    {
		        SetPlayerPos(playerid, 315.745086,984.969299,1958.919067);
		        SetInterior(playerid, 9);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Andromada");
			    return 1;
		    }
		    case 10:
		    {
		        SetPlayerPos(playerid, 286.148986,-40.644397,1001.515625);
		        SetInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Ammunation 1");
			    return 1;
		    }
		    case 11:
		    {
		        SetPlayerPos(playerid, 286.800994,-82.547599,1001.515625);
		        SetInterior(playerid, 4);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Ammunation 2");
			    return 1;
		    }
		    case 12:
		    {
		        SetPlayerPos(playerid, 296.919982,-108.071998,1001.515625);
		        SetInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Ammunation 3");
			    return 1;
		    }
		    case 13:
		    {
		        SetPlayerPos(playerid, 314.820983,-141.431991,999.601562);
		        SetInterior(playerid, 7);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Ammunation 4");
			    return 1;
		    }
		    case 14:
		    {
		        SetPlayerPos(playerid, 316.524993,-167.706985,999.593750);
		        SetInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Ammunation 5");
			    return 1;
		    }
		    case 15:
		    {
		        SetPlayerPos(playerid, 302.292877,-143.139099,1004.062500);
		        SetInterior(playerid, 7);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Ammunation Booths");
			    return 1;
		    }
		    case 16:
		    {
		        SetPlayerPos(playerid, 298.507934,-141.647048,1004.054748);
		        SetInterior(playerid, 7);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Ammunation Range");
			    return 1;
		    }
		    case 17:
		    {
		        SetPlayerPos(playerid, 1038.531372,0.111030,1001.284484);
		        SetInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Blastin Fools Hallway");
			    return 1;
		    }
		    case 18:
		    {
		        SetPlayerPos(playerid, 444.646911,508.239044,1001.419494);
		        SetInterior(playerid, 12);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Budget Inn Motel Room");
			    return 1;
		    }
		    case 19:
		    {
		        SetPlayerPos(playerid, 2215.454833,-1147.475585,1025.796875);
		        SetInterior(playerid, 14);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Jefferson Motel");
			    return 1;
		    }
		    case 20:
		    {
		        SetPlayerPos(playerid, 833.269775,10.588416,1004.179687);
		        SetInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Off Track Betting Shop");
			    return 1;
		    }
		    case 21:
		    {
		        SetPlayerPos(playerid, -103.559165,-24.225606,1000.718750);
		        SetInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Sex Shop");
			    return 1;
		    }
		    case 22:
		    {
		        SetPlayerPos(playerid, 963.418762,2108.292480,1011.030273);
		        SetInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Meat Factory");
			    return 1;
		    }
		    case 23:
		    {
		        SetPlayerPos(playerid, -2240.468505,137.060440,1035.414062);
		        SetInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Zero's RC Shop");
			    return 1;
		    }
		    case 24:
		    {
		        SetPlayerPos(playerid, 663.836242,-575.605407,16.343263);
		        SetInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Dillmore Gas Station");
			    return 1;
		    }
		    case 25:
		    {
		        SetPlayerPos(playerid, 2169.461181,1618.798339,999.976562);
		        SetInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Catigula's Basement");
			    return 1;
		    }
			case 26:
		    {
		        SetPlayerPos(playerid, 1889.953369,1017.438293,31.882812);
		        SetInterior(playerid, 10);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}FDC Janitors Room");
			    return 1;
		    }
		    case 27:
		    {
		        SetPlayerPos(playerid, -2159.122802,641.517517,1052.381713);
		        SetInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Woozie's Office");
			    return 1;
		    }
		    case 28:
		    {
		        SetPlayerPos(playerid, 207.737991,-109.019996,1005.132812);
		        SetInterior(playerid, 15);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Binco");
			    return 1;
		    }
		    case 29:
		    {
		        SetPlayerPos(playerid, 204.332992,-166.694992,1000.523437);
		        SetInterior(playerid, 14);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Didier Sachs");
			    return 1;
		    }
		    case 30:
		    {
		        SetPlayerPos(playerid, 207.054992,-138.804992,1003.507812);
		        SetInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Prolaps");
			    return 1;
		    }
		    case 31:
		    {
		        SetPlayerPos(playerid, 203.777999,-48.492397,1001.804687);
		        SetInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Suburban");
			    return 1;
		    }
		    case 32:
		    {
		        SetPlayerPos(playerid, 226.293991,-7.431529,1002.210937);
		        SetInterior(playerid, 5);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Victim");
			    return 1;
		    }
		    case 33:
		    {
		        SetPlayerPos(playerid, 161.391006,-93.159156,1001.804687);
		        SetInterior(playerid, 18);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}ZIP");
			    return 1;
		    }
		    case 34:
		    {
		        SetPlayerPos(playerid, 493.390991,-22.722799,1000.679687);
		        SetInterior(playerid, 17);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Alhambra");
			    return 1;
		    }
		    case 35:
		    {
		        SetPlayerPos(playerid, 501.980987,-69.150199,998.757812);
		        SetInterior(playerid, 11);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Ten Green Bottles");
			    return 1;
		    }
		    case 36:
		    {
		        SetPlayerPos(playerid, -227.027999,1401.229980,27.765625);
		        SetInterior(playerid, 18);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Lil' Probe Inn");
			    return 1;
		    }
		    case 37:
		    {
		        SetPlayerPos(playerid, 457.304748,-88.428497,999.554687);
		        SetInterior(playerid, 4);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Jay's Dinner");
			    return 1;
		    }
		    case 38:
		    {
		        SetPlayerPos(playerid, 454.973937,-110.104995,1000.077209);
		        SetInterior(playerid, 5);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Gant Bridge Dinner");
			    return 1;
		    }
		    case 39:
		    {
		        SetPlayerPos(playerid, 435.271331,-80.958938,999.554687);
		        SetInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Secret Valley Dinner");
			    return 1;
		    }
		    case 40:
		    {
		        SetPlayerPos(playerid, 452.489990,-18.179698,1001.132812);
		        SetInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}World of Coq");
			    return 1;
		    }
		    case 41:
		    {
		        SetPlayerPos(playerid, 681.557861,-455.680053,-25.609874);
		        SetInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Welcome Pump");
			    return 1;
		    }
		    case 42:
		    {
		        SetPlayerPos(playerid, 375.962463,-65.816848,1001.507812);
		        SetInterior(playerid, 10);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Burger Shot");
			    return 1;
		    }
		    case 43:
		    {
		        SetPlayerPos(playerid, 369.579528,-4.487294,1001.858886);
		        SetInterior(playerid, 9);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Cluckin' Bell");
			    return 1;
		    }
		    case 44:
		    {
		        SetPlayerPos(playerid, 373.825653,-117.270904,1001.499511);
		        SetInterior(playerid, 5);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Well Stacked Pizza");
			    return 1;
		    }
		    case 45:
		    {
		        SetPlayerPos(playerid, 381.169189,-188.803024,1000.632812);
		        SetInterior(playerid, 17);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Jimmy's Sticky Ring");
			    return 1;
		    }
		    case 46:
		    {
		        SetPlayerPos(playerid, 244.411987,305.032989,999.148437);
		        SetInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Denise Room");
			    return 1;
		    }
		    case 47:
		    {
		        SetPlayerPos(playerid, 271.884979,306.631988,999.148437);
		        SetInterior(playerid, 2);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Katie Room");
			    return 1;
		    }
		    case 48:
		    {
		        SetPlayerPos(playerid, 291.282989,310.031982,999.148437);
		        SetInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Helena Room");
			    return 1;
		    }
		    case 49:
		    {
		        SetPlayerPos(playerid, 302.180999,300.722991,999.148437);
		        SetInterior(playerid, 4);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Michelle Room");
			    return 1;
		    }
		    case 50:
		    {
		        SetPlayerPos(playerid, 322.197998,302.497985,999.148437);
		        SetInterior(playerid, 5);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Barbara Room");
			    return 1;
		    }
		    case 51:
		    {
		        SetPlayerPos(playerid, 346.870025,309.259033,999.155700);
		        SetInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Millie Room");
			    return 1;
		    }
		    case 52:
		    {
		        SetPlayerPos(playerid, -959.564392,1848.576782,9.000000);
		        SetInterior(playerid, 17);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Sherman Dam");
			    return 1;
		    }
		    case 53:
		    {
		        SetPlayerPos(playerid, 384.808624,173.804992,1008.382812);
		        SetInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Planning Dept.");
			    return 1;
		    }
		    case 54:
		    {
		        SetPlayerPos(playerid, 223.431976,1872.400268,13.734375);
		        SetInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Area 51");
			    return 1;
		    }
		    case 55:
		    {
		        SetPlayerPos(playerid, 772.111999,-3.898649,1000.728820);
		        SetInterior(playerid, 5);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}LS Gym");
			    return 1;
		    }
		    case 56:
		    {
		        SetPlayerPos(playerid, 774.213989,-48.924297,1000.585937);
		        SetInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}SF Gym");
			    return 1;
		    }
		    case 57:
		    {
		        SetPlayerPos(playerid, 773.579956,-77.096694,1000.655029);
		        SetInterior(playerid, 7);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}LV Gym");
			    return 1;
		    }
		    case 58:
		    {
		        SetPlayerPos(playerid, 1527.229980,-11.574499,1002.097106);
		        SetInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}B Dup's House");
			    return 1;
		    }
		    case 59:
		    {
		        SetPlayerPos(playerid, 1523.509887,-47.821197,1002.130981);
		        SetInterior(playerid, 2);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}B Dup's Crack Pad");
			    return 1;
		    }
		    case 60:
		    {
		        SetPlayerPos(playerid, 2496.049804,-1695.238159,1014.742187);
		        SetInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}CJ's House");
			    return 1;
		    }
		    case 61:
		    {
		        SetPlayerPos(playerid, 1267.663208,-781.323242,1091.906250);
		        SetInterior(playerid, 5);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Madd Dogg's Mansion");
			    return 1;
		    }
		    case 62:
		    {
		        SetPlayerPos(playerid, 513.882507,-11.269994,1001.565307);
		        SetInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}OG Loc's House");
			    return 1;
		    }
		    case 63:
		    {
		        SetPlayerPos(playerid, 2454.717041,-1700.871582,1013.515197);
		        SetInterior(playerid, 2);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Ryder's House");
			    return 1;
		    }
		    case 64:
		    {
		        SetPlayerPos(playerid, 2527.654052,-1679.388305,1015.498596);
		        SetInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Sweet's House");
			    return 1;
		    }
		    case 65:
		    {
		        SetPlayerPos(playerid, 2543.462646,-1308.379882,1026.728393);
		        SetInterior(playerid, 2);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Crack Factory");
			    return 1;
		    }
		    case 66:
		    {
		        SetPlayerPos(playerid, 1212.019897,-28.663099,1000.953125);
		        SetInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Big Spread Ranch");
			    return 1;
		    }
		    case 67:
		    {
		        SetPlayerPos(playerid, 761.412963,1440.191650,1102.703125);
		        SetInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Fanny Batters");
			    return 1;
		    }
		    case 68:
		    {
		        SetPlayerPos(playerid, 1204.809936,-11.586799,1000.921875);
		        SetInterior(playerid, 2);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Strip Club");
			    return 1;
		    }
		    case 69:
		    {
		        SetPlayerPos(playerid, 1204.809936,13.897239,1000.921875);
		        SetInterior(playerid, 2);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Strip Club Private Room");
			    return 1;
		    }
		    case 70:
		    {
		        SetPlayerPos(playerid, 942.171997,-16.542755,1000.929687);
		        SetInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Unnamed Brothel");
			    return 1;
		    }
		    case 71:
		    {
		        SetPlayerPos(playerid, 964.106994,-53.205497,1001.124572);
		        SetInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Tiger Skin Brothel");
			    return 1;
		    }
		    case 72:
		    {
		        SetPlayerPos(playerid, -2640.762939,1406.682006,906.460937);
		        SetInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Pleasure Domes");
			    return 1;
		    }
		    case 73:
		    {
		        SetPlayerPos(playerid, -729.276000,503.086944,1371.971801);
		        SetInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Liberty City Outside");
			    return 1;
		    }
		    case 74:
		    {
		        SetPlayerPos(playerid, -794.806396,497.738037,1376.195312);
		        SetInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Liberty City Inside");
			    return 1;
		    }
		    case 75:
		    {
		        SetPlayerPos(playerid, 	2350.339843,-1181.649902,1027.976562);
		        SetInterior(playerid, 5);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Gang House");
			    return 1;
		    }
		    case 76:
		    {
		        SetPlayerPos(playerid, 2807.619873,-1171.899902,1025.570312);
		        SetInterior(playerid, 8);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Colonel Furhberger's House");
			    return 1;
		    }
		    case 77:
		    {
		        SetPlayerPos(playerid, 18.564971,1118.209960,1083.882812);
		        SetInterior(playerid, 5);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Crack Den");
			    return 1;
		    }
		    case 78:
		    {
		        SetPlayerPos(playerid, 1412.639892,-1.787510,1000.924377);
		        SetInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Warehouse 1");
			    return 1;
		    }
		    case 79:
		    {
		        SetPlayerPos(playerid, 1302.519897,-1.787510,1001.028259);
		        SetInterior(playerid, 18);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Warehouse 2");
			    return 1;
		    }
		    case 80:
		    {
		        SetPlayerPos(playerid, 2522.000000,-1673.383911,14.866223);
		        SetInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Sweet's Garage");
			    return 1;
		    }
		    case 81:
		    {
		        SetPlayerPos(playerid, -221.059051,1408.984008,27.773437);
		        SetInterior(playerid, 18);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Lil' Probe Inn Toilet");
			    return 1;
		    }
		    case 82:
		    {
		        SetPlayerPos(playerid, 2324.419921,-1145.568359,1050.710083);
		        SetInterior(playerid, 12);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Unused Safe House");
			    return 1;
		    }
		    case 83:
		    {
		        SetPlayerPos(playerid, -975.975708,1060.983032,1345.671875);
		        SetInterior(playerid, 10);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}RC Battlefield");
			    return 1;
		    }
		    case 84:
		    {
		        SetPlayerPos(playerid, 411.625976,-21.433298,1001.804687);
		        SetInterior(playerid, 2);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Barber 1");
			    return 1;
		    }
		    case 85:
		    {
		        SetPlayerPos(playerid, 418.652984,-82.639793,1001.804687);
		        SetInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Barber 2");
			    return 1;
		    }
		    case 86:
		    {
		        SetPlayerPos(playerid, 412.021972,-52.649898,1001.898437);
		        SetInterior(playerid, 12);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Barber 3");
			    return 1;
		    }
		    case 87:
		    {
		        SetPlayerPos(playerid, -204.439987,-26.453998,1002.273437);
		        SetInterior(playerid, 16);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Tatoo Parlour 1");
			    return 1;
		    }
		    case 88:
		    {
		        SetPlayerPos(playerid, -204.439987,-8.469599,1002.273437);
		        SetInterior(playerid, 17);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Tatoo Parlour 2");
			    return 1;
		    }
		    case 89:
		    {
		        SetPlayerPos(playerid, -204.439987,-43.652496,1002.273437);
		        SetInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Tatoo Parlour 3");
			    return 1;
		    }
		    case 90:
		    {
		        SetPlayerPos(playerid, 246.783996,63.900199,1003.640625);
		        SetInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}LS Police HQ");
			    return 1;
		    }
		    case 91:
		    {
		        SetPlayerPos(playerid, 246.375991,109.245994,1003.218750);
		        SetInterior(playerid, 10);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}SF police HQ");
			    return 1;
		    }
		    case 92:
		    {
		        SetPlayerPos(playerid, 288.745971,169.350997,1007.171875);
		        SetInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}LV police HQ");
			    return 1;
		    }
		    case 93:
		    {
		        SetPlayerPos(playerid, -2029.798339,-106.675910,1035.171875);
		        SetInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Car School");
			    return 1;
		    }
		    case 94:
		    {
		        SetPlayerPos(playerid, -1398.065307,-217.028900,1051.115844);
		        SetInterior(playerid, 7);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}8-Track");
			    return 1;
		    }
		    case 95:
		    {
		        SetPlayerPos(playerid, -1398.103515,937.631164,1036.479125);
		        SetInterior(playerid, 15);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Bloodbowl");
			    return 1;
		    }
		    case 96:
		    {
		        SetPlayerPos(playerid, -1444.645507,-664.526000,1053.572998);
		        SetInterior(playerid, 4);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Dirt Track");
			    return 1;
		    }
		    case 97:
		    {
		        SetPlayerPos(playerid, -1465.268676,1557.868286,1052.531250);
		        SetInterior(playerid, 14);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Kickstart");
			    return 1;
		    }
		    case 98:
		    {
		        SetPlayerPos(playerid, -1401.829956,107.051300,1032.273437);
		        SetInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Vice Stadium");
			    return 1;
		    }
		    case 99:
		    {
		        SetPlayerPos(playerid, -1790.378295,1436.949829,7.187500);
		        SetInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}SF Garage");
			    return 1;
		    }
		    case 100:
		    {
		        SetPlayerPos(playerid, 1643.839843,-1514.819580,13.566620);
		        SetInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}LS Garage");
			    return 1;
		    }
		    case 101:
		    {
		        SetPlayerPos(playerid, -1685.636474,1035.476196,45.210937);
		        SetInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}SF Bomb Shop");
			    return 1;
		    }
		    case 102:
		    {
		        SetPlayerPos(playerid, 76.632553,-301.156829,1.578125);
		        SetInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Blueberry Warehouse");
			    return 1;
		    }
		    case 103:
		    {
		        SetPlayerPos(playerid, 1059.895996,2081.685791,10.820312);
		        SetInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}LV Warehouse 1");
			    return 1;
		    }
		    case 104:
		    {
		        SetPlayerPos(playerid, 1059.180175,2148.938720,10.820312);
		        SetInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}LV Warehouse 2");
			    return 1;
		    }
		    case 105:
		    {
		        SetPlayerPos(playerid, 2131.507812,1600.818481,1008.359375);
		        SetInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Catigula's Hidden Room");
			    return 1;
		    }
		    case 106:
		    {
		        SetPlayerPos(playerid, 2315.952880,-1.618174,26.742187);
		        SetInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Bank");
			    return 1;
		    }
		    case 107:
		    {
		        SetPlayerPos(playerid, 2319.714843,-14.838361,26.749565);
		        SetInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Bank - Behind Desk");
			    return 1;
		    }
		    case 108:
		    {
		        SetPlayerPos(playerid, 1710.433715,-1669.379272,20.225049);
		        SetInterior(playerid, 18);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}LS Atruim");
			    return 1;
		    }
		    case 109:
		    {
		        SetPlayerPos(playerid, 1494.325195,1304.942871,1093.289062);
		        SetInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "{FFFFFF}Teleport: {B4B5B7}You have been successfully teleported to {0099FF}Bike School");
			    return 1;
		    }
		}
    return 1;
}

Dialog:HatsDialog(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(GetTotalToySlots(playerid) == MAX_PLAYER_TOYS) return SCM(playerid, COLOR_YELLOWG, "You've reached your maximum clothes slot.");
		new i = GetNextToySlot(playerid);
		SetIntVar(playerid, "ToyModelBuying", HatsInfo[listitem][toyModel]);
		SetIntVar(playerid, "ToyBoneBuying", HatsInfo[listitem][toyBone]);
		SetIntVar(playerid, "ToyPriceBuying", HatsInfo[listitem][toyPrice]);
		SetStringVar(playerid, "ToyNameBuying", HatsInfo[listitem][toyName]);
		if(GetCash(playerid) < GetIntVar(playerid, "ToyPriceBuying")) return NoCashMSG(playerid);
		SetPlayerAttachedObject(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), HatsInfo[listitem][toyOffestX], HatsInfo[listitem][toyOffestY], HatsInfo[listitem][toyOffestZ], HatsInfo[listitem][toyRotX], HatsInfo[listitem][toyRotY], HatsInfo[listitem][toyRotZ], HatsInfo[listitem][toyScaleX], HatsInfo[listitem][toyScaleY], HatsInfo[listitem][toyScaleZ]);
		GiveCash(playerid, -GetIntVar(playerid, "ToyPriceBuying"));
		format(msg, sizeof(msg), "You have bought a {00FF00}%s{FFFFFF}, for ${00FF00}%d{FFFFFF}.", GetStringVar(playerid, "ToyNameBuying"), GetIntVar(playerid, "ToyPriceBuying"));
		ServerMSG(playerid, msg);
		SetIntVar(playerid, "ToySlotEditing", i);
		SetIntVar(playerid, "JustBoughtToy", 1);
		EditAttachedObject(playerid, i);
		OnPlayerBuyToy(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), GetStringVar(playerid, "ToyNameBuying"));
	}
	else
	{
		SCM(playerid, -1, "You've canceled the clothes dialog.");
	}
	return 1;
}

Dialog:GlassesDialog(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(GetTotalToySlots(playerid) == MAX_PLAYER_TOYS) return SCM(playerid, COLOR_YELLOWG, "You've reached your maximum clothes slot.");
		new i = GetNextToySlot(playerid);
		SetIntVar(playerid, "ToyModelBuying", GlassesInfo[listitem][toyModel]);
		SetIntVar(playerid, "ToyBoneBuying", GlassesInfo[listitem][toyBone]);
		SetIntVar(playerid, "ToyPriceBuying", GlassesInfo[listitem][toyPrice]);
		SetStringVar(playerid, "ToyNameBuying", GlassesInfo[listitem][toyName]);
		if(GetCash(playerid) < GetIntVar(playerid, "ToyPriceBuying")) return NoCashMSG(playerid);
		SetPlayerAttachedObject(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), GlassesInfo[listitem][toyOffestX], GlassesInfo[listitem][toyOffestY], GlassesInfo[listitem][toyOffestZ], GlassesInfo[listitem][toyRotX], GlassesInfo[listitem][toyRotY], GlassesInfo[listitem][toyRotZ], GlassesInfo[listitem][toyScaleX], GlassesInfo[listitem][toyScaleY], GlassesInfo[listitem][toyScaleZ]);
		GiveCash(playerid, -GetIntVar(playerid, "ToyPriceBuying"));
		format(msg, sizeof(msg), "You have bought a {00FF00}%s{FFFFFF}, for ${00FF00}%d{FFFFFF}.", GetStringVar(playerid, "ToyNameBuying"), GetIntVar(playerid, "ToyPriceBuying"));
		ServerMSG(playerid, msg);
		SetIntVar(playerid, "ToySlotEditing", i);
		SetIntVar(playerid, "JustBoughtToy", 1);
		EditAttachedObject(playerid, i);
		OnPlayerBuyToy(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), GetStringVar(playerid, "ToyNameBuying"));
	}
	else
	{
		SCM(playerid, -1, "You've canceled the clothes dialog.");
	}
	return 1;
}
Dialog:BandanasDialog(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(GetTotalToySlots(playerid) == MAX_PLAYER_TOYS) return SCM(playerid, COLOR_YELLOWG, "You've reached your maximum clothes slot.");
		new i = GetNextToySlot(playerid);
		SetIntVar(playerid, "ToyModelBuying", BandanasInfo[listitem][toyModel]);
		SetIntVar(playerid, "ToyBoneBuying", BandanasInfo[listitem][toyBone]);
		SetIntVar(playerid, "ToyPriceBuying", BandanasInfo[listitem][toyPrice]);
		SetStringVar(playerid, "ToyNameBuying", BandanasInfo[listitem][toyName]);
		if(GetCash(playerid) < GetIntVar(playerid, "ToyPriceBuying")) return NoCashMSG(playerid);
		SetPlayerAttachedObject(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), BandanasInfo[listitem][toyOffestX], BandanasInfo[listitem][toyOffestY], BandanasInfo[listitem][toyOffestZ], BandanasInfo[listitem][toyRotX], BandanasInfo[listitem][toyRotY], BandanasInfo[listitem][toyRotZ], BandanasInfo[listitem][toyScaleX], BandanasInfo[listitem][toyScaleY], BandanasInfo[listitem][toyScaleZ]);
    GiveCash(playerid, -GetIntVar(playerid, "ToyPriceBuying"));
		format(msg, sizeof(msg), "You have bought a {00FF00}%s{FFFFFF}, for ${00FF00}%d{FFFFFF}.", GetStringVar(playerid, "ToyNameBuying"), GetIntVar(playerid, "ToyPriceBuying"));
		ServerMSG(playerid, msg);
		SetIntVar(playerid, "ToySlotEditing", i);
		SetIntVar(playerid, "JustBoughtToy", 1);
		EditAttachedObject(playerid, i);
		OnPlayerBuyToy(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), GetStringVar(playerid, "ToyNameBuying"));
	}
	else
	{
		SCM(playerid, -1, "You've canceled the bandanas dialog.");
	}
	return 1;
}
Dialog:HeadphonesDialog(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(GetTotalToySlots(playerid) == MAX_PLAYER_TOYS) return SCM(playerid, COLOR_YELLOWG, "You've reached your maximum clothes slot.");
		new i = GetNextToySlot(playerid);
		SetIntVar(playerid, "ToyModelBuying", HeadphonesInfo[listitem][toyModel]);
		SetIntVar(playerid, "ToyBoneBuying", HeadphonesInfo[listitem][toyBone]);
		SetIntVar(playerid, "ToyPriceBuying", HeadphonesInfo[listitem][toyPrice]);
		SetStringVar(playerid, "ToyNameBuying", HeadphonesInfo[listitem][toyName]);
		if(GetCash(playerid) < GetIntVar(playerid, "ToyPriceBuying")) return NoCashMSG(playerid);
		SetPlayerAttachedObject(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), HeadphonesInfo[listitem][toyOffestX], HeadphonesInfo[listitem][toyOffestY], HeadphonesInfo[listitem][toyOffestZ], HeadphonesInfo[listitem][toyRotX], HeadphonesInfo[listitem][toyRotY], HeadphonesInfo[listitem][toyRotZ], HeadphonesInfo[listitem][toyScaleX], HeadphonesInfo[listitem][toyScaleY], HeadphonesInfo[listitem][toyScaleZ]);
		GiveCash(playerid, -GetIntVar(playerid, "ToyPriceBuying"));
		format(msg, sizeof(msg), "You have bought a {00FF00}%s{FFFFFF}, for ${00FF00}%d{FFFFFF}.", GetStringVar(playerid, "ToyNameBuying"), GetIntVar(playerid, "ToyPriceBuying"));
		ServerMSG(playerid, msg);
		SetIntVar(playerid, "ToySlotEditing", i);
		SetIntVar(playerid, "JustBoughtToy", 1);
		EditAttachedObject(playerid, i);
		OnPlayerBuyToy(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), GetStringVar(playerid, "ToyNameBuying"));
	}
	else
	{
		SCM(playerid, -1, "You've canceled the headphones dialog.");
	}
	return 1;
}
Dialog:IllegalDialog(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(GetTotalToySlots(playerid) == MAX_PLAYER_TOYS) return SCM(playerid, COLOR_YELLOWG, "You've reached your maximum clothes slot.");
		new i = GetNextToySlot(playerid);
		SetIntVar(playerid, "ToyModelBuying", IllegalInfo[listitem][toyModel]);
		SetIntVar(playerid, "ToyBoneBuying", IllegalInfo[listitem][toyBone]);
		SetIntVar(playerid, "ToyPriceBuying", IllegalInfo[listitem][toyPrice]);
		SetStringVar(playerid, "ToyNameBuying", IllegalInfo[listitem][toyName]);
		if(GetCash(playerid) < GetIntVar(playerid, "ToyPriceBuying")) return NoCashMSG(playerid);
		SetPlayerAttachedObject(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), IllegalInfo[listitem][toyOffestX], IllegalInfo[listitem][toyOffestY], IllegalInfo[listitem][toyOffestZ], IllegalInfo[listitem][toyRotX], IllegalInfo[listitem][toyRotY], IllegalInfo[listitem][toyRotZ], IllegalInfo[listitem][toyScaleX], IllegalInfo[listitem][toyScaleY], IllegalInfo[listitem][toyScaleZ]);
		GiveCash(playerid, -GetIntVar(playerid, "ToyPriceBuying"));
		format(msg, sizeof(msg), "You have bought a {00FF00}%s{FFFFFF}, for ${00FF00}%d{FFFFFF}.", GetStringVar(playerid, "ToyNameBuying"), GetIntVar(playerid, "ToyPriceBuying"));
		ServerMSG(playerid, msg);
		SetIntVar(playerid, "ToySlotEditing", i);
		SetIntVar(playerid, "JustBoughtToy", 1);
		EditAttachedObject(playerid, i);
		OnPlayerBuyToy(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), GetStringVar(playerid, "ToyNameBuying"));
	}
	else
	{
		SCM(playerid, -1, "You've canceled the headphones dialog.");
	}
	return 1;
}
Dialog:SportsDialog(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(GetTotalToySlots(playerid) == MAX_PLAYER_TOYS) return SCM(playerid, COLOR_YELLOWG, "You've reached your maximum clothes slot.");
		new i = GetNextToySlot(playerid);
		SetIntVar(playerid, "ToyModelBuying", SportsInfo[listitem][toyModel]);
		SetIntVar(playerid, "ToyBoneBuying", SportsInfo[listitem][toyBone]);
		SetIntVar(playerid, "ToyPriceBuying", SportsInfo[listitem][toyPrice]);
		SetStringVar(playerid, "ToyNameBuying", SportsInfo[listitem][toyName]);
		if(GetCash(playerid) < GetIntVar(playerid, "ToyPriceBuying")) return NoCashMSG(playerid);
		SetPlayerAttachedObject(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), SportsInfo[listitem][toyOffestX], SportsInfo[listitem][toyOffestY], SportsInfo[listitem][toyOffestZ], SportsInfo[listitem][toyRotX], SportsInfo[listitem][toyRotY], SportsInfo[listitem][toyRotZ], SportsInfo[listitem][toyScaleX], SportsInfo[listitem][toyScaleY], SportsInfo[listitem][toyScaleZ]);
		GiveCash(playerid, -GetIntVar(playerid, "ToyPriceBuying"));
		format(msg, sizeof(msg), "You have bought a {00FF00}%s{FFFFFF}, for ${00FF00}%d{FFFFFF}.", GetStringVar(playerid, "ToyNameBuying"), GetIntVar(playerid, "ToyPriceBuying"));
		ServerMSG(playerid, msg);
		SetIntVar(playerid, "ToySlotEditing", i);
		SetIntVar(playerid, "JustBoughtToy", 1);
		EditAttachedObject(playerid, i);
		OnPlayerBuyToy(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), GetStringVar(playerid, "ToyNameBuying"));
	}
	else
	{
		SCM(playerid, -1, "You've canceled the sports items dialog.");
	}
	return 1;
}

Dialog:GuitarsDialog(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(listitem == 3)
		{
			if(GetCash(playerid) < BOOMBOX_PRICE) return NoCashMSG(playerid);
			if(GetIntVar(playerid, "BoomBox") ==1) return SCM(playerid, COLOR_CYAN, "You already own a boombox.");
			GiveCash(playerid, -BOOMBOX_PRICE);
			format(msg, sizeof(msg), "You have bought a BoomBox for ${FFFF00}%d{FFFFFF}, /boomboxhelp for commands.", BOOMBOX_PRICE);
			SCM(playerid, -1, msg);
			SetIntVar(playerid, "BoomBox", 1);
		}
		else
		{
			SetIntVar(playerid, "ToyModelBuying", GuitarsInfo[listitem][toyModel]);
			SetIntVar(playerid, "ToyPriceBuying", GuitarsInfo[listitem][toyPrice]);
			SetStringVar(playerid, "ToyNameBuying", GuitarsInfo[listitem][toyName]);
			if(GetCash(playerid) < GetIntVar(playerid, "ToyPriceBuying")) return NoCashMSG(playerid);
			ShowDialog(playerid, Show:<SelectGuitarBone>, DIALOG_STYLE_LIST, "{FFFF00}Where would you like to place the guitar?", "On my back\nRight hand\nLeft hand", "Buy", "Cancel");
		}
	}
	else return SCM(playerid, -1, "You've canceled the guitars dialog.");
	return 1;
}

Dialog:SelectGuitarBone(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new i = GetNextToySlot(playerid);
		switch(listitem)
		{
			case 0:
			{
				SetIntVar(playerid, "ToyBoneBuying", 1);
				SetPlayerAttachedObject(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), 0.0, -0.145, 0.0, 14.8, 85.1, -19.2, 1.0, 1.0, 1.0);
			}
			case 1:
			{
				SetIntVar(playerid, "ToyBoneBuying", 6);
				SetPlayerAttachedObject(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), 0.071999, 0.02, 0.0, 0.0, 0.0, 0.0, 0.881, 1.0, 0.719999);
			}
			case 2:
			{
				SetIntVar(playerid, "ToyBoneBuying", 5);
				SetPlayerAttachedObject(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), 0.116999, 0.059999, 0.021999, 156.0, 0.0, 174.5, 0.787999, 1.145, 0.689998);
			}
		}
		GiveCash(playerid, -GetIntVar(playerid, "ToyPriceBuying"));
		format(msg, sizeof(msg), "You have bought a {00FF00}%s{FFFFFF}, for ${00FF00}%d{FFFFFF}.", GetStringVar(playerid, "ToyNameBuying"), GetIntVar(playerid, "ToyPriceBuying"));
		ServerMSG(playerid, msg);
		SetIntVar(playerid, "ToySlotEditing", i);
		SetIntVar(playerid, "JustBoughtToy", 1);
		EditAttachedObject(playerid, i);
		OnPlayerBuyToy(playerid, i, GetIntVar(playerid, "ToyModelBuying"), GetIntVar(playerid, "ToyBoneBuying"), GetStringVar(playerid, "ToyNameBuying"));
	}
	else
	{
		SCM(playerid, -1, "You've canceled the guitars dialog.");
	}
	return 1;
}

Dialog:ClothesCategory(playerid, response, listitem, inputtext[])
{
	new str[3000];
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				for(new x;x<sizeof(HatsInfo);x++)
				{
					format(str, sizeof(str), "%s%s - "EMBED_YELLOW"$%d\n", str, HatsInfo[x][toyName], HatsInfo[x][toyPrice]);
				}
				ShowDialog(playerid, Show:<HatsDialog>, DIALOG_STYLE_LIST, "{FF0000}Please select an item", str, "Buy", "Cancel");
			}
			case 1:
			{
				for(new x;x<sizeof(GlassesInfo);x++)
				{
					format(str, sizeof(str), "%s%s - "EMBED_YELLOW"$%d\n", str, GlassesInfo[x][toyName], GlassesInfo[x][toyPrice]);
				}
				ShowDialog(playerid, Show:<GlassesDialog>, DIALOG_STYLE_LIST, "{FF0000}Please select an item", str, "Buy", "Cancel");
			}
			case 2:
			{
				for(new x;x<sizeof(BandanasInfo);x++)
				{
					format(str, sizeof(str), "%s%s - "EMBED_YELLOW"$%d\n", str, BandanasInfo[x][toyName], BandanasInfo[x][toyPrice]);
				}
				ShowDialog(playerid, Show:<BandanasDialog>, DIALOG_STYLE_LIST, "{FF0000}Please select an item", str, "Buy", "Cancel");
			}
			case 3:
			{
				for(new x;x<sizeof(HeadphonesInfo);x++)
				{
					format(str, sizeof(str), "%s%s - "EMBED_YELLOW"$%d\n", str, HeadphonesInfo[x][toyName], HeadphonesInfo[x][toyPrice]);
				}
				ShowDialog(playerid, Show:<HeadphonesDialog>, DIALOG_STYLE_LIST, "{FF0000}Please select an item", str, "Buy", "Cancel");
			}
			case 4:
			{
				for(new x;x<sizeof(IllegalInfo);x++)
				{
					format(str, sizeof(str), "%s%s - "EMBED_YELLOW"$%d\n", str, IllegalInfo[x][toyName], IllegalInfo[x][toyPrice]);
				}
				ShowDialog(playerid, Show:<IllegalDialog>, DIALOG_STYLE_LIST, "{FF0000}Please select an item", str, "Buy", "Cancel");
			}
		}
	}
	else
	{
		SCM(playerid, -1, "You've canceled the clothes dialog.");
	}
	return 1;
}

Dialog:ChangeBoomBoxURL(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		PlayPlayerBoomBoxURL(playerid, BoomBoxInfo[listitem][boomboxUrlName], BoomBoxInfo[listitem][boomboxURL]);
	}
	else
	{
		SCM(playerid, -1, "You've canceled the stations dialog.");
	}
	return 1;
}

Dialog:HandleEditFurniture(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new furnitureslot = strval(inputtext);
		SetIntVar(playerid, "ChosenFurnitureSlot", furnitureslot);
		new houseid = PlayerInfo[playerid][pHouseKey];
		if(!FurnitureInfo[houseid][furnitureslot][fOn]) return SCM(playerid, -1, "This furniture does not exist.");
		SetIntVar(playerid, "EditingFurniture", 1);
		EditDynamicObject(playerid, FurnitureInfo[houseid][furnitureslot][fObject]);
		format(msg, sizeof(msg), "You are now editing the {FFFF00}%s{FFFFFF}", FurnitureInfo[houseid][furnitureslot][fName]);
		HouseMSG(playerid, msg);
	}
	else
	{
		SCM(playerid, COLOR_CYAN, "You've canceled the furniture dialog.");
	}
	return 1;
}

Dialog:TextureEditFurniture(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new furnitureslot = strval(inputtext);
		new houseid = PlayerInfo[playerid][pHouseKey];
		SetIntVar(playerid, "ChosenFurnitureSlot", furnitureslot);
		if(!FurnitureInfo[houseid][furnitureslot][fOn]) return SCM(playerid, -1, "This furniture does not exist.");
		format(msg, sizeof(msg), "You can edit your object texture on the choosen slot. (/edittexture - %s)",FurnitureInfo[houseid][furnitureslot][fTxd]);
		HouseMSG(playerid, msg);
		cantexture[playerid] = 1;
	}
	else
	{
		SCM(playerid, COLOR_CYAN, "You've canceled the furniture dialog.");
	}
	return 1;
}
Dialog:HandleSellFurniture(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new furnitureslot = strval(inputtext);
		SetIntVar(playerid, "ChosenFurnitureSlot", furnitureslot);
		new houseid = PlayerInfo[playerid][pHouseKey];
		if(!FurnitureInfo[houseid][furnitureslot][fOn]) return SCM(playerid, -1, "This furniture does not exist.");
		new sellprice = FurnitureInfo[houseid][furnitureslot][fMarketPrice] / 2;
		format(msg, sizeof(msg), "You have just sold your %s and got 50 precent back, ${FFFF00}%d{FFFFFF}.", FurnitureInfo[houseid][furnitureslot][fName], sellprice);
		HouseMSG(playerid, msg);
		GiveCash(playerid, sellprice);
		DestroyDynamicObject(FurnitureInfo[houseid][furnitureslot][fObject]);
		OnPlayerSellFurniture(playerid, houseid, furnitureslot);
	}
	else
	{
		SCM(playerid, COLOR_CYAN, "You've canceled the furniture dialog.");
	}
	return 1;
}
Dialog:JobList(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
		    case 0:
		    {
		        SCM(playerid,COLOR_GREEN,"Job location has been marked on the map.");
		        SetCheckPoint(playerid, COMPSPOT, -83.952,-1180.55,1.7753, 5.0);
		    }
		    case 1:
		    {
		        SCM(playerid,COLOR_GREEN,"Job location has been marked on the map.");
		        SetCheckPoint(playerid, COMPSPOT, 2182.49,-2252.94,14.4256, 5.0);
		    }
		    case 2:
		    {
		        SCM(playerid,COLOR_GREEN,"Job location has been marked on the map.");
		        SetCheckPoint(playerid, COMPSPOT, 2282.02,-2364.89,13.5471, 5.0);
		    }
		    case 3:
		    {
		        SCM(playerid,COLOR_GREEN,"Job location has been marked on the map.");
		        SetCheckPoint(playerid, COMPSPOT, 1753.3788,-1894.0873,13.5572, 5.0);
		    }
		}
	}
	return 1;
}
Dialog:HandleFurnitureBuying(playerid, response, listitem, inputtext[])
{
	new Float:x,Float:y,Float:z;
	if(response)
	{
		GetPlayerPos(playerid, x, y ,z);
		new houseid = PlayerInfo[playerid][pHouseKey];
		if(GetHouseFurnitures(houseid) == MAX_FURNITURE) return SCM(playerid, COLOR_YELLOWG, "You've reached your maximum furnitures slot.");
		new i = GetNextFurnitureSlot(houseid);

		if(GetIntVar(playerid, "TypeBuying") == 1)
		{
			SetIntVar(playerid, "FurnitureModelBuying", KitchenInfo[listitem][furnitureModel]);
			SetIntVar(playerid, "FurniturePriceBuying", KitchenInfo[listitem][furniturePrice]);
			SetStringVar(playerid, "FurnitureNameBuying", KitchenInfo[listitem][furnitureName]);
		}
		else if(GetIntVar(playerid, "TypeBuying") == 2)
		{
			SetIntVar(playerid, "FurnitureModelBuying", BathroomInfo[listitem][furnitureModel]);
			SetIntVar(playerid, "FurniturePriceBuying", BathroomInfo[listitem][furniturePrice]);
			SetStringVar(playerid, "FurnitureNameBuying", BathroomInfo[listitem][furnitureName]);
		}
		else if(GetIntVar(playerid, "TypeBuying") == 3)
		{
			SetIntVar(playerid, "FurnitureModelBuying", ChairsInfo[listitem][furnitureModel]);
			SetIntVar(playerid, "FurniturePriceBuying", ChairsInfo[listitem][furniturePrice]);
			SetStringVar(playerid, "FurnitureNameBuying", ChairsInfo[listitem][furnitureName]);
		}
		else if(GetIntVar(playerid, "TypeBuying") == 4)
		{
			SetIntVar(playerid, "FurnitureModelBuying", TablesInfo[listitem][furnitureModel]);
			SetIntVar(playerid, "FurniturePriceBuying", TablesInfo[listitem][furniturePrice]);
			SetStringVar(playerid, "FurnitureNameBuying", TablesInfo[listitem][furnitureName]);
		}
		else if(GetIntVar(playerid, "TypeBuying") == 5)
		{
			SetIntVar(playerid, "FurnitureModelBuying", SofasInfo[listitem][furnitureModel]);
			SetIntVar(playerid, "FurniturePriceBuying", SofasInfo[listitem][furniturePrice]);
			SetStringVar(playerid, "FurnitureNameBuying", SofasInfo[listitem][furnitureName]);
		}
		else if(GetIntVar(playerid, "TypeBuying") == 6)
		{
			SetIntVar(playerid, "FurnitureModelBuying", DinnerTablesInfo[listitem][furnitureModel]);
			SetIntVar(playerid, "FurniturePriceBuying", DinnerTablesInfo[listitem][furniturePrice]);
			SetStringVar(playerid, "FurnitureNameBuying", DinnerTablesInfo[listitem][furnitureName]);
		}
		else if(GetIntVar(playerid, "TypeBuying") == 7)
		{
			SetIntVar(playerid, "FurnitureModelBuying", TelevisionsInfo[listitem][furnitureModel]);
			SetIntVar(playerid, "FurniturePriceBuying", TelevisionsInfo[listitem][furniturePrice]);
			SetStringVar(playerid, "FurnitureNameBuying", TelevisionsInfo[listitem][furnitureName]);
		}
		else if(GetIntVar(playerid, "TypeBuying") == 8)
		{
			SetIntVar(playerid, "FurnitureModelBuying", GrugsInfo[listitem][furnitureModel]);
			SetIntVar(playerid, "FurniturePriceBuying", GrugsInfo[listitem][furniturePrice]);
			SetStringVar(playerid, "FurnitureNameBuying", GrugsInfo[listitem][furnitureName]);
		}
		else if(GetIntVar(playerid, "TypeBuying") == 9)
		{
			SetIntVar(playerid, "FurnitureModelBuying", PicturesInfo[listitem][furnitureModel]);
			SetIntVar(playerid, "FurniturePriceBuying", PicturesInfo[listitem][furniturePrice]);
			SetStringVar(playerid, "FurnitureNameBuying", PicturesInfo[listitem][furnitureName]);
		}
		else if(GetIntVar(playerid, "TypeBuying") == 10)
		{
			SetIntVar(playerid, "FurnitureModelBuying", PlantsInfo[listitem][furnitureModel]);
			SetIntVar(playerid, "FurniturePriceBuying", PlantsInfo[listitem][furniturePrice]);
			SetStringVar(playerid, "FurnitureNameBuying", PlantsInfo[listitem][furnitureName]);
		}
		else if(GetIntVar(playerid, "TypeBuying") == 11)
		{
			SetIntVar(playerid, "FurnitureModelBuying", LampsInfo[listitem][furnitureModel]);
			SetIntVar(playerid, "FurniturePriceBuying", LampsInfo[listitem][furniturePrice]);
			SetStringVar(playerid, "FurnitureNameBuying", LampsInfo[listitem][furnitureName]);
		}
		else if(GetIntVar(playerid, "TypeBuying") == 12)
		{
			SetIntVar(playerid, "FurnitureModelBuying", RandomDecorations[listitem][furnitureModel]);
			SetIntVar(playerid, "FurniturePriceBuying", RandomDecorations[listitem][furniturePrice]);
			SetStringVar(playerid, "FurnitureNameBuying", RandomDecorations[listitem][furnitureName]);
		}
		else if(GetIntVar(playerid, "TypeBuying") == 13)
		{
			SetIntVar(playerid, "FurnitureModelBuying", RandomMess[listitem][furnitureModel]);
			SetIntVar(playerid, "FurniturePriceBuying", RandomMess[listitem][furniturePrice]);
			SetStringVar(playerid, "FurnitureNameBuying", RandomMess[listitem][furnitureName]);
		}
		else if(GetIntVar(playerid, "TypeBuying") == 14)
		{
			SetIntVar(playerid, "FurnitureModelBuying", BedsInfo[listitem][furnitureModel]);
			SetIntVar(playerid, "FurniturePriceBuying", BedsInfo[listitem][furniturePrice]);
			SetStringVar(playerid, "FurnitureNameBuying", BedsInfo[listitem][furnitureName]);
		}
		else if(GetIntVar(playerid, "TypeBuying") == 15)
		{
			SetIntVar(playerid, "FurnitureModelBuying", DressersInfo[listitem][furnitureModel]);
			SetIntVar(playerid, "FurniturePriceBuying", DressersInfo[listitem][furniturePrice]);
			SetStringVar(playerid, "FurnitureNameBuying", DressersInfo[listitem][furnitureName]);
		}
		else if(GetIntVar(playerid, "TypeBuying") == 16)
		{
			SetIntVar(playerid, "FurnitureModelBuying", CabinetsInfo[listitem][furnitureModel]);
			SetIntVar(playerid, "FurniturePriceBuying", CabinetsInfo[listitem][furniturePrice]);
			SetStringVar(playerid, "FurnitureNameBuying", CabinetsInfo[listitem][furnitureName]);
		}
		else if(GetIntVar(playerid, "TypeBuying") == 17)
		{
			SetIntVar(playerid, "FurnitureModelBuying", WallsInfo[listitem][furnitureModel]);
			SetIntVar(playerid, "FurniturePriceBuying", WallsInfo[listitem][furniturePrice]);
			SetStringVar(playerid, "FurnitureNameBuying", WallsInfo[listitem][furnitureName]);
		}
		else if(GetIntVar(playerid, "TypeBuying") == 18)
		{
			SetIntVar(playerid, "FurnitureModelBuying", DoorFurniture[listitem][furnitureModel]);
			SetIntVar(playerid, "FurniturePriceBuying", DoorFurniture[listitem][furniturePrice]);
			SetStringVar(playerid, "FurnitureNameBuying", DoorFurniture[listitem][furnitureName]);
		}
		if(GetCash(playerid) < GetIntVar(playerid, "FurniturePriceBuying")) return NoCashMSG(playerid);
		GiveCash(playerid, -GetIntVar(playerid, "FurniturePriceBuying"));
		format(msg, sizeof(msg), "You have bought a {00FF00}%s{FFFFFF}, for ${00FF00}%d{FFFFFF}.", GetStringVar(playerid, "FurnitureNameBuying"), GetIntVar(playerid, "FurniturePriceBuying"));
		ServerMSG(playerid, msg);
		ServerMSG(playerid, "You may press {FFFF00}ESC{FFFFFF} if you want to cancel the purchase");
		PutPlayer(playerid, x, y, z+1);
		FurnitureInfo[houseid][i][fObject] = CreateDynamicObject(GetIntVar(playerid, "FurnitureModelBuying"), x, y, z-1, 0.0, 0.0, 0.0, GetWorld(playerid), GetInterior(playerid), -1, 200.0);
		HouseInfo[houseid][hFurnitures] += 1;
		SetIntVar(playerid, "JustBoughtFurniture", 1);
		SetIntVar(playerid, "ChosenFurnitureSlot", i);
		EditDynamicObject(playerid, FurnitureInfo[houseid][i][fObject]);
		UpdateHouseInfo(houseid);
		OnPlayerBuyFurniture(houseid, GetInterior(playerid), GetWorld(playerid), i, GetIntVar(playerid, "FurnitureModelBuying"), GetIntVar(playerid, "FurniturePriceBuying"), GetStringVar(playerid, "FurnitureNameBuying"), x, y, z);
	}
	else
	{
		SCM(playerid, COLOR_CYAN, "You've canceled the furniture dialog.");
	}
	return 1;
}

Dialog:BedroomFurniture(playerid, response, listitem, inputtext[])
{
	new string[3000];
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				for(new i = 0; i < sizeof(BedsInfo); i++)
				{
					format(string, sizeof(string), "%s("EMBED_YELLOW"%d"EMBED_WHITE") %s - "EMBED_CYAN" $%d.\n", string, i, BedsInfo[i][furnitureName], BedsInfo[i][furniturePrice]);
				}
				ShowDialog(playerid, Show:<HandleFurnitureBuying>, DIALOG_STYLE_LIST, ""EMBED_YELLOW"Beds"EMBED_WHITE":", string, "Buy", "Close");
				SetIntVar(playerid, "TypeBuying", 14);
			}
			case 1:
			{
				for(new i = 0; i < sizeof(DressersInfo); i++)
				{
					format(string, sizeof(string), "%s("EMBED_YELLOW"%d"EMBED_WHITE") %s - "EMBED_CYAN" $%d.\n", string, i, DressersInfo[i][furnitureName], DressersInfo[i][furniturePrice]);
				}
				ShowDialog(playerid, Show:<HandleFurnitureBuying>, DIALOG_STYLE_LIST, ""EMBED_YELLOW"Dressers"EMBED_WHITE":", string, "Buy", "Close");
				SetIntVar(playerid, "TypeBuying", 15);
			}
			case 2:
			{
				for(new i = 0; i < sizeof(CabinetsInfo); i++)
				{
					format(string, sizeof(string), "%s("EMBED_YELLOW"%d"EMBED_WHITE") %s - "EMBED_CYAN" $%d.\n", string, i, CabinetsInfo[i][furnitureName], CabinetsInfo[i][furniturePrice]);
				}
				ShowDialog(playerid, Show:<HandleFurnitureBuying>, DIALOG_STYLE_LIST, ""EMBED_YELLOW"Cabinets"EMBED_WHITE":", string, "Buy", "Close");
				SetIntVar(playerid, "TypeBuying", 16);
			}
		}
	}
	else
	{
		SCM(playerid, COLOR_CYAN, "You've canceled the furniture dialog.");
	}
	return 1;
}

Dialog:LivingroomFurniture(playerid, response, listitem, inputtext[])
{
	new string[3000];
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				for(new i = 0; i < sizeof(ChairsInfo); i++)
				{
					format(string, sizeof(string), "%s("EMBED_YELLOW"%d"EMBED_WHITE") %s - "EMBED_CYAN" $%d.\n", string, i, ChairsInfo[i][furnitureName], ChairsInfo[i][furniturePrice]);
				}
				ShowDialog(playerid, Show:<HandleFurnitureBuying>, DIALOG_STYLE_LIST, ""EMBED_YELLOW"Chairs"EMBED_WHITE":", string, "Buy", "Close");
				SetIntVar(playerid, "TypeBuying", 3);
			}
			case 1:
			{
				for(new i = 0; i < sizeof(TablesInfo); i++)
				{
					format(string, sizeof(string), "%s("EMBED_YELLOW"%d"EMBED_WHITE") %s - "EMBED_CYAN" $%d.\n", string, i, TablesInfo[i][furnitureName], TablesInfo[i][furniturePrice]);
				}
				ShowDialog(playerid, Show:<HandleFurnitureBuying>, DIALOG_STYLE_LIST, ""EMBED_YELLOW"Tables"EMBED_WHITE":", string, "Buy", "Close");
				SetIntVar(playerid, "TypeBuying", 4);
			}
			case 2:
			{
				for(new i = 0; i < sizeof(SofasInfo); i++)
				{
					format(string, sizeof(string), "%s("EMBED_YELLOW"%d"EMBED_WHITE") %s - "EMBED_CYAN" $%d.\n", string, i, SofasInfo[i][furnitureName], SofasInfo[i][furniturePrice]);
				}
				ShowDialog(playerid, Show:<HandleFurnitureBuying>, DIALOG_STYLE_LIST, ""EMBED_YELLOW"Sofas"EMBED_WHITE":", string, "Buy", "Close");
				SetIntVar(playerid, "TypeBuying", 5);
			}
			case 3:
			{
				for(new i = 0; i < sizeof(DinnerTablesInfo); i++)
				{
					format(string, sizeof(string), "%s("EMBED_YELLOW"%d"EMBED_WHITE") %s - "EMBED_CYAN" $%d.\n", string, i, DinnerTablesInfo[i][furnitureName], DinnerTablesInfo[i][furniturePrice]);
				}
				ShowDialog(playerid, Show:<HandleFurnitureBuying>, DIALOG_STYLE_LIST, ""EMBED_YELLOW"Dinning tables"EMBED_WHITE":", string, "Buy", "Close");
				SetIntVar(playerid, "TypeBuying", 6);
			}
			case 4:
			{
				for(new i = 0; i < sizeof(TelevisionsInfo); i++)
				{
					format(string, sizeof(string), "%s("EMBED_YELLOW"%d"EMBED_WHITE") %s - "EMBED_CYAN" $%d.\n", string, i, TelevisionsInfo[i][furnitureName], TelevisionsInfo[i][furniturePrice]);
				}
				ShowDialog(playerid, Show:<HandleFurnitureBuying>, DIALOG_STYLE_LIST, ""EMBED_YELLOW"Televisions"EMBED_WHITE":", string, "Buy", "Close");
				SetIntVar(playerid, "TypeBuying", 7);
			}
		}
	}
	else
	{
		SCM(playerid, COLOR_CYAN, "You've canceled the furniture dialog.");
	}
	return 1;
}

Dialog:BuyFurnitureDialog(playerid, response, listitem, inputtext[])
{
	new string[3000];
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				for(new i = 0; i < sizeof(KitchenInfo); i++)
				{
					format(string, sizeof(string), "%s("EMBED_YELLOW"%d"EMBED_WHITE") %s - "EMBED_CYAN" $%d.\n", string, i, KitchenInfo[i][furnitureName], KitchenInfo[i][furniturePrice]);
				}
				ShowDialog(playerid, Show:<HandleFurnitureBuying>, DIALOG_STYLE_LIST, ""EMBED_YELLOW"Kitchen appliances"EMBED_WHITE":", string, "Buy", "Close");
				SetIntVar(playerid, "TypeBuying", 1);
			}
			case 1:
			{
				for(new i = 0; i < sizeof(BathroomInfo); i++)
				{
					format(string, sizeof(string), "%s("EMBED_YELLOW"%d"EMBED_WHITE") %s - "EMBED_CYAN" $%d.\n", string, i, BathroomInfo[i][furnitureName], BathroomInfo[i][furniturePrice]);
				}
				ShowDialog(playerid, Show:<HandleFurnitureBuying>, DIALOG_STYLE_LIST, ""EMBED_YELLOW"Bathroom appliances"EMBED_WHITE":", string, "Buy", "Close");
				SetIntVar(playerid, "TypeBuying", 2);
			}
			case 2:
			{
				ShowDialog(playerid, Show:<LivingroomFurniture>, DIALOG_STYLE_LIST, ""EMBED_YELLOW"Livingroom & Kitchen stuff"EMBED_WHITE":", "Chairs\nTables\nSofas\nDinning tables\nTelevisions", "Select", "Close");
			}
			case 3:
			{
				ShowDialog(playerid, Show:<BedroomFurniture>, DIALOG_STYLE_LIST, ""EMBED_YELLOW"Bedroom appliances"EMBED_WHITE":", "Beds\nDressers\nCabinets", "Select", "Close");
			}
			case 4:
			{
				ShowDialog(playerid, Show:<DecorationDialog>, DIALOG_STYLE_LIST, ""EMBED_YELLOW"Decorations"EMBED_WHITE":", "Carpets\nPictures\nPlants\nLamps\nRandom stuff\nRandom mess", "Select", "Close");
			}
			case 5:
			{
				ShowDialog(playerid, Show:<ConstructionDialog>, DIALOG_STYLE_LIST, ""EMBED_YELLOW"Constructions"EMBED_WHITE":", "Walls\nDoors", "Select", "Close");
			}

		}
	}
	else
	{
		SCM(playerid, COLOR_CYAN, "You've canceled the furniture dialog.");
	}
	return 1;
}

Dialog:ConstructionDialog(playerid, response, listitem, inputtext[])
{
	new string[4000];
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				for(new i = 0; i < sizeof(WallsInfo); i++)
				{
					format(string, sizeof(string), "%s("EMBED_YELLOW"%d"EMBED_WHITE") %s - "EMBED_CYAN" $%d.\n", string, i, WallsInfo[i][furnitureName], WallsInfo[i][furniturePrice]);
				}
				ShowDialog(playerid, Show:<HandleFurnitureBuying>, DIALOG_STYLE_LIST, ""EMBED_YELLOW"Walls"EMBED_WHITE":", string, "Buy", "Close");
				SetIntVar(playerid, "TypeBuying", 17);
			}
			case 1:
			{
				SCM(playerid, COLOR_GREY, "[NOTE]: If you place a door, you can /lock & /door.");
				for(new i = 0; i < sizeof(DoorFurniture); i++)
				{
					format(string, sizeof(string), "%s("EMBED_YELLOW"%d"EMBED_WHITE") %s - "EMBED_CYAN" $%d.\n", string, i, DoorFurniture[i][furnitureName], DoorFurniture[i][furniturePrice]);
				}
				ShowDialog(playerid, Show:<HandleFurnitureBuying>, DIALOG_STYLE_LIST, ""EMBED_YELLOW"Doors"EMBED_WHITE":", string, "Buy", "Close");
				SetIntVar(playerid, "TypeBuying", 18);
			}
		}
	}
	else
	{
		SCM(playerid, COLOR_CYAN, "You've canceled the furniture dialog.");
	}
	return 1;
}

Dialog:DecorationDialog(playerid, response, listitem, inputtext[])
{
	new string[2300];
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				for(new i = 0; i < sizeof(GrugsInfo); i++)
				{
					format(string, sizeof(string), "%s("EMBED_YELLOW"%d"EMBED_WHITE") %s - "EMBED_CYAN" $%d.\n", string, i, GrugsInfo[i][furnitureName], GrugsInfo[i][furniturePrice]);
				}
				ShowDialog(playerid, Show:<HandleFurnitureBuying>, DIALOG_STYLE_LIST, ""EMBED_YELLOW"Carpets"EMBED_WHITE":", string, "Buy", "Close");
				SetIntVar(playerid, "TypeBuying", 8);
			}
			case 1:
			{
				for(new i = 0; i < sizeof(PicturesInfo); i++)
				{
					format(string, sizeof(string), "%s("EMBED_YELLOW"%d"EMBED_WHITE") %s - "EMBED_CYAN" $%d.\n", string, i, PicturesInfo[i][furnitureName], PicturesInfo[i][furniturePrice]);
				}
				ShowDialog(playerid, Show:<HandleFurnitureBuying>, DIALOG_STYLE_LIST, ""EMBED_YELLOW"Pictures"EMBED_WHITE":", string, "Buy", "Close");
				SetIntVar(playerid, "TypeBuying", 9);
			}
			case 2:
			{
				for(new i = 0; i < sizeof(PlantsInfo); i++)
				{
					format(string, sizeof(string), "%s("EMBED_YELLOW"%d"EMBED_WHITE") %s - "EMBED_CYAN" $%d.\n", string, i, PlantsInfo[i][furnitureName], PlantsInfo[i][furniturePrice]);
				}
				ShowDialog(playerid, Show:<HandleFurnitureBuying>, DIALOG_STYLE_LIST, ""EMBED_YELLOW"Plants"EMBED_WHITE":", string, "Buy", "Close");
				SetIntVar(playerid, "TypeBuying", 10);
			}
			case 3:
			{
				for(new i = 0; i < sizeof(LampsInfo); i++)
				{
					format(string, sizeof(string), "%s("EMBED_YELLOW"%d"EMBED_WHITE") %s - "EMBED_CYAN" $%d.\n", string, i, LampsInfo[i][furnitureName], LampsInfo[i][furniturePrice]);
				}
				ShowDialog(playerid, Show:<HandleFurnitureBuying>, DIALOG_STYLE_LIST, ""EMBED_YELLOW"Lamps"EMBED_WHITE":", string, "Buy", "Close");
				SetIntVar(playerid, "TypeBuying", 11);
			}
			case 4:
			{
				for(new i = 0; i < sizeof(RandomDecorations); i++)
				{
					format(string, sizeof(string), "%s("EMBED_YELLOW"%d"EMBED_WHITE") %s - "EMBED_CYAN" $%d.\n", string, i, RandomDecorations[i][furnitureName], RandomDecorations[i][furniturePrice]);
				}
				ShowDialog(playerid, Show:<HandleFurnitureBuying>, DIALOG_STYLE_LIST, ""EMBED_YELLOW"Random stuff"EMBED_WHITE":", string, "Buy", "Close");
				SetIntVar(playerid, "TypeBuying", 12);
			}
			case 5:
			{
				for(new i = 0; i < sizeof(RandomMess); i++)
				{
					format(string, sizeof(string), "%s("EMBED_YELLOW"%d"EMBED_WHITE") %s - "EMBED_CYAN" $%d.\n", string, i, RandomMess[i][furnitureName], RandomMess[i][furniturePrice]);
				}
				ShowDialog(playerid, Show:<HandleFurnitureBuying>, DIALOG_STYLE_LIST, ""EMBED_YELLOW"Random mess"EMBED_WHITE":", string, "Buy", "Close");
				SetIntVar(playerid, "TypeBuying", 13);
			}
		}
	}
	else
	{
		SCM(playerid, COLOR_CYAN, "You've canceled the furniture dialog.");
	}
	return 1;
}


Dialog:FurnitureDialog(playerid, response, listitem, inputtext[])
{
	new string[2000+1];
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				if(GetHouseFurnitures(PlayerInfo[playerid][pHouseKey]) == 0) return SCM(playerid, COLOR_YELLOWG, "You don't have any furnitures.");
				for(new i = 0; i < MAX_FURNITURE; i++)
				{
					if(FurnitureInfo[PlayerInfo[playerid][pHouseKey]][i][fOn])
					{
						format(string, sizeof(string), "%s("EMBED_YELLOW"Slot %d"EMBED_WHITE") %s\n", string, i, FurnitureInfo[PlayerInfo[playerid][pHouseKey]][i][fName]);
					}
				}
				ShowDialog(playerid, Show:<DisplayFurniture>, DIALOG_STYLE_LIST, "{00FF40}Furniture list{FFFFFF}:", string, "Accept", "Cancel");
			}
			case 1:
			{
				ShowDialog(playerid, Show:<BuyFurnitureDialog>, DIALOG_STYLE_LIST, "{00FF40}Categories{FFFFFF}:", "Kitchen appliances\nBathroom appliances\nLiving room appliances\nBedroom appliances\nDecorations\nConstruction", "Select", "Close");
			}
			case 2:
			{
				if(GetIntVar(playerid, "EditingFurniture") == 1) return ServerMSG(playerid, "You are in middle of editing another furniture.");
				ShowDialog(playerid, Show:<HandleEditFurniture>, DIALOG_STYLE_INPUT, "{00FF40}Edit furniture{FFFFFF}:", "Please enter the furniture slot you would like to edit.", "Edit", "Cancel");
			}
			case 3:
			{
				ShowDialog(playerid, Show:<HandleSellFurniture>, DIALOG_STYLE_INPUT, "{00FF40}Sell furniture{FFFFFF}:", "Please enter the furniture slot you would like to sell.", "Edit", "Cancel");
			}
			case 4:
			{
				ShowDialog(playerid, Show:<TextureEditFurniture>, DIALOG_STYLE_INPUT, "{00FF40}Texture furniture{FFFFFF}:", "Please enter the furniture slot you would like to texture.", "Texture", "Cancel");
			}
		}
	}
	else return SCM(playerid, COLOR_CYAN, "You've canceled the furniture dialog.");
	return 1;
}

Dialog:ModDialog(playerid, response, listitem, inputtext[])
{
	new vehicle = GetPlayerVehicleID(playerid);
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				SetIntVar(playerid, "BrowsingWheels", 1);
				SetStringVar(playerid, "CompType", "Wheels");
				SetIntVar(playerid, "CompPrice", Wheels[0][compPrice]);
				SetIntVar(playerid, "CompID", Wheels[0][compID]);
				SetIntVar(playerid, "CompSlot", 0);
				SetStringVar(playerid, "CompName", GetComponentName(GetIntVar(playerid, "CompID")));
				SCM(playerid, -1, "Hint: Press NUMPAD {FFFF00}4{FFFFFF} or NUMPAD {FFFF00}6{FFFFFF} to change the component.");
				ShowModText(playerid);
				HandleComponentText(playerid, vehicle);
				IsModding{playerid} = true;
			}
			case 1:
			{
				SetIntVar(playerid, "BrowsingSpoilers", 1);
				SetStringVar(playerid, "CompType", "Spoilers");
				SetIntVar(playerid, "CompPrice", Spoilers[0][compPrice]);
				SetIntVar(playerid, "CompID", Spoilers[0][compID]);
				SetIntVar(playerid, "CompSlot", 0);
				SetStringVar(playerid, "CompName", GetComponentName(GetIntVar(playerid, "CompID")));
				SCM(playerid, -1, "Hint: Press NUMPAD {FFFF00}4{FFFFFF} or NUMPAD {FFFF00}6{FFFFFF} to change the component.");
				ShowModText(playerid);
				HandleComponentText(playerid, vehicle);
				IsModding{playerid} = true;
			}
			case 2:
			{
				SetIntVar(playerid, "BrowsingScoops", 1);
				SetStringVar(playerid, "CompType", "Scoops");
				SetIntVar(playerid, "CompPrice", Scoops[0][compPrice]);
				SetIntVar(playerid, "CompID", Scoops[0][compID]);
				SetIntVar(playerid, "CompSlot", 0);
				SetStringVar(playerid, "CompName", GetComponentName(GetIntVar(playerid, "CompID")));
				SCM(playerid, -1, "Hint: Press NUMPAD {FFFF00}4{FFFFFF} or NUMPAD {FFFF00}6{FFFFFF} to change the component.");
				ShowModText(playerid);
				HandleComponentText(playerid, vehicle);
				IsModding{playerid} = true;
			}
			case 3:
			{
				SetIntVar(playerid, "BrowsingRoofs", 1);
				SetStringVar(playerid, "CompType", "Roofs");
				SetIntVar(playerid, "CompPrice", Roofs[0][compPrice]);
				SetIntVar(playerid, "CompID", Roofs[0][compID]);
				SetIntVar(playerid, "CompSlot", 0);
				SetStringVar(playerid, "CompName", GetComponentName(GetIntVar(playerid, "CompID")));
				SCM(playerid, -1, "Hint: Press NUMPAD {FFFF00}4{FFFFFF} or NUMPAD {FFFF00}6{FFFFFF} to change the component.");
				ShowModText(playerid);
				HandleComponentText(playerid, vehicle);
				IsModding{playerid} = true;
			}
			case 4:
			{
				SetIntVar(playerid, "BrowsingPaints", 1);
				SetIntVar(playerid, "OnPaint", 0);
				ChangeVehicleColor(vehicle, 1, 1);
				ChangeVehiclePaintjob(vehicle, 0);
				SCM(playerid, -1, "Hint: Press NUMPAD {FFFF00}4{FFFFFF} or NUMPAD {FFFF00}6{FFFFFF} to change the paintjob type.");
				ShowModText(playerid);
				HandlePaintJobText(playerid, vehicle);
				BuyingPaintJob{playerid} = true;
			}
			case 5:
			{
				SetIntVar(playerid, "BrowsingSkirts", 1);
				SetStringVar(playerid, "CompType", "Sideskirts");
				SetIntVar(playerid, "CompPrice", Sideskirts[0][compPrice]);
				SetIntVar(playerid, "CompID", Sideskirts[0][compID]);
				SetIntVar(playerid, "CompSlot", 0);
				SetStringVar(playerid, "CompName", GetComponentName(GetIntVar(playerid, "CompID")));
				SCM(playerid, -1, "Hint: Press NUMPAD {FFFF00}4{FFFFFF} or NUMPAD {FFFF00}6{FFFFFF} to change the component.");
				ShowModText(playerid);
				HandleComponentText(playerid, vehicle);
				IsModding{playerid} = true;
			}
			case 6:
			{
				SetIntVar(playerid, "BrowsingExhausts", 1);
				SetStringVar(playerid, "CompType", "Exhausts");
				SetIntVar(playerid, "CompPrice", Exhausts[0][compPrice]);
				SetIntVar(playerid, "CompID", Exhausts[0][compID]);
				SetIntVar(playerid, "CompSlot", 0);
				SetStringVar(playerid, "CompName", GetComponentName(GetIntVar(playerid, "CompID")));
				SCM(playerid, -1, "Hint: Press NUMPAD {FFFF00}4{FFFFFF} or NUMPAD {FFFF00}6{FFFFFF} to change the component.");
				ShowModText(playerid);
				HandleComponentText(playerid, vehicle);
				IsModding{playerid} = true;
			}
			case 7:
			{
				if(HasComponent(vehicle, 1087)) return SCM(playerid, COLOR_INFO, "You already have Hydraulics.");
				if(GetCash(playerid) < 2450) return NoCashMSG(playerid);
				GiveCash(playerid, -2450);
				SetVehicleComponent(vehicle, 1087, CARMODTYPE_HYDRAULICS);
				InfoMSG(playerid, "~b~You have successfully bought Hydraulics upgrade.~n~~g~Price: ~w~$2450", 10);
			}
			case 8:
			{
				if(VehicleInfo[vehicle][carRadio] == 1) return SCM(playerid, COLOR_INFO, "You already have a BoomBox.");
				if(GetCash(playerid) < 1750) return NoCashMSG(playerid);
				GiveCash(playerid, -1750);
				VehicleInfo[vehicle][carRadio] = 1;
				InfoMSG(playerid, "~b~You have successfully bought BoomBox upgrade.~n~~g~Price: ~w~$1750~n~~w~you can /setstation now.", 10);
				SaveVehicle(vehicle);
			}
		}
	}
	return 1;
}

Dialog:StoreDialog(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
			    if(PlayerInfo[playerid][pCellPhone] == 1) return SCM(playerid, COLOR_INFO, "You already have a phone.");
				if(GetCash(playerid) < CELLPRICE) return NoCashMSG(playerid);
				BizInfo[BizEntered[playerid]][bizCash] += CELLPRICE;
				GiveCash(playerid, -CELLPRICE);
				PlayerInfo[playerid][pCellPhone] = 1;
				PlayerInfo[playerid][pNumber] = randomEx(1234567, 9999999);
    			SCM(playerid, COLOR_GREY, "You bought an item for {33AA33}250${808080} (Phone).");
    			SCM(playerid, COLOR_GREY, "HINT: /call");
			}
			case 1:
			{
				if(GetCash(playerid) < TOOLPRICE) return NoCashMSG(playerid);
				BizInfo[BizEntered[playerid]][bizCash] += TOOLPRICE;
				ToolKit{playerid} = true;
				GiveCash(playerid, -TOOLPRICE);
				SCM(playerid, COLOR_GREY, "You bought an item for {33AA33}100${808080} (Tool kit).");
    			SCM(playerid, COLOR_GREY, "HINT: /lock");
			}
			case 2:
			{
			    if(PlayerInfo[playerid][pRadio] == 1) return SCM(playerid, COLOR_INFO, "You already have a station radio.");
				if(GetCash(playerid) < RADIOPRICE) return NoCashMSG(playerid);
				if(PlayerInfo[playerid][pRadio] != 0) return SCM(playerid, COLOR_GREY, "You already have a Radio.");
				GiveCash(playerid, - RADIOPRICE);
				BizInfo[BizEntered[playerid]][bizCash] += RADIOPRICE;
				PlayerInfo[playerid][pRadio] = 1;
				SCM(playerid, COLOR_GREY, "You bought an item for {33AA33}1500${808080} (Radio station).");
    			SCM(playerid, COLOR_GREY, "HINT: /radiohelp");
			}
			case 3:
			{
				if(PlayerInfo[playerid][pMask] == 1) return SCM(playerid, COLOR_INFO, "You already have a mask.");
				if(GetCash(playerid) < MASKPRICE) return NoCashMSG(playerid);
				GiveCash(playerid, - MASKPRICE);
				BizInfo[BizEntered[playerid]][bizCash] += MASKPRICE;
				SCM(playerid, COLOR_GREY, "You bought an item for {33AA33}100${808080} (Mask).");
    			SCM(playerid, COLOR_GREY, "HINT: /mask");
				PlayerInfo[playerid][pMask] = 1;
			}
			case 4:
			{
				if(GetCash(playerid) < LIGHTERPRICE) return NoCashMSG(playerid);
				GiveCash(playerid, - LIGHTERPRICE);
				BizInfo[BizEntered[playerid]][bizCash] += LIGHTERPRICE;
				PlayerInfo[playerid][pLighter] += 40;
				SCM(playerid, COLOR_GREY, "You bought an item for {33AA33}1${808080} (Lighter).");
    			SCM(playerid, COLOR_GREY, "HINT: /smoke");
			}
			case 5:
			{
				if(GetCash(playerid) < CIGARPRICE) return NoCashMSG(playerid);
				GiveCash(playerid, - CIGARPRICE);
				BizInfo[BizEntered[playerid]][bizCash] += CIGARPRICE;
				PlayerInfo[playerid][pCigars] += 20;
				SCM(playerid, COLOR_GREY, "You bought an item for {33AA33}10${808080} (Cigarettes).");
    			SCM(playerid, COLOR_GREY, "HINT: /smoke");
			}
			case 6:
			{
				if(GetCash(playerid) < DICEPRICE) return NoCashMSG(playerid);
				GiveCash(playerid, - DICEPRICE);
				BizInfo[BizEntered[playerid]][bizCash] += DICEPRICE;
				SetIntVar(playerid, "Dice", 1);
				SCM(playerid, COLOR_GREY, "You bought an item for {33AA33}5${808080} (Dice).");
    			SCM(playerid, COLOR_GREY, "HINT: /dice");
			}
			case 7:
			{
				if(GetCash(playerid) < CANPRICE) return NoCashMSG(playerid);
				GiveCash(playerid, - CANPRICE);
				BizInfo[BizEntered[playerid]][bizCash] += CANPRICE;
				GasCan{playerid} = true;
				SCM(playerid, COLOR_GREY, "You bought an item for {33AA33}75${808080} (Canister).");
    			SCM(playerid, COLOR_GREY, "HINT: /gascan");
			}
			case 8:
			{
				if(GetCash(playerid) < PENPRICE) return NoCashMSG(playerid);
				GiveCash(playerid, - PENPRICE);
				BizInfo[BizEntered[playerid]][bizCash] += PENPRICE;
				PlayerInfo[playerid][pPen] = 1;
				SCM(playerid, COLOR_GREY, "You bought an item for {33AA33}5${808080} (Pen).");
    			SCM(playerid, COLOR_GREY, "HINT: /note");
			}
			case 9:
			{
				if(IsMeleeSlotTaken(playerid)) return SCM(playerid, COLOR_GREY, "You already have a weapon in your melee slot.");
				if(GetCash(playerid) < BATPRICE) return NoCashMSG(playerid);
				GiveCash(playerid, - BATPRICE);
				BizInfo[BizEntered[playerid]][bizCash] += BATPRICE;
				GiveMeleeWeapon(playerid, 5);
				SCM(playerid, COLOR_GREY, "You bought an item for {33AA33}25${808080} (Baseball bat).");
			}
			case 10:
			{
				if(GetCash(playerid) < CAMPRICE) return NoCashMSG(playerid);
				GiveCash(playerid, - CAMPRICE);
				BizInfo[BizEntered[playerid]][bizCash] += CAMPRICE;
				GiveWeapon(playerid, 43, 20);
				SCM(playerid, COLOR_GREY, "You bought an item for {33AA33}150${808080} (Camera).");
			}
		}
	}
	return 1;
}

Dialog:LSPDClothes(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				if(HasAttachedObject(playerid, 18636)) return SCM(playerid, COLOR_GREY, "You already have this hat.");
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						SetPlayerAttachedObject(playerid, i, 18636, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,  0xFFFFFFFF);
						EditAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = 18636;
						SetIntVar(playerid, "EditingPolice", 1);
						return 1;
					}
				}
			}
			case 1:
			{
				if(HasAttachedObject(playerid, 19099)) return SCM(playerid, COLOR_GREY, "You already have this hat.");
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						SetPlayerAttachedObject(playerid, i, 19099, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,  0xFFFFFFFF);
						EditAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = 19099;
						SetIntVar(playerid, "EditingPolice", 1);
						return 1;
					}
				}
			}
			case 2:
			{
				if(HasAttachedObject(playerid, 19100)) return SCM(playerid, COLOR_GREY, "You already have this hat.");
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						SetPlayerAttachedObject(playerid, i, 19100, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,  0xFFFFFFFF);
						EditAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = 19100;
						SetIntVar(playerid, "EditingPolice", 1);
						return 1;
					}
				}
			}
			case 3:
			{
				if(HasAttachedObject(playerid, 19161)) return SCM(playerid, COLOR_GREY, "You already have this hat.");
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						SetPlayerAttachedObject(playerid, i, 19161, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,  0xFFFFFFFF);
						EditAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = 19161;
						SetIntVar(playerid, "EditingPolice", 1);
						return 1;
					}
				}
			}
			case 4:
			{
				if(HasAttachedObject(playerid, 19162)) return SCM(playerid, COLOR_GREY, "You already have this hat.");
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						SetPlayerAttachedObject(playerid, i, 19162, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,  0xFFFFFFFF);
						EditAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = 19162;
						SetIntVar(playerid, "EditingPolice", 1);
						return 1;
					}
				}
			}
			case 5:
			{
				if(HasAttachedObject(playerid, 19521)) return SCM(playerid, COLOR_GREY, "You already have this hat.");
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						SetPlayerAttachedObject(playerid, i, 19521, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,  0xFFFFFFFF);
						EditAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = 19521;
						SetIntVar(playerid, "EditingPolice", 1);
						return 1;
					}
				}
			}
			case 6:
			{
				if(HasAttachedObject(playerid, 19200)) return SCM(playerid, COLOR_GREY, "You already have this hat.");
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						SetPlayerAttachedObject(playerid, i, 19200, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,  0xFFFFFFFF);
						EditAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = 19200;
						SetIntVar(playerid, "EditingPolice", 1);
						return 1;
					}
				}
			}
			case 7:
			{
				if(HasAttachedObject(playerid, 18637)) return SCM(playerid, COLOR_GREY, "You already have this hat.");
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						SetPlayerAttachedObject(playerid, i, 18637, 6, 0.071999, 0.02, 0.0, 0.0, 0.0, 0.0, 0.881, 1.0, 0.719999);
						EditAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = 18637;
						SetIntVar(playerid, "EditingPolice", 1);
						return 1;
					}
				}
			}
            case 8:
			{
				if(HasAttachedObject(playerid, 19142)) return SCM(playerid, COLOR_GREY, "You already have a vest.");
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						SetPlayerAttachedObject(playerid, i, 19142, 1, 0.098, 0.039);
						EditAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = 19142;
						SetIntVar(playerid, "EditingPolice", 1);
						return 1;
					}
				}
			}
			case 9:
			{
			    if(HasAttachedObject(playerid, 19141)) return SCM(playerid, COLOR_GREY, "You already have a helmet.");
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						SetPlayerAttachedObject(playerid, i, 19141, 2, 0.115000, -0.009999, -0.000999);
						EditAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = 19141;
						SetIntVar(playerid, "EditingPolice", 1);
						return 1;
					}
				}
			}
			case 10:
			{
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid, i) && PlayerToys[playerid][i][ptToyOn] == 0)
					{
						RemovePlayerAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = INVALID_OBJECT_ID;
						SCM(playerid, COLOR_WHITE,"You have successfully removed the items from you.");
					}
				}
			}
		}
	}
	return 1;
}
Dialog:LSPDWeapons(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				GiveWeapon(playerid, 24, 125);
				SCM(playerid, COLOR_WHITE,"You've been equipped with a Desert Eagle.");
			}
			case 1:
			{
    			GiveWeapon(playerid, 25, 100);
    			SCM(playerid, COLOR_WHITE,"You've been equipped with a Shotgun.");
			}
			case 2:
			{
				GiveWeapon(playerid, 29, 300);
				SCM(playerid, COLOR_WHITE,"You've been equipped with a MP5.");
			}
			case 3:
			{
				GiveWeapon(playerid, 31, 300);
				SCM(playerid, COLOR_WHITE,"You've been equipped with a M4A1.");
			}
			case 4:
			{
				GiveWeapon(playerid, 43, 250);
				SCM(playerid, COLOR_WHITE,"You've been equipped with a Camera.");
			}
			case 5:
			{
				GiveWeapon(playerid, 3, 250);
				SCM(playerid, COLOR_WHITE,"You've been equipped with a Nitestick.");
			}
			case 6:
			{
				GiveWeapon(playerid, 41, 550);
				SCM(playerid, COLOR_WHITE,"You've been equipped with a Spraycan");
			}
			case 7:
			{
				GiveWeapon(playerid, 34, 20);
				SCM(playerid, COLOR_WHITE,"You've been equipped with a Sniper.");
			}
		}
	}
	return 1;
}
Dialog:UniformPD(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				SetPlayerSkin(playerid,280);
			}
			case 1:
			{
    			SetPlayerSkin(playerid,281);
			}
			case 2:
			{
				SetPlayerSkin(playerid,265);
			}
			case 3:
			{
				SetPlayerSkin(playerid,266);
			}
			case 4:
			{
				SetPlayerSkin(playerid,267);
			}
			case 5:
			{
				SetPlayerSkin(playerid,300);
			}
			case 6:
			{
				SetPlayerSkin(playerid,301);
			}
            case 7:
			{
				SetPlayerSkin(playerid,303);
			}
			case 8:
			{
				SetPlayerSkin(playerid,304);
			}
			case 9:
			{
				SetPlayerSkin(playerid,305);
			}
			case 10:
			{
				SetPlayerSkin(playerid,306);
			}
			case 11:
			{
				SetPlayerSkin(playerid,307);
			}
			case 12:
			{
				SetPlayerSkin(playerid,71);
			}
			case 13:
			{
				SetPlayerSkin(playerid,8);
			}
		}
	}
	return 1;
}
Dialog:MDC(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				ShowDialog(playerid, Show:<MDCSearch>, DIALOG_STYLE_INPUT, "Police MDC System - Name Search", "NAME SEARCH\n\nInsert name\n\nFormat: Firstname_Lastname (( Or ID ))", "Enter", "Escape");
			}
			case 1:
			{
				ShowDialog(playerid, Show:<MDCRecord>, DIALOG_STYLE_INPUT, "Police MDC System - Submit Charges", "SUBMIT CHARGES\n\nInsert name below:\n\n(( Player ID / Firstname_Lastname ))", "Enter", "Escape");
			}
			case 2:
			{
				ShowDialog(playerid, Show:<MDCAddWarn>, DIALOG_STYLE_INPUT, "Police MDC System - Add", "ATTACH WARNING\n\nInsert name below:\n\n(( Player ID / Firstname_Lastname ))", "Enter", "Escape");
			}
			case 3:
			{
				ShowDialog(playerid, Show:<MDCVehicleID>, DIALOG_STYLE_INPUT, "Police MDC System - Plate Search", "PLATE SEARCH\n\nInsert plate number:\n\n(( Player ID / Firstname_Lastname ))", "Enter", "Escape");
			}
			case 4:
			{
				ShowDialog(playerid, Show:<MDCVehicle>, DIALOG_STYLE_INPUT, "Police MDC System - Plate Search", "PLATE SEARCH\n\nInsert plate info:", "Enter", "Escape");
			}
			case 5:
			{
				new string[500];
				for(new i = 0; i < sizeof(CallInfo); i++)
				{
					if(CallInfo[i][callTaken])
					{
						format(string, sizeof(string), "%s\n%s", string, CallInfo[i][callSituation]);
					}
				}
				ShowDialog(playerid, Show:<MDCLastCalls>, DIALOG_STYLE_LIST, "Police MDC System - Recent call lists 911", string, "Enter", "Escape");
			}
			case 6:
			{
				new string[500];
				for(new i = 0; i < sizeof(ArrestInfo); i++)
				{
					if(ArrestInfo[i][arrestTaken])
					{
						format(string, sizeof(string), "%s\n%s", string, GetNameEx(ArrestInfo[i][arrestSuspect]));
					}
				}
				ShowDialog(playerid, Show:<MDCLastArrest>, DIALOG_STYLE_LIST, "Police MDC System - The latest arrests", string, "Enter", "Escape");
			}
		}
	}
	return 1;
}

Dialog:MDCLastArrest(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new i = listitem;
		new string[500];
		format(string, sizeof(string), "ARREST INFORMATION\n\nArrest minute(s): %d\nName: %s\nArresting Officer: %s\nDate: %s\nLocation: %s", ArrestInfo[i][arrestTime], GetNameEx(ArrestInfo[i][arrestSuspect]), GetNameEx(ArrestInfo[i][arrestOfficer]), ArrestInfo[i][arrestDate], ArrestInfo[i][arrestLocation]);
		ShowDialog(playerid, Show:<MDCArrestResult>, DIALOG_STYLE_MSGBOX, "Police MDC System - Arrest Information", string, "Escapse", "");
	}
}

Dialog:MDCLastCalls(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new i = listitem;
		SetIntVar(playerid, "LastCallSlot", i);
		new string[500];
		format(string, sizeof(string), "911-CALL INFORMATION - #%d\n\nType: %s\n\nCaller: %s\nPhone number: %d\nSituation: %s\nLocation: %s\nTrace: %s\nDate: %s", CallInfo[i][callID], CallInfo[i][callType], GetNameEx(CallInfo[i][callCaller]), PlayerInfo[CallInfo[i][callCaller]][pNumber], CallInfo[i][callSituation], CallInfo[i][callLocation], CallInfo[i][callTrace], CallInfo[i][callDate]);
		ShowDialog(playerid, Show:<MDCRespondCall>, DIALOG_STYLE_MSGBOX, "Police MDC System - Last 911 Calls", string, "RESPOND", "Escapse");
	}
}

Dialog:MDCRespondCall(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		format(msg, sizeof(msg), "* %s %s replied to last 911, number #%d.", GetRankName(playerid), GetNameEx(playerid), CallInfo[GetIntVar(playerid, "LastCallSlot")][callID]);
		SendFactionMessage(LSPD, COLOR_LSPD, msg);
	}
}

Dialog:MDCSearch(playerid, response, listitem, inputtext[])
{
	new string[500], string2[500], string3[500], carlic[16], weplic[16], flylic[16], string4[255],string5[255];
	if(response)
	{
		new iPlayerID;
		if(sscanf(inputtext, "u", iPlayerID)) return ShowDialog(playerid, Show:<MDCSearch>, DIALOG_STYLE_INPUT, "Police MDC System - Name Search", "NAME SEARCH\n\nInsert name\n\nFormat: Firstname_Lastname (( Or ID ))", "Enter", "Escape");
		if(!PlayerIsOn(iPlayerID)) return ShowDialog(playerid, Show:<MDCSearch>, DIALOG_STYLE_INPUT, "Police MDC System - Name Search", "NAME SEARCH\n\nInsert name\n\nFormat: Firstname_Lastname (( Or ID ))\n"EMBED_RED"Player wasn't found.", "Enter", "Escape");
		if(PlayerInfo[iPlayerID][pCarLic] == 1)
			carlic = "Acquired";
		else
			carlic = "Fara";
		if(PlayerInfo[iPlayerID][pWepLic] == 1)
			weplic = "Acquired";
		else
			weplic = "Fara";
		if(PlayerInfo[iPlayerID][pFlyLic] == 1)
			flylic = "Acquired";
		else
			flylic = "Fara";
			CheckRecordPlayer(iPlayerID);
			format(string, sizeof(string), "NAME SEARCH RESULT\n\nFull name: %s, Age: %d\nPhone number: %d\nFines addressed: %d\nDrivers license: %s\nWeapon license: %s\nFlying license: %s\nDriver warnings: %d\n\nDomestic address: %s\n\n\n", GetNameEx(iPlayerID), PlayerInfo[iPlayerID][pAge], PlayerInfo[iPlayerID][pNumber], CountPlayerTickets(iPlayerID), carlic, weplic, flylic, PlayerInfo[iPlayerID][pDriveWarns], GetHouseLocation(iPlayerID));
			format(string2, sizeof(string2), "CRIMINAL RECORD\nJail sentences: %d\nPrison sentences: %d\n\n", PlayerInfo[iPlayerID][pArrested], PlayerInfo[iPlayerID][pPrisoned]);
			format(string3, sizeof(string3), "%s%s", string, string2);
			format(string4, sizeof(string4), "Acuzatii:\n\n1.%s\n2.%s\n3.%s\n4.%s\n5.%s\n",
			CriminalRecord[iPlayerID][0][mCharge],CriminalRecord[iPlayerID][1][mCharge],CriminalRecord[iPlayerID][2][mCharge],CriminalRecord[iPlayerID][3][mCharge],CriminalRecord[iPlayerID][4][mCharge]);
			strcat(string3, string4);
			if(PlayerInfo[iPlayerID][pFines] > 0)
			format(string5, sizeof(string5), "%s invoices unpaid fines/holds ((/fines))",GetNameEx(iPlayerID));
			strcat(string3, string5);
			ShowDialog(playerid, Show:<MDCResult2>, DIALOG_STYLE_MSGBOX, "Police MDC System", string3, "Print", "Cancel");
	}
	return 1;
}

Dialog:MDCResult3(playerid, response, listitem, inputtext[])
{
  new plate[64], vehicle;
  vehicle = FindVehicleByPlate(plate);
  if(response)
  {
    SCM(playerid, COLOR_WHITE,"PLATE SEARCH RESULT");
    SCM(playerid, COLOR_WHITE,"");
    format(msg, sizeof(msg), "Vehicle plate: %s", VehicleInfo[vehicle][carPlate]);
    SCM(playerid, COLOR_WHITE, msg);
    format(msg, sizeof(msg), "Vehicle model: %s", VehicleNames[VehicleInfo[vehicle][carModel]-400]);
    SCM(playerid, COLOR_WHITE, msg);
    format(msg, sizeof(msg), "Vehicle owner: %s", VehicleInfo[vehicle][carOwner]);
    SCM(playerid, COLOR_WHITE, msg);
  }
  return 1;
}


Dialog:MDCResult2(playerid, response, listitem, inputtext[])
{
  new carlic[16], weplic[16], flylic[16];
  if(response)
  {
    new iPlayerID;
    if(PlayerInfo[iPlayerID][pCarLic] == 1)
      carlic = "Acquired";
    else
      carlic = "Absent";
    if(PlayerInfo[iPlayerID][pWepLic] == 1)
      weplic = "Acquired";
    else
      weplic = "Absent";
    if(PlayerInfo[iPlayerID][pFlyLic] == 1)
      flylic = "Acquired";
    else
      flylic = "Absent";
    CheckRecordPlayer(iPlayerID);
    SCM(playerid, COLOR_WHITE,"Police MDC System - Name Search");
    SCM(playerid, COLOR_WHITE,"");
    SCM(playerid, COLOR_WHITE,"NAME SEARCH RESULT");
    SCM(playerid, COLOR_WHITE,"");
    format(msg, sizeof(msg), "Full Name: %s", GetNameEx(iPlayerID));
    SCM(playerid, COLOR_WHITE, msg);
    format(msg, sizeof(msg), "Phone Number: %d", PlayerInfo[iPlayerID][pNumber]);
    SCM(playerid, COLOR_WHITE, msg);
    format(msg, sizeof(msg), "Driver license: %s", carlic);
    SCM(playerid, COLOR_WHITE, msg);
    format(msg, sizeof(msg), "Weapon license: %s", weplic);
    SCM(playerid, COLOR_WHITE, msg);
    format(msg, sizeof(msg), "Flying license: %s", flylic);
    SCM(playerid, COLOR_WHITE, msg);
    format(msg, sizeof(msg), "Domestic address: %s", GetHouseLocation(iPlayerID));
    SCM(playerid, COLOR_WHITE, msg);
  }
  return 1;
}

Dialog:MDCRecord(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(sscanf(inputtext, "u", MDCAdd[playerid])) return ShowDialog(playerid, Show:<MDCRecord>, DIALOG_STYLE_INPUT, "Police MDC System - Submit Charges", "SUBMIT CHARGES\n\nInsert name below:\n\n(( Player ID / Firstname_Lastname ))", "Enter", "Escape");
		if(!PlayerIsOn(MDCAdd[playerid])) return ShowDialog(playerid, Show:<MDCRecord>, DIALOG_STYLE_INPUT, "Police MDC System - Submit Charges", "SUBMIT CHARGES\n\nInsert name below:\n\n(( Player ID / Firstname_Lastname ))\n"EMBED_RED"Player wasn't found.", "Enter", "Escape");
		format(msg, sizeof(msg), "SUBMIT CHARGES\n\nApply charge for: %s\n\n(( Crime ))", GetNameEx(MDCAdd[playerid]));
		ShowDialog(playerid, Show:<MDCRecord2>, DIALOG_STYLE_INPUT, "Police MDC System - Submit Charges", msg, "Enter", "Escape");
	}
	return 1;
}

Dialog:MDCRecord2(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new szCharge[84];
		if(sscanf(inputtext, "s[84]", szCharge))
		{
			format(msg, sizeof(msg), "SUBMIT CHARGES\n\nApply charge for: %s\n\n(( Crime ))", GetNameEx(MDCAdd[playerid]));
			ShowDialog(playerid, Show:<MDCRecord2>, DIALOG_STYLE_INPUT, "Police MDC System - Submit Charges", msg, "Enter", "Escape");
			return 1;
		}
		if(AddCriminalRecord(MDCAdd[playerid], szCharge, playerid))
		{
			format(msg, sizeof(msg), "[WANTED] Suspect: %s, Reporter: %s Crime: %s", GetNameEx(MDCAdd[playerid]), GetNameEx(playerid), szCharge);
			SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
			SCM(playerid, COLOR_WHITE, "Successfully added the charges onto the player.");
			MDCAdd[playerid] = INVALID_PLAYER_ID;
		}
		else
		{
			SCM(playerid, COLOR_LIGHTRED, "Charges could not be added.");
			MDCAdd[playerid] = INVALID_PLAYER_ID;
		}
	}
	return 1;
}

Dialog:MDCAddWarn(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(sscanf(inputtext, "u", MDCAdd[playerid])) return ShowDialog(playerid, Show:<MDCAddWarn>, DIALOG_STYLE_INPUT, "Police MDC System - Add", "ATTACH WARNING\n\nInsert name below:\n\n(( Player ID / Firstname_Lastname ))", "Enter", "Escape");
		if(!PlayerIsOn(MDCAdd[playerid])) return ShowDialog(playerid, Show:<MDCAddWarn>, DIALOG_STYLE_INPUT, "Police MDC System - Add", "ATTACH WARNING\n\nInsert name below:\n\n(( Player ID / Firstname_Lastname ))\n"EMBED_RED"Player wasn't found.", "Enter", "Escape");
		format(msg, sizeof(msg), "writes a driving license warning to %s's license.", GetNameEx(MDCAdd[playerid]));
		ActionMessage(playerid, 15.0, msg);
		format(msg, sizeof(msg), "** You have successfully added a driving license warning into %s's license.", GetNameEx(MDCAdd[playerid]));
		SCM(playerid, COLOR_WHITE, msg);
		PlayerInfo[MDCAdd[playerid]][pDriveWarns]++;
		if(PlayerInfo[MDCAdd[playerid]][pDriveWarns] >= 3)
		{
			format(msg, sizeof(msg), "** Since there were more than 3 warnings, %s's license has been revoked automatically.", GetNameEx(MDCAdd[playerid]));
			SCM(playerid, COLOR_WHITE, msg);
			PlayerInfo[MDCAdd[playerid]][pDriveWarns] = 0;
			PlayerInfo[MDCAdd[playerid]][pCarLic] = 0;
		}
		MDCAdd[playerid] = INVALID_PLAYER_ID;
	}
	return 1;
}

Dialog:MDCVehicle(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new plate[64], vehicle,str[255];
		if(sscanf(inputtext, "s[64]", plate)) return ShowDialog(playerid, Show:<MDCVehicle>, DIALOG_STYLE_INPUT, "Police MDC System - Plate Search", "PLATE SEARCH\n\nInsert plate info:", "Enter", "Escape");
		if(!FindVehicleByPlate(plate)) return ShowDialog(playerid, Show:<MDCVehicle>, DIALOG_STYLE_INPUT, "Police MDC System - Plate Search", "PLATE SEARCH\n\nInsert plate info:\n"EMBED_RED"Plate wasn't found on the database.", "Enter", "Escape");
		vehicle = FindVehicleByPlate(plate);
		format(msg, sizeof(msg), "PLATE SEARCH RESULT\n\nVehicle plate: %s\nVehicle model: %s\nVehicle owner: %s", VehicleInfo[vehicle][carPlate], VehicleNames[VehicleInfo[vehicle][carModel]-400], VehicleInfo[vehicle][carOwner]);
    if(CountVehicleTickets(vehicle) > 0)
    {
      format(str, sizeof(str), "\nCar dealers has unpaid fines. (/vehiclefines)");
    }
    strcat(msg, str);
		ShowDialog(playerid, Show:<MDCResult3>, DIALOG_STYLE_MSGBOX, "Police MDC System - Plate Search", msg, "Print", "Cancel");
	}
	return 1;
}

Dialog:MDCVehicleID(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id, vehicle;
		if(sscanf(inputtext, "u", id)) return ShowDialog(playerid, Show:<MDCVehicleID>, DIALOG_STYLE_INPUT, "Police MDC System - Plate Search", "PLATE SEARCH\n\nInsert plate number:\n\n(( Player ID / Firstname_Lastname ))", "Enter", "Escape");
		if(!PlayerIsOn(id)) return ShowDialog(playerid, Show:<MDCVehicleID>, DIALOG_STYLE_INPUT, "Police MDC System - Plate Search", "PLATE SEARCH\n\nInsert plate number:\n\n(( Player ID / Firstname_Lastname ))\n"EMBED_RED"Player wasn't found.", "Enter", "Escape");
		if(!PlayerInCar(id)) return SCM(playerid, COLOR_GREY, "This player is not inside a car.");
		vehicle = GetPlayerVehicleID(id);
		if(VehicleInfo[vehicle][carOwned] == 0) return SCM(playerid, COLOR_GREY, "This player might be inside a job/rental/city vehicle.");
		format(msg, sizeof(msg), "PLATE SEARCH RESULT\n\nVehicle plate: %s\nVehicle model: %s\nVehicle owner: %s", VehicleInfo[vehicle][carPlate], VehicleNames[VehicleInfo[vehicle][carModel]-400], VehicleInfo[vehicle][carOwner]);
		ShowDialog(playerid, Show:<MDCResult>, DIALOG_STYLE_MSGBOX, "Police MDC System - Plate Search", msg, "Escape", "");
	}
	return 1;
}

Dialog:ReportCheck(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		format(msg, sizeof(msg), "[REPORT]: Administrator %s has accepted the report from %s [ID: %d].", GetNameEx(playerid), GetNameEx(GetIntVar(playerid, "TookReportFrom")), GetIntVar(playerid, "TookReportFrom"));
		AMSG(COLOR_LIGHTRED, msg);
		format(msg, sizeof(msg), "Administrator %s accepted your request, wait he will respond to you (REF ID:5).", GetNameEx(playerid));
		SCM(GetIntVar(playerid, "TookReportFrom"), COLOR_GREEN, msg);
		RemoveVar(GetIntVar(playerid, "TookReportFrom"), "JustReported");
		RemoveVar(GetIntVar(playerid, "TookReportFrom"), "ReportText");
		RemoveVar(playerid, "TookReportFrom");
	}
	else
	{
		format(msg, sizeof(msg), "[REPORT]: Administrator %s has rejected the report from %s [ID: %d].", GetNameEx(playerid), GetNameEx(GetIntVar(playerid, "TookReportFrom")), GetIntVar(playerid, "TookReportFrom"));
		AMSG(COLOR_LIGHTRED, msg);
		RemoveVar(GetIntVar(playerid, "TookReportFrom"), "JustReported");
		RemoveVar(GetIntVar(playerid, "TookReportFrom"), "ReportText");
		RemoveVar(playerid, "TookReportFrom");
	}
	return 1;
}
Dialog:AcceptPM(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		SetIntVar(playerid, "OldAdminPM", GetIntVar(playerid, "PMTo"));
		SendPMToPlayer(playerid, GetIntVar(playerid, "PMTo"), GetStringVar(playerid, "PMText"));
		RemoveVar(playerid, "PMTo");
		RemoveVar(playerid, "PMText");
	}
	return 1;
}

Dialog:LSPDUniform(playerid, response, listitem, inputtext[])
{
  if(response)
  {
    switch(listitem)
    {
      case 0:
      {
        SetSkin(playerid, 281);
      }
      case 1:
      {
        SetSkin(playerid, 282);
      }
      case 2:
      {
        SetSkin(playerid, 283);
      }
      case 3:
      {
        SetSkin(playerid, 284);
      }
      case 4:
      {
        SetSkin(playerid, 285);
      }
      case 5:
      {
        SetSkin(playerid, 286);
      }
      case 6:
      {
        SetSkin(playerid, 287);
      }

    }
  }
  return 1;
}

Dialog:LSPDArmoury(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				ShowDialog(playerid, Show:<LSPDWeapons>, DIALOG_STYLE_LIST, "Equipment", "Deagle\nShotgun\nMP5\nM4\nCamera\nNitestick\nSpray\nSniper", "Choose", "Cancel");
			}
			case 1:
			{
				ShowDialog(playerid, Show:<LSPDClothes>, DIALOG_STYLE_LIST, "Police Equipment", "Cap 1\nCap 2\nCap 3\nHat 1\nHat 2\nHat 3\nHelmet\nShield\nVest\nHelmet (SWAT)\nRemoving Equipment", "Wear", "Cancel");
			}
		}
	}
	return 1;
}
Dialog:GovArmoury(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
    			GiveWeapon(playerid, 41, 1000);
			}
			case 1:
			{
			    GiveWeapon(playerid, 3, 5);
			}
			case 2:
			{
			    GiveWeapon(playerid, 43, 1000);
			}
		}
	}
	return 1;
}

CMD:cameranews(playerid, params[])
{
  if(PlayerInfo[playerid][pFaction] != NEWS) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
  if(!PlayerToPoint(3.0, playerid, Factions[NEWS][fUniformX], Factions[NEWS][fUniformY], Factions[NEWS][fUniformZ])) return SCM(playerid, COLOR_LIGHTRED, "You are not in the locker room.");
  if(!NewsDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You are not ON-DUTY");
  GiveWeapon(playerid, 43, 1000);
  return 1;
}
Dialog:HelpCheck(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		format(msg, sizeof(msg), "%s accepted your request, he will answer at your question (REF ID: 3).", GetNameEx(playerid));
		SCM(GetIntVar(playerid, "TookHelpFrom"), COLOR_GREEN, msg);
		format(msg, sizeof(msg), "[TESTER]{FFFF00} %s has accepted question from %s.", GetNameEx(playerid), GetNameEx(GetIntVar(playerid, "TookHelpFrom")));
		foreach(Player, i)
		{
			if(PlayerInfo[i][pHelper] > 0 && isTesterDuty(i) || PlayerInfo[playerid][pAdmin] > 0 && isAdminDuty(i))
			{
				SCM(i, 0xFF4444FF, msg);
			}
		}
		RemoveVar(GetIntVar(playerid, "TookHelpFrom"), "HelpText");
		RemoveVar(GetIntVar(playerid, "TookHelpFrom"), "JustHelped");
	}
	return 1;
}
/* =================== Dialogs =================== */


/* =================== PlayerCommands =================== */
CMD:changepass(playerid, params[])
{
	new pass[128];
	if(sscanf(params,"s[128]",pass))
	{
		SyntaxMSG(playerid, "/changepass [password]");
		SCM(playerid, -1, "{FF0000}[WARNING]:{FFFFFF} Don't use {00FF00}symbols{FFFFFF} in your password.");
		return 1;
	}
	if(strlen(pass) <= 6) return SCM(playerid, -1, "The password must contain at least 6 characters!");

	for(new i = 0; i < strlen(pass); i++)
	{
		switch(pass[i])
		{
			case '!', '@', '#', '$','%','^','&','*','(',')','_','+','=','|','[',']','{','}','-','.','`','~','<','>','?',',','/': return SCM(playerid, 0xFF0000FF, "Invalid characters!");
			default: continue;
		}
	}
	SetStringVar(playerid, "NewPassword", pass);
	ShowDialog(playerid, Show:<ChangePass>, DIALOG_STYLE_INPUT, ""EMBED_RED"Confirm secret password"EMBED_WHITE"", ""EMBED_WHITE"Enter the secret word used for registration!", "Change", "Exit");
	return 1;
}

CMD:flush(playerid, params[])
{
	for(new i=0; i<100; i++)
	{
		SCM(playerid,COLOR_WHITE, "              ");
	}

	return 1;
}

CMD:changesecret(playerid, params[])
{
	new secret[128];
	if(sscanf(params,"s[128]",secret))
	{
		SyntaxMSG(playerid, "/changesecret [new combination]");
		SCM(playerid, -1, "{FF0000}[WARNING]:{FFFFFF} Don't use {00FF00}symbols{FFFFFF} in the secret word.");
		return 1;
	}
	if(strlen(secret) <= 6) return SCM(playerid, -1, "Secret word must contain at least 6 characters!");

	for(new i = 0; i < strlen(secret); i++)
	{
		switch(secret[i])
		{
			case '!', '@', '#', '$','%','^','&','*','(',')','_','+','=','|','[',']','{','}','-','.','`','~','<','>','?',',','/': return SCM(playerid, 0xFF0000FF, "Invalid characters!");
			default: continue;
		}
	}
	SetStringVar(playerid, "NewSecret", secret);
	ShowDialog(playerid, Show:<ChangeSecret>, DIALOG_STYLE_INPUT, ""EMBED_RED"Secret word confirmation"EMBED_WHITE"", ""EMBED_WHITE"Please enter your current secret word before you change it.", "Change", "Exit");
	return 1;
}

CMD:radiohelp(playerid, params[])
{
	SCM(playerid, COLOR_GREEN,"|___________________Radio Help___________________|");
	SCM(playerid, COLOR_YELLOWG,"HINT: You can buy radio in 24-7's!");
	SCM(playerid, COLOR_WHITE,"/r - To be able to speak, on the frequency set.");
	SCM(playerid, COLOR_WHITE,"/rlow - To be able to speak slowly, on the frequency set.");
	SCM(playerid, COLOR_WHITE,"/auth - You need to login to each new frequency.");
	SCM(playerid, COLOR_WHITE,"/setchannel - Set your channel, the current frequency.");
	SCM(playerid, COLOR_WHITE,"/setslot - Set your slot, the current frequency.");
	SCM(playerid, COLOR_WHITE,"/leavechannel - To leave the current frequency.");
	SCM(playerid, COLOR_WHITE,"/sellchannel - If you own a radio frequency, you can sell it. (50% back)");
	SCM(playerid, COLOR_WHITE,"/newauth - If you own a radio frequency, you can change your password.");
	SCM(playerid, COLOR_WHITE,"/kickoffradio - If you own a radio frequency, you can kick someone on that frequency.");
	SCM(playerid, COLOR_WHITE,"/radiomembers - If you own a radio frequency, you can see who is connected to your frequency.");
	return 1;
}

CMD:notehelp(playerid, params[])
{
	SCM(playerid, COLOR_GREEN,"|___________________Note Help___________________|");
	SCM(playerid, COLOR_YELLOWG,"HINT: You can buy a pen in 24-7's!");
	SCM(playerid, COLOR_WHITE,"/note show - Shows you the current notes.");
	SCM(playerid, COLOR_WHITE,"/note create - You can create a note using a pen.");
	SCM(playerid, COLOR_WHITE,"/note remove - Delete one of the notes.");
	SCM(playerid, COLOR_WHITE,"/note give - Give one of the notes to a person.");
	SCM(playerid, COLOR_WHITE,"/note add - Add a new text to a note.");
	SCM(playerid, COLOR_LIGHTGREEN,"|_______________________________________________|");
	return 1;
}

CMD:fishhelp(playerid, params[])
{
	SCM(playerid, COLOR_GREEN,"|___________________Fish Help___________________|");
	SCM(playerid, COLOR_YELLOWG,"NOTE: You need sell only 1000 Lbs of Fish.");
	SCM(playerid, COLOR_WHITE,"/gofishing - You can start fishing in East Beach or on a Yacht.");
	SCM(playerid, COLOR_WHITE,"/stopfishing - Stop fishing.");
	SCM(playerid, COLOR_WHITE,"/myfish - Shows you how many kilograms of fish you have accumulated.");
	SCM(playerid, COLOR_WHITE,"/unloadfish - Sell your fish.");
	SCM(playerid, COLOR_WHITE,"/fish - Start fishing.");
	SCM(playerid, COLOR_LIGHTGREEN,"|_______________________________________________|");
	return 1;
}

CMD:bankhelp(playerid, params[])
{
	SCM(playerid, COLOR_GREEN,"|___________________Bank Help___________________|");
	SCM(playerid, COLOR_WHITE,"/balance - Shows the current amount in your account.");
	SCM(playerid, COLOR_WHITE,"/withdraw - Allows you to withdraw money from your account.");
	SCM(playerid, COLOR_WHITE,"/deposit - Allows you to deposit money into your account.");
	SCM(playerid, COLOR_WHITE,"/transfer - You can transfer money to a person.");
	SCM(playerid, COLOR_WHITE,"/paycheck - Withdraw paycheck.");
	SCM(playerid, COLOR_LIGHTGREEN,"|_______________________________________________|");
	return 1;
}

CMD:cellhelp(playerid, params[])
{
	SCM(playerid, COLOR_GREEN,"|___________________CELLPHONE HELP___________________|");
	SCM(playerid, COLOR_YELLOWG,"HINT: You can buy a phone from 24-7!");
	SCM(playerid, COLOR_WHITE,"/call - You can call someone using that number.");
	SCM(playerid, COLOR_WHITE,"/pickup - If you receive a call, you can reply.");
	SCM(playerid, COLOR_WHITE,"/hangup - Close the current call.");
	SCM(playerid, COLOR_WHITE,"/sms - Send an SMS to a specified number.");
	SCM(playerid, COLOR_WHITE,"/turn(off/on) - Turn on/off your phone.");
	SCM(playerid, COLOR_WHITE,"/dropcell - Throw the phone away. ATTENTION: You must to buy another.");
	SCM(playerid, COLOR_LIGHTGREEN,"|_______________________________________________|");
	return 1;
}

CMD:househelp(playerid, params[])
{
	SCM(playerid, COLOR_GREEN,"|___________________HOUSE HELP___________________|");
	SCM(playerid, COLOR_WHITE,"[House] /myhouse /setrentable /setrent /rentroom /unrent /tenants");
	SCM(playerid, COLOR_WHITE,"[House] /evict /evictall /lock /furniture /trunkspot /houseupgrade");
	return 1;
}

CMD:bizhelp(playerid, params[])
{
	SCM(playerid, COLOR_GREEN,"|___________________BUSINESS HELP___________________|");
  SCM(playerid, COLOR_WHITE,"/buybiz - You buy a business.");
  SCM(playerid, COLOR_WHITE,"/sellbiz - Sell your business.");
  SCM(playerid, COLOR_WHITE,"/bizupgrade - You can start renovating your own business.");
  SCM(playerid, COLOR_WHITE,"/bizinfo - Lets you view information about your business.");
  SCM(playerid, COLOR_WHITE,"/lock - Lock your business.");
  SCM(playerid, COLOR_WHITE,"/fire - It allows you to hire people to your business.");
  SCM(playerid, COLOR_WHITE,"/bizfee - It allows you to put an entrance fee at your business.");
  SCM(playerid, COLOR_WHITE,"/bizname - You can customize your business name.");
  SCM(playerid, COLOR_WHITE,"/bizwithdraw - To withdraw your income from your business.");
  SCM(playerid, COLOR_WHITE,"/bizdeposit - To deposit your amount in your business safe.");
  SCM(playerid, COLOR_WHITE,"/hire - You can organize your own employees.");
	return 1;
}

CMD:boomboxhelp(playerid, params[])
{
	SCM(playerid, COLOR_GREEN,"|___________________BOOMBOX HELP___________________|");
	SCM(playerid, COLOR_YELLOWG,"HINT: You can buy a boombox from MALL!");
	SCM(playerid, COLOR_WHITE,"/boombox place - Put boombox on the ground.");
	SCM(playerid, COLOR_WHITE,"/boombox edit - Edit position of your boombox.");
	SCM(playerid, COLOR_WHITE,"/boombox remove - Pick up the boombox on the ground.");
	SCM(playerid, COLOR_WHITE,"/setstation - Change the channel of boombox.");
	SCM(playerid, COLOR_WHITE,"/stationoff - Stop the boombox.");
	SCM(playerid, COLOR_LIGHTGREEN,"|_______________________________________________|");
	return 1;
}

CMD:factionhelp(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 0) return SCM(playerid, 0xFF4444FF, "Invalid faction.");
	SCM(playerid, COLOR_LIGHTGREEN,"|___________________Faction Help___________________|");
	if(isLeader(playerid))
	{
		if(PlayerInfo[playerid][pFaction] == LSPD)
		{
			SCM(playerid, COLOR_WHITE,"Leader: /finvite /funinvite /setrank /factionchat /factionranks /respawnfactioncars");
		}
		if(PlayerInfo[playerid][pFaction] == LSFD)
		{
			SCM(playerid, COLOR_WHITE,"Leader: /finvite /funinvite /setrank /factionchat /factionranks /respawnfactioncars");
		}
	}
	if(PlayerInfo[playerid][pFaction] == LSPD)
	{
		SCM(playerid, COLOR_WHITE,"[FACTION] /pcmds");
	}
	if(PlayerInfo[playerid][pFaction] == LSFD)
	{
		SCM(playerid, COLOR_WHITE,"[FACTION] /fdcmds");
	}
	SCM(playerid, COLOR_LIGHTGREEN,"|_______________________________________________|");
	return 1;
}

CMD:help(playerid, params[])
{
	SCM(playerid,COLOR_GREEN,"___________ COMMANDS __________");
	SCM(playerid, COLOR_GRAD2,"{C3C3C3}[ACCOUNT]: {C3C3C3}/stats /changepass /changesecret /upgrade /id ");
	SCM(playerid, COLOR_GRAD2,"{C3C3C3}[GENERAL]: {C3C3C3}/melow /dolow /dropcell /rentcar /graffiti /setstation /savemypos");
	SCM(playerid, COLOR_GRAD2,"{C3C3C3}[GENERAL]: {C3C3C3}/pay /time /engine /refill /examine /attributes /lock (/ds)hout /knock /trunk /setspawn");
	SCM(playerid, COLOR_GRAD2,"{C3C3C3}[GENERAL]: {C3C3C3}/clothing /buy /buy1 /showlicenses /helpme /coin /dice /admins /testers /furniture /buygun /gascan /joblist");
	SCM(playerid, COLOR_GRAD2,"{C3C3C3}[GENERAL]: {C3C3C3}/place /takegun /check /charity /nametag /report /greet /acceptshake /ad /cad /mask /buyclothes /dropkey /servertime");
	SCM(playerid, COLOR_GRAD2,"{C3C3C3}[GENERAL]: {C3C3C3}/parkmeter /stop /smoke /dropsmoke /friskdrugs (/v)ehicle /accept /setstyle /animlist /buydrink /eatfood /removecp /tickets");
	SCM(playerid, COLOR_GRAD2,"{C3C3C3}[GENERAL]: {C3C3C3}/notehelp /fishhelp /bankhelp /cellhelp /househelp /bizhelp /boomboxhelp /radiohelp /factionhelp /drughelp");
	SCM(playerid, COLOR_GRAD2,"{C3C3C3}[CHAT]: {C3C3C3}/ame /me /do (/l)ocal /t (/s)hout /b /low (/w)hisper /ooc /pm");
	if(PlayerInfo[playerid][pHelper]> 0)
	{
		SCM(playerid, COLOR_WHITE, "{C3C3C3}[TESTER]: /tcmds");
	}
	if(PlayerInfo[playerid][pAdmin] > 0)
	{
		SCM(playerid, COLOR_WHITE, "{C3C3C3}[ADMIN]: /acmds");
	}
	SCM(playerid, COLOR_GREEN,"_________________________________");
	SCM(playerid, COLOR_GRAD2,"{16CCCC} Please visit the section ' Documentation ' Feature on the forum or uses /helpme for help.");
	return 1;
}

CMD:rules(playerid, params[])
{
    SCM(playerid,COLOR_RED,"______________________________________");
	SCM(playerid, COLOR_RED,""ServerName" Server Rules");
	SCM(playerid,COLOR_WHITE,"Rules can be found on the website below. You've already accepted rules while registering...");
	SCM(playerid,COLOR_WHITE,""ServerWebsite"");
	return 1;
}
CMD:rentcar(playerid, params[])
{
  //format(msg, sizeof(msg), "Trebuie sa astepti %d secunde pentru a depune o alta reclama.", 10 - (gettime() - RentWait));
	//if(gettime() - RentWait < 10) return ErrorMsg(playerid, msg);
    if(PlayerInfo[playerid][pCarLic] == 0) return SCM(playerid, COLOR_WHITE,"Nu ai o licenta de condus");
    if(PlayerToPoint(4.0, playerid, 1697.2330, -1883.8615, 13.0126))
    {
        new string[256], string2[256], string3[256], string4[256], string5[256], string6[256], string7[256], string8[1024];
        format(string, sizeof(string), "Terms and conditions of rental");
    		format(string2, sizeof(string2), "To rent a car in our company, you must consider the following:");
    		format(string3, sizeof(string3), "-You are responsible for the integrity of the car since its takeover to return");
    		format(string4, sizeof(string4), "-When returning the car must not be damaged, otherwise you will pay damages worth $500");
    		format(string5, sizeof(string5), "-For damages, you will pay damages worth $500");
    		format(string6, sizeof(string6), "If you choose YES, it means that you agree and want to rent a car. Otherwise, choose NOT");
    		format(string7, sizeof(string7), "*If you choose YES, you will be directed to the vehicle catalog, where you can choose the model car you want to rent");
    		format(string8, sizeof(string8), "%s\n\n%s\n\n%s\n%s\n%s\n\n%s\n%s", string, string2, string3, string4, string5, string6, string7);
    		ShowDialog(playerid, Show:<RentQueue>, DIALOG_STYLE_MSGBOX, "Rental Car", string8, "Yes", "No");
    }
    else
    {
		SCM(playerid,COLOR_WHITE,"You're not the place to rent a car.");
    }
    //RentWait = gettime();
    return 1;
}

CMD:stats(playerid, params[])
{
	ShowStats(playerid, playerid);
	return 1;
}

CMD:charity(playerid, params[])
{
	new amount;
	if(sscanf(params,"d",amount)) return SyntaxMSG(playerid, "/charity [amount]");
	if(amount > GetCash(playerid) || amount <= 0) return NoCashMSG(playerid);
	GiveCash(playerid, -amount);
	PlaySound(playerid, 1052);
	format(msg, 128, "You have donated $%d.", amount);
	SCM(playerid, COLOR_GREY, msg);
	format(msg, 128, "[ATTENTION] %s just donated $%d.", GetNameEx(playerid), amount);
	AMSG(0xFF4444FF, msg);
	return 1;
}

CMD:removecp(playerid, params[])
{
	SCM(playerid, 0xFF4444FF, "All checkpoints have been removed from the map.");
	RemoveCheckPoint(playerid);
	return 1;
}

CMD:upgrade(playerid, params[])
{
	new upgrade[64];
	if(sscanf(params,"s[64]",upgrade)) return SyntaxMSG(playerid, "/upgrade [upgradename] (Health).");
	if(CompareStrings(upgrade, "health"))
	{
		if(PlayerInfo[playerid][pUpgrade] < 1) return SCM(playerid, -1, "You have no upgrade point.");
		if(PlayerInfo[playerid][pSHealth] >= 50.0) return SCM(playerid, -1, "You already have the maximum of life, with Which you can spawn.");
		PlayerInfo[playerid][pSHealth] += 5.0;
		format(msg, sizeof(msg), "Upgrade: You're spawn with %.2f health. (+5)",PlayerInfo[playerid][pSHealth]+100);
		SCM(playerid, COLOR_WHITE, msg);
		PlayerInfo[playerid][pUpgrade]--;
	}
	else return SyntaxMSG(playerid, "/upgrade [upgradename] (Health).");
	return 1;
}

CMD:knock(playerid, params[])
{
	for(new i = 0; i < sizeof(HouseInfo); i++)
	{
		if (PlayerToPoint(3, playerid,HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
		{
			ActionMessage(playerid,15.0,"knocking on the door next to it.");
			format(msg, sizeof(msg), "* [DOOR] BEAK! BEAK! BEAK! (( %s ))", GetNameWithMask(playerid));
			for(new p = 0; p < MAX_PLAYERS; p++)
			{
				if(PlayerToPoint(60, p, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && HouseInfo[i][hWorld] == GetWorld(p))
				{
					SCM(p, COLOR_PURPLE, msg);
				}
			}
			return 1;
		}
	}
	for(new i = 0; i < sizeof(BizInfo); i++)
	{
		if (PlayerToPoint(3, playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]))
		{
			ActionMessage(playerid,15.0,"knocking on the door next to it.");
			format(msg, sizeof(msg), "* [DOOR] BEAK! BEAK! BEAK! (( %s ))", GetNameWithMask(playerid));
			for(new p = 0; p < MAX_PLAYERS; p++)
			{
				if(PlayerToPoint(60, p, BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]) && GetWorld(p) == BizInfo[i][bizWorld])
				{
					SCM(p, COLOR_PURPLE, msg);
				}
			}
			return 1;
		}
	}
	return 1;
}


CMD:ds(playerid, params[]) return cmd_dshout(playerid, params);
CMD:dshout(playerid, params[])
{
	new text[128];
	if(sscanf(params,"s[128]",text)) return SyntaxMSG(playerid, "(/ds)hout [message]");
	for(new i = 0; i < sizeof(HouseInfo); i++)
	{
		if (PlayerToPoint(3, playerid,HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
		{
			format(msg, sizeof(msg), "* %s shouts(door): %s!!", GetNameWithMask(playerid), text);
			ProxDetectorP(40.0, playerid, msg, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
			for(new p = 0; p < MAX_PLAYERS; p++)
			{
				if(PlayerToPoint(60, p, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && HouseInfo[i][hWorld] == GetWorld(p))
				{
					SCM(p, COLOR_WHITE, msg);
				}
			}
			return 1;
		}
		else if(PlayerToPoint(4, playerid, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && HouseInfo[i][hWorld] == GetWorld(playerid))
		{
			format(msg, sizeof(msg), "* %s shouts(inside house): %s!!", GetNameWithMask(playerid), text);
			ProxDetectorP(40.0, playerid, msg, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
			for(new p = 0; p < MAX_PLAYERS; p++)
			{
				if(PlayerToPoint(30, p, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
				{
					SCM(p, COLOR_WHITE, msg);
				}
			}
			return 1;
		}
	}
	for(new i = 0; i < sizeof(BizInfo); i++)
	{
		if (PlayerToPoint(3, playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]))
		{
			format(msg, sizeof(msg), "* %s shouts(door): %s!!", GetNameWithMask(playerid), text);
			ProxDetectorP(40.0, playerid, msg, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
			for(new p = 0; p < MAX_PLAYERS; p++)
			{
				if(PlayerToPoint(60, p, BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]) && GetWorld(p) == BizInfo[i][bizWorld])
				{
					SCM(p, COLOR_WHITE, msg);
				}
			}
			return 1;
		}
		else if(PlayerToPoint(4, playerid, BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]) && GetWorld(playerid) == BizInfo[i][bizWorld])
		{
			format(msg, sizeof(msg), "* %s shouts(inside business): %s!!", GetNameWithMask(playerid), text);
			ProxDetectorP(40.0, playerid, msg, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
			for(new p = 0; p < MAX_PLAYERS; p++)
			{
				if(PlayerToPoint(30, p, BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]))
				{
					SCM(p, COLOR_WHITE, msg);
				}
			}
			return 1;
		}
	}
	return 1;
}
CMD:quitdmv(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
	if(IsADMVCar(vehicleid) && GetIntVar(playerid, "InDriveTest") == 1)
	{
		RemoveVar(playerid, "LessonStarted");
		RemoveVar(playerid, "LessonSeconds");
		RemoveVar(playerid, "InDriveTest");
		DmvMSG(playerid, "You have canceled the exam.");
		RemoveCheckPoint(playerid);
		RespawnVehicle(vehicleid);
	}
	return 1;
}

/*CMD:onduty(playerid, params[])
{
    if(!PlayerIsOn(playerid)) return NotConnectedMSG(playerid);
    foreach(Player, i)
	{
		if(CopDuty{i} && MedicDuty{i} && TaxiDuty{i})
		{
		    SCM(playerid,COLOR_WHITE,"
		}
	}
	return 1;
}*/

CMD:nametag(playerid, params[])
{
    if(!PlayerIsOn(playerid)) return NotConnectedMSG(playerid);
	if(NameTagHide[playerid] == 0)
	{
		NameTagHide[playerid] = 1;
		SendClientMessage(playerid, COLOR_GREY, "You have disabled the display names of players!");
		foreach(Player, i)
		{
			ShowPlayerNameTagForPlayer(playerid, i, 0);
		}
	}
	else
	{
		NameTagHide[playerid] = 0;
		SendClientMessage(playerid, COLOR_GREY, "You enabled the display names of players!");
		foreach(Player, i)
		{
			if(PlayerInfo[i][pMask] == 0)
			{
				ShowPlayerNameTagForPlayer(playerid, i, 1);
			}
		}
	}
    return 1;
}

CMD:takedrivingtest(playerid, params[])
{
    if(!PlayerIsOn(playerid)) return NotConnectedMSG(playerid);
    if(GetCash(playerid) < 250) return NoCashMSG(playerid);
    if(PlayerToPoint(5.0,playerid, -2032.0048,-117.1844,1035.1719))
    {
        ShowDialog(playerid, Show:<DmvDialog>, DIALOG_STYLE_LIST, "DMV - Choose the type of license", "TYPE B: Vehicles with doors 2/4 ({004C00}250$)\nTaxi license ({004C00}1500$)\nPatent pilot ({004C00}3500$)", "Choose", "Cancel");
    }
    else
    {
        SCM(playerid,COLOR_WHITE,"You're not DMV.");
    }
    return 1;
}

CMD:refill(playerid, params[])
{
	new veh = GetPlayerVehicleID(playerid);
	if(!IsDriver(playerid)) return NotInCarMSG(playerid);
	if(!IsAtGasStation(playerid)) return SCM(playerid, COLOR_GREEN, "You're not at gas station.");
	new stationid = GetClosestStationID(playerid);
	if(GetCash(playerid) < GasStation[stationid][gPrice])
	{
		format(msg, sizeof(msg), "You do not have enough money to fill up, $%d.", GasStation[stationid][gPrice]);
		SCM(playerid, COLOR_WHITE, msg);
		return 1;
	}
	if(Gas{veh} >= 100) return SCM(playerid, COLOR_WHITE, "Gas can is full.");
	if(GetIntVar(playerid, "IsRefueling") == 1) return SCM(playerid, COLOR_WHITE, "You must wait a few seconds to turn on the vehicle.");
	FreezePlayer(playerid);
	SetIntVar(playerid, "RefuelCost", GasStation[stationid][gPrice]);
	SetIntVar(playerid, "IsRefueling", 1);
	SetIntVar(playerid, "RefuelTime", 30);
	return 1;
}
CMD:gascan(playerid, params[])
{
	new veh = GetPlayerVehicleID(playerid), toFill;
	if(!IsDriver(playerid)) return SCM(playerid, COLOR_WHITE, "You're not in the car.");
	if(!GasCan{playerid}) return SCM(playerid, COLOR_WHITE, "You don't have a canister.");
	if(Gas{veh} >= 100) return SCM(playerid, COLOR_WHITE, "The tank is full.");
	GasCan{playerid} = false;
	toFill = 100 - Gas{veh};
	Gas{veh} += toFill;
	SCM(playerid,COLOR_WHITE,"* You have filled the tank with a canister.");
	ActionMessage(playerid, 10.0, "has filled the tank of the car with a canister.");
	return 1;
}

CMD:lock(playerid, params[])
{
	new counter = 0, result;
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		new dist = CheckPlayerDistanceToVehicle(3.0, playerid, i);
		if(dist)
		{
			result = i;
			counter++;
		}
	}
	switch(counter)
	{
		case 1:
		{
			if(PlayerInfo[playerid][pCarKey] == result || PlayerInfo[playerid][pSpareKey] == VehicleInfo[result][carDupKey] && PlayerInfo[playerid][pSpareKey] != 0)
			{
				if(vLocked{result})
				{
					PlaySound(playerid, 1145);
					ToggleVehicleLock(result, false);
					ToggleVehicleLockForPlayer(playerid, result, false);
					format(msg, sizeof(msg), "~w~%s UNLOCKED", VehicleNames[GetVehicleModel(result)-400]);
					GameTextForPlayer(playerid, msg, 2000, 4);
					format(msg, sizeof(msg), "has unlocked the doors of their %s.", VehicleNames[GetVehicleModel(result)-400]);
					SetPlayerChatBubble(playerid, msg, COLOR_PURPLE, 5.0, 10000);
					return 1;
				}
				else
				{
					PlaySound(playerid, 1145);
					ToggleVehicleLock(result, true);
					ToggleVehicleLockForPlayer(playerid, result, true);
					format(msg, sizeof(msg), "~w~%s LOCKED", VehicleNames[GetVehicleModel(result)-400]);
					GameTextForPlayer(playerid, msg, 2000, 4);
					format(msg, sizeof(msg), "has locked the doors of their %s.", VehicleNames[GetVehicleModel(result)-400]);
					SetPlayerChatBubble(playerid, msg, COLOR_PURPLE, 5.0, 10000);
					return 1;
				}
			}
			else if(vLocked{result} && ToolKit{playerid})
			{
				if(JackingLock[playerid] != 0) return SCM(playerid, COLOR_INFO, "Already break this car. Use /stop to stop.");
				FreezePlayer(playerid);
				new form[128];
				format(form, sizeof(form), "out a toolbox and begins to act on the lock vehicle %s.", VehicleNames[GetVehicleModel(result)-400]);
				ActionMessage(playerid,20.0,form);
				new vZone[MAX_ZONE_NAME];
				GetVehicleZone(result, vZone, MAX_ZONE_NAME);
				if(VehicleInfo[result][carAlarm] == 1)
				{
					format(msg, sizeof(msg), "* CAR ALARM: BEEP BEEP BEEP BEEP BEEP BEEP.");
					ProxDetector(50.0, playerid, msg, COLOR_PURPLE);
					AlarmOn(result);
					PlaySound(playerid, 1138);
					format(msg, sizeof(msg), "[Vehicle Alarm] %s located in %s.", VehicleNames[GetVehicleModel(result)-400], vZone);
					SendFactionMessage(LSPD, COLOR_LIGHTRED, msg);
				}
				else if(VehicleInfo[result][carAlarm] == 2)
				{
					format(msg, sizeof(msg), "* CAR ALARM: BEEP BEEP BEEP BEEP BEEP BEEP.");
					ProxDetector(70.0, playerid, msg, COLOR_PURPLE);
					AlarmOn(result);
					PlaySound(playerid, 1138);
					format(msg, sizeof(msg), "[Vehicle Alarm] %s located in %s.", VehicleNames[GetVehicleModel(result)-400], vZone);
					SendFactionMessage(LSPD, COLOR_LIGHTRED, msg);
				}
				else if(VehicleInfo[result][carAlarm] == 3)
				{
					format(msg, sizeof(msg), "* CAR ALARM: BEEP BEEP BEEP BEEP BEEP BEEP.");
					ProxDetector(100.0, playerid, msg, COLOR_PURPLE);
					AlarmOn(result);
					PlaySound(playerid, 1138);
					format(msg, sizeof(msg), "[Vehicle Alarm] %s located in %s.", VehicleNames[GetVehicleModel(result)-400], vZone);
					SendFactionMessage(LSPD, COLOR_LIGHTRED, msg);
				}
				else if(VehicleInfo[result][carAlarm] == 4)
				{
					format(msg, sizeof(msg), "* CAR ALARM: BEEP BEEP BEEP BEEP BEEP BEEP.");
					ProxDetector(100.0, playerid, msg, COLOR_PURPLE);
					AlarmOn(result);
					foreach(Player, i)
					{
						if(PlayerIsOn(i))
						{
							if(result == PlayerInfo[i][pCarKey])
							{
								SCM(i, COLOR_YELLOWG, "SMS: Your car alarm started, Sender: AlarmService");
							}
						}
					}
					format(msg, sizeof(msg), "[Vehicle Alarm] %s located in %s.", VehicleNames[GetVehicleModel(result)-400], vZone);
					SendFactionMessage(LSPD, COLOR_LIGHTRED, msg);
				}
				else if(VehicleInfo[result][carAlarm] == 5)
				{
					format(msg, sizeof(msg), "* CAR ALARM: BEEP BEEP BEEP BEEP BEEP BEEP.");
					ProxDetector(100.0, playerid, msg, COLOR_PURPLE);
					AlarmOn(result);
					foreach(Player, i)
					{
						if(PlayerIsOn(i))
						{
							if(result == PlayerInfo[i][pCarKey])
							{
								format(msg, sizeof(msg), "SMS: %s car alarm started, Location: %s, Sender: AlarmService", VehicleNames[GetVehicleModel(result)-400], vZone);
								SCM(i, COLOR_YELLOWG, msg);
							}
						}
					}
					format(msg, sizeof(msg), "[Vehicle Alarm] %s located in %s.", VehicleNames[GetVehicleModel(result)-400], vZone);
					SendFactionMessage(LSPD, COLOR_LIGHTRED, msg);
				}
				DoorJacking[playerid] = result;
				if(VehicleInfo[result][carLock] == 0)
				{ JackingLock[playerid] = 60; }
				else if(VehicleInfo[result][carLock] == 1)
				{ JackingLock[playerid] = 120; }
				else if(VehicleInfo[result][carLock] == 2)
				{ JackingLock[playerid] = 180; }
				else if(VehicleInfo[result][carLock] == 3)
				{ JackingLock[playerid] = 240; }
				else if(VehicleInfo[result][carLock] == 4)
				{ JackingLock[playerid] = 300; }
				else if(VehicleInfo[result][carLock] == 5)
				{ JackingLock[playerid] = 360; }
			}
		}
	}
	if(PlayerNearVehicle(4, playerid, GetIntVar(playerid, "RentVehKey")) && GetIntVar(playerid, "RentedCar") == 1)
	{
		if(vLocked{GetIntVar(playerid, "RentVehKey")})
		{
			PlaySound(playerid, 1145);
			ToggleVehicleLock(GetIntVar(playerid, "RentVehKey"), false);
			ToggleVehicleLockForPlayer(playerid, GetIntVar(playerid, "RentVehKey"), false);
			format(msg, sizeof(msg), "~b~%s ~w~Open", VehicleNames[GetVehicleModel(GetIntVar(playerid, "RentVehKey"))-400]);
			GameTextForPlayer(playerid, msg, 3500, 4);
			return 1;
		}
		else
		{
			PlaySound(playerid, 1145);
			ToggleVehicleLock(GetIntVar(playerid, "RentVehKey"), true);
			ToggleVehicleLockForPlayer(playerid, GetIntVar(playerid, "RentVehKey"), true);
			format(msg, sizeof(msg), "~b~%s ~w~Closed", VehicleNames[GetVehicleModel(GetIntVar(playerid, "RentVehKey"))-400]);
			GameTextForPlayer(playerid, msg, 3500, 4);
			return 1;
		}
	}
	if(HouseEntered[playerid] != 0)
	{
		new house = HouseEntered[playerid];
		for(new i = 0; i < MAX_FURNITURE; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, FurnitureInfo[house][i][fPosX], FurnitureInfo[house][i][fPosY], FurnitureInfo[house][i][fPosZ]) && FurnitureInfo[house][i][fOn] && isHouseDoor(FurnitureInfo[house][i][fModel]) && PlayerInfo[playerid][pHouseKey] == house)
			{
				if(FurnitureInfo[house][i][fOpened] == 1) return SCM(playerid, COLOR_GREY, "Please close the door first in order to lock/unlock it.");
				if(FurnitureInfo[house][i][fLocked] == 0)
				{
					SCM(playerid, COLOR_WHITE, "The door is now closed.");
					FurnitureInfo[house][i][fLocked] = 1;
				}
				else if(FurnitureInfo[house][i][fLocked] == 1)
				{
					SCM(playerid, COLOR_WHITE, "The door is now open.");
					FurnitureInfo[house][i][fLocked] = 0;
				}
			}
		}
	}
	for(new i = 0; i < sizeof(HouseInfo); i++)
	{
		if (PlayerToPoint(2.5, playerid,HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]) || (PlayerToPoint(3, playerid,HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && HouseInfo[i][hWorld] == GetWorld(playerid)))
		{
			if(PlayerInfo[playerid][pHouseKey] == i)
			{
				if(HouseInfo[i][hLocked] == 1)
				{
					HouseInfo[i][hLocked] = 0;
					GameTextForPlayer(playerid, "~b~Door ~w~Open", 5000, 6);
					PlaySound(playerid, 1145);
					return 1;
				}
				if(HouseInfo[i][hLocked] == 0)
				{
					HouseInfo[i][hLocked] = 1;
					GameTextForPlayer(playerid, "~b~Door ~w~Closed", 5000, 6);
					PlaySound(playerid, 1145);
					return 1;
				}
			}
			else
			{
				GameTextForPlayer(playerid, "~w~You don't have a key", 5000, 6);
				return 1;
			}
		}
	}
	for(new i = 0; i < sizeof(BizInfo); i++)
	{
		if (PlayerToPoint(3, playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]) || PlayerToPoint(3, playerid,BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]) && GetWorld(playerid) == i)
		{
			if(PlayerInfo[playerid][pBizKey] == i || PlayerInfo[playerid][pWorkOn] == i)
			{
				if(BizInfo[i][bizLocked] == 1)
				{
					BizInfo[i][bizLocked] = 0;
					GameTextForPlayer(playerid, "~b~Bussiness ~w~Open", 5000, 6);
					PlaySound(playerid, 1145);
					return 1;
				}
				if(BizInfo[i][bizLocked] == 0)
				{
					BizInfo[i][bizLocked] = 1;
					GameTextForPlayer(playerid, "~b~Bussiness ~w~Closed", 5000, 6);
					PlaySound(playerid, 1145);
					return 1;
				}
			}
			else
			{
				GameTextForPlayer(playerid, "~w~You don't have a key", 5000, 6);
				return 1;
			}
		}
	}
	for(new i = 0; i < sizeof(FactionDoors); i++)
	{
		if (PlayerToPoint(3, playerid, FactionDoors[i][dEnterX], FactionDoors[i][dEnterY], FactionDoors[i][dEnterZ]) || PlayerToPoint(3, playerid, FactionDoors[i][dExitX], FactionDoors[i][dExitY], FactionDoors[i][dExitZ]))
		{
			if(PlayerInfo[playerid][pFaction] == FactionDoors[i][dFaction])
			{
				if(FactionDoors[i][dLocked] == 1)
				{
					FactionDoors[i][dLocked] = 0;
					GameTextForPlayer(playerid, "~b~Door ~w~Open", 5000, 6);
					PlaySound(playerid, 1145);
					return 1;
				}
				else if(FactionDoors[i][dLocked] == 0)
				{
					FactionDoors[i][dLocked] = 1;
					GameTextForPlayer(playerid, "~b~Door ~w~Closed", 5000, 6);
					PlaySound(playerid, 1145);
					return 1;
				}
			}
			else
			{
				GameTextForPlayer(playerid, "~r~You don't have a key", 5000, 6);
				return 1;
			}
		}
	}
	return 1;
}
CMD:ss(playerid, params[])
{
	if(Screenshot[playerid] == 0)
	{
	    Screenshot[playerid] = 1;
	    ShowTextDraw(playerid, STextdraw[playerid]);
      return 1;
	}
	else if(Screenshot[playerid] == 1)
	{
	   	Screenshot[playerid] = 0;
	    HideTextDraw(playerid, STextdraw[playerid]);
      return 1;
	}
	return 1;
}
CMD:seatbelt(playerid, params[])
{
	new vehicle;
	vehicle = GetPlayerVehicleID(playerid);
    if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
    if(IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsABicycle(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "Aceasta vehicul nu are centuri.");
    if(Seatbelt[playerid] == 0)
	{
		Seatbelt[playerid] = 1;
	 	format(msg, sizeof(msg), "has put a seatbelt.");
		ActionMessage(playerid,15.0,msg);
	 	return 1;
 	}
 	else
	{
 		Seatbelt[playerid] = 0;
 		format(msg, sizeof(msg), "has removed the seatbelt.");
		ActionMessage(playerid,15.0,msg);
 		return 1;
 	}
}

CMD:blockallpm(playerid, params[])
{
    if(PlayerInfo[playerid][pDonateRank] == 0) return SCM(playerid, COLOR_YELLOWG, "Only donators can use this feature.");
    if(!PlayerIsOn(playerid)) return NotConnectedMSG(playerid);
	if(togpms[playerid] == 0)
	{
		togpms[playerid] = 1;
	 	SCM(playerid,COLOR_LIGHTRED,"You are now blocking private messages from all players.");
	 	return 1;
 	}
 	else
	{
 		togpms[playerid] = 0;
	 	SCM(playerid,COLOR_LIGHTRED,"You are now activate private messages from all players.");
 		return 1;
 	}
}

/*CMD:rentbike(playerid, params[])
{
	new vehid;
	if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
	if(!IsDriver(playerid)) return SCM(playerid, COLOR_LIGHTRED, "You are not the driver.");
	vehid = GetPlayerVehicleID(playerid);
	if(IsARentBike(vehid))
	{
		foreach(Player, i)
		{
			if(GetIntVar(i, "RentVehKey") == vehid && i != playerid) return RentMSG(playerid, "Someone else already rents this vehicle/bike.");
		}
		if(GetIntVar(playerid, "RentedCar") == 1) return RentMSG(playerid, "You are renting a vehicle/bike already, '/unrentvehicle'.");
		if(GetCash(playerid) < BIKE_RENT_COST) return NoCashMSG(playerid);
		format(msg, sizeof(msg), "You have rented this bike for $%d, you may '/engine' & '/lock'.", BIKE_RENT_COST);
		RentMSG(playerid, msg);
		GiveCash(playerid, -BIKE_RENT_COST);
		PlaySound(playerid, 1052);
		SetIntVar(playerid, "RentedCar", 1);
		SetIntVar(playerid, "RentVehKey", vehid);
	}
	return 1;
}*/

CMD:unrentcar(playerid, params[])
{
	if(GetIntVar(playerid, "RentedCar") == 0) return RentMSG(playerid, "You haven't rent any car.");
	format(msg, sizeof(msg), "You gave car scrapping rent, key: %d.", GetIntVar(playerid, "RentVehKey"));
	RentMSG(playerid, msg);
	DestoryCar(GetIntVar(playerid, "RentVehKey"));
	RemoveVar(playerid, "RentedCar");
	RemoveVar(playerid, "RentVehKey");
	return 1;
}

CMD:fuelallcars(playerid, params[])
{
  if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
  for(new i = 0; i< MAX_VEHICLES; i++)
  {
    Gas{i} = 100; 
  }
  SCM(playerid, COLOR_WHITE, "You have refilled all cars.");
  return 1;
}

CMD:setarmour(playerid, params[])
{
  new id,armour;
  if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
  if(sscanf(params,"ud",id,armour)) return SyntaxMSG(playerid, "/setarmour [playerid/PartOfName] [armour(1-100)]");
  if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
  format(msg, sizeof(msg), "* Admin %s has set your ARMOUR to %d.", GetNameEx(playerid), armour);
  SCM(id, COLOR_WHITE, msg);
  format(msg, sizeof(msg), "* You have set %s ARMOUR to %d", GetNameEx(id), armour);
  SCM(playerid, COLOR_WHITE, msg);
  SetPlayerArmour(id, armour);
  return 1;
}

CMD:engine(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new modelcar = GetVehicleModel(vehicleid);
	if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
	if(modelcar == 574) return SCM(playerid, COLOR_LIGHTRED, "Use /sweep to start the tour.");
	if(!IsDriver(playerid)) return SCM(playerid, COLOR_LIGHTRED, "You're not the driver of the vehicle.");
	if(IsADMVCar(vehicleid) || IsADMVHeli(vehicleid) || IsABicycle(vehicleid) || IsATruckJob(vehicleid)) return SCM(playerid, -1, "You can't use /engine on this vehicle.");
	if(Gas{vehicleid} == 0) return SCM(playerid, COLOR_LIGHTRED, "This vehicle has no fuel.");
	if(GetIntVar(playerid, "IsRefueling") == 1) return SCM(playerid, COLOR_WHITE, "You can't start the car engine while refuel.");
  if(PlayerOwnVehicle(playerid, vehicleid))
	{
		if(VehicleInfo[vehicleid][carBroken] == 1)
		{
			ErrorMsg(playerid, "This vehicle is damaged.");
		}
		else
		{
			ToggleVehicleEngine(vehicleid, playerid);
		}
	}
	else if(IsARentCar(vehicleid))
	{
		foreach(Player, i)
		{
			if(GetIntVar(i, "RentedCar") == 1 && GetIntVar(i, "RentVehKey") == vehicleid && i != playerid) return RentMSG(playerid, "You're not the owner of this vehicle.");
		}
		if(GetIntVar(playerid, "RentedCar") == 0 && GetIntVar(playerid, "RentVehKey") == 0) return SCM(playerid,COLOR_YELLOWG, "You don't have any vehicle.");
		if(GetIntVar(playerid, "RentedCar") == 1 && GetIntVar(playerid, "RentVehKey") != vehicleid) return SCM(playerid,COLOR_YELLOWG, "This is not your vehicle.");
		if(GetIntVar(playerid, "RentedCar") == 1 && GetIntVar(playerid, "RentVehKey") == vehicleid)
		{
			ToggleVehicleEngine(vehicleid, playerid);
		}
	}
	else if(IsACopCar(vehicleid) || IsAGovCar(vehicleid) || IsACopTowTruck(vehicleid) || IsAFDCar(vehicleid) || adminVeh{vehicleid})
	{
		ToggleVehicleEngine(vehicleid, playerid);
	}
	else
	{
		if(!ToolKit{playerid}) return GameTextForPlayer(playerid,"~r~You don't have a toolkit",2000,3);
		if(JackingEngine[playerid] != 0) return SCM(playerid, COLOR_INFO, "Already trying to break this vehicle, use '/stop' to stop.");
		if(engineOn{vehicleid}) return 1;
		FreezePlayer(playerid);
		format(msg, sizeof(msg), "removing a tool kit and starts to use the vehicle's engine to start your journey %s.", VehicleNames[GetVehicleModel(vehicleid)-400]);
		ActionMessage(playerid, 20.0, msg);
		new vZone[MAX_ZONE_NAME];
		GetVehicleZone(vehicleid, vZone, MAX_ZONE_NAME);
		if(VehicleInfo[vehicleid][carAlarm] == 1)
		{
		    format(msg, sizeof(msg), "* CAR ALARM: BEEP BEEP BEEP BEEP BEEP BEEP.");
  			ProxDetector(10.0, playerid, msg, COLOR_PURPLE);
  			AlarmOn(vehicleid);
  			format(msg, sizeof(msg), "[Vehicle Alarm] %s located in %s.", VehicleNames[GetVehicleModel(vehicleid)-400], vZone);
  			SendFactionMessage(LSPD, COLOR_LIGHTRED, msg);
		}
		else if(VehicleInfo[vehicleid][carAlarm] == 2)
		{
		    format(msg, sizeof(msg), "* CAR ALARM: BEEP BEEP BEEP BEEP BEEP BEEP.");
  			ProxDetector(10.0, playerid, msg, COLOR_PURPLE);
  			AlarmOn(vehicleid);
  			format(msg, sizeof(msg), "[Vehicle Alarm] %s located in %s.", VehicleNames[GetVehicleModel(vehicleid)-400], vZone);
  			SendFactionMessage(LSPD, COLOR_LIGHTRED, msg);
		}
		else if(VehicleInfo[vehicleid][carAlarm] == 3)
		{
        format(msg, sizeof(msg), "* CAR ALARM: BEEP BEEP BEEP BEEP BEEP BEEP.");
        ProxDetector(10.0, playerid, msg, COLOR_PURPLE);
        AlarmOn(vehicleid);
        format(msg, sizeof(msg), "[Vehicle Alarm] %s located in %s.", VehicleNames[GetVehicleModel(vehicleid)-400], vZone);
        SendFactionMessage(LSPD, COLOR_LIGHTRED, msg);
		}
		else if(VehicleInfo[vehicleid][carAlarm] == 4)
		{
			format(msg, sizeof(msg), "* CAR ALARM: BEEP BEEP BEEP BEEP BEEP BEEP.");
			ProxDetector(10.0, playerid, msg, COLOR_PURPLE);
			AlarmOn(vehicleid);
			foreach(Player, i)
			{
				if(PlayerIsOn(i))
				{
					if(vehicleid == PlayerInfo[i][pCarKey])
					{
						SCM(i, COLOR_YELLOWG, "SMS: Your vehicle's alarm started, Sender: AlarmService");
					}
				}
			}
			format(msg, sizeof(msg), "[Vehicle Alarm] %s located in %s.", VehicleNames[GetVehicleModel(vehicleid)-400], vZone);
			SendFactionMessage(LSPD, COLOR_LIGHTRED, msg);
		}
		else if(VehicleInfo[vehicleid][carAlarm] == 5)
		{
			format(msg, sizeof(msg), "* CAR ALARM: BEEP BEEP BEEP BEEP BEEP BEEP.");
			ProxDetector(10.0, playerid, msg, COLOR_PURPLE);
			AlarmOn(vehicleid);
			foreach(Player, i)
			{
				if(PlayerIsOn(i))
				{
					if(vehicleid == PlayerInfo[i][pCarKey])
					{
						format(msg, sizeof(msg), "SMS: Vehicle alarm of %s started, location: %s, Sender: AlarmService", VehicleNames[GetVehicleModel(vehicleid)-400], vZone);
						SCM(i, COLOR_YELLOWG, msg);
					}
				}
			}
			format(msg, sizeof(msg), "[Vehicle Alarm] %s located in %s.", VehicleNames[GetVehicleModel(vehicleid)-400], vZone);
			SendFactionMessage(LSPD, COLOR_LIGHTRED, msg);
		}
		if(VehicleInfo[vehicleid][carImmob] == 0)
		{
			JackingEngine[playerid] = 60;
		}
		else if(VehicleInfo[vehicleid][carImmob] == 1)
		{
			JackingEngine[playerid] = 120;
		}
		else if(VehicleInfo[vehicleid][carImmob] == 2)
		{
			JackingEngine[playerid] = 180;
		}
		else if(VehicleInfo[vehicleid][carImmob] == 3)
		{
			JackingEngine[playerid] = 240;
		}
		else if(VehicleInfo[vehicleid][carImmob] == 4)
		{
			JackingEngine[playerid] = 300;
		}
		else if(VehicleInfo[vehicleid][carImmob] == 5)
		{
			JackingEngine[playerid] = 360;
		}
	}
	return 1;
}

CMD:isafk(playerid, params[])
{
	new id;
	if(sscanf(params,"d",id)) return SyntaxMSG(playerid, "/isafk [playerid]");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	format(msg,256,"Player %s has been AFK/Tabbed for %d seconds.", GetNameEx(id), AFKTime[id]);
	SCM(playerid, COLOR_WHITE, msg);
	return 1;
}

CMD:id(playerid, params[])
{
	new id, name[MAX_PLAYER_NAME];
	if(sscanf(params,"u", id)) return SCM(playerid, COLOR_GREY,"{FF6142}USAGE:{FFFFFF} /id [playerid/partofname]");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	GetPlayerName(id, name, sizeof(name));
	format(msg,sizeof(msg), "ID: (%d) %s | Level: %d", id, name, PlayerInfo[id][pLevel]);
	SCM(playerid, COLOR_GREY, msg);
	return 1;
}

CMD:ame(playerid, params[])
{
	if(isnull(params)) return SyntaxMSG(playerid, "/ame [action]");
	format(msg, sizeof(msg), "%s %s", GetNameWithMask(playerid), params);
	SetPlayerChatBubble(playerid, msg, COLOR_PURPLE, 20.0, 10000);
	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		format(msg, sizeof(msg), " %s %.*s ...", GetNameWithMask(playerid), pos, params);
		SCM(playerid, COLOR_PURPLE, msg);
		format(msg, sizeof(msg), " %s ... %s", GetNameWithMask(playerid), params[pos]);
		SCM(playerid, COLOR_PURPLE, msg);
	}
	else
	{
		format(msg, sizeof(msg), " %s %s", GetNameWithMask(playerid), params);
		SCM(playerid, COLOR_PURPLE, msg);
	}
	return 1;
}

CMD:l(playerid, params[]) return cmd_local(playerid, params);
CMD:local(playerid, params[])
{
	if(isnull(params)) return SyntaxMSG(playerid, "/local [text]");
	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		format(msg, sizeof(msg), "%s says: %.*s ...", GetNameWithMask(playerid), pos, params);
		ProxDetectorP(20.0, playerid, msg, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		format(msg, sizeof(msg), "%s says: ... %s", GetNameWithMask(playerid), params[pos]);
		ProxDetectorP(20.0, playerid, msg, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		ChatAnimation(playerid, strlen(params));
	}
	else
	{
		format(msg, sizeof(msg), "%s says: %s", GetNameWithMask(playerid), params);
		ProxDetectorP(20.0, playerid, msg, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		ChatAnimation(playerid, strlen(params));
	}
	return 1;
}

CMD:me(playerid, params[])
{
	if(isnull(params)) return SyntaxMSG(playerid, "/me [action]");
	ActionMessage(playerid, 20.0, params);
	return 1;
}

CMD:melow(playerid, params[])
{
    if(isnull(params)) return SyntaxMSG(playerid, "/melow [actionlow]");
	ActionMessage(playerid, 5.0, params);
	return 1;
}

CMD:do(playerid, params[])
{
	if(isnull(params)) return SyntaxMSG(playerid, "/do [action]");
	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		format(msg, sizeof(msg), "* %.*s ... ((%s))", pos, params, GetNameWithMask(playerid));
		ProxDetector(20.0, playerid, msg, COLOR_PURPLE);
		format(msg, sizeof(msg), "* ... %s ((%s))", params[pos], GetNameWithMask(playerid));
		ProxDetector(20.0, playerid, msg, COLOR_PURPLE);
	}
	else
	{
		format(msg, sizeof(msg), "* %s ((%s))", params, GetNameWithMask(playerid));
		ProxDetector(20.0, playerid, msg, COLOR_PURPLE);
	}
	return 1;
}

CMD:dolow(playerid, params[])
{
	if(isnull(params)) return SyntaxMSG(playerid, "/dolow [actionlow]");
	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		format(msg, sizeof(msg), "* %.*s ... ((%s))", pos, params, GetNameWithMask(playerid));
		ProxDetector(5.0, playerid, msg, COLOR_PURPLE);
		format(msg, sizeof(msg), "* ... %s ((%s))", params[pos], GetNameWithMask(playerid));
		ProxDetector(5.0, playerid, msg, COLOR_PURPLE);
	}
	else
	{
		format(msg, sizeof(msg), "* %s ((%s))", params, GetNameWithMask(playerid));
		ProxDetector(5.0, playerid, msg, COLOR_PURPLE);
	}
	return 1;
}

CMD:s(playerid, params[]) return cmd_shout(playerid, params);
CMD:shout(playerid, params[])
{
	if(isnull(params)) return SyntaxMSG(playerid, "/(s)hout [message]");
	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		format(msg, sizeof(msg), "%s shouts: %.*s ...", GetNameWithMask(playerid), pos, params);
		ProxDetectorP(30.0, playerid, msg, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_FADE1, COLOR_FADE2);
		format(msg, sizeof(msg), "%s shouts: ... %s !!", GetNameWithMask(playerid), params[pos]);
		ProxDetectorP(30.0, playerid, msg, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_FADE1, COLOR_FADE2);
	}
	else
	{
		format(msg, sizeof(msg), "%s shouts: %s !!", GetNameWithMask(playerid), params);
		ProxDetectorP(30.0, playerid, msg, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_FADE1, COLOR_FADE2);
	}
	return 1;
}

CMD:b(playerid,params[])
{
	if(isnull(params)) return SyntaxMSG(playerid, "/b [local ooc chat]");
	if(strlen(params) > MAXLEN)
	{
    	new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		if(isAdminDuty(playerid))
			format(msg, sizeof(msg), "{A6A6A6}(( [%d] {408080}%s{A6A6A6}: %.*s ... ))", playerid, GetNameEx(playerid), pos, params);
		else
			format(msg, sizeof(msg), "{A6A6A6}(( [%d] %s: %.*s ... ))", playerid, GetNameEx(playerid), pos, params);
		ProxDetector(25.0, playerid, msg, COLOR_GREY);
		if(isAdminDuty(playerid))
			format(msg, sizeof(msg), "{A6A6A6}(( [%d] {408080}%s{A6A6A6}: ... %s ))", playerid, GetNameEx(playerid), params[pos]);
		else
			format(msg, sizeof(msg), "{A6A6A6}(( [%d] %s: ... %s ))", playerid, GetNameEx(playerid), params[pos]);
		ProxDetector(25.0, playerid, msg, COLOR_GREY);
	}
	else
	{
		if(isAdminDuty(playerid))
			format(msg, sizeof(msg), "{A6A6A6}(( [%d] {408080}%s{A6A6A6}: %s ))", playerid, GetNameEx(playerid), params);
		else
			format(msg, sizeof(msg), "{A6A6A6}(( [%d] %s: %s ))", playerid, GetNameEx(playerid), params);
		ProxDetector(25.0, playerid, msg, COLOR_GREY);
	}
	return 1;
}

CMD:low(playerid,params[])
{
	if(isnull(params)) return SyntaxMSG(playerid, "/low [low chat]");
	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		format(msg, sizeof(msg), "%s says [low]: %.*s ...", GetNameWithMask(playerid), pos, params);
		ProxDetectorP(5.0, playerid, msg, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		format(msg, sizeof(msg), "%s says [low]: ... %s", GetNameWithMask(playerid), params[pos]);
		ProxDetectorP(5.0, playerid, msg, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		ChatAnimation(playerid, strlen(params));
	}
	else
	{
		format(msg, sizeof(msg), "%s says [low]: %s", GetNameWithMask(playerid), params);
		ProxDetectorP(3.0, playerid, msg, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		ChatAnimation(playerid, strlen(params));
	}
	return 1;
}

CMD:w(playerid, params[]) return cmd_whisper(playerid, params);
CMD:whisper(playerid, params[])
{
	new id, text[256];
	if(sscanf(params,"us[256]", id, text)) return SyntaxMSG(playerid, "/(w)hisper [playerid/partofname] [text]");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(isAdminDuty(id)) return SCM(playerid, COLOR_LIGHTRED,"You can't whisper an admin-duty");
	else
	{
	    if(PlayerNearPlayer(5.0, playerid,id))
	    {
	        if(id == playerid)
	        {
	            format(msg, sizeof(msg), "> %s says something in mind.", GetNameWithMask(playerid));
      				SetPlayerChatBubble(playerid, msg, COLOR_PURPLE, 15.0, 10000);
      				format(msg, sizeof(msg), "%s whispers %s", GetNameWithMask(playerid), text);
      				SCM(playerid, COLOR_YELLOWG, msg);
			}
			else
			{
				format(msg, sizeof(msg), "%s whispers %s", GetNameWithMask(playerid), text);
				SCM(id, COLOR_YELLOWG, msg);
				format(msg, sizeof(msg), "%s whispers %s", GetNameWithMask(playerid), text);
				SCM(playerid,  COLOR_YELLOWG, msg);
			}
		}
		else return SCM(playerid, COLOR_GREY,"The player is not near you.");
	}
	return 1;
}

CMD:cw(playerid, params[])
{
	new text[128];
	new vehicle = GetPlayerVehicleID(playerid);
	if(sscanf(params,"s[128]",text)) return SyntaxMSG(playerid, "/carwhisper [text]");
	if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
 	format(msg, sizeof(msg), "[InCar %s whispers: %s]", GetNameWithMask(playerid), text);
    foreach(Player, i)
	{
		if(PlayerInCar(i))
		{
			if(GetPlayerVehicleID(i) == vehicle)
			{
	     		SCM(i,  COLOR_YELLOWG, msg);
			}
		}
	}
	return 1;
}
/*
CMD:cw(playerid, params[])
{
	new text[45];
	if(sscanf(params,"s[64]", text)) return SCM(playerid, COLOR_GREY,"USAGE: /cw [text]");
	if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
	format(msg, sizeof(msg), "[InCar %s whispers: %s]", GetNameWithMask(playerid), text);
	new vehicle = GetPlayerVehicleID(playerid);
	foreach(Player, i)
	{
		if(PlayerInCar(i))
		{
			if(GetPlayerVehicleID(i) == vehicle)
			{
	     		SCM(i,  COLOR_YELLOWG, msg);
			}
		}
	}
	return 1;
}
*/

/*
CMD:admins(playerid, params[])
{
	new sendername[MAX_PLAYER_NAME];
	SCM(playerid, COLOR_GREY, "Administratori Online:");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(PlayerIsOn(i))
		{
			GetPlayerName(i, sendername, sizeof(sendername));
			if(PlayerInfo[i][pAdmin] >= 1)
			{
			if(!isAdminDuty(i))
			{
				if(GetPVarInt(i, "AHide") == 0 )
					{
  					format(msg, 256, "(Level: %d) %s (%s) Admin-Duty: Nu", PlayerInfo[i][pAdmin], sendername, PlayerInfo[i][pForumName]);
				    SCM(playerid, COLOR_GREY, msg);
					}
				}
				else
				{
				if(GetPVarInt(i, "AHide") == 0 )
					{
						format(msg, 256, "(Level: %d) %s (%s) Admin-Duty: Da", PlayerInfo[i][pAdmin], sendername, PlayerInfo[i][pForumName]);
						SCM(playerid, COLOR_GREEN2, msg);
					}
				//}
			}
		}
	  }
	}
	return 1;
}*/
CMD:admins(playerid, params[])
{
	new online;
	foreach(Player, i)
	{
		if(PlayerIsOn(i))
		{
			if(PlayerInfo[i][pAdmin] >= 1)
			{
				online++;
			}
		}
	}
	format(msg, sizeof(msg), "{33CCFF}[Staff Server] {C8C8C8}Administrators: %d", online);
	SCM(playerid, COLOR_GREY, msg);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(PlayerIsOn(i))
		{
			if(PlayerInfo[i][pAdmin] >= 1)
			{
				if(!isAdminDuty(i))
				{
					format(msg, 256, "(Level: %d) %s (%s) Adminduty: No", PlayerInfo[i][pAdmin], GetNameEx(i), PlayerInfo[i][pForumName]);
					SCM(playerid, COLOR_GREY, msg);
				}
				else
				{
					format(msg, 256, "(Level: %d) %s (%s) Adminduty: Yes", PlayerInfo[i][pAdmin], GetNameEx(i), PlayerInfo[i][pForumName]);
					SCM(playerid, COLOR_GREEN2, msg);
				}
			}
		}
	}
	return 1;
}

CMD:testers(playerid, params[])
{
  new online;
  foreach(Player, i)
  {
    if(PlayerIsOn(i))
    {
      if(PlayerInfo[i][pHelper] >= 1)
      {
        online++;
      }
    }
  }
	new sendername[MAX_PLAYER_NAME];
	format(msg, sizeof(msg), "{33CCFF}[Staff Server] {C8C8C8}Testers: %d", online);
  SCM(playerid, COLOR_GREY, msg);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(PlayerIsOn(i))
		{
			GetPlayerName(i, sendername, sizeof(sendername));
			if(PlayerInfo[i][pHelper] >= 1)
			{
				if(!isTesterDuty(i))
				{
					format(msg, 256, "(ID: %d) %s (%s) - Testerduty: No", i, sendername, PlayerInfo[i][pForumName]);
					SCM(playerid, COLOR_GREY, msg);
				}
				else
				{
					format(msg, 256, "(ID: %d) %s (%s) - Testerduty: Yes", i, sendername, PlayerInfo[i][pForumName]);
					SCM(playerid, COLOR_GREEN2, msg);
				}
			}
		}
	}
	return 1;
}

CMD:o(playerid, params[]) return cmd_ooc(playerid, params);
CMD:ooc(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(isnull(params)) return SyntaxMSG(playerid, "/ooc [global ooc chat]");
	if(strlen(params) > MAXLEN)
	{
    	new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		format(msg, sizeof(msg), "[OOC] %s: %.*s ...", GetNameEx(playerid), pos, params);
		SCMALL(COLOR_OOC,msg);
		format(msg, sizeof(msg), "[OOC] %s: ... %s", GetNameEx(playerid), params[pos]);
		SCMALL(COLOR_OOC,msg);
	}
	else
	{
		format(msg, sizeof(msg), "[OOC] %s: %s", GetNameEx(playerid), params);
		SCMALL(COLOR_OOC,msg);
	}
	return 1;
}

CMD:togooc(playerid, params[])
{
	if(gOOC{playerid} == true)
	{
		ServerMSG(playerid, "You have disabled OOC chat!");
		gOOC{playerid} = false;
	}
	else
	{
		ServerMSG(playerid, "You have activated OOC chat!");
		gOOC{playerid} = true;
	}
	return 1;
}
CMD:pm(playerid, params[])
{
  new PID, text[128], str[500];
  if(sscanf(params, "us[128]", PID, text)) return SyntaxMSG(playerid, "/pm [playerid] [message]");
  if(!PlayerIsOn(PID)) return NotConnectedMSG(playerid);
  if(togpms[PID] == 1) return SCM(playerid,COLOR_RED,"That player has blocked incoming private messages."); //Checking if that player is blocking his PM's
	if(PID == playerid) return SCM(playerid, COLOR_GREY, "You can not send a PM to yourself.");
	if(isAdminDuty(PID) && PlayerInfo[playerid][pAdmin] == 0)
	{
		SetIntVar(playerid, "PMTo", PID);
		SetStringVar(playerid, "PMText", text);
		format(str, sizeof(str), "Be sure that you have read and you understand this rule\nDon't send admins a PM, especially admins who do not onduty.\n\nIf you have a problem with something or with someone all you have to do is to create a report and how possible an admin will find free time to talk to you about that, because it is their work.\n\nSo don't send PM to Admins OnDuty, all are equal and all players here all have rights.");
		ShowDialog(playerid, Show:<AcceptPM>, DIALOG_STYLE_MSGBOX, "Announcement, send a PM to an Administrator.", str, "Send", "Cancel");
	}
	else
	{
		SendPMToPlayer(playerid, PID, text);
	}
    return 1;
}

CMD:time(playerid, params[])
{
    new hour,minute,second;
    gettime(hour,minute,second);

	if(PlayerInfo[playerid][pJailed] == 2)
	{
		format(msg, sizeof(msg), "~y~Jail time left: %d", PlayerInfo[playerid][pJailTime2]);
		GameTextForPlayer(playerid, msg, 5000, 1);
	}
	else if(PlayerInfo[playerid][pJailed] == 3)
	{
		format(msg, sizeof(msg), "~y~Prison time left: %d", PlayerInfo[playerid][pJailTime2]);
		GameTextForPlayer(playerid, msg, 5000, 1);
	}
	else
	{
		if (minute < 10)
		{
			format(msg, sizeof(msg), "%d:0%d", hour, minute);
		}
		else
		{
			format(msg, sizeof(msg), "%d:%d", hour, minute);
		}

		GameTextForPlayer(playerid, msg, 5000, 1);
		ActionMessage(playerid, 15.0, "checks the time.");
	}
    return 1;
}

CMD:enter(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
	for(new i = 0; i < sizeof(DoorInfo); i ++)
	{
		if (PlayerToPoint(3, playerid,DoorInfo[i][dEnterX], DoorInfo[i][dEnterY], DoorInfo[i][dEnterZ]))
		{
			SetPlayerPos(playerid,DoorInfo[i][dExitX],DoorInfo[i][dExitY],DoorInfo[i][dExitZ]);
			SetInterior(playerid,DoorInfo[i][dExitInterior]);
			SetWorld(playerid,DoorInfo[i][dVirtualWorld]);
			DoorEntered[playerid] = i;
			FreezePlayer(playerid);
			GameTextForPlayer(playerid, "~r~Loading objects...", 2000, 4);
			SetTimerEx("UnFreezePlayer", 2000, 0, "i", playerid);
			return 1;
		}
	}
  for(new i = 0; i < sizeof(ComplexInfo); i ++)
  {
    if (PlayerToPoint(3, playerid,ComplexInfo[i][cxEnterX], ComplexInfo[i][cxEnterY], ComplexInfo[i][cxEnterZ]))
    {
      SetPlayerPos(playerid,ComplexInfo[i][cxExitX],ComplexInfo[i][cxExitY],ComplexInfo[i][cxExitZ]);
      SetWorld(playerid,ComplexInfo[i][cxWorld]);
      ComplexEntered[playerid] = i;
      FreezePlayer(playerid);
      GameTextForPlayer(playerid, "~r~Loading objects...", 2000, 4);
      SetTimerEx("UnFreezePlayer", 2000, 0, "i", playerid);
      return 1;
    }
  }
	for(new i = 0; i < sizeof(FactionDoors); i ++)
	{
		if (PlayerToPoint(3, playerid,FactionDoors[i][dEnterX], FactionDoors[i][dEnterY], FactionDoors[i][dEnterZ]))
		{
			if(FactionDoors[i][dLocked] == 0)
			{
				if(FactionDoors[i][dWithVehicle] == 1 && IsDriver(playerid))
				{
					SetVehiclePos(GetPlayerVehicleID(playerid),FactionDoors[i][dExitX],FactionDoors[i][dExitY],FactionDoors[i][dExitZ]);
					SetInterior(playerid,FactionDoors[i][dExitInterior]);
					SetWorld(playerid,FactionDoors[i][dVirtualWorld]);
					SetVehicleZAngle(GetPlayerVehicleID(playerid), FactionDoors[i][dEnterAngle]);
					LinkVehicleToInterior(GetPlayerVehicleID(playerid), FactionDoors[i][dExitInterior]);
					SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), FactionDoors[i][dVirtualWorld]);
					FreezePlayer(playerid);
					GameTextForPlayer(playerid, "~r~Loading objects...", 2000, 4);
					SetTimerEx("UnFreezePlayer", 2000, 0, "i", playerid);
				}
				else
				{
					SetPlayerPos(playerid, FactionDoors[i][dExitX], FactionDoors[i][dExitY], FactionDoors[i][dExitZ]);
					SetInterior(playerid,FactionDoors[i][dExitInterior]);
					SetWorld(playerid,FactionDoors[i][dVirtualWorld]);
					FreezePlayer(playerid);
					GameTextForPlayer(playerid, "~r~Loading objects...", 2000, 4);
					SetTimerEx("UnFreezePlayer", 2000, 0, "i", playerid);
				}
				return 1;
			}
			else return GameTextForPlayer(playerid, "~r~LOCKED", 5000, 6);
		}
	}
	for(new i = 0; i < sizeof(HouseInfo); i++)
	{
		if (PlayerToPoint(3, playerid,HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
		{
			if(HouseInfo[i][hLocked] == 1) return GameTextForPlayer(playerid, "~r~Locked", 5000, 1);
			SetPlayerPos(playerid,HouseInfo[i][hExitX],HouseInfo[i][hExitY],HouseInfo[i][hExitZ]);
			SetInterior(playerid,HouseInfo[i][hInterior]);
			SetWorld(playerid,HouseInfo[i][hWorld]);
			HouseEntered[playerid] = i;
			if(PlayerInfo[playerid][pHouseKey] == i)
			{
				GameTextForPlayer(playerid, "~w~Welcome to the house", 5000, 1);
			}
			FreezePlayer(playerid);
			GameTextForPlayer(playerid, "~r~Loading objects...", 2000, 4);
			SetTimerEx("UnFreezePlayer", 1200, 0, "i", playerid);
			if(HouseInfo[i][hRadioOn] == 1)
			{
				PlayAudioStreamForPlayer(playerid, HouseInfo[i][hRadioURL]);
			}
			return 1;
		}
	}
	for(new i = 0; i < sizeof(BizInfo); i++)
	{
		if (PlayerToPoint(3, playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]))
		{
			if(BizInfo[i][bizLocked] == 1) return GameTextForPlayer(playerid, "~r~Closed", 5000, 1);
			if(PlayerInfo[playerid][pBizKey] != i && PlayerInfo[playerid][pWorkOn] != i)
			{
				if(GetCash(playerid) < BizInfo[i][bizEntrance]) return GameTextForPlayer(playerid, "~r~No cash", 5000, 1);
			}
			SetPlayerPos(playerid,BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]);
			SetInterior(playerid,BizInfo[i][bizInterior]);
			SetWorld(playerid,BizInfo[i][bizWorld]);
			SCM(playerid, COLOR_WHITE, BizInfo[i][bizEnterMSG]);
			if(PlayerInfo[playerid][pBizKey] != i && PlayerInfo[playerid][pWorkOn] != i)
			{
				GiveCash(playerid, -BizInfo[i][bizEntrance]);
				BizInfo[i][bizCash] += BizInfo[i][bizEntrance];
			}
			BizEntered[playerid] = i;
			FreezePlayer(playerid);
			GameTextForPlayer(playerid, "~r~Loading objects...", 2000, 4);
			SetTimerEx("UnFreezePlayer", 1200, 0, "i", playerid);
			if(BizInfo[i][bizRadioOn] == 1)
			{
				PlayAudioStreamForPlayer(playerid, BizInfo[i][bizRadioURL]);
			}
			return 1;
		}
	}
	if(PlayerToPoint(4, playerid,1178.0946, -1308.4642, 13.9995))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if(faction != LSFD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
		    SetVehiclePos(GetPlayerVehicleID(playerid), -1616.2078,742.9830,-5.2422);
			SetVehicleZAngle(GetPlayerVehicleID(playerid), 270);
		}
		else
		{
		    if(faction != LSFD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
		    SetPlayerPos(playerid, -1616.2078,742.9830,-5.2422);
		}
	}
    if(PlayerToPoint(5, playerid,1178.0946, -1308.4642, 13.9995))
	{
   		SetPlayerPos(playerid, -1616.2078,742.9830,-5.2422);
	}
	if(PlayerToPoint(5, playerid,2041.0103,-1761.0953,13.5469))
	{
      GameTextForPlayer(playerid, "~w~Welcome to complex", 5000, 1);
      FreezePlayer(playerid);
      SetTimerEx("UnFreezePlayer", 1200, 0, "i", playerid);
   		SetPlayerPos(playerid, 1947.0342,-1787.4755,811.4103);//COMPLEX
	}
	if(PlayerToPoint(5, playerid,2073.16,-1831.33,13.5469))
	{
    new vehicle = GetPlayerVehicleID(playerid);
    new Float:hp;
		GetVehicleHealth(vehicle, hp);
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    if(hp < 1000)
		    {
        if(GetPlayerMoney(playerid) <=150) return SCM(playerid,COLOR_WHITE,"You do not have enough money to repair the car.");
			    SetVehiclePos(vehicle, 2067.9495,-1831.5270,13.6593);
				SetVehicleZAngle(vehicle, 162.8725);
				SCM(playerid,COLOR_GREEN,"Fix up your vehicle.");
        SCM(playerid,COLOR_GREEN,"Auto Voice: You'll be moved out in 10 seconds.");
				RepairVehicle(vehicle);
				FreezePlayer(playerid);
				GiveCash(playerid, -150);
				SetTimerEx("UnFreezePaint", 10000, 0, "i", playerid);
			}
			else
			{
			    SCM(playerid, COLOR_WHITE,"Your car is already repaired.");
			}
		}
	}
  if(PlayerToPoint(5, playerid,1024.7374,-1032.0444,31.5429))
  {
      new vehicle = GetPlayerVehicleID(playerid);
      new Float:hp;
      GetVehicleHealth(vehicle, hp);
      if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
      {
        if(hp < 1000)
        {
        if(GetPlayerMoney(playerid) <=150) return SCM(playerid,COLOR_WHITE,"You do not have enough money to repair the car.");
          SetVehiclePos(vehicle, 1024.7299,-1024.1005,31.7242);
        SetVehicleZAngle(vehicle, 1.0417);
        SCM(playerid,COLOR_GREEN,"Fix up your vehicle.");
        SCM(playerid,COLOR_GREEN,"Auto Voice: You'll be moved out in 10 seconds.");
        RepairVehicle(vehicle);
        FreezePlayer(playerid);
        GiveCash(playerid, -150);
        SetTimerEx("UnFreezePaint1", 10000, 0, "i", playerid);
      }
      else
      {
          SCM(playerid, COLOR_WHITE,"Your car is already repaired.");
      }
    }
  }
  if(PlayerToPoint(5, playerid,488.2218,-1732.0660,10.8674))
  {
      new vehicle = GetPlayerVehicleID(playerid);
      new Float:hp;
    GetVehicleHealth(vehicle, hp);
      if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        if(hp < 1000)
        {
        if(GetPlayerMoney(playerid) <=150) return SCM(playerid,COLOR_WHITE,"You do not have enough money to repair the car.");
          SetVehiclePos(vehicle, 488.2230,-1740.0702,10.7569);
        SetVehicleZAngle(vehicle, 175.0760);
        SCM(playerid,COLOR_GREEN,"Fix up your vehicle");
        SCM(playerid,COLOR_GREEN,"Auto Voice: You'll be moved out in 10 seconds");
        RepairVehicle(vehicle);
        FreezePlayer(playerid);
        GiveCash(playerid, -150);
        SetTimerEx("UnFreezePaint2", 10000, 0, "i", playerid);
      }
      else
      {
          SCM(playerid, COLOR_WHITE,"Your car is already repaired.");
      }
    }
  }
	return 1;
}

CMD:exit(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	for(new i = 0; i < sizeof(DoorInfo); i ++)
	{
		if (PlayerToPoint(3, playerid,DoorInfo[i][dExitX], DoorInfo[i][dExitY], DoorInfo[i][dExitZ]) && GetWorld(playerid) == DoorInfo[i][dVirtualWorld])
		{
			SetPlayerPos(playerid,DoorInfo[i][dEnterX],DoorInfo[i][dEnterY],DoorInfo[i][dEnterZ]);
			SetInterior(playerid,DoorInfo[i][dEnterInterior]);
			SetWorld(playerid, 0);
			DoorEntered[playerid] = -1;
			return 1;
		}
	}
	for(new i = 0; i < sizeof(ComplexInfo); i ++)
	{
		if (PlayerToPoint(3, playerid,ComplexInfo[i][cxExitX], ComplexInfo[i][cxExitY], ComplexInfo[i][cxExitZ]) && GetWorld(playerid) == ComplexInfo[i][cxWorld])
		{
			SetPlayerPos(playerid,ComplexInfo[i][cxEnterX],ComplexInfo[i][cxEnterY],ComplexInfo[i][cxEnterZ]);
			SetInterior(playerid,0);
			SetWorld(playerid, 0);
			ComplexEntered[playerid] = -1;
			return 1;
		}
	}
	for(new i = 0; i < sizeof(FactionDoors); i ++)
	{
		if (PlayerToPoint(3, playerid,FactionDoors[i][dExitX], FactionDoors[i][dExitY], FactionDoors[i][dExitZ]))
		{
			if(FactionDoors[i][dWithVehicle] == 1 && IsDriver(playerid))
			{
				SetVehiclePos(GetPlayerVehicleID(playerid),FactionDoors[i][dEnterX],FactionDoors[i][dEnterY],FactionDoors[i][dEnterZ]);
				SetInterior(playerid,FactionDoors[i][dEnterInterior]);
				SetWorld(playerid, 0);
				SetVehicleZAngle(GetPlayerVehicleID(playerid), FactionDoors[i][dExitAngle]);
				LinkVehicleToInterior(GetPlayerVehicleID(playerid), FactionDoors[i][dEnterInterior]);
				SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
				FreezePlayer(playerid);
				GameTextForPlayer(playerid, "~r~Loading objects...", 1000, 4);
				SetTimerEx("UnFreezePlayer", 900, 0, "i", playerid);
			}
			else
			{
				SetPlayerPos(playerid,FactionDoors[i][dEnterX],FactionDoors[i][dEnterY],FactionDoors[i][dEnterZ]);
				SetInterior(playerid,FactionDoors[i][dEnterInterior]);
				SetWorld(playerid, 0);
				FreezePlayer(playerid);
				GameTextForPlayer(playerid, "~r~Loading objects...", 1000, 4);
				SetTimerEx("UnFreezePlayer", 900, 0, "i", playerid);
			}
			return 1;
		}
	}
	for(new i = 0; i <  sizeof(HouseInfo); i++)
	{
 		if (PlayerToPoint(3, playerid,HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && HouseInfo[i][hWorld] == GetWorld(playerid))
		{
			if(HouseEntered[playerid] == i)
			{
				if(HouseInfo[i][hLocked] == 1) return GameTextForPlayer(playerid, "~r~Closed", 5000, 1);
				SetCameraBehindPlayer(playerid);
				SetPlayerPos(playerid,HouseInfo[i][hEntranceX],HouseInfo[i][hEntranceY],HouseInfo[i][hEntranceZ]);
				SetWorld(playerid,0);
				SetInterior(playerid,0);
				HouseEntered[playerid] = 0;
				StopAudioStreamForPlayer(playerid);
				if(HouseInfo[i][hRadioOn])
				{
					StopAudioStreamForPlayer(playerid);
				}
				return 1;
			}
		}
	}
	for(new i = 0; i < sizeof(BizInfo); i++)
	{
		if (PlayerToPoint(5, playerid,BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]) && GetWorld(playerid) == i)
		{
			if(BizInfo[i][bizLocked] == 1) return GameTextForPlayer(playerid, "~r~Closed", 5000, 1);
			SetPlayerPos(playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]);
			SetInterior(playerid,0);
			SetWorld(playerid,0);
			BizEntered[playerid] = -1;
			FreezePlayer(playerid);
			SetTimerEx("UnFreezePlayer", 1000, 0, "i", playerid);
			if(BizInfo[i][bizRadioOn])
			{
				StopAudioStreamForPlayer(playerid);
			}
			return 1;
		}
	}
	if(PlayerToPoint(5, playerid,1947.0342,-1787.4755,811.4103))
	{
   		SetPlayerPos(playerid, 2041.0103,-1761.0953,13.5469);//COMPLEX
	}
	if(PlayerToPoint(4, playerid,-1616.2078,742.9830,-5.2422))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if(faction != LSFD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
		    SetVehiclePos(GetPlayerVehicleID(playerid), 1178.0946, -1308.4642, 13.9995);
			SetVehicleZAngle(GetPlayerVehicleID(playerid), 270);
		}
		else
		{
		    if(faction != LSFD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
		    SetPlayerPos(playerid, 1178.0946, -1308.4642, 13.9995);
		}
	}
	return 1;
}

CMD:toghud(playerid, params[])
{
	new toggle;
	if(PlayerInfo[playerid][pDonateRank] < 1) return SCM(playerid, COLOR_LIGHTRED, "Only donators can use this feature.");
	if(sscanf(params,"d",toggle)) return SyntaxMSG(playerid, "/toghud [(0-off/1-on)]");
	if(toggle > 1 || toggle < 0) return SyntaxMSG(playerid, "/toghud [(0-off/1-on)]");
	ShowHudTextDraws(playerid, toggle);
	return 1;
}

CMD:coin(playerid, params[])
{
	new coin = randomEx(0,2);
	new coinname[64];
	if(coin == 1) {
			coinname = "head";
	} else {
			coinname = "tails";
	}
	format(msg, sizeof(msg), "* %s throw a coin and fall %s", GetNameWithMask(playerid),coinname);
	ProxDetector(10, playerid, msg, COLOR_WHITE);
	return 1;
}

CMD:dice(playerid, params[])
{
    new dice = random(6)+1;
    if (GetIntVar(playerid, "Dice") == 1)
	{
        format(msg, sizeof(msg), "* %s throw the dice and fall %d.", GetNameWithMask(playerid), dice);
        ProxDetector(7.0, playerid, msg, COLOR_WHITE);
    }
    else
	{
        SCM(playerid, COLOR_GRAD2, "You do not have a dice.");
    }
    return 1;
}

CMD:helpme(playerid, params[])
{
	if(isnull(params)) return SyntaxMSG(playerid, "/helpme [text]");
	if(GetIntVar(playerid, "JustHelped") == 1) return SCM(playerid, -1, "Your request is still pending verification.");
	SetStringVar(playerid, "HelpText", params);
	SetIntVar(playerid, "JustHelped", 1);
	SCM(playerid, COLOR_GREEN, "Send request for help, testers availabe, successfully!");
	format(msg, sizeof(msg), "[HELPME] %s [ID:%d]: %s.", GetNameEx(playerid), playerid, params);
	foreach(Player, i)
	{
		if(PlayerInfo[i][pHelper] > 0 && isTesterDuty(i) || PlayerInfo[i][pAdmin] > 0 && isAdminDuty(i))
		{
			SCM(i, COLOR_YELLOWG, msg);
		}
	}
	return 1;
}

CMD:report(playerid, params[])
{
	if(isnull(params)) return SyntaxMSG(playerid, "/report [text]");
	if(GetIntVar(playerid, "JustReported") == 1) return SCM(playerid, -1, "Your report is still pending.");
	SetIntVar(playerid, "JustReported", 1);
	SetStringVar(playerid, "ReportText", params);
	SCM(playerid,COLOR_YELLOWG,"Send request for help, administrators available, succesfully!");
	format(msg, sizeof(msg), "[REPORT] %s [ID:%d] reported: %s (uses /reportlist).", GetNameEx(playerid), playerid, params);
	AMSG(COLOR_LIGHTRED, msg);
	return 1;
}

CMD:pay(playerid, params[])
{
	new pid, amount;
	if(sscanf(params,"dd",pid,amount)) return SyntaxMSG(playerid, "/pay [playerid] [amount]");
	if(pid == playerid) return SCM(playerid, -1, "You cannot pay to yourself.");
	if(PlayerInfo[playerid][pHours] < 2) return SCM(playerid, COLOR_WHITE, "You must have 2 hours played to use this command.");
	if(gettime() - GetIntVar(playerid, "JustPaid") < 2) return ServerMSG(playerid, "Wait 2 seconds before you use this command again. (Security Reasons)");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	if(isAdminDuty(pid)) return 1;
	if(amount > GetCash(playerid) || amount <= 0) return NoCashMSG(playerid);
	if(amount > 1000 && GetLevel(playerid) <= 3) return SCM(playerid, -1, "All players under level '3' can not give more than $1000.");
	if(!PlayerNearPlayer(5.0, playerid,pid)) return NotNearPlayerMSG(playerid);
	SetIntVar(playerid, "JustPaid", gettime());
	GiveCash(playerid, -amount);
	GiveCash(pid, amount);
	format(msg, sizeof(msg), "  You have send $%d to %s .",amount, GetNameWithMask(pid));
	SCM(playerid, COLOR_GREY, msg);
	PlaySound(playerid, 1052);
	format(msg, sizeof(msg), "  You have received $%d from %s.", amount, GetNameWithMask(playerid));
	SCM(pid, COLOR_GREY, msg);
	PlaySound(pid, 1052);
	format(msg, sizeof(msg), "takes out some cash, and hands it to %s.", GetNameWithMask(pid));
	ActionMessage(playerid, 15.0, msg);
	if(CheckAdmin(playerid, 1))
	{
		format(query, sizeof(query), "INSERT INTO `apaylog` (name, target, amount, data) VALUES ('%s', '%s', %d, '%s')", GetName(playerid), GetName(pid), amount, GetFullDate());
		mysql_function_query(dbHandle, query, false, "", "");
	}
	return 1;
}

CMD:showlicenses(playerid, params[])
{
	new pid;
	if(sscanf(params,"d",pid)) return SyntaxMSG(playerid, "/showlicenses [playerid/PartOfName]");
	if(pid == playerid)
	{
		ActionMessage(playerid, 15.0, "looking at bulletin.");
		ShowLicenses(playerid, playerid);
	} else {
		if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
		if(!PlayerNearPlayer(8.0, playerid, pid)) return NotNearPlayerMSG(playerid);
		format(msg, sizeof(msg), "shows their ID card to %s.", GetNameWithMask(pid));
		ActionMessage(playerid, 15.0, msg);
		ShowLicenses(playerid, pid);
	}
	return 1;
}

CMD:acceptdeath(playerid, params[])
{
  if(TimerDeath1[playerid] == 0) return SCM(playerid, COLOR_YELLOWG, "You're not hurt or you didn't waited 60 seconds.");
  StopPlayerAnims(playerid);
  StopPlayerSpec(playerid);
  SetIntVar(playerid, "JustAcceptedDeath", 0);
  RemoveVar(playerid, "JustDied");
  RemoveVar(playerid, "LoggedInDead");
  RemoveVar(playerid, "Injured");
  SetPlayerInterior(playerid, 0);
  SetPlayerVirtualWorld(playerid, 0);
  PlayerInfo[playerid][pDied] = 0;
  TimerDeath1[playerid] = 0;
  TogglePlayerControllable(playerid, true);
  PutPlayer(playerid,1642.2006,-2334.4751,-2.6797);
  Delete3DTextLabel(DamageShot[playerid]);
  Delete3DTextLabel(Injured[playerid]);
  KillTimer(InjuredTimer[playerid]);
  ResetDamages(playerid);
  SCM(playerid, COLOR_LIGHTRED, "EMT: Your medicall bill is $750.");
  GiveCash(playerid, -750);
  return 1;
}

/*CMD:acceptdeath(playerid, params[])
{
	if(TimerDeath1[playerid] == 0) return SCM(playerid, COLOR_YELLOWG, "Nu esti ranit sau nu ai asteptat 120 de secunde.");
	StopPlayerAnims(playerid);
  StopPlayerSpec(playerid);
  SetIntVar(playerid, "JustAcceptedDeath", 0);
	RemoveVar(playerid, "JustDied");
	RemoveVar(playerid, "LoggedInDead");
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	PlayerInfo[playerid][pDied] = 0;
	TimerDeath1[playerid] = 0;
	TogglePlayerControllable(playerid, true);
	PutPlayer(playerid,1642.2006,-2334.4751,-2.6797);
	SCM(playerid, COLOR_WHITE, "Ai fost dus catre gara din Los Santos de la spital.");
	Delete3DTextLabel(DamageShot[playerid]);
	ResetDamages(playerid);
	return 1;
}*/
CMD:respawnplayer(playerid, params[])
{
	new id;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/respawnplayer [playerid]");
	SetPlayerInterior(id,0);
	SetPlayerVirtualWorld(id,0);
  new house = PlayerInfo[id][pHouseKey];
	if(PlayerInfo[id][pSpawnType] == 0)
  {
    PutPlayer(id, 1642.2006,-2334.4751,-2.6797);
    SetInterior(id,0);
    SetWorld(id, 0);
  }
  else if(PlayerInfo[id][pSpawnType] == 1)
  {
    if(house == -1)
    {
      SCM(id, COLOR_RED, "You do not have a home, so you spawnat normal.");
      PlayerInfo[id][pSpawnType] = 0;
    }
    else
    {
      PutPlayer(id, HouseInfo[house][hExitX], HouseInfo[house][hExitY],HouseInfo[house][hExitZ]);
      SetInterior(id,HouseInfo[house][hInterior]);
      SetWorld(id,HouseInfo[house][hWorld]);
      HouseEntered[id] = house;
      FreezePlayer(id);
      SetTimerEx("UnFreezePlayer", 4000, 0, "i", id);
    }
  }
  else if(PlayerInfo[id][pSpawnType] == 2)
  {
      new faction = PlayerInfo[id][pFaction];
      if(faction == 0)
    {
      SCM(id, COLOR_RED, "You do not have a faction, so you spawnat normal.");
      PlayerInfo[id][pSpawnType] = 0;
    }
    else if(faction == LSPD)
    {
      if(PlayerInfo[id][pSpawnLSPD] == 0)
      {
        PutPlayer(id, 2325.9409,-1349.8518,24.0577);
        SetInterior(id, 0);
        SetWorld(id, 0);
        FreezePlayer(id);
        SetTimerEx("UnFreezePlayer", 3000, 0, "i", id);
      }
      else if(PlayerInfo[id][pSpawnLSPD] == 1)
      {
        PutPlayer(id, 541.5809,-1806.1042,6.0625);
        SetInterior(id, 0);
        SetWorld(id, 0);
        FreezePlayer(id);
        SetTimerEx("UnFreezePlayer", 3000, 0, "i", id);
      }
      else if(PlayerInfo[id][pSpawnLSPD] == 2)
      {
        PutPlayer(id, 1527.1436,-1677.4576,5.8906);
        SetInterior(id, 0);
        SetWorld(id, 0);
        FreezePlayer(id);
        SetTimerEx("UnFreezePlayer", 3000, 0, "i", id);
      }
    }
    else if(faction == LSFD)
    {
        PutPlayer(id, 1178.4469,-1323.2102,14.1205);
      SetInterior(id, 0);
      SetWorld(id, 0);
      FreezePlayer(id);
      SetTimerEx("UnFreezePlayer", 3000, 0, "i", id);
    }
    else if(faction == GOV)
    {
      PutPlayer(id, 1481.3210,-1767.0018,18.7958);
      SetInterior(id, 0);
      SetWorld(id, 0);
      FreezePlayer(id);
      SetTimerEx("UnFreezePlayer", 3000, 0, "i", id);
    }
  }
	SCM(id,COLOR_WHITE,"You were successfully respawned.");
	SCM(playerid,COLOR_WHITE,"You has respawned someone successfully.");
	return 1;
}

CMD:note(playerid, params[])
{
  new option[7], secoption[128];
	if(sscanf(params, "s[7]S(NULL)[128]", option, secoption)) return SyntaxMSG(playerid, "/note [show/create/remove/give/add]");
  if(CompareStrings(option, "show"))
  {
  	ActionMessage(playerid, 15.0, "takes severtal papers out of pocket and looks through them.");
  	if(PlayerInfo[playerid][pNote1s] == 1)
  	{
  		format(msg, sizeof(msg), "[Notes] Note (1): {94EDED}%s{FFFFFF}", PlayerInfo[playerid][pNote1]);
  		SCM(playerid, -1, msg);
  	}
  	if(PlayerInfo[playerid][pNote2s] == 1)
  	{
  		format(msg, sizeof(msg), "[Notes] Note (2): {94EDED}%s{FFFFFF}", PlayerInfo[playerid][pNote2]);
  		SCM(playerid, -1, msg);
  	}
  	if(PlayerInfo[playerid][pNote3s] == 1)
  	{
  		format(msg, sizeof(msg), "[Notes] Note (3): {94EDED}%s{FFFFFF}", PlayerInfo[playerid][pNote3]);
  		SCM(playerid, -1, msg);
  	}
  }
	else if(CompareStrings(option, "add"))
  {
  	new aSlotID, aSlotText[256];
    if(sscanf(params, "{s[7]}ds[129]", aSlotID, aSlotText)) return SyntaxMSG(playerid, "/note add [slot id] [new text]");
  	if(!PlayerInfo[playerid][pPen]) return NoteMSG(playerid, "You don't have a pen.");
  	switch(aSlotID)
  	{
  		case 1:
  		{
  			if(!PlayerInfo[playerid][pNote1s]) return NoteMSG(playerid, "You don't have a note at slot 1.");
  			format(PlayerInfo[playerid][pNote1], 256, "%s %s", PlayerInfo[playerid][pNote1], aSlotText);
  			NoteMSG(playerid, "Added more text to Note 1.");
  			ActionMessage(playerid, 15.0, "takes out a paper note and writes something.");
  		}
  		case 2:
  		{
  			if(!PlayerInfo[playerid][pNote2s]) return NoteMSG(playerid, "You don't have a note at slot 2.");
  			format(PlayerInfo[playerid][pNote2], 256, "%s %s", PlayerInfo[playerid][pNote2], aSlotText);
  			NoteMSG(playerid, "Added more text to Note 2.");
  			ActionMessage(playerid, 15.0, "takes out a paper note and writes something.");
  		}
  		case 3:
  		{
  			if(!PlayerInfo[playerid][pNote3s]) return NoteMSG(playerid, "You don't have a note at slot 3.");
  			format(PlayerInfo[playerid][pNote3], 256, "%s %s", PlayerInfo[playerid][pNote3], aSlotText);
  			NoteMSG(playerid, "Added more text to Note 3.");
  			ActionMessage(playerid, 15.0, "takes out a paper note and writes something.");
  		}
  		default:
  		{
  			return NoteMSG(playerid, "Wrong slot id (1-3)");
  		}
  	}
	}
    else if(CompareStrings(option, "create"))
    {
        new szText[129];
        if(sscanf(params, "{s[7]}s[129]", szText)) return SyntaxMSG(playerid, "/note create [text]");
		if(!PlayerInfo[playerid][pPen]) return NoteMSG(playerid, "You don't have a pen.");
		if(PlayerInfo[playerid][pNote1s] == 0)
		{
			strmid(PlayerInfo[playerid][pNote1], szText, 0, strlen(szText), 255);
			PlayerInfo[playerid][pNote1s] = 1;
			NoteMSG(playerid, "Note created successfuly.");
			ActionMessage(playerid, 15.0, "takes out a paper note and writes something.");
			return 1;
		}
		else if(PlayerInfo[playerid][pNote2s] == 0)
		{
			strmid(PlayerInfo[playerid][pNote2], szText, 0, strlen(szText), 255);
			PlayerInfo[playerid][pNote2s] = 1;
			NoteMSG(playerid, "Note created successfuly.");
			ActionMessage(playerid, 15.0, "takes out a paper note and writes something.");
			return 1;
		}
		else if(PlayerInfo[playerid][pNote3s] == 0)
		{
			strmid(PlayerInfo[playerid][pNote3], szText, 0, strlen(szText), 255);
			PlayerInfo[playerid][pNote3s] = 1;
			NoteMSG(playerid, "Note created successfuly.");
			ActionMessage(playerid, 15.0, "takes out a paper note and writes something.");
			return 1;
		}
		else
		{
			NoteMSG(playerid, "You have no free pages left at your notebook.");
			return 1;
		}
    }
    else if(CompareStrings(option, "remove"))
    {
        new iNoteID;
        if(sscanf(params, "{s[7]}d", iNoteID)) return SyntaxMSG(playerid, "/note remove [note id]");
		switch(iNoteID)
		{
			case 1:
			{
				if(PlayerInfo[playerid][pNote1s] == 1)
				{
					strmid(PlayerInfo[playerid][pNote1], "None", 0, strlen("None"), 255);
					PlayerInfo[playerid][pNote1s] = 0;
					NoteMSG(playerid, "(slot 1) has been deleted successfuly.");
					ActionMessage(playerid, 15.0, "takes out a paper note and throws it on the ground.");
				}
				else
				{
					NoteMSG(playerid, "You don't have a note at slot 1.");
				}
			}
			case 2:
			{
				if(PlayerInfo[playerid][pNote2s] == 1)
				{
					strmid(PlayerInfo[playerid][pNote2], "None", 0, strlen("None"), 255);
					PlayerInfo[playerid][pNote2s] = 0;
					NoteMSG(playerid, "(slot 2) has been deleted successfuly.");
					ActionMessage(playerid, 15.0, "takes out a paper note and throws it on the ground.");
				}
				else
				{
					NoteMSG(playerid, "You don't have a note at slot 2.");
				}
			}
			case 3:
			{
				if(PlayerInfo[playerid][pNote3s] == 1)
				{
					strmid(PlayerInfo[playerid][pNote3], "None", 0, strlen("None"), 255);
					PlayerInfo[playerid][pNote3s] = 0;
					NoteMSG(playerid, "(slot 3) has been deleted successfuly.");
					ActionMessage(playerid, 15.0, "takes out a paper note and throws it on the ground.");
				}
				else
				{
					NoteMSG(playerid, "You don't have a note at slot 3.");
				}
			}
			default:
			{
				return NoteMSG(playerid, "Wrong slot id (1-3)");
			}
		}
    }
	else if(CompareStrings(option, "give"))
    {
		new iTargetID, iSlotID;
        if(sscanf(params, "{s[7]}du", iSlotID, iTargetID)) return SyntaxMSG(playerid, "/note give [slot id] [playerid]");
		if(!PlayerIsOn(iTargetID)) return NotConnectedMSG(playerid);
		if(!PlayerNearPlayer(3.0, playerid, iTargetID)) return NotNearPlayerMSG(playerid);
		if(iTargetID == playerid) return SCM(playerid, COLOR_WHITE, "You cannot give it to yourself.");
		switch(iSlotID)
		{
			case 1:
			{
				if(!PlayerInfo[playerid][pNote1s]) return NoteMSG(playerid, "You don't have a note at slot 1.");

				if(PlayerInfo[iTargetID][pNote1s] == 0)
				{
				    strmid(PlayerInfo[iTargetID][pNote1], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
					PlayerInfo[iTargetID][pNote1s] = 1;
					format(msg, sizeof(msg), "You have send a note to [ID:%d] %s.", iTargetID, GetNameWithMask(iTargetID));
					NoteMSG(playerid, msg);
					format(msg, sizeof(msg), "You have received a note from [ID:%d] %s.", playerid, GetNameWithMask(playerid));
					NoteMSG(iTargetID, msg);
					format(msg, sizeof(msg), "takes out a paper note and hands it to %s.", GetNameWithMask(iTargetID));
					ActionMessage(playerid, 15.0, msg);
				}
				else if(PlayerInfo[iTargetID][pNote2s] == 0)
				{
				    strmid(PlayerInfo[iTargetID][pNote2], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
					PlayerInfo[iTargetID][pNote2s] = 1;
					format(msg, sizeof(msg), "You have send a note to [ID:%d] %s.", iTargetID, GetNameWithMask(iTargetID));
					NoteMSG(playerid, msg);
					format(msg, sizeof(msg), "You have received a note from [ID:%d] %s.", playerid, GetNameWithMask(playerid));
					NoteMSG(iTargetID, msg);
					format(msg, sizeof(msg), "takes out a paper note and hands it to %s.", GetNameWithMask(iTargetID));
					ActionMessage(playerid, 15.0, msg);
				}
				else if(PlayerInfo[iTargetID][pNote3s] == 0)
				{
				    strmid(PlayerInfo[iTargetID][pNote3], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
					PlayerInfo[iTargetID][pNote3s] = 1;
					format(msg, sizeof(msg), "You have send a note to [ID:%d] %s.", iTargetID, GetNameWithMask(iTargetID));
					NoteMSG(playerid, msg);
					format(msg, sizeof(msg), "You have received a note from [ID:%d] %s.", playerid, GetNameWithMask(playerid));
					NoteMSG(iTargetID, msg);
					format(msg, sizeof(msg), "takes out a paper note and hands it to %s.", GetNameWithMask(iTargetID));
					ActionMessage(playerid, 15.0, msg);
				}
				else return NoteMSG(playerid, "Player's notebook is full.");
			}
			case 2:
			{
				if(!PlayerInfo[playerid][pNote2s]) return NoteMSG(playerid, "You don't have a note at slot 2.");

				if(PlayerInfo[iTargetID][pNote1s] == 0)
				{
				    strmid(PlayerInfo[iTargetID][pNote1], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
					PlayerInfo[iTargetID][pNote1s] = 1;
					format(msg, sizeof(msg), "You have send a note to [ID:%d] %s.", iTargetID, GetNameWithMask(iTargetID));
					NoteMSG(playerid, msg);
					format(msg, sizeof(msg), "You have received a note from [ID:%d] %s.", playerid, GetNameWithMask(playerid));
					NoteMSG(iTargetID, msg);
					format(msg, sizeof(msg), "takes out a paper note and hands it to %s.", GetNameWithMask(iTargetID));
					ActionMessage(playerid, 15.0, msg);
				}
				else if(PlayerInfo[iTargetID][pNote2s] == 0)
				{
				    strmid(PlayerInfo[iTargetID][pNote2], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
					PlayerInfo[iTargetID][pNote2s] = 1;
					format(msg, sizeof(msg), "You have send a note to [ID:%d] %s.", iTargetID, GetNameWithMask(iTargetID));
					NoteMSG(playerid, msg);
					format(msg, sizeof(msg), "You have received a note from [ID:%d] %s.", playerid, GetNameWithMask(playerid));
					NoteMSG(iTargetID, msg);
					format(msg, sizeof(msg), "takes out a paper note and hands it to %s.", GetNameWithMask(iTargetID));
					ActionMessage(playerid, 15.0, msg);
				}
				else if(PlayerInfo[iTargetID][pNote3s] == 0)
				{
				    strmid(PlayerInfo[iTargetID][pNote3], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
					PlayerInfo[iTargetID][pNote3s] = 1;
					format(msg, sizeof(msg), "You have send a note to [ID:%d] %s.", iTargetID, GetNameWithMask(iTargetID));
					NoteMSG(playerid, msg);
					format(msg, sizeof(msg), "You have received a note from [ID:%d] %s.", playerid, GetNameWithMask(playerid));
					NoteMSG(iTargetID, msg);
					format(msg, sizeof(msg), "takes out a paper note and hands it to %s.", GetNameWithMask(iTargetID));
					ActionMessage(playerid, 15.0, msg);
				}
				else return NoteMSG(playerid, "Player's notebook is full.");
			}
			case 3:
			{
				if(!PlayerInfo[playerid][pNote3s]) return NoteMSG(playerid, "You don't have a note at slot 2.");

				if(PlayerInfo[iTargetID][pNote1s] == 0)
				{
				    strmid(PlayerInfo[iTargetID][pNote1], PlayerInfo[playerid][pNote3], 0, strlen(PlayerInfo[playerid][pNote3]), 255);
					PlayerInfo[iTargetID][pNote1s] = 1;
					format(msg, sizeof(msg), "You have send a note to [ID:%d] %s.", iTargetID, GetNameWithMask(iTargetID));
					NoteMSG(playerid, msg);
					format(msg, sizeof(msg), "You have received a note from [ID:%d] %s.", playerid, GetNameWithMask(playerid));
					NoteMSG(iTargetID, msg);
					format(msg, sizeof(msg), "takes out a paper note and hands it to %s.", GetNameWithMask(iTargetID));
					ActionMessage(playerid, 15.0, msg);
				}
				else if(PlayerInfo[iTargetID][pNote2s] == 0)
				{
				    strmid(PlayerInfo[iTargetID][pNote2], PlayerInfo[playerid][pNote3], 0, strlen(PlayerInfo[playerid][pNote3]), 255);
					PlayerInfo[iTargetID][pNote2s] = 1;
					format(msg, sizeof(msg), "You have send a note to [ID:%d] %s.", iTargetID, GetNameWithMask(iTargetID));
					NoteMSG(playerid, msg);
					format(msg, sizeof(msg), "You have received a note from [ID:%d] %s.", playerid, GetNameWithMask(playerid));
					NoteMSG(iTargetID, msg);
					format(msg, sizeof(msg), "takes out a paper note and hands it to %s.", GetNameWithMask(iTargetID));
					ActionMessage(playerid, 15.0, msg);
				}
				else if(PlayerInfo[iTargetID][pNote3s] == 0)
				{
				    strmid(PlayerInfo[iTargetID][pNote3], PlayerInfo[playerid][pNote3], 0, strlen(PlayerInfo[playerid][pNote3]), 255);
					PlayerInfo[iTargetID][pNote3s] = 1;
					format(msg, sizeof(msg), "You have send a note to [ID:%d] %s.", iTargetID, GetNameWithMask(iTargetID));
					NoteMSG(playerid, msg);
					format(msg, sizeof(msg), "You have received a note from [ID:%d] %s.", playerid, GetNameWithMask(playerid));
					NoteMSG(iTargetID, msg);
					format(msg, sizeof(msg), "takes out a paper note and hands it to %s.", GetNameWithMask(iTargetID));
					ActionMessage(playerid, 15.0, msg);
				}
				else return NoteMSG(playerid, "Player's notebook is full.");
			}
			default:
			{
				return NoteMSG(playerid, "Wrong slot id (1-3)");
			}
		}
	}
	else return SyntaxMSG(playerid, "/note [show/create/remove/give/add]");
    return 1;
}

CMD:attributes(playerid, params[])
{
	new info[128];  
	if(sscanf(params,"s[128]",info))
  {
    SyntaxMSG(playerid, "/attributes [description]");
    format(msg, sizeof(msg), "Current: %s", PlayerInfo[playerid][pAttributes]);
    SCM(playerid, COLOR_WHITE, msg);       
  }
  else
  {
    format(PlayerInfo[playerid][pAttributes], 128, "%s", info);
  	format(msg, sizeof(msg), "> %s", PlayerInfo[playerid][pAttributes]);
  	SCM(playerid, COLOR_PURPLE, msg);
    SCM(playerid, COLOR_WHITE, "You have changed your attributes.");
  }
	return 1;
}

CMD:forumname(playerid, params[])
{
  new info[128];
  if(!CheckAdmin(playerid, ADMIN_LEVEL_1) && PlayerInfo[playerid][pHelper] == 0) return NotAuthMSG(playerid);
  if(sscanf(params,"s[128]",info)) return SyntaxMSG(playerid, "/forumname [description]");
  format(msg, sizeof(msg), "You have changed your forumname in: %s.", info);
  SCM(playerid, COLOR_FADE1, msg);
  format(PlayerInfo[playerid][pForumName], 128, "%s", info);
  return 1;
}

CMD:examine(playerid, params[])
{
	new pid;
	if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/examine [playerid]");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	if(PlayerInfo[pid][pAttributes] == 0) return SCM(playerid, COLOR_YELLOWG,"This player doesn't have attributes");
	if(!PlayerNearPlayer(4.0, playerid, pid)) return NotNearPlayerMSG(playerid);
	//format(msg, sizeof(msg), "|______Atributiile lui %s______|", GetName(pid));
	//SCM(playerid, COLOR_FADE5, msg);
	//format(msg, sizeof(msg), "%s", PlayerInfo[pid][pAttributes]);
	//SCM(playerid, COLOR_GRAD3, msg);
	format(msg, sizeof(msg), "%s", PlayerInfo[pid][pAttributes]);
	SetPlayerBubble(pid, msg);
	//SCM(playerid, COLOR_FADE5, "|_____________________________________|");
	return 1;
}

CMD:myfish(playerid, params[])
{
	SCM(playerid, COLOR_GREEN,"_____________________________");
	format(msg, sizeof(msg), "Fishes weight [%d] Lbs.", GetIntVar(playerid, "FishCount"));
	SCM(playerid,COLOR_WHITE,msg);
	if(GetIntVar(playerid, "FishCount") >= 1000) return FishMSG(playerid, "Now you can unload the fish using '/unloadfish'.");
	return 1;
}

CMD:stopfishing(playerid, params[])
{
	if(GetIntVar(playerid, "IsFishing") == 0) return FishMSG(playerid, "You are not fishing.");
	FishMSG(playerid, "You stop fishing.");
	RemoveVar(playerid, "IsFishing");
	return 1;
}

CMD:gofishing(playerid, params[])
{
	new choise;
	if(sscanf(params,"d",choise)) return SyntaxMSG(playerid, "/gofishing [(1-OnFoot)][(2-OnYacht)]");
	if(GetIntVar(playerid, "IsFishing") == 1) return FishMSG(playerid, "Already catch, use '/stopfishing ' to stop.");
	if(choise == 1)
	{
		SetIntVar(playerid, "IsFishing", 1);
		InfoMSG(playerid, "~w~Now you can start using~n~~y~/fish ~w~or ~y~/unloadfish ~w~to unload fish.", 6);
	}
  else if(choise == 2)
  {
    new vehicle = GetPlayerVehicleID(playerid);
    if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
    if(!IsABoat(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "You can't go fishing in this vehicle.");
    if(!IsAtBoatPlace(playerid))
    {
      SCM(playerid,COLOR_GREEN,"Go to the fishing place in the ocean and start fishing(/fish)!");
      SetCheckPoint(playerid, COMPSPOT, 418.4906,-2155.7886,0.0295, 8.0);
    }
    SetIntVar(playerid, "IsFishing", 2);
    InfoMSG(playerid, "~w~Now you can start using~n~~y~/fish ~w~or ~y~/unloadfish ~w~to unload fish.", 6);
  }
	return 1;
}

CMD:unloadfish(playerid, params[])
{
	new money;
  if(GetIntVar(playerid, "FishCount") <= 1000) return SCM(playerid, COLOR_YELLOWG,"Your weight of fish must be above 1000 Lbs.");
	if(!PlayerToPoint(4,playerid,2472.5859,-2710.7039,3.1963)) 
  {
    SCM(playerid,COLOR_GREEN,"A place to unload fishes and get money for them is marked on map");
    SetCheckPoint(playerid, FISH, 2472.5859,-2710.7039,3.1963, 5.0);
  }
	if(GetIntVar(playerid, "FishCount") > 900 && GetIntVar(playerid, "FishCount") <= 1100)
	{
		money = randomEx(GetIntVar(playerid, "FishCount"),GetIntVar(playerid, "FishCount")+300);
		format(msg, sizeof(msg), "You have unloaded %d fish for the amount of $%d.",GetIntVar(playerid, "FishCount"),money);
		FishMSG(playerid, msg);
		SCM(playerid, COLOR_GREEN,"You have unloaded fishes and stsopped fishing.");
		GiveCash(playerid,money);
		RemoveVar(playerid, "FishCount");
		RemoveVar(playerid, "IsFishing");
	}
	return 1;
}

CMD:fish(playerid, params[])
{
	if(GetIntVar(playerid, "FishCount") >= 1000) return FishMSG(playerid, "You can not fish, if you want to continue using '/unloadfish'.");
	if(GetIntVar(playerid, "IsFishing") == 0) return FishMSG(playerid, "You have not begun to catch, use '/gofishing'.");

	if(GetIntVar(playerid, "IsFishing") == 1)
	{
		if(!IsAtFishPlace(playerid)) return SCM(playerid,COLOR_LIGHTRED,"You are not at the fishing place!");
		if(gettime() - GetIntVar(playerid, "FishDelay") < 6) return SCM(playerid, COLOR_WHITE, "((Please wait 6 seconds between each /fish))");
		SetIntVar(playerid, "FishDelay", gettime());
		new randlb = randomEx(15,30), rand = random(FishNamesAmount), fstring[64];
		new randCatch = randomEx(1, 3);
		if(randCatch == 2)
		{
			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			format(msg, sizeof(msg), "rolls the rod line back and sees that he caught a %s.", fstring);
			ActionMessage(playerid, 15.0, msg);
			format(msg, sizeof(msg), "Caught a %s Lbs:%d", fstring, randlb);
			SCM(playerid, COLOR_GREEN,msg);
			UpdateIntVar(playerid, "FishCount", randlb);
		}
		else
		{
			SCM(playerid,COLOR_LIGHTRED,"You catch nothing");
		}
		if(GetIntVar(playerid, "FishCount") >= 1000)
		{
			RemoveVar(playerid, "IsFishing");
			SCM(playerid,COLOR_GREEN,"Enough of fishing, /unloadfish if you want to sell your fishes");
			return 1;
		}

	}
  else if(GetIntVar(playerid, "IsFishing") == 2)
  {
    new vehicle = GetPlayerVehicleID(playerid);
    if(!IsABoat(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "You can't go fishing in this vehicle.");
    if(!IsAtBoatPlace(playerid)) return SCM(playerid,COLOR_LIGHTRED,"You are not at the boat fishing place!");
    if(gettime() - GetIntVar(playerid, "FishDelay") < 6) return SCM(playerid, COLOR_WHITE, "((Please wait 6 seconds between each /fish))");
    SetIntVar(playerid, "FishDelay", gettime());
    new randlb = randomEx(15,100), rand = random(FishNamesAmount), fstring[64];
    new randCatch = randomEx(1, 3);
    if(randCatch == 2)
    {
      format(fstring, sizeof(fstring), "%s", FishNames[rand]);
      format(msg, sizeof(msg), "rolls the rod line back and sees that he caught a %s.", fstring);
      ActionMessage(playerid, 15.0, msg);
      format(msg, sizeof(msg), "Caught a %s Lbs:%d", fstring, randlb);
      SCM(playerid, COLOR_GREEN,msg);
      UpdateIntVar(playerid, "FishCount", randlb);
    }
    else
    {
      SCM(playerid,COLOR_LIGHTRED,"You catch nothing");
    }
    if(GetIntVar(playerid, "FishCount") >= 1000)
    {
      RemoveVar(playerid, "IsFishing");
      SCM(playerid,COLOR_GREEN,"Enough of fishing, /unloadfish if you want to sell your fishes");
      return 1;
    }
  }
	return 1;
}

/*CMD:info(playerid, params[])
{
	for(new i = 0; i < sizeof(CPTInfo); i++)
	{
		if (PlayerToPoint(3, playerid,CPTInfo[i][cPosX], CPTInfo[i][cPosY], CPTInfo[i][cPosZ]) && CPTInfo[i][cVirtualWorld] == GetWorld(playerid) || PlayerToPoint(3, playerid,CPTInfo[i][cPosX], CPTInfo[i][cPosY], CPTInfo[i][cPosZ]) && CPTInfo[i][cVirtualWorld] == -1)
		{
			if(CPTInfo[i][cInfoOn])
			{
				format(msg, sizeof(msg), "{00FF00}[INFO]{FFFFFF}: %s", CPTInfo[i][cOtherInfo]);
				SCM(playerid, -1, msg);
				return 1;
			}
		}
		else
		{
		    SCM(p
		}
	}
	return 1;
}*/


//===========Bank commands===========//
CMD:atm(playerid, params[])
{
    if(!IsAtATM(playerid)) return SCM(playerid, COLOR_GREEN, "You're not near ATM.");
    if(GetSavings(playerid) > 0) return SCM(playerid, COLOR_YELLOWG, "You currently have a savings action, you must take out your savings.");
    ShowDialog(playerid, Show:<ATMDialog>, DIALOG_STYLE_LIST, "ATM", "Withdraw\nAccount balance", "Ok", "Exit");
    return 1;
}
CMD:balance(playerid, params[])
{
	if(!IsAtBank(playerid)) return SCM(playerid, COLOR_GREEN, "You're not in the Bank.");
	format(msg, sizeof(msg), "[BANK] Balance: $%d.", PlayerInfo[playerid][pBank]);
	SCM(playerid, COLOR_FADE1, msg);
	return 1;
}

CMD:transfer(playerid, params[])
{
	new id, amount;
	if(!IsAtBank(playerid)) return SCM(playerid, COLOR_GREEN, "Your are not in the bank.");
	if(GetSavings(playerid) > 0) return SCM(playerid, COLOR_YELLOWG, "You currently have a savings action, you must take out your savings.");
	if(sscanf(params,"ud",id,amount)) {
		SyntaxMSG(playerid, "/transfer [playerid/PartOfName] [amount].");
		format(msg, sizeof(msg), "[BANK] You currently have $%d in your bank account.", PlayerInfo[playerid][pBank]);
		SCM(playerid, COLOR_FADE1, msg);
		return 1;
	}
	if(id == playerid) return SCM(playerid, COLOR_LIGHTRED, "You may not transfer it to yourself.");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(GetBankCash(playerid) < amount || amount < 1) return SCM(playerid, COLOR_GRAD2, "[BANK] You don't have that much.");
	GiveBankCash(playerid, -amount);
	GiveBankCash(id, amount);
	format(msg, sizeof(msg), "You have just transfered $%d, to %s's bank acccount.", amount, GetNameEx(id));
	SCM(playerid, COLOR_LIGHTBLUE, msg);
	format(msg, sizeof(msg), "You have recieved $%d into your bank account from %s.", amount, GetNameEx(playerid));
	SCM(id, COLOR_LIGHTBLUE, msg);
	return 1;
}

CMD:withdraw(playerid, params[])
{
	new amount;
	if(!IsAtBank(playerid)) return SCM(playerid, COLOR_GREEN, "Your are not in the bank.");
	if(GetSavings(playerid) > 0) return SCM(playerid, COLOR_YELLOWG, "You currently have a savings action, you must take out your savings.");
	if(sscanf(params,"d",amount)) {
		SyntaxMSG(playerid, "/withdraw [amount].");
		format(msg, sizeof(msg), "[BANK] Balance: $%d.", PlayerInfo[playerid][pBank]);
		SCM(playerid, COLOR_FADE1, msg);
		return 1;
	}
	if (amount > GetBankCash(playerid) || amount < 1) return SCM(playerid, COLOR_GRAD2, "[BANK] You don't have that much.");
	GiveCash(playerid,amount);
	GiveBankCash(playerid, -amount);
	format(msg, sizeof(msg), "[BANK] You have withdrawn $%d from your account. Total remaining: $%d.", amount,GetBankCash(playerid));
	SCM(playerid, COLOR_YELLOWG, msg);
	return 1;
}
CMD:deposit(playerid, params[])
{
	new amount;
	if(!IsAtBank(playerid)) return SCM(playerid, COLOR_GREEN, "Your are not in the bank.");
	if(GetSavings(playerid) > 0) return SCM(playerid, COLOR_YELLOWG, "You currently have a savings action, you must take out your savings.");
	if(sscanf(params,"d",amount)) {
		SyntaxMSG(playerid, "/deposit [amount].");
		format(msg, sizeof(msg), "[BANK] You currently have $%d in your bank account.", PlayerInfo[playerid][pBank]);
		SCM(playerid, COLOR_FADE1, msg);
		return 1;
	}
	if (amount > GetCash(playerid) || amount < 1) return SCM(playerid, COLOR_GRAD2, "[BANK] You don't have that much.");
	GiveCash(playerid,-amount);
	SCM(playerid, COLOR_WHITE, "|___ BANK STATMENT ___|");
	format(msg, sizeof(msg), "  Old balance: $%d", GetBankCash(playerid));
	SCM(playerid, COLOR_GRAD2, msg);
	GiveBankCash(playerid, amount);
	format(msg, sizeof(msg), "  Deposited: $%d",amount);
	SCM(playerid, COLOR_GRAD4, msg);
	format(msg, sizeof(msg), "  New balance: $%d", GetBankCash(playerid));
	SCM(playerid, COLOR_WHITE, msg);
	SCM(playerid, COLOR_GRAD6, "|-----------------------------------------|");
	return 1;
}

/*CMD:savings(playerid, params[])
{
	new amount;
	if(!IsAtBank(playerid)) return SCM(playerid, COLOR_GREEN, "Your are not in the bank.");
	if(GetSavings(playerid) == 0)
	{
		if(sscanf(params,"d",amount)) return SyntaxMSG(playerid, "/savings [amount]");
		if(amount < 50000 || amount > 100000) return SCM(playerid, COLOR_FADE1, "You may only put between $50,000 - $100,000.");
		if(GetCash(playerid) < amount) return NoCashMSG(playerid);
		format(msg, sizeof(msg), "You have put $%d, in your savings. (Note: If you'll use '/savings' again, the money will be withdrawn)", amount);
		SCM(playerid, COLOR_YELLOW, msg);
		GiveCash(playerid, -amount);
		SetSavings(playerid, amount);
	}
	else
	{
		format(msg, sizeof(msg), "You have taken out your savings, $%d.", GetSavings(playerid));
		SCM(playerid, COLOR_YELLOW, msg);
		GiveCash(playerid, GetSavings(playerid));
		ResetSavings(playerid);
	}
	return 1;
}
*/
CMD:paycheck(playerid, params[])
{
	if(!IsAtBank(playerid)) return SCM(playerid, COLOR_GREEN, "You're not in the Bank.");
	if(PlayerInfo[playerid][pPayCheckMoney] > 0)
	{
		format(msg, sizeof(msg), "~w~You received salary worth ~g~$%d.", PlayerInfo[playerid][pPayCheckMoney]);
		GameTextForPlayer(playerid, msg, 5000, 5);
		GiveCash(playerid, PlayerInfo[playerid][pPayCheckMoney]);
		PlayerInfo[playerid][pPayCheckMoney] = 0;
	}
	else return SCM(playerid, COLOR_YELLOWG, "No money in Paycheck.");
	return 1;
}

CMD:paycheckmade(playerid, params[])
{
  if(PlayerInfo[playerid][pPayCheckMoney] > 0)
  {
    SCMEx(playerid, COLOR_YELLOWG, "Your paycheck is right now %d", PlayerInfo[playerid][pPayCheckMade]);
  }
  else return SCM(playerid, COLOR_YELLOWG, "No money in Paycheck.");
  return 1;
}

//===========Bank commands===========//


CMD:ad(playerid, params[]) return cmd_advert(playerid, params);
CMD:advert(playerid, params[])
{
	new cost = 500;
	if(isnull(params)) return SyntaxMSG(playerid, "(/ad)vert [text]");
	if(!PlayerToPoint(15.0,playerid,1129.0093,-1489.6792,22.7614)) return SCM(playerid, COLOR_GREY, "You're not at the MALL!");
	format(msg, sizeof(msg), "You do not have enough money ($%d)", cost);
	if(PlayerInfo[playerid][pCellPhone] == 0) return SCM(playerid, COLOR_WHITE, " You don't have a phone.");
	if(GetCash(playerid) < cost) return ErrorMsg(playerid, msg);
	format(msg, sizeof(msg), "You still have to wait %d seconds before advertising again.", 60 - (gettime() - AdvertWait));
	if(gettime() - AdvertWait < 60) return ErrorMsg(playerid, msg);
	GiveCash(playerid, - cost);
	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		format(msg, sizeof(msg), "[Advertisement] %.*s ...", pos, params);
		SCMALL(COLOR_GREEN, msg);
		format(msg, sizeof(msg), "[Advertisement] ... %s, Contact: %s - Ph: %d", params[pos], GetNameEx(playerid), PlayerInfo[playerid][pNumber]);
		SCMALL(COLOR_GREEN, msg);
	}
	else
	{
		format(msg, sizeof(msg), "[Advertisement] %s, Contact: %s - Ph: %d", params, GetNameEx(playerid), PlayerInfo[playerid][pNumber]);
		SCMALL(COLOR_GREEN, msg);
	}
	format(msg, sizeof(msg), "* %s [ID:%d] last used /ad.", GetNameEx(playerid), playerid);
	AMSG(COLOR_YELLOWG, msg);
	foreach(Player, i) {
  	format(msg, sizeof(msg), "~g~%s (%d): %s", GetNameEx(playerid), PlayerInfo[playerid][pNumber], params);
  	TextDrawSetString(NewsTD[i], msg);
	}
	AdvertWait = gettime();
	return 1;
}

CMD:cad(playerid, params[])
{
	new cost = 1000;
	if(isnull(params)) return SyntaxMSG(playerid, "/cad [text]");
	if(!PlayerToPoint(15.0,playerid,1129.0093,-1489.6792,22.7614)) return SCM(playerid, COLOR_GREY, "You're not at the MALL!");
	format(msg, sizeof(msg), "You do not have enough money ($%d)", cost);
	if(GetCash(playerid) < cost) return ErrorMsg(playerid, msg);
	if(PlayerInfo[playerid][pCellPhone] == 0) return SCM(playerid, COLOR_WHITE, " You don't have a phone.");
	format(msg, sizeof(msg), "You must wait %d seconds to submit another advertisement.", 60 - (gettime() - AdvertWait));
	if(gettime() - AdvertWait < 60) return ErrorMsg(playerid, msg);
	GiveCash(playerid, - cost);
	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		format(msg, sizeof(msg), "[Company Advertisement] %.*s ...", pos, params);
		SCMALL(COLOR_GREEN, msg);
		format(msg, sizeof(msg), "[Company Advertisement] ... %s", params[pos]);
		SCMALL(COLOR_GREEN, msg);
	}
	else
	{
		format(msg, sizeof(msg), "[Company Advertisement] %s", params);
		SCMALL(COLOR_GREEN, msg);
	}
	format(msg, sizeof(msg), "* %s [ID:%d] last used /cad.", GetNameEx(playerid), playerid);
	AMSG(COLOR_YELLOWG, msg);
	foreach(Player, i) {
		format(msg, sizeof(msg), "~g~Company Advertisement: %s", params);
		TextDrawSetString(NewsTD[i], msg);
	}
	AdvertWait = gettime();
	return 1;
}

CMD:turnfam(playerid, params[])
{
  if(PlayerInfo[playerid][pFaction] == 0) return SCM(playerid,COLOR_YELLOWG, "You don't have a faction");
  if(factionon{playerid} != 0) return SCM(playerid,COLOR_YELLOWG, " Family chat is already ON.");
  factionon{playerid} = 1;
  SCM(playerid, COLOR_GREY, "   Family chat enabled");
  return 1;
}

CMD:togfam(playerid, params[])
{
  if(PlayerInfo[playerid][pFaction] == 0) return SCM(playerid,COLOR_YELLOWG, "You don't have a faction");
  if(factionon{playerid} != 1) return SCM(playerid,COLOR_YELLOWG, " Family chat is already OFF.");
  factionon{playerid} = 0;
  SCM(playerid, COLOR_GREY, "   Family chat disabled");
  return 1;
}

CMD:turnon(playerid, params[])
{
	if(PlayerInfo[playerid][pCellPhone] != 1) return CellMSG(playerid, "You do not have a phone.");
	if(cellOn{playerid} != 0) return CellMSG(playerid, "Your phone is already on...");
	cellOn{playerid} = 1;
	if(PlayerInfo[playerid][pSex] == 1)
	{
		ActionMessage(playerid, 15.0, "turned on their phone.");
	} else {
		ActionMessage(playerid, 15.0, "turned on their phone.");
	}
	return 1;
}
CMD:turnoff(playerid, params[])
{
	if(PlayerInfo[playerid][pCellPhone] != 1) return CellMSG(playerid, "You do not have a phone.");
	if(cellOn{playerid} != 1) return CellMSG(playerid, "Your phone is already off...");
	cellOn{playerid} = 0;
	if(PlayerInfo[playerid][pSex] == 1)
	{
		ActionMessage(playerid, 15.0, "turned off their phone.");
	} else {
		ActionMessage(playerid, 15.0, "turned off their phone.");
	}
	return 1;
}

CMD:h(playerid, params[]) return cmd_hangup(playerid, params);
CMD:hangup(playerid, params[])
{
	if(PlayerInfo[playerid][pCellPhone] != 1) return CellMSG(playerid, "You do not have a phone.");
	if(cellOn{playerid} != 1) return CellMSG(playerid, "Your phone is off (/turnon)...");
	new caller = GetIntVar(playerid, "CallWith");
	if(GetIntVar(playerid, "OnCall") == 0 && GetIntVar(playerid, "GettingCall") == 0 && GetIntVar(playerid, "IsCalling") == 0 || GetIntVar(playerid, "CallWith") > 500)
	{
		ActionMessage(playerid, 15.0, "pockets his cellphone.");
		CellMSG(playerid, "Your phone is now in your pocket.");
		RemoveVar(playerid, "CallCost");
		RemoveVar(playerid, "CallTime");
		RemoveVar(playerid, "CallWith");
		RemoveVar(playerid, "GettingCall");
		RemoveVar(playerid, "OnCall");
		RemoveVar(playerid, "IsCalling");
		phoneAnim(playerid, 0);
	}
	if(GetIntVar(playerid, "GettingCall") == 1)
	{
		format(msg, sizeof(msg), "%d has rejected your call...", PlayerInfo[playerid][pNumber]);
		CellMSG(caller, msg);
		phoneAnim(caller, 0);
		CellMSG(playerid, "You didn't answer to the call, so you hung up.");
		RemoveVar(caller, "CallCost");
		RemoveVar(caller, "CallTime");
		RemoveVar(caller, "CallWith");
		RemoveVar(caller, "GettingCall");
		RemoveVar(caller, "OnCall");
		RemoveVar(caller, "IsCalling");
		RemoveVar(playerid, "CallCost");
		RemoveVar(playerid, "CallTime");
		RemoveVar(playerid, "CallWith");
		RemoveVar(playerid, "GettingCall");
		RemoveVar(playerid, "OnCall");
		RemoveVar(playerid, "IsCalling");
	}
	if(GetIntVar(playerid, "OnCall") == 1 && GetIntVar(caller, "OnCall") == 1)
	{
		CellMSG(caller, "They hung up...");
		CellMSG(playerid, "You hung up the call..");
		phoneAnim(playerid, 0);
		phoneAnim(caller, 0);
		SetIntVar(playerid, "CallCost", GetIntVar(playerid, "CallTime")/20);
		format(msg, sizeof(msg), "~w~The call cost~n~~r~$%d",GetIntVar(playerid, "CallCost"));
		GameTextForPlayer(playerid, msg, 5000, 1);
		GiveCash(playerid, -GetIntVar(playerid, "CallCost"));
		SetIntVar(caller, "CallCost", GetIntVar(caller, "CallTime")/20);
		format(msg, sizeof(msg), "~w~The call cost~n~~r~$%d",GetIntVar(caller, "CallCost"));
		GameTextForPlayer(caller, msg, 5000, 1);
		GiveCash(caller, -GetIntVar(caller, "CallCost"));
		RemoveVar(caller, "CallCost");
		RemoveVar(caller, "CallTime");
		RemoveVar(caller, "CallWith");
		RemoveVar(caller, "GettingCall");
		RemoveVar(caller, "OnCall");
		RemoveVar(caller, "IsCalling");
		RemoveVar(playerid, "CallCost");
		RemoveVar(playerid, "CallTime");
		RemoveVar(playerid, "CallWith");
		RemoveVar(playerid, "GettingCall");
		RemoveVar(playerid, "OnCall");
		RemoveVar(playerid, "IsCalling");
	}
	if(GetIntVar(playerid, "IsCalling") == 1 && GetIntVar(caller, "OnCall") == 0)
	{
		format(msg, sizeof(msg), "%d has stopped calling you...", PlayerInfo[playerid][pNumber]);
		CellMSG(caller, msg);
		CellMSG(playerid, "You hung up the call..");
		phoneAnim(playerid, 0);
		RemoveVar(caller, "CallCost");
		RemoveVar(caller, "CallTime");
		RemoveVar(caller, "CallWith");
		RemoveVar(caller, "GettingCall");
		RemoveVar(caller, "OnCall");
		RemoveVar(caller, "IsCalling");
		RemoveVar(playerid, "CallCost");
		RemoveVar(playerid, "CallTime");
		RemoveVar(playerid, "CallWith");
		RemoveVar(playerid, "GettingCall");
		RemoveVar(playerid, "OnCall");
		RemoveVar(playerid, "IsCalling");
	}
  HidePhone(playerid);
	return 1;
}

CMD:service(playerid, params[])
{
	if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
	if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "You're not the driver.");
	if(PlayerToPoint(12.0,playerid,1912.0736, -1771.8940, 13.7736))
    {
		MoveObject(servicepecosud, 1917.1736, -1771.8940, 13.7736, 1.0,0.0000, 0.0000, 90);
		timergate[playerid] = SetTimerEx("servicepecosudclose",10000,false,"i",playerid);
		SCM(playerid, COLOR_YELLOWG,"Use /servicerepair after entering.");
	}
	else return SCM(playerid, COLOR_WHITE, "You're not the Idlewood Gas to repair your car.");
	return 1;
}
CMD:servicerepair(playerid, params[])
{
	new vehicle = GetPlayerVehicleID(playerid);
	new faction = PlayerInfo[playerid][pFaction];
 	new Float:hp;
	GetVehicleHealth(vehicle, hp);
	if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
	if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "You're not the driver.");
  if(IsPlayerInRangeOfPoint(playerid,5,1913.2634,-1776.4719,13.3828))
  {
    if (hp<1000)
    {
   		if(GetPlayerMoney(playerid) >=400)
      {
        RepairVehicle(vehicle);
	      SCM(playerid, COLOR_WHITE,"Your car is in the repair process! Please wait...");
				if(faction != LSPD && faction != GOV && faction != LSFD)
				{
					GivePlayerMoney(playerid,-400);
				}
				FreezePlayer(playerid);
				SetTimerEx("UnFreezePlayer", 20000, 0, "i", playerid);
     	}
     	else
      {
        SCM(playerid, COLOR_WHITE,"You do not have enough money.");
      }
    }
    else
		{
		    SendClientMessage(playerid, COLOR_WHITE,"The car is already repaired.");
		}
  }
  return 1;
}

CMD:dropcell(playerid, params[])
{
    if(PlayerInfo[playerid][pCellPhone] == 0) return CellMSG(playerid, "You do not have a mobile phone.");
    if(GetIntVar(playerid, "OnCall") == 1) return CellMSG(playerid, "You're already engaged in another calling...");
    PlayerInfo[playerid][pCellPhone] = 0;
    SCM(playerid,COLOR_YELLOWG,"You threw your phone, you will need to buy another in 24/7");
    return 1;
}

CMD:phone(playerid, params[])
{
  if(PlayerInfo[playerid][pJailed] != 0) return SCM(playerid, COLOR_YELLOWG, "You can't use the phone when you are in jail.");
  if(PlayerInfo[playerid][pCellPhone] != 1) return CellMSG(playerid, "You do not have a mobile phone.");
  if(cellOn{playerid} != 1) return SCM(playerid,COLOR_YELLOWG, "Your phone is off (/turnon).");
  new h,mi,s,str[255];
  gettime(h,mi,s);
  format(str, sizeof(str), "%02d:%02d",h,mi);
  PlayerTextDrawSetString(playerid, phone9[playerid], str);
  ActionMessage(playerid, 15.0, "takes out their phone.");
  new Year, Month, Day,str1[255];
  getdate(Year, Month, Day);
  format(str1, sizeof(str1), "%02d/%02d/%d", Day, Month, Year);
  PlayerTextDrawSetString(playerid, phone10[playerid], str1);
  ShowPhone(playerid);
  SelectTextDraw(playerid, 0xFFFFFFFF);
  SendClientMessage(playerid, COLOR_WHITE, "[!] To hang up the phone, use /togphone.");
  return 1;
}

CMD:togphone(playerid, params[])
{
  HidePhone(playerid);
  return 1;
}

CMD:call(playerid, params[])
{
	new number, currentNum;
	if(PlayerInfo[playerid][pJailed] != 0) return SCM(playerid, COLOR_WHITE, "Your phone has been confiscated when you were put to jail.");
	if(PlayerInfo[playerid][pCellPhone] != 1) return CellMSG(playerid, "You do not have a mobile phone.");
	if(sscanf(params,"d",number))
	{
		SCM(playerid,COLOR_GREY,"[ Common numbers ]");
		SCM(playerid,COLOR_WHITE,"Urgent (LSPD/LSFD): 911");
		SCM(playerid,COLOR_WHITE,"Mechanic Hotline: 544");
		SCM(playerid,COLOR_WHITE,"Taxi Dispatch: 555");
		SCM(playerid,COLOR_LIGHTRED,"USAGE: {FFFFFF}/call [number/contact]");
		return 1;
	}
  new str[255],str1[255];
	if(cellOn{playerid} != 1) return CellMSG(playerid, "Your phone is switched off (/turnon)...");
	if(GetIntVar(playerid, "GettingCall") == 1) return CellMSG(playerid, "Your phone rings (/pickup or /hangup)...");
	if(number == PlayerInfo[playerid][pNumber]) return CellMSG(playerid, "You can't call yourself...");
	if(GetIntVar(playerid, "IsCalling") == 1) return CellMSG(playerid, "Already calling someone...");
	if(GetIntVar(playerid, "OnCall") == 1) return CellMSG(playerid, "You are already engaged in a call...");
	ActionMessage(playerid, 15.0, "takes out their phone.");
	phoneAnim(playerid, 1);
  format(str, sizeof(str), "Calling");
  PlayerTextDrawSetString(playerid, phone9[playerid], str);
  format(str1, sizeof(str1), "%d", number);
  PlayerTextDrawSetString(playerid, phone10[playerid], str1);
  ShowPhone(playerid);
	if(number == 911)
	{
		SetIntVar(playerid, "CallWith", 911); //caller connecting
		SetIntVar(playerid, "OnCall", 1); //player is on call
		SCM(playerid, COLOR_ALLDEPT, "URGENT: Please select the desired call LSPD/LSFD/Both");
    format(str, sizeof(str), "Call with");
    PlayerTextDrawSetString(playerid, phone9[playerid], str);
    format(str1, sizeof(str1), "(%d)", number);
    PlayerTextDrawSetString(playerid, phone10[playerid], str1);
    ShowPhone(playerid);
		return 1;
	}
	else if(number == 544)
	{
		SetIntVar(playerid, "CallWith", 544); //caller connecting
		SetIntVar(playerid, "OnCall", 1); //player is on call
		SCM(playerid, COLOR_WHITE, "Mechanic Hotline: Where is your location?");
    format(str, sizeof(str), "Call with");
    PlayerTextDrawSetString(playerid, phone9[playerid], str);
    format(str1, sizeof(str1), "%d", number);
    PlayerTextDrawSetString(playerid, phone10[playerid], str1);
    ShowPhone(playerid);
		return 1;
	}
	else if(number == 555)
	{
		SetIntVar(playerid, "CallWith", 555); //caller connecting
		SetIntVar(playerid, "OnCall", 1); //player is on call
		SCM(playerid, COLOR_WHITE, "Taxi Dispatch: Where is your location?");
    format(str, sizeof(str), "Call with");
    PlayerTextDrawSetString(playerid, phone9[playerid], str);
    format(str1, sizeof(str1), "%d", number);
    PlayerTextDrawSetString(playerid, phone10[playerid], str1);
    ShowPhone(playerid);
		return 1;
	}
	else if(number == 8735)
	{
		SetIntVar(playerid, "CallWith", 8735); //caller connecting
		SetIntVar(playerid, "OnCall", 1); //player is on call
		SCM(playerid, COLOR_WHITE, "Hello from the White House.");
		SCM(playerid, COLOR_WHITE, "Where do you want the materials to be brought? (House - Option '1')");
    format(str, sizeof(str), "Call with");
    PlayerTextDrawSetString(playerid, phone9[playerid], str);
    format(str1, sizeof(str1), "%d", number);
    PlayerTextDrawSetString(playerid, phone10[playerid], str1);
    ShowPhone(playerid);
		return 1;
	}
	else
	{
		foreach(Player, i)
		{
			if(number == PlayerInfo[i][pNumber] && number != 0)
			{
				currentNum = i; //caller connecting
				SetIntVar(playerid, "CallWith", currentNum); //caller connecting
				SetIntVar(currentNum, "CallWith", playerid); //caller connecting
				if(PlayerIsOn(currentNum))
				{
					if(currentNum != INVALID_PLAYER_ID)
					{
						if(PlayerInfo[currentNum][pJailed] != 0) return SCM(playerid, COLOR_WHITE, "Player is in jail/ajail.");
						if(cellOn{currentNum} != 1)
						{
							CellMSG(playerid, "You just get a busy tone...");
							SetTimerEx("HangUpAnim", 2600, 0, "i", playerid);
							return 1;
						}
						if(GetIntVar(currentNum, "OnCall") == 1)
						{
							CellMSG(playerid, "That person is already on call...");
							SetTimerEx("HangUpAnim", 2600, 0, "i", playerid);
							return 1;
						}
						if(GetIntVar(playerid, "GettingCall") == 1)
						{
							CellMSG(playerid, "Someone is already calling this player right now...");
							SetTimerEx("HangUpAnim", 2600, 0, "i", playerid);
							return 1;
						}
						SetIntVar(currentNum, "GettingCall", 1);
						SetIntVar(playerid, "IsCalling", 1);
            format(str, sizeof(str), "Call from");
            PlayerTextDrawSetString(currentNum, phone9[currentNum], str);
            format(str1, sizeof(str1), "%d", PlayerInfo[playerid][pNumber]);
            PlayerTextDrawSetString(currentNum, phone10[currentNum], str1);
            ShowPhone(currentNum);
						format(msg, sizeof(msg), "Your phone call (/pickup to answer or /hangup to reject the call). Number: %d", PlayerInfo[playerid][pNumber]);
						SCM(currentNum, COLOR_YELLOWG, msg);
						SCM(playerid, COLOR_WHITE, "Help: You can now click on the T to talk, or if you want to turn off type /hangup");
						ActionMessage(currentNum, 15.0, "'s phone begins to ring.");
						cellRingTime{currentNum} = 5;
						//Making a ring sound for everyone is players distance
						foreach(Player, pl)
							if(PlayerNearPlayer(10.0, pl,currentNum))
								PlayRingSoundTwice(pl);
						//Making a ring sound for everyone is players distance
						return 1;
					}
				}
			}
		}
	}
	CellMSG(playerid, "You just get a busy tone...");
	SetTimerEx("HangUpAnim", 2600, 0, "i", playerid);
	return 1;
}

CMD:p(playerid, params[]) return cmd_pickup(playerid, params);
CMD:pickup(playerid, params[])
{
	if(PlayerInfo[playerid][pCellPhone] != 1) return CellMSG(playerid, "You do not have a mobile phone.");
	if(cellOn{playerid} != 1) return CellMSG(playerid, "Your phone is switched off (/turnon)...");
	if(GetIntVar(playerid, "OnCall") == 1) return CellMSG(playerid, "You're already engaged in another calling...");
	if(GetIntVar(playerid, "GettingCall") == 0) return CellMSG(playerid, "ERROR: Don't you call someone at the moment...");
	foreach(Player, i)
	{
		if(GetIntVar(i, "CallWith") == playerid && GetIntVar(playerid, "GettingCall") == 1)
		{
			new playa = i;
			SetIntVar(playerid, "CallWith", playa);
			SetIntVar(playa, "CallWith", playerid);
			///////////////////////////////
			RemoveVar(playerid, "GettingCall");
			RemoveVar(playa, "GettingCall");
			///////////////////////////////
			SetIntVar(playerid, "OnCall", 1);
			SetIntVar(playa, "OnCall", 1);
			///////////////////////////////
			SetIntVar(playerid, "CallCost", 1);
			SetIntVar(playa, "CallCost", 1);
			///////////////////////////////
			SetIntVar(playerid, "CallTime", 1);
			SetIntVar(playa, "CallTime", 1);
			///////////////////////////////
			RemoveVar(playerid, "IsCalling");
			RemoveVar(playa, "IsCalling");
			CellMSG(playa, "They Picked up the call.");
      new str[255],str1[255];
      format(str, sizeof(str), "Call With");
      PlayerTextDrawSetString(playerid, phone9[playerid], str);
      format(str1, sizeof(str1), "%d", PlayerInfo[playa][pNumber]);
      PlayerTextDrawSetString(playerid, phone10[playerid], str1);
      ShowPhone(playerid);

      format(str, sizeof(str), "Call With");
      PlayerTextDrawSetString(playa, phone9[playa], str);
      format(str1, sizeof(str1), "%d", PlayerInfo[playerid][pNumber]);
      PlayerTextDrawSetString(playa, phone10[playa], str1);
      ShowPhone(playa);

			phoneAnim(playerid, 1);
			if(PlayerInfo[playerid][pSex] == 1)
			{
				ActionMessage(playerid, 15.0, "pick up their phone.");
			} else {
				ActionMessage(playerid, 15.0, "pick up their phone.");
			}
			return 1;
		}
	}
	return 1;
}

CMD:sms(playerid, params[])
{
	new number, text[256], currentNum;
	if(PlayerInfo[playerid][pCellPhone] != 1) return CellMSG(playerid, "You do not have a mobile phone.");
	if(sscanf(params,"ds[256]",number,text)) return SyntaxMSG(playerid, "/sms [phonenumber] [message]");
	if(PlayerInfo[playerid][pJailed] != 0) return CellMSG(playerid, "Can't call/sms in jail/ajail.");
	if(cellOn{playerid} != 1) return CellMSG(playerid, "Your phone is switched off (/turnon)...");
	if(number == PlayerInfo[playerid][pNumber]) return CellMSG(playerid, "You can't send a message to your number...");

	ActionMessage(playerid, 15.0, "takes off their phone.");
	foreach(Player, i)
	{
		if(number == PlayerInfo[i][pNumber])
		{
			currentNum = i;
			if(currentNum != INVALID_PLAYER_ID)
			{
				if(PlayerInfo[currentNum][pJailed] != 0) return SCM(playerid, COLOR_WHITE, "Player is in jail/ajail.");
				if(cellOn{currentNum} != 1) return CellMSG(playerid, "You just get a busy tone...");
				if(strlen(text) > MAXLEN)
				{
					new pos = MAXLEN;
					if(pos < MAXLEN-1) pos = MAXLEN;
					format(msg, sizeof(msg), "SMS: %.*s ...", pos, text);
					SCM(currentNum, COLOR_YELLOWG, msg);
					SCM(playerid, COLOR_YELLOWG, msg);
					format(msg, sizeof(msg), "SMS: ... %s, Sender: %s (%d)", text[pos], GetNameWithMask(playerid), PlayerInfo[playerid][pNumber]);
					SCM(currentNum, COLOR_YELLOWG, msg);
					SCM(playerid, COLOR_YELLOWG, msg);
				}
				else
				{
					format(msg, sizeof(msg), "SMS: %s, Sender: %s (%d)", text, GetNameEx(playerid), PlayerInfo[playerid][pNumber]);
					SCM(currentNum, COLOR_YELLOWG, msg);
					SCM(playerid, COLOR_YELLOWG, msg);
				}
				GiveCash(playerid, -2);
				PlaySound(playerid, 1052);
				PlaySound(currentNum, 1138);
				//Making a ring sound for everyone is players distance
				foreach(Player, pl)
					if(PlayerNearPlayer(10.0, currentNum,pl))
						PlayRingSoundTwice(pl);
				//Making a ring sound for everyone is players distance
				return 1;
			}
		}
	}
	return 1;
}
CMD:buyhouse(playerid, params[])
{
	new pName[MAX_PLAYER_NAME];
	GetPlayerName(playerid, pName, sizeof(pName));
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntranceX], HouseInfo[h][hEntranceY], HouseInfo[h][hEntranceZ]) && HouseInfo[h][hOwned] == 0)
		{
			if(PlayerInfo[playerid][pHouseKey] != -1 && strcmp(pName, HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0) return HouseMSG(playerid, "Already own a home, type /sellhouse to sell property owned.");
			if(GetCash(playerid) < HouseInfo[h][hPrice]) return HouseMSG(playerid, "You don't have enough money!");
			PlayerInfo[playerid][pHouseKey] = h;
			PlayerInfo[playerid][pSpawnType] = 1;
			HouseInfo[h][hOwned] = 1;
			HouseInfo[h][hLocked] = 1;
			HouseInfo[h][hRentable] = 0;
			HouseInfo[h][hRentprice] = 0;
			HouseInfo[h][hCash] = 0;
			strmid(HouseInfo[h][hOwner], GetName(playerid), 0, strlen(GetName(playerid)), 255);
			GiveCash(playerid, -HouseInfo[h][hPrice]);
			SCM(playerid,COLOR_GREEN,"[HOUSE]: Congratulations! You have just bought a House");
			SCM(playerid,COLOR_WHITE,"[HOUSE]: Type /househelp for more information");
			UpdateHouseText(h);
			UpdateHouseInfo(h);
			SavePlayerStats(playerid);
			return 1;
		}
	}
	return 1;
}

CMD:sellhouse(playerid, params[])
{
	new pName[MAX_PLAYER_NAME];
	GetPlayerName(playerid, pName, sizeof(pName));
	if(PlayerInfo[playerid][pHouseKey] == -1) return HouseMSG(playerid, "You don't have a house.");
	if(PlayerInfo[playerid][pHouseKey] != -1 && strcmp(pName, HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
	{
		new house = PlayerInfo[playerid][pHouseKey];
		if(HouseInfo[house][hCash] > 0)
		{
			GiveCash(playerid, HouseInfo[house][hCash]);
			format(msg, sizeof(msg), "You've gained your house, $%d cash as well.", HouseInfo[house][hCash]);
			HouseMSG(playerid, msg);
		}
		HouseInfo[house][hLocked] = 1;
		HouseInfo[house][hOwned] = 0;
		HouseInfo[house][hRentable] = 0;
		HouseInfo[house][hRentprice] = 0;
		HouseInfo[house][hCash] = 0;
		StopHouseBoomBox(house);
		HouseInfo[house][hRadio] = 0;
		HouseInfo[house][hRadioOn] = 0;
		PlayerInfo[playerid][pSpawnType] = 0;
		for(new i = 0; i < MAX_HOUSE_WEAPONS; i++)
		{
			HouseInfo[house][hWeapon] = 0;
			HouseInfo[house][hAmmo] = 0;
		}
		strmid(HouseInfo[house][hOwner], "The State", 0, strlen("The State"), 255);
		new houseprice = HouseInfo[house][hPrice];
		new housetax = ((houseprice*1)/100);
		UpdateHouseText(house);
		GiveCash(playerid, houseprice-housetax);
		PlaySound(playerid, 1052);
		format(msg, sizeof(msg), "~w~Congratulations~n~ You have sold your property for ~n~~g~$%d", houseprice-housetax);
		GameTextForPlayer(playerid, msg, 10000, 3);
		format(msg, sizeof(msg), "The State take tax: $%d.", housetax);
		HouseMSG(playerid, msg);
		UpdateHouseText(house);
		UpdateHouseInfo(house);
		if(HouseEntered[playerid] == house)
		{
			SetPlayerPos(playerid,HouseInfo[house][hEntranceX],HouseInfo[house][hEntranceY],HouseInfo[house][hEntranceZ]);
			SetInterior(playerid,0);
			SetWorld(playerid,0);
			HouseEntered[playerid] = 0;
		}
		format(query, sizeof(query), "UPDATE `users` SET `housekey` = %d WHERE `housekey` = %d", -1, house);
		mysql_function_query(dbHandle, query, true, "OnPlayerSellHouse", "i", house);
		PlayerInfo[playerid][pHouseKey] = -1;
		SavePlayerStats(playerid);
		return 1;
	}
	else
	{
		HouseMSG(playerid, "You don't have a house.");
	}
	return 1;
}

CMD:setrentable(playerid, params[])
{
	new pName[MAX_PLAYER_NAME], status;
	new house = PlayerInfo[playerid][pHouseKey];
	GetPlayerName(playerid, pName, sizeof(pName));
	if (house != -1 && strcmp(pName, HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
	{
		if(sscanf(params,"d",status)) return SyntaxMSG(playerid, "/setrentable ([0/1])");
		if(status > 1 || status < 0) return SyntaxMSG(playerid, "/setrentable ([0/1])");
		HouseInfo[house][hRentable] = status;
		format(msg, sizeof(msg), "You have set the status of %d to House for RENT.", status);
		HouseMSG(playerid, msg);
	}
	else
	{
		HouseMSG(playerid, "You don't have a house.");
	}
	return 1;
}


CMD:setrent(playerid, params[])
{
	new pName[MAX_PLAYER_NAME], status;
	new house = PlayerInfo[playerid][pHouseKey];
	GetPlayerName(playerid, pName, sizeof(pName));
	if (house != -1 && strcmp(pName, HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
	{
		if(sscanf(params,"d",status)) return SyntaxMSG(playerid, "/setrent ($1-$750)");
		if(status < 1 || status > 750) return SyntaxMSG(playerid, "/setrent ($1-$750)");
		HouseInfo[house][hRentprice] = status;
		format(msg, sizeof(msg), "House rent set to $%d", HouseInfo[house][hRentprice]);
		HouseMSG(playerid, msg);
	}
	else
	{
		HouseMSG(playerid, "You don't have a house.");
	}
	return 1;
}

CMD:houseupgrade(playerid, params[])
{
    if(GetCash(playerid) < 10000) return SCM(playerid, COLOR_GREY, "House radio costs $10,000.");
	new option[16], house = PlayerInfo[playerid][pHouseKey];
	if (house != -1 && strcmp(GetName(playerid), HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
	{
		if(HouseEntered[playerid] != house) return SCM(playerid, COLOR_GREY, "You must be inside your house.");
		if(CompareStrings(option, "Boombox"))
		{
			if(HouseInfo[house][hRadio] == 1) return SCM(playerid, COLOR_WHITE, "Your house has a radio already.");
			SCM(playerid, COLOR_YELLOWG, "* You have bought a BOOMBOX, type /setstation");
			HouseInfo[house][hRadio] = 1;
			GiveCash(playerid, -10000);
		}
	}
	return 1;
}

CMD:myhouse(playerid, params[])
{
    new option[7], secoption[128], thirdoption, pName[MAX_PLAYER_NAME];
	new house = PlayerInfo[playerid][pHouseKey];
	GetPlayerName(playerid, pName, sizeof(pName));
	if (house != -1 && strcmp(pName, HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0)
	{
		if(sscanf(params, "s[7]S(NULL)[128]D(-1)", option, secoption, thirdoption)) return SyntaxMSG(playerid, "/myhouse [info/cash]");
		if(CompareStrings(option, "info"))
		{
			format(msg, sizeof(msg), "House Info: Market Price - $%d, Rent Price - $%d.", HouseInfo[house][hPrice], HouseInfo[house][hRentprice]);
			HouseMSG(playerid, msg);
		}
		else if(CompareStrings(option, "cash"))
		{
			new choise[11], amount;
			if(sscanf(params, "{s[7]}s[11]d", choise, amount))
			{
				SyntaxMSG(playerid, "/myhouse cash [withdraw/deposit] [amount]");
				format(msg, sizeof(msg), "You have $%d in your cashbox.", HouseInfo[house][hCash]);
				HouseMSG(playerid, msg);
				return 1;
			}
			if(CompareStrings(choise, "withdraw"))
			{
				if (!PlayerToPoint(100, playerid,HouseInfo[house][hExitX],HouseInfo[house][hExitY],HouseInfo[house][hExitZ])) return HouseMSG(playerid, "You must be inside the house.");
				if (amount > HouseInfo[house][hCash] || amount < 1)
				{
					HouseMSG(playerid, "You dont have that much!");
					return 1;
				}
				GiveCash(playerid, amount);
				HouseInfo[house][hCash] -= amount;
				format(msg, sizeof(msg), "You have withdrawn $%d from your cashbox Total: $%d ", amount,HouseInfo[house][hCash]);
				HouseMSG(playerid, msg);
			}
			else if(CompareStrings(choise, "deposit"))
			{
				if (!PlayerToPoint(100, playerid,HouseInfo[house][hExitX],HouseInfo[house][hExitY],HouseInfo[house][hExitZ])) return HouseMSG(playerid, "You must be inside the house.");
				if (amount >  GetCash(playerid) || amount < 1)
				{
					HouseMSG(playerid, "You dont have that much!");
					return 1;
				}
				GiveCash(playerid, -amount);
				HouseInfo[house][hCash] += amount;
				format(msg, sizeof(msg), "You have placed $%d in your cashbox Total: $%d ", amount,HouseInfo[house][hCash]);
				HouseMSG(playerid, msg);
			}
		}

	}
	else
	{
		HouseMSG(playerid, "You don't have a house.");
	}
	return 1;
}

CMD:tenants(playerid, params[])
{
	new house = PlayerInfo[playerid][pHouseKey];
	if (house != -1 && strcmp(GetName(playerid), HouseInfo[house][hOwner], true) == 0)
	{
		format(query, sizeof(query), "SELECT * FROM `users` WHERE `housekey` = %d", house);
		mysql_function_query(dbHandle, query, true, "ShowTenantsAmount", "i", playerid);
	}
	else
	{
		HouseMSG(playerid, "You don't have a house.");
	}
	return 1;
}

CMD:evict(playerid, params[])
{

	new house = PlayerInfo[playerid][pHouseKey];
	new id;
	if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/evict [playerid/PartOfName] (/tenants)");
	if (house != -1 && strcmp(GetName(playerid), HouseInfo[house][hOwner], true) == 0)
	{
		if(id == playerid) return HouseMSG(playerid, "You may not evict yourself.");
		if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
		if(PlayerInfo[id][pHouseKey] != house) return SCM(playerid, COLOR_GREY, "This player isn't renting your house.");
		PlayerInfo[id][pHouseKey] = -1;
		SCM(id, COLOR_YELLOWG, "You have been evicted from your house, you're a homeless now.");
	}
	else
	{
		HouseMSG(playerid, "You don't have a house.");
	}
	return 1;
}

CMD:evictall(playerid, params[])
{
	new house = PlayerInfo[playerid][pHouseKey];
	if (house != -1 && strcmp(GetName(playerid), HouseInfo[house][hOwner], true) == 0)
	{
		foreach(Player, i)
		{
			if(PlayerInfo[i][pHouseKey] == house)
			{
				PlayerInfo[i][pHouseKey] = -1;
				SCM(i, COLOR_YELLOWG, "You have been kicked out by the owner.");
			}
		}
		SCM(playerid, COLOR_YELLOW, "All tenants were kicked out of your home.");
	}
	else
	{
		HouseMSG(playerid, "You don't have a house.");
	}
	return 1;
}

CMD:rentroom(playerid, params[])
{
	new pName[MAX_PLAYER_NAME];
	GetPlayerName(playerid, pName, sizeof(pName));
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntranceX], HouseInfo[h][hEntranceY], HouseInfo[h][hEntranceZ]) && HouseInfo[h][hOwned] == 1)
		{
			if(HouseInfo[h][hRentable] == 0) return HouseMSG(playerid, "This house isn't rentable.");
			if(PlayerInfo[playerid][pHouseKey] != -1 && strcmp(pName, HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0) return HouseMSG(playerid, "You cannot rent house while you're an owner of another house.");
			if(PlayerInfo[playerid][pHouseKey] != -1) return HouseMSG(playerid, "You cannot rent house while you're renting another house (/unrent).");
			PlayerInfo[playerid][pHouseKey] = h;
			PlayerInfo[playerid][pSpawnType] = 1;
			GiveCash(playerid, -HouseInfo[h][hRentprice]);
			HouseInfo[h][hCash] += HouseInfo[h][hRentprice];
			HouseMSG(playerid, "[HOUSE]: Now you have rent in this house.");
			format(msg, sizeof(msg), "Every paycheck you will get $%d.", HouseInfo[h][hRentprice]);
			HouseMSG(playerid, msg);
			SavePlayerStats(playerid);
			return 1;
		}
	}
	return 1;
}

CMD:unrent(playerid, params[])
{
	new pName[MAX_PLAYER_NAME];
	GetPlayerName(playerid, pName, sizeof(pName));
	if(PlayerInfo[playerid][pHouseKey] != -1 && strcmp(pName, HouseInfo[PlayerInfo[playerid][pHouseKey]][hOwner], true) == 0) return HouseMSG(playerid, "You may not unrent your owned house...");
	PlayerInfo[playerid][pHouseKey] = -1;
	HouseMSG(playerid, "No longer you have to rent a house.");
	SavePlayerStats(playerid);
	return 1;
}

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=Greet Commands=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//

CMD:greet(playerid, params[])
{
	new pid, type;
	if(sscanf(params,"dd",pid,type)) {
  	SyntaxMSG(playerid, "/greet [playerid] [style]");
  	SCM(playerid, COLOR_YELLOW3, "[1] Kiss [2] Handshake [3] Handshake [4] Handshake [5] Handshake");
  	SCM(playerid, COLOR_YELLOW3, "[6] Handshake [7] Handshake [8] Handshake [9] Handshake [10] Handshake");
  	return 1;
	}
	if(pid == playerid) return SCM(playerid, COLOR_GREY, "You can't greet yourself.");
	if(type > 10 || type < 1) return SCM(playerid, COLOR_WHITE, "Only 1-10!");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	if(!PlayerNearPlayer(2.0, playerid, pid)) return NotNearPlayerMSG(playerid);
	SetIntVar(playerid, "SentGreet", 1);
	SetIntVar(playerid, "GreetType", type);
	SetIntVar(pid, "GreetFrom", playerid);
	SetIntVar(pid, "GettingGreet", 1);
	format(msg, sizeof(msg), "* You asked his greetings %s.", GetNameWithMask(pid));
	SCM(playerid, COLOR_WHITE, msg);
	format(msg, sizeof(msg), "(ID: %d) %s wants to greet with you (/acceptshake [playerid]).", playerid,GetNameWithMask(playerid));
	SCM(pid, COLOR_WHITE, msg);
	return 1;
}

CMD:acceptshake(playerid, params[])
{
	new pid;
	if(sscanf(params,"d",pid)) return SyntaxMSG(playerid, "/acceptshake [playerid]");
	if(GetIntVar(playerid, "GettingGreet") == 0) return SCM(playerid, COLOR_GREY, "You're not getting any greet request.");
	if(GetIntVar(playerid, "GreetFrom") != pid) return SCM(playerid, COLOR_GREY, "You're not getting a greet request from him.");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	if(pid == playerid) return SCM(playerid, COLOR_GREY, "You can't accept yourself.");
	if(!PlayerNearPlayer(1.0, playerid, pid)) return NotNearPlayerMSG(playerid);
	new type = GetIntVar(pid, "GreetType");
	StopPlayerAnims(playerid);
	StopPlayerAnims(pid);
	SetPlayerFacePlayer(playerid, pid);
	SetPlayerFacePlayer(pid, playerid);

	if(type == 1)
	{
		OnPlayAnim(playerid, "KISSING", "Playa_Kiss_02", 2.0, 0, 0, 1, 0, 0);
		OnPlayAnim(pid, "KISSING", "Playa_Kiss_02", 2.0, 0, 0, 1, 0, 0);
	}
	else if(type == 2)
	{
		OnPlayAnim(playerid,"GANGS","hndshkfa_swt", 2.0, 0, 0, 0, 0, 0);
		OnPlayAnim(pid,"GANGS","hndshkfa_swt", 2.0, 0, 0, 0, 0, 0);
	}
	else if(type == 3)
	{
		OnPlayAnim(playerid,"GANGS","hndshkba", 2.0, 0, 0, 0, 0, 0);
		OnPlayAnim(pid,"GANGS","hndshkba", 2.0, 0, 0, 0, 0, 0);
	}
	else if(type == 4)
	{
		OnPlayAnim(playerid,"GANGS","hndshkca", 2.0, 0, 0, 0, 0, 0);
		OnPlayAnim(pid,"GANGS","hndshkca", 2.0, 0, 0, 0, 0, 0);
	}
	else if(type == 5)
	{
		OnPlayAnim(playerid,"GANGS","hndshkcb", 2.0, 0, 0, 0, 0, 0);
		OnPlayAnim(pid,"GANGS","hndshkcb", 2.0, 0, 0, 0, 0, 0);
	}
	else if(type == 6)
	{
		OnPlayAnim(playerid,"GANGS","hndshkda", 2.0, 0, 0, 0, 0, 0);
		OnPlayAnim(pid,"GANGS","hndshkda", 2.0, 0, 0, 0, 0, 0);
	}
	else if(type == 7)
	{
		OnPlayAnim(playerid,"GANGS","hndshkea", 2.0, 0, 0, 0, 0, 0);
		OnPlayAnim(pid,"GANGS","hndshkea", 2.0, 0, 0, 0, 0, 0);
	}
	else if(type == 8)
	{
		OnPlayAnim(playerid,"GANGS","hndshkfa", 2.0, 0, 0, 0, 0, 0);
		OnPlayAnim(pid,"GANGS","hndshkfa", 2.0, 0, 0, 0, 0, 0);
	}
	else if(type == 9)
	{
		OnPlayAnim(playerid,"GANGS","hndshkaa", 2.0, 0, 0, 0, 0, 0);
		OnPlayAnim(pid,"GANGS","hndshkaa", 2.0, 0, 0, 0, 0, 0);
	}
	else if(type == 10)
	{
		OnPlayAnim(playerid,"GANGS","prtial_hndshk_biz_01", 2.0, 0, 0, 0, 0, 0);
		OnPlayAnim(pid,"GANGS","prtial_hndshk_biz_01", 2.0, 0, 0, 0, 0, 0);
	}
	RemoveVar(GetIntVar(playerid, "GreetFrom"), "SentGreet");
	RemoveVar(GetIntVar(playerid, "GreetFrom"), "GreetType");
	RemoveVar(playerid, "GreetFrom");
	RemoveVar(playerid, "GettingGreet");
	return 1;
}

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=Greet Commands=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
CMD:buyfood(playerid, params[])
{
	for(new i = 0; i < sizeof(FoodStand); i++)
	{
		if (PlayerToPoint(3, playerid,FoodStand[i][fPosX], FoodStand[i][fPosY], FoodStand[i][fPosZ]))
		{
			if(FoodStand[i][fStandOn])
			{
				GameTextForPlayer(playerid, "~w~Uses ~y~SPACE~w~ to buy.", 5000, 4);
				ShowMenuForPlayer(FoodStallMenu, playerid);
				FreezePlayer(playerid);
				return 1;
			}
		}
	}
	return 1;
}

CMD:buy1(playerid, params[])
{
    new choise;
    if(BizEntered[playerid] == 1 && BizInfo[BizEntered[playerid]][bizType] == 3)
    {
		if(sscanf(params,"d",choise))
		{
		    SyntaxMSG(playerid, "/buy1 [item number]");
        SCM(playerid,COLOR_GREEN,"___________________24-7___________________");
		    SCM(playerid,COLOR_WHITE,"1: Bottle (LSRP Mod) 12$");
		    SCM(playerid,COLOR_WHITE,"2: Cigar (LSRP Mod) 10$");
		    SCM(playerid,COLOR_WHITE,"3: Bat 100$");
		    SCM(playerid,COLOR_WHITE,"4: Cane (LSRP Mod-Briefcase) 200$");
		    SCM(playerid,COLOR_WHITE,"|-----------------------------------------|");
		}
		if(choise == 1)
		{
			GiveCash(playerid, -12);
			GiveWeapon(playerid, 11, 100);
			SCM(playerid,COLOR_GREY,"Bottle (LSRP Mod) Purchased");
			return 1;
		}
		if(choise == 2)
		{
			GiveCash(playerid, -10);
			PlayerInfo[playerid][pCigars] += 20;
		    SCM(playerid,COLOR_GREY,"Cigar (LSRP Mod) Purchased (/smoke)");
		    return 1;
		}
		if(choise == 3)
		{
			GiveCash(playerid, -100);
			SCM(playerid,COLOR_GREY,"Bat (LSRP Mod) Purchased");
		    GiveWeapon(playerid, 5, 100);
		    return 1;
		}
		if(choise == 4)
		{
			GiveCash(playerid, -200);
			SCM(playerid,COLOR_GREY,"Cane (LSRP Mod-Briefcase) Purchased");
		    GiveWeapon(playerid, 15, 100);
		    return 1;
		}
	}
	else
	{
	    SCM(playerid,COLOR_GREEN,"You are not in a 24/7.");
	}
	return 1;
}

CMD:buy(playerid, params[])
{
	if(PlayerToPoint(2, playerid, 1096.1104,-1439.8654,15.7981))
	{
		if(GetIntVar(playerid, "JustBoughtToy") == 1) return SCM(playerid, -1, "Please finish the current operation.");
		ShowDialog(playerid, Show:<ClothesCategory>, DIALOG_STYLE_LIST, "{FF0000}Please select a category.", "Hats\nGlasses\nBandanas\nHeadphones\nIllegal Objects", "Select", "Cancel");
	}
	else if(PlayerToPoint(2, playerid, 1109.19,-1529.53,15.7981))
	{
		if(GetIntVar(playerid, "JustBoughtToy") == 1) return SCM(playerid, -1, "Please finish the current operation.");
		new string[1000+1];
		for(new x;x<sizeof(SportsInfo);x++)
		{
			format(string, sizeof(string), "%s%s - "EMBED_YELLOW"$%d\n", string, SportsInfo[x][toyName], SportsInfo[x][toyPrice]);
		}
		ShowDialog(playerid, Show:<SportsDialog>, DIALOG_STYLE_LIST, "{FF0000}Please select an item", string, "Buy", "Cancel");
	}
	else if(PlayerToPoint(2, playerid, 1093.72,-1506.08,15.7981))
	{
		if(GetIntVar(playerid, "JustBoughtToy") == 1) return SCM(playerid, -1, "Please finish the current operation.");
		new string[1000+1];
		for(new x;x<sizeof(GuitarsInfo);x++)
		{
			format(string, sizeof(string), "%s%s - "EMBED_YELLOW"$%d\n", string, GuitarsInfo[x][toyName], GuitarsInfo[x][toyPrice]);
		}
		ShowDialog(playerid, Show:<GuitarsDialog>, DIALOG_STYLE_LIST, "{FF0000}Please select an item", string, "Buy", "Cancel");
	}
	else if(BizEntered[playerid] != -1 && BizInfo[BizEntered[playerid]][bizType] == 3)
	{
		ShowDialog(playerid, Show:<StoreDialog>, DIALOG_STYLE_LIST, "Products", storeitems, "Buy", "Cancel");
	}
	return 1;
}

CMD:clothing(playerid, params[])
{
	new option[11], secoption;
	if(sscanf(params, "s[11]D(-1)", option, secoption)) return SyntaxMSG(playerid, "/clothing [info/place/edit/drop]");
	if(CompareStrings(option, "info"))
	{
		new count = 0, count2 = 0;
		SCM(playerid, -1, "|______________Clothing-Info______________|");
		while(count < MAX_PLAYER_TOYS)
		{
			if(PlayerToys[playerid][count][ptToyOn])
			{
				format(msg, sizeof(msg), "(Slot %d) {D4AA90}%s{FFFFFF}.", count, PlayerToys[playerid][count][ptName]);
				SCM(playerid, -1, msg);
				count2++;
			}
			count++;
		}
		if(count2 == 0)
		{
			SCM(playerid, COLOR_YELLOWG, "You don't have any clothes.");
		}
		SCM(playerid, -1, "|_______________________________________|");
	}
	else if(CompareStrings(option, "place"))
	{
		new slot;
		if(sscanf(params, "{s[7]}d", slot)) return SyntaxMSG(playerid, "/clothing place [slot id]");
		if(slot > 9 || slot < 0) return SCM(playerid, -1, "Invalid slot, (0-9).");
		if(!PlayerToys[playerid][slot][ptToyOn]) return SCM(playerid, -1, "No such item.");
		if(IsPlayerAttachedObjectSlotUsed(playerid, slot))
		{
			format(msg, sizeof(msg), "You have removed on a  %s.", PlayerToys[playerid][slot][ptName]);
			SCM(playerid, -1, msg);
			RemovePlayerAttachedObject(playerid, slot);
		}
		else
		{
			format(msg, sizeof(msg), "You have placed on a %s.", PlayerToys[playerid][slot][ptName]);
			SCM(playerid, -1, msg);
			SetPlayerAttachedObject(playerid, slot, PlayerToys[playerid][slot][ptModelID], PlayerToys[playerid][slot][ptBoneID], PlayerToys[playerid][slot][ptOffsetX], PlayerToys[playerid][slot][ptOffsetY], PlayerToys[playerid][slot][ptOffsetZ], PlayerToys[playerid][slot][ptRotX], PlayerToys[playerid][slot][ptRotY], PlayerToys[playerid][slot][ptRotZ], PlayerToys[playerid][slot][ptScaleX], PlayerToys[playerid][slot][ptScaleY], PlayerToys[playerid][slot][ptScaleZ]);
		}
	}
	else if(CompareStrings(option, "edit"))
	{
		new slot;
		if(sscanf(params, "{s[7]}d", slot)) return SyntaxMSG(playerid, "/clothing edit [slot id]");
		if(slot > 9 || slot < 0) return SCM(playerid, -1, "Invalid slot, (0-9).");
		if(!IsPlayerAttachedObjectSlotUsed(playerid, slot)) return SCM(playerid, COLOR_LIGHTRED, "You haven't placed the item yet.");
		if(!PlayerToys[playerid][slot][ptToyOn]) return SCM(playerid, -1, "No such item.");
		if(GetIntVar(playerid, "EditingOwnedToy") == 1) return SCM(playerid, COLOR_LIGHTRED, "You're in a middle of edit, please finish first.");
		format(msg, sizeof(msg), "You are now editing a(n) %s.", PlayerToys[playerid][slot][ptName]);
		SCM(playerid, -1, msg);
		SetIntVar(playerid, "ToySlotEditing", slot);
		SetIntVar(playerid, "EditingOwnedToy", 1);
		EditAttachedObject(playerid, slot);
	}
	else if(CompareStrings(option, "drop"))
	{
		new slot;
		if(sscanf(params, "{s[7]}d", slot)) return SyntaxMSG(playerid, "/clothing drop [slot id]");
		if(slot > 9 || slot < 0) return SCM(playerid, -1, "Invalid slot, (0-9).");
		if(!PlayerToys[playerid][slot][ptToyOn]) return SCM(playerid, -1, "No such item.");
		format(msg, sizeof(msg), "You have dropped your {D4AA90}%s{FFFFFF}, and will be no longer available.", PlayerToys[playerid][slot][ptName]);
		SCM(playerid, -1, msg);
		RemovePlayerToyFromSlot(playerid, slot);
	}
	return 1;
}

CMD:boombox(playerid, params[])
{
	new option[11];
	if(sscanf(params,"s[11]",option)) return SyntaxMSG(playerid, "/boombox [place/edit/remove]");
	if(GetIntVar(playerid, "BoomBox") == 0) return SCM(playerid, COLOR_LIGHTBLUE, "You don't have a BoomBox.");
	if(CompareStrings(option, "place"))
	{
		if(GetIntVar(playerid, "BoomBoxOn") == 1) return SCM(playerid, COLOR_YELLOWG, "You already have a BoomBox on.");
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SCM(playerid, -1, "Sorry, but you must be on foot.");
		foreach(Player, i)
		{
			if(IsValidDynamicArea(GetIntVar(i, "BoomBoxArea")) && IsPlayerInDynamicArea(playerid, GetIntVar(i, "BoomBoxArea"))) return SCM(playerid, COLOR_YELLOW, "Someone has placed a boombox around this area already.");
		}
		SCM(playerid, COLOR_LIGHTBLUE, "You have placed your BoomBox, '/setstation' to change station.");
		SetIntVar(playerid, "BoomBoxArea", CreateDynamicSphere(PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid), 50.0, -1, -1, -1));
		SetIntVar(playerid, "BoomBoxObject", CreateDynamicObject(2226, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)-1, 0.0, 0.0, 0.0, -1, -1, -1, 300.0));
		SetFloatVar(playerid, "BoomBoxX", PlayerPosX(playerid));
		SetFloatVar(playerid, "BoomBoxY", PlayerPosY(playerid));
		SetFloatVar(playerid, "BoomBoxZ", PlayerPosZ(playerid));
		SetIntVar(playerid, "BoomBoxOn", 1);
		SetIntVar(playerid, "BoomBoxMusicOn", 0);
	}
	else if(CompareStrings(option, "remove"))
	{
		if(GetIntVar(playerid, "BoomBoxOn") == 0) return SCM(playerid, COLOR_YELLOW, "You haven't placed a BoomBox.");
		if(IsValidDynamicArea(GetIntVar(playerid, "BoomBoxArea")) && IsValidDynamicObject(GetIntVar(playerid, "BoomBoxObject")))
		{
			StopBoomBoxMusic(playerid);
			StopAudioStreamForPlayer(playerid);
			DestroyDynamicArea(GetIntVar(playerid, "BoomBoxArea"));
			DestroyDynamicObject(GetIntVar(playerid, "BoomBoxObject"));
			RemoveVar(playerid, "BoomBoxOn");
			RemoveVar(playerid, "BoomBoxArea");
			RemoveVar(playerid, "BoomBoxObject");
			RemoveVar(playerid, "EditingBoomBox");
			RemoveVar(playerid, "BoomBoxX");
			RemoveVar(playerid, "BoomBoxY");
			RemoveVar(playerid, "BoomBoxZ");
			RemoveVar(playerid, "BoomBoxMusicOn");
			SCM(playerid, COLOR_LIGHTBLUE, "You have destroyed your BoomBox.");
		}
	}
	else if(CompareStrings(option, "edit"))
	{
		if(GetIntVar(playerid, "BoomBoxOn") == 0) return SCM(playerid, COLOR_YELLOW, "You haven't placed a BoomBox.");
		if(GetIntVar(playerid, "EditingBoomBox") == 1) return SCM(playerid, COLOR_YELLOW, "You are in a middle of editing your BoomBox.");
		if(GetIntVar(playerid, "BoomBoxMusicOn") == 1) return SCM(playerid, COLOR_YELLOW, "Please turn off the music first.");
		if(IsValidDynamicArea(GetIntVar(playerid, "BoomBoxArea")) && IsValidDynamicObject(GetIntVar(playerid, "BoomBoxObject")))
		{
			if(!PlayerToPoint(3.0, playerid, GetFloatVar(playerid, "BoomBoxX"), GetFloatVar(playerid, "BoomBoxY"), GetFloatVar(playerid, "BoomBoxZ"))) return SCM(playerid, COLOR_YELLOW, "You must be near your boombox.");
			EditDynamicObject(playerid, GetIntVar(playerid, "BoomBoxObject"));
			SetIntVar(playerid, "EditingBoomBox", 1);
			ServerMSG(playerid, "You are now editing your BoomBox position, you may press {FFFF00}ESC{FFFFFF} if you want to cancel it.");
		}
	}
	else return SyntaxMSG(playerid, "/boombox [place/edit/remove]");
	return 1;
}
/*CMD:setvolume(playerid, params[])
{
    new vehicle = GetPlayerVehicleID(playerid);
    new volume;
    if(sscanf(params,"u", volume)) return SyntaxMSG(playerid, "/setvolume [volume]");
    if(VehicleInfo[vehicle][carRadio] == 0) return SCM(playerid, COLOR_LIGHTRED, "You don't have a boombox in your vehicle.");
    if(VehicleInfo[vehicle][carRadioOn] == 0)
    {
        SCM(playerid,COLOR_WHITE,"Nu ai radioul pornit");
    }
    else
    {
        Audio_SetVolume(playerid, sound[playerid], volume);
    }
}*/
CMD:setstation(playerid, params[])
{
	new vehicle = GetPlayerVehicleID(playerid);
	new house = HouseEntered[playerid];
	new biz = BizEntered[playerid];
	if (house != -1 && strcmp(GetName(playerid), HouseInfo[house][hOwner], true) == 0)
	{
		if(HouseInfo[house][hRadio] == 0) return SCM(playerid, COLOR_LIGHTRED, "You don't have a boombox in your house.");
		if(HouseInfo[house][hRadioOn] == 0)
		{
			SetIntVar(playerid, "SelectingHouseRadio", 1);
			ShowBoomBoxStations(playerid);
		}
		else
		{
		    SCM(playerid, COLOR_RED,"The music stopped (/setstation)");
			StopHouseBoomBox(house);
		}
	}
	else if (biz != -1 && biz == PlayerInfo[playerid][pBizKey] || biz != -1 && biz == PlayerInfo[playerid][pWorkOn])
	{
		if(BizInfo[biz][bizRadio] == 0) return SCM(playerid, COLOR_LIGHTRED, "You don't have a boombox in your business.");
		if(BizInfo[biz][bizRadioOn] == 0)
		{
			SetIntVar(playerid, "SelectingBusinessRadio", 1);
			ShowBoomBoxStations(playerid);
		}
		else
		{
		    SCM(playerid, COLOR_RED,"The music stopped (/setstation)");
			StopBusinessBoomBox(biz);
		}
	}
	else if(IsDriver(playerid) && PlayerOwnVehicle(playerid, vehicle))
	{
		if(VehicleInfo[vehicle][carRadio] == 0) return SCM(playerid, COLOR_LIGHTRED, "You don't have a boombox in your vehicle.");
		if(VehicleInfo[vehicle][carRadioOn] == 0)
		{
			SetIntVar(playerid, "SelectingCarRadio", 1);
			ShowBoomBoxStations(playerid);
		}
		else
		{
		  SCM(playerid, COLOR_RED,"The music stopped (/setstation)");
			StopCarBoomBox(vehicle);
		}
	}
	else
	{
		if(GetIntVar(playerid, "BoomBoxOn") == 0) return SCM(playerid, COLOR_YELLOW, "You haven't placed a BoomBox.");
		if(IsValidDynamicArea(GetIntVar(playerid, "BoomBoxArea")) && IsValidDynamicObject(GetIntVar(playerid, "BoomBoxObject")))
		{
			if(!PlayerToPoint(3.0, playerid, GetFloatVar(playerid, "BoomBoxX"), GetFloatVar(playerid, "BoomBoxY"), GetFloatVar(playerid, "BoomBoxZ"))) return SCM(playerid, COLOR_YELLOW, "You must be near your boombox.");
			ShowBoomBoxStations(playerid);
		}
	}
	return 1;
}

CMD:stationoff(playerid, params[])
{
	if(GetIntVar(playerid, "BoomBoxOn") == 0) return SCM(playerid, COLOR_YELLOW, "You haven't placed a BoomBox.");
	if(IsValidDynamicArea(GetIntVar(playerid, "BoomBoxArea")) && IsValidDynamicObject(GetIntVar(playerid, "BoomBoxObject")))
	{
		if(!PlayerToPoint(3.0, playerid, GetFloatVar(playerid, "BoomBoxX"), GetFloatVar(playerid, "BoomBoxY"), GetFloatVar(playerid, "BoomBoxZ"))) return SCM(playerid, COLOR_YELLOW, "You must be near your boombox.");
		RemoveVar(playerid, "BoomBoxMusicOn");
		StopBoomBoxMusic(playerid);
	}
	return 1;
}

CMD:furniture(playerid, params[])
{
	new house = PlayerInfo[playerid][pHouseKey];
	if (house != -1 && strcmp(GetName(playerid), HouseInfo[house][hOwner], true) == 0)
	{
		if(HouseEntered[playerid] != house) return HouseMSG(playerid, "You must be inside your house.");
		if(PlayerInfo[playerid][pDonateRank] >= 1)
		{
		   ShowDialog(playerid, Show:<FurnitureDialog>, DIALOG_STYLE_LIST, ""EMBED_ORANGE"Furniture dialog"EMBED_CYAN"", "List\nBuy items\nEdit furniture\nSell your furniture\nGive a texture of furniture", "Select", "Exit");
		}
		else
		{
		   ShowDialog(playerid, Show:<FurnitureDialog>, DIALOG_STYLE_LIST, ""EMBED_ORANGE"Furniture dialog"EMBED_CYAN"", "List\nBuy items\nEdit furniture\nSell your furniture", "Select", "Exit");
		}
	}
	else
	{
		HouseMSG(playerid, "You don't have a house.");
	}
	return 1;
}

CMD:trunkspot(playerid, params[])
{
	new house = PlayerInfo[playerid][pHouseKey];
	if (HouseEntered[playerid] == house && house != -1 && strcmp(GetName(playerid), HouseInfo[house][hOwner], true) == 0 && HouseInfo[house][hWorld] == GetWorld(playerid))
	{
		HouseInfo[house][hCheckPosX] = PlayerPosX(playerid);
		HouseInfo[house][hCheckPosY] = PlayerPosY(playerid);
		HouseInfo[house][hCheckPosZ] = PlayerPosZ(playerid);
		SCM(playerid, COLOR_YELLOWG, "You have set trunkspot to your location.");
	}
	else
	{
		SCM(playerid, COLOR_CYAN, "You must be inside your own house.");
	}
	return 1;
}

CMD:weapons(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
    //if(faction == LSPD) return SCM(playerid, COLOR_LIGHTRED, "Pentru a pune o arma in portbagaj, trebuie sa folosesti /place [weapon ID]");
	if(faction == 0) return SCM(playerid, COLOR_LIGHTRED, "To throw a weapon, you have to use /dgun");
	new Player_Weapons[13], Player_Ammos[13];
	for(new i = 1;i <= 12;i++)
	{
		GetPlayerWeaponData(playerid,i,Player_Weapons[i],Player_Ammos[i]);
		if(Player_Weapons[i] != 0)
		{
			new weaponName[128];
			GetWeaponName(Player_Weapons[i],weaponName,255);
			format(msg,255,"[ID:%d] Weapon:[%s] - Ammo: [%d]", Player_Weapons[i], weaponName, Player_Ammos[i]);
			SCM(playerid,COLOR_GREY,msg);
		}
	}
	return 1;
}

CMD:place(playerid, params[])
{
	new weaponid, weapons[256];
	if(sscanf(params,"d",weaponid)) return SyntaxMSG(playerid, "/place [weapon_id] (ID List in /weapons)");
    new house = HouseEntered[playerid];
    if(PlayerInCar(playerid))
	{
		new vehicle = GetPlayerVehicleID(playerid);
		if(IsACopCar(vehicle))
		{
			if(!CheckWeapon(playerid, weaponid)) return SCM(playerid, COLOR_LIGHTRED, "You don't have this weapon.");
			if(weaponid == 3 || weaponid == 24 || weaponid == 41) return SCM(playerid, COLOR_LIGHTRED, "You may not place this weapon.");
			new faction = PlayerInfo[playerid][pFaction];
			if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
			if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty.");
			format(msg, sizeof(msg), "stores a %s in the LSPD Cruiser's trunk .", GetWeaponNameEx(weaponid));
			ActionMessage(playerid, 15.0, msg);
			RemovePlayerWeapon(playerid, weaponid);
            PlayerInfo[playerid][pTookGun] = 0;
		}
		else if(VehicleInfo[vehicle][carOwned] == 1)
		{
			if(engineOn{vehicle})
			{
        //new veh = PlayerInfo[playerid][pCarKey];
				if(IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsABicycle(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "This vehicle does not have a trunk.");
        if(GetVehicleTrunkWeps(vehicle) >= MAX_VEHICLE_WEAPONS) return SCM(playerid, COLOR_LIGHTRED, "This vehicle trunk is full.");
        if(VehicleInfo[vehicle][carTrunkLock] == 1) return SCM(playerid, COLOR_YELLOWG,"You cannot put a gun because the trunk is closed.");
        if(!IsMeleeWeapon(weaponid) && !IsPrimaryWeapon(weaponid)&& !IsSecondaryWeapon(weaponid)) return SCM(playerid, COLOR_LIGHTRED, "No such weapon.");
        if(!HasWeapon(playerid, weaponid)) return SCM(playerid, COLOR_LIGHTRED, "You don't have this weapon.");
        format(msg, sizeof(msg), "~b~You have placed ~y~%s~b~ in the ~y~%s's~b~ trunk.", GetWeaponNameEx(weaponid), VehicleNames[GetVehicleModel(vehicle)-400]);
        InfoMSG(playerid, msg, 5);
        new slot = GetNextVehicleTrunkSlot(vehicle);
        VehicleInfo[vehicle][carTrunkWep][slot] = weaponid;
        VehicleInfo[vehicle][carTrunkAmmo][slot] = GetWeaponAmmo(playerid, weaponid);
        if(IsMeleeWeapon(weaponid))
        {
          PlayerInfo[playerid][pMeleeWep] = 0;
        }
        if(IsPrimaryWeapon(weaponid))
        {
          PlayerInfo[playerid][pPerm1] = 0;
          PlayerInfo[playerid][pAmmo1] = 0;
        }
        if(IsSecondaryWeapon(weaponid))
        {
          PlayerInfo[playerid][pPerm2] = 0;
          PlayerInfo[playerid][pAmmo2] = 0;
        }
        SetPlayerWeapons(playerid);
        format(msg, sizeof(msg), "has placed %s in the %s's trunk.", GetWeaponNameEx(weaponid), VehicleNames[GetVehicleModel(vehicle)-400]);
        SetPlayerBubble(playerid, msg);
        format(query, sizeof(query), "UPDATE `ownedvehicles` SET `weapons` = %d=%d WHERE `owner` = '%s' AND `slot` = %d", weaponid, GetWeaponAmmo(playerid, weaponid), GetName(playerid), PlayerInfo[playerid][pVehSlot]);
        mysql_function_query(dbHandle, query, false, "", "");
			}
			else return SCM(playerid, COLOR_LIGHTRED, "Please start the engine first.");
		}
	}
 	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		new counter = 0, vehicle;
		for(new i; i != MAX_VEHICLES; i++)
		{
			new dist = CheckPlayerDistanceToVehicle(4.0, playerid, i);
			if(dist)
			{
				vehicle = i;
				counter++;
			}
		}
		switch(counter)
		{
			case 0:
			{
				SCM(playerid, COLOR_GREY, "No vehicle with trunk near you.");
			}
			case 1:
			{
				if(VehicleInfo[vehicle][carOwned] == 1)
				{
					if(IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsABicycle(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "This vehicle does not have a trunk.");
					if(VehicleInfo[vehicle][carTrunkLock] == 0)
					{
						if(GetVehicleTrunkWeps(vehicle) >= MAX_VEHICLE_WEAPONS) return SCM(playerid, COLOR_LIGHTRED, "This vehicle trunk is full.");
						if(!IsMeleeWeapon(weaponid) && !IsPrimaryWeapon(weaponid)&& !IsSecondaryWeapon(weaponid)) return SCM(playerid, COLOR_LIGHTRED, "No such weapon.");
						if(!HasWeapon(playerid, weaponid)) return SCM(playerid, COLOR_LIGHTRED, "You don't have this weapon.");
						format(msg, sizeof(msg), "~b~You have placed ~y~%s~b~ in the ~y~%s's~b~ trunk.", GetWeaponNameEx(weaponid), VehicleNames[GetVehicleModel(vehicle)-400]);
						InfoMSG(playerid, msg, 5);
						new slot = GetNextVehicleTrunkSlot(vehicle);
						VehicleInfo[vehicle][carTrunkWep][slot] = weaponid;
						VehicleInfo[vehicle][carTrunkAmmo][slot] = GetWeaponAmmo(playerid, weaponid);
						if(IsMeleeWeapon(weaponid))
						{
							PlayerInfo[playerid][pMeleeWep] = 0;
						}
						if(IsPrimaryWeapon(weaponid))
						{
							PlayerInfo[playerid][pPerm1] = 0;
							PlayerInfo[playerid][pAmmo1] = 0;
						}
						if(IsSecondaryWeapon(weaponid))
						{
							PlayerInfo[playerid][pPerm2] = 0;
							PlayerInfo[playerid][pAmmo2] = 0;
						}
						SetPlayerWeapons(playerid);
                        FormatCarWeapons(vehicle, weapons);
						format(msg, sizeof(msg), "has placed %s in the %s's trunk.", GetWeaponNameEx(weaponid), VehicleNames[GetVehicleModel(vehicle)-400]);
						SetPlayerBubble(playerid, msg);
						format(query, sizeof(query), "UPDATE `ownedvehicles` SET `weapons` = %d=%d WHERE `owner` = '%s' AND `slot` = %d", weapons, GetName(playerid), PlayerInfo[playerid][pVehSlot]);
                        mysql_function_query(dbHandle, query, false, "", "");
					}
					else return SCM(playerid, COLOR_GREY, "The trunk is locked.");
				}
			}
			default: SCM(playerid, COLOR_GREY, "Found more than 1 vehicle.");
		}
	}
	if(house != -1)
	{
		if (PlayerToPoint(3.0, playerid,HouseInfo[house][hCheckPosX], HouseInfo[house][hCheckPosY], HouseInfo[house][hCheckPosZ]))
		{
			if(CountHouseTrunk(house) >= MAX_HOUSE_WEAPONS) return SCM(playerid, COLOR_GREY, "This house trunk is full.");
			if(!IsMeleeWeapon(weaponid) && !IsPrimaryWeapon(weaponid)&& !IsSecondaryWeapon(weaponid)) return SCM(playerid, COLOR_GREY, "No such weapon.");
			if(!HasWeapon(playerid, weaponid)) return SCM(playerid, COLOR_LIGHTRED, "You don't have this weapon.");
			if(!PlayerHoldingWeapon(playerid, weaponid)) return SCM(playerid, COLOR_LIGHTRED, "You're not holding this weapon.");
			format(msg, sizeof(msg), "You have placed your %s in the house trunk.", GetWeaponNameEx(weaponid));
			SCM(playerid, COLOR_GREY, msg);
			new n = GetNextHouseTrunkSlot(house);
			HouseInfo[house][hWeapon][n] = weaponid;
			HouseInfo[house][hAmmo][n] = GetWeaponAmmo(playerid, weaponid);
			if(IsMeleeWeapon(weaponid))
			{
				PlayerInfo[playerid][pMeleeWep] = 0;
			}
			if(IsPrimaryWeapon(weaponid))
			{
				PlayerInfo[playerid][pPerm1] = 0;
				PlayerInfo[playerid][pAmmo1] = 0;
			}
			if(IsSecondaryWeapon(weaponid))
			{
				PlayerInfo[playerid][pPerm2] = 0;
				PlayerInfo[playerid][pAmmo2] = 0;
			}
			SetPlayerWeapons(playerid);
			format(msg, sizeof(msg), "has placed %s in the house trunk.", GetWeaponNameEx(weaponid));
			SetPlayerBubble(playerid, msg);
		}
		else
		{
			SCM(playerid, COLOR_LIGHTRED, "You aren't near the house trunk spot.");
		}
	}
	return 1;
}

/*CMD:takegunpd(playerid, params[])
{
    new slotid;
	if(sscanf(params,"d",slotid)) return SyntaxMSG(playerid, "/takegun [slotid] (ID List in /check.)");
	if(PlayerInCar(playerid))
	{
		new vehicle = GetPlayerVehicleID(playerid);
		if(IsACopCar(vehicle))
		{
			if(slotid >= sizeof(PoliceTrunk)) return SCM(playerid, COLOR_GREY, "Invalid slot.");
			new faction = PlayerInfo[playerid][pFaction];
			if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
			if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fi On-Duty.");
			if(PlayerInfo[playerid][pTookGun] == 1) return SCM(playerid, COLOR_LIGHTRED, "You already took a gun from the trunk.");
			format(msg, sizeof(msg), "apuca un %s din suportul special din portbagaj", GetWeaponNameEx(PoliceTrunk[slotid][wepID]));
			ActionMessage(playerid, 15.0, msg);
			GiveWeapon(playerid, PoliceTrunk[slotid][wepID], PoliceTrunk[slotid][wepAmmo]);
			PlayerInfo[playerid][pTookGun] = 1;
		}
	}
	return 1;
}*/
CMD:takegun(playerid, params[])
{
	new slotid;
	if(sscanf(params,"d",slotid)) return SyntaxMSG(playerid, "/takegun [slotid] (ID List in /check.)");
	new house = HouseEntered[playerid];
	if(PlayerInCar(playerid))
	{
		new vehicle = GetPlayerVehicleID(playerid);
		if(IsACopCar(vehicle))
		{
			if(slotid >= sizeof(PoliceTrunk)) return SCM(playerid, COLOR_GREY, "Invalid slot.");
			new faction = PlayerInfo[playerid][pFaction];
			if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
			if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty.");
			if(PlayerInfo[playerid][pTookGun] == 1) return SCM(playerid, COLOR_YELLOWG, "You're already holding something, place that before grabbing another.");
			format(msg, sizeof(msg), "grabs a %s from the LSPD Cruiser's trunk.", GetWeaponNameEx(PoliceTrunk[slotid][wepID]));
			ActionMessage(playerid, 15.0, msg);
			GiveWeapon(playerid, PoliceTrunk[slotid][wepID], PoliceTrunk[slotid][wepAmmo]);
			PlayerInfo[playerid][pTookGun] = 1;
		}
		else if(VehicleInfo[vehicle][carOwned] == 1)
		{
			if(IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsABicycle(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "This vehicle does not have a trunk.");
			if(engineOn{vehicle})
			{
				if(slotid >= MAX_VEHICLE_WEAPONS) return SCM(playerid, COLOR_YELLOWG, "Invalid trunk slot ID, (0-4).");
				if(VehicleInfo[vehicle][carTrunkWep][slotid] == 0) return SCM(playerid, COLOR_YELLOWG, "There's no weapon in this slot.");
				if(VehicleInfo[vehicle][carTrunkLock] == 1) return SCM(playerid, COLOR_YELLOWG,"You can't get a gun because the trunk is closed.");
				new weapon = VehicleInfo[vehicle][carTrunkWep][slotid];
				new wepammo = VehicleInfo[vehicle][carTrunkAmmo][slotid];
				if(IsMeleeWeapon(weapon) && IsMeleeSlotTaken(playerid)) return SCM(playerid, -1, "Your Melee weapon slot is taken.");
				if(IsPrimaryWeapon(weapon) && IsPrimarySlotTaken(playerid)) return SCM(playerid, -1, "Your Primary weapon slot is taken.");
				if(IsSecondaryWeapon(weapon) && IsSecondarySlotTaken(playerid)) return SCM(playerid, -1, "Your Secondary weapon slot is taken.");
				if(IsMeleeWeapon(weapon))
				{
					GiveMeleeWeapon(playerid, weapon);
				}
				if(IsPrimaryWeapon(weapon))
				{
					GivePermWeapon(playerid, 2, weapon, wepammo);
				}
				if(IsSecondaryWeapon(weapon))
				{
					GivePermWeapon(playerid, 3, weapon, wepammo);
				}
				format(msg, sizeof(msg), "~b~You have taken ~y~%s~b~ from the ~y~%s's~b~ trunk.", GetWeaponNameEx(weapon), VehicleNames[GetVehicleModel(vehicle)-400]);
				InfoMSG(playerid, msg, 5);
				VehicleInfo[vehicle][carTrunkWep][slotid] = 0;
				VehicleInfo[vehicle][carTrunkAmmo][slotid] = 0;
				SetPlayerWeapons(playerid);
				format(msg, sizeof(msg), "has taken %s from the %s's trunk.", GetWeaponNameEx(weapon), VehicleNames[GetVehicleModel(vehicle)-400]);
				SetPlayerBubble(playerid, msg);
			}
			else return SCM(playerid, COLOR_LIGHTRED, "Please start the engine first.");
		}
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		new counter = 0, vehicle;
		for(new i; i != MAX_VEHICLES; i++)
		{
			new dist = CheckPlayerDistanceToVehicle(4.0, playerid, i);
			if(dist)
			{
				vehicle = i;
				counter++;
			}
		}
		switch(counter)
		{
			case 0: SCM(playerid, COLOR_GREY, "No vehicle with trunk near you.");
			case 1:
			{
				if(VehicleInfo[vehicle][carOwned] == 1)
				{
					if(IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsABicycle(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "This vehicle does not have a trunk.");
					if(VehicleInfo[vehicle][carTrunkLock] == 0)
					{
						if(slotid >= MAX_VEHICLE_WEAPONS) return SCM(playerid, COLOR_YELLOWG, "Invalid trunk slot ID, (0-4).");
						if(VehicleInfo[vehicle][carTrunkWep][slotid] == 0) return SCM(playerid, COLOR_YELLOWG, "There's no weapon in this slot.");
						new weapon = VehicleInfo[vehicle][carTrunkWep][slotid];
						new wepammo = VehicleInfo[vehicle][carTrunkAmmo][slotid];
						if(IsMeleeWeapon(weapon) && IsMeleeSlotTaken(playerid)) return SCM(playerid, -1, "Your Melee weapon slot is taken.");
						if(IsPrimaryWeapon(weapon) && IsPrimarySlotTaken(playerid)) return SCM(playerid, -1, "Your Primary weapon slot is taken.");
						if(IsSecondaryWeapon(weapon) && IsSecondarySlotTaken(playerid)) return SCM(playerid, -1, "Your Secondary weapon slot is taken.");
						if(IsMeleeWeapon(weapon))
						{
							GiveMeleeWeapon(playerid, weapon);
						}
						if(IsPrimaryWeapon(weapon))
						{
							GivePermWeapon(playerid, 2, weapon, wepammo);
						}
						if(IsSecondaryWeapon(weapon))
						{
							GivePermWeapon(playerid, 3, weapon, wepammo);
						}
						format(msg, sizeof(msg), "~b~You have taken ~y~%s~b~ from the ~y~%s's~b~ trunk.", GetWeaponNameEx(weapon), VehicleNames[GetVehicleModel(vehicle)-400]);
						InfoMSG(playerid, msg, 5);
						VehicleInfo[vehicle][carTrunkWep][slotid] = 0;
						VehicleInfo[vehicle][carTrunkAmmo][slotid] = 0;
						SetPlayerWeapons(playerid);
						format(msg, sizeof(msg), "has taken %s from the %s's trunk.", GetWeaponNameEx(weapon), VehicleNames[GetVehicleModel(vehicle)-400]);
						SetPlayerBubble(playerid, msg);
					}
					else return SCM(playerid, COLOR_GREY, "The trunk is locked.");
				}
			}
			default: SCM(playerid, COLOR_GREY, "Found more than 1 vehicle.");
		}
	}
	if(house != -1)
	{
		if (PlayerToPoint(2.0, playerid,HouseInfo[house][hCheckPosX], HouseInfo[house][hCheckPosY], HouseInfo[house][hCheckPosZ]))
		{
			if(slotid >= MAX_HOUSE_WEAPONS) return SCM(playerid, COLOR_GREY, "Invalid trunk slot ID, (0-9).");
			if(HouseInfo[house][hWeapon][slotid] == 0) return SCM(playerid, COLOR_GREY, "There's no weapon in this slot.");
			new weapon = HouseInfo[house][hWeapon][slotid];
			new wepammo = HouseInfo[house][hAmmo][slotid];
			if(IsMeleeWeapon(weapon) && IsMeleeSlotTaken(playerid)) return SCM(playerid, -1, "Your Melee weapon slot is taken.");
			if(IsPrimaryWeapon(weapon) && IsPrimarySlotTaken(playerid)) return SCM(playerid, -1, "Your Primary weapon slot is taken.");
			if(IsSecondaryWeapon(weapon) && IsSecondarySlotTaken(playerid)) return SCM(playerid, -1, "Your Secondary weapon slot is taken.");
			if(IsMeleeWeapon(weapon))
			{
				GiveMeleeWeapon(playerid, weapon);
			}
			if(IsPrimaryWeapon(weapon))
			{
				GivePermWeapon(playerid, 2, weapon, wepammo);
			}
			if(IsSecondaryWeapon(weapon))
			{
				GivePermWeapon(playerid, 3, weapon, wepammo);
			}
			format(msg, sizeof(msg), "You have taken the %s from the house trunk.", GetWeaponNameEx(weapon));
			SCM(playerid, COLOR_GREY, msg);
			HouseInfo[house][hWeapon][slotid] = 0;
			HouseInfo[house][hAmmo][slotid] = 0;
			format(msg, sizeof(msg), "has taken %s from the house trunk.", GetWeaponNameEx(weapon));
			SetPlayerBubble(playerid, msg);
  		}
		else
		{
			SCM(playerid, COLOR_LIGHTRED, "You aren't near the house trunk spot.");
		}
	}
	return 1;
}

CMD:trunk(playerid, params[])
{
	new vehicle = GetPlayerVehicleID(playerid);
	if(!PlayerNearVehicle(4.0, playerid, PlayerInfo[playerid][pCarKey])) return SCM(playerid,COLOR_YELLOWG,"You are not near the trunk or you don't have a vehicle");
	if(IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsABicycle(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "This vehicle does not have a trunk.");
	if(VehicleInfo[PlayerInfo[playerid][pCarKey]][carTrunkLock] == 0)
	{
	    GameTextForPlayer(playerid, "~g~Trunk ~w~Closed", 3000, 3);
	    SCM(playerid,COLOR_YELLOWG,"You have closed the trunk.");
		VehicleTrunk(PlayerInfo[playerid][pCarKey], true);
	}
	else if(VehicleInfo[PlayerInfo[playerid][pCarKey]][carTrunkLock] == 1)
	{
	    GameTextForPlayer(playerid, "~g~Trunk ~w~Open", 3000, 3);
		VehicleInfo[vehicle][carTrunkLock] = 0;
		SCM(playerid,COLOR_YELLOWG,"You have opened the trunk.");
		SCM(playerid,COLOR_WHITE,"NOTE: You can use /place and /takegun");
		VehicleTrunk(PlayerInfo[playerid][pCarKey], false);
	}
	return 1;
}
CMD:check(playerid, params[])
{
	new string[500];
	new house = HouseEntered[playerid];
	if(PlayerInCar(playerid))
	{
		new vehicle = GetPlayerVehicleID(playerid);
		if(IsACopCar(vehicle))
		{
			new faction = PlayerInfo[playerid][pFaction];
			if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
			if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty.");
			for(new i = 0; i < sizeof(PoliceTrunk); i++)
			{
			    new vehname[128];
			    format(string, sizeof(string), "%s%d.%s[Ammo:%d]\n", string, i, GetWeaponNameEx(PoliceTrunk[i][wepID]), PoliceTrunk[i][wepAmmo]);
                //format(msg,255,"%s[Munitie:%d]", GetWeaponNameEx(PoliceTrunk[i][wepID]), PoliceTrunk[i][wepAmmo]);
				format(vehname, sizeof(vehname), "%s's trunk.", VehicleNames[GetVehicleModel(vehicle)-400]);
				ShowDialog(playerid, Show:<VehicleTrunk>, DIALOG_STYLE_LIST, vehname, string, "Ok", "Cancel");
			}
		}
		else if(VehicleInfo[vehicle][carOwned] == 1)
		{
			if(IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsABicycle(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "This vehicle does not have a trunk.");
			if(VehicleInfo[vehicle][carTrunkLock] == 1) return SCM(playerid, COLOR_YELLOWG,"You can't check a gun because the trunk is closed.");
			if(engineOn{vehicle})
			{
				for(new i = 0; i < MAX_VEHICLE_WEAPONS; i++)
				{
					if(VehicleInfo[vehicle][carTrunkWep][i] != 0)
					{
						if(IsMeleeWeapon(VehicleInfo[vehicle][carTrunkWep][i]))
						{
							format(string, sizeof(string), "%s%d.%s\n", string, i, GetWeaponNameEx(VehicleInfo[vehicle][carTrunkWep][i]));
						}
						else format(string, sizeof(string), "%s%d.%s[Ammo:%d]\n", string, i, GetWeaponNameEx(VehicleInfo[vehicle][carTrunkWep][i]), VehicleInfo[vehicle][carTrunkAmmo][i]);
					}
					else
					{
						format(string, sizeof(string), "%s%d.[Empty]\n", string, i);
					}
				}
				new vehname[128];
				format(vehname, sizeof(vehname), "%s's trunk.", VehicleNames[GetVehicleModel(vehicle)-400]);
				ShowDialog(playerid, Show:<VehicleTrunk>, DIALOG_STYLE_LIST, vehname, string, "Ok", "Cancel");
			}
			else return SCM(playerid, COLOR_LIGHTRED, "The engine must be turn on to use /check");
		}
	}
	if(house != -1)
	{
		if (PlayerToPoint(1.5, playerid,HouseInfo[house][hCheckPosX], HouseInfo[house][hCheckPosY], HouseInfo[house][hCheckPosZ]))
		{
			for(new z = 0; z < MAX_HOUSE_WEAPONS; z++)
			{
				if(HouseInfo[house][hWeapon][z] == 0)
				{
					format(string, sizeof(string), "%s%d.[Empty]\n", string, z);
				}
				else if(IsMeleeWeapon(HouseInfo[house][hWeapon][z]))
				{
					format(string, sizeof(string), "%s%d.%s\n", string, z, GetWeaponNameEx(HouseInfo[house][hWeapon][z]), HouseInfo[house][hAmmo][z]);
				}
				else
				{
					format(string, sizeof(string), "%s%d.%s[Munitie:%d]\n", string, z, GetWeaponNameEx(HouseInfo[house][hWeapon][z]), HouseInfo[house][hAmmo][z]);
				}
			}
			ShowDialog(playerid, Show:<HouseTrunk>, DIALOG_STYLE_LIST, "House trunk", string, "Accept", "Cancel");
		}
		//else return SCM(playerid, COLOR_LIGHTRED, "You haven't find anything.");
	}
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		new counter = 0, vehicle;
		for(new i; i != MAX_VEHICLES; i++)
		{
			new dist = CheckPlayerDistanceToVehicle(4.0, playerid, i);
			if(dist)
			{
				vehicle = i;
				counter++;
			}
		}
		switch(counter)
		{
			case 0: SCM(playerid, COLOR_GREY, "No vehicle with trunk near you.");
			case 1:
			{
				if(VehicleInfo[vehicle][carOwned] == 1)
				{
					if(IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsABicycle(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "This vehicle does not have a trunk.");
					if(VehicleInfo[vehicle][carTrunkLock] == 0)
					{
						for(new i = 0; i < MAX_VEHICLE_WEAPONS; i++)
						{
							if(VehicleInfo[vehicle][carTrunkWep][i] != 0)
							{
								if(IsMeleeWeapon(VehicleInfo[vehicle][carTrunkWep][i]))
								{
									format(string, sizeof(string), "%s%d.%s\n", string, i, GetWeaponNameEx(VehicleInfo[vehicle][carTrunkWep][i]));
								}
								else format(string, sizeof(string), "%s%d.%s - Ammo: "EMBED_LIGHTBLUE"%d\n", string, i, GetWeaponNameEx(VehicleInfo[vehicle][carTrunkWep][i]), VehicleInfo[vehicle][carTrunkAmmo][i]);
							}
							else
							{
								format(string, sizeof(string), "%s%d.[Empty]\n", string, i);
							}
						}
						new vehname[128];
						format(vehname, sizeof(vehname), "%s's trunk.", VehicleNames[GetVehicleModel(vehicle)-400]);
						ShowDialog(playerid, Show:<VehicleTrunk>, DIALOG_STYLE_LIST, vehname, string, "O", "K");
					}
					else return SCM(playerid, COLOR_GREY, "The trunk is locked.");
					return 1;
				}
			}
			default: SCM(playerid, COLOR_GREY, "Found more than 1 vehicle.");
		}
	}
	return 1;
}

CMD:dgun(playerid, params[])
{
	if(!IsPlayerHoldingWeapon(playerid)) return SCM(playerid, COLOR_LIGHTRED, "You're not holding a weapon.");
	new weaponid = GetWeaponHolding(playerid);
	new faction = PlayerInfo[playerid][pFaction];
	if(faction == LSPD || faction == SASD || faction == LSFD || faction == GOV) return SCM(playerid, COLOR_YELLOWG,"You cannot drop the gun while you're walking into a government faction.");
	if(!HasWeapon(playerid, weaponid)) return 1;
	new gunobject = GunObjects[weaponid][0];
	new dropid = GetNextWepDropID();
	WeaponDropInfo[dropid][gunObject] = CreateDynamicObject(gunobject, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)-1, 93.7, 120.0, 120.0, GetWorld(playerid), GetInterior(playerid), -1, 200.0);
	WeaponDropInfo[dropid][gunID] = weaponid;
	WeaponDropInfo[dropid][gunAmmo] = GetWeaponAmmo(playerid, weaponid);
	WeaponDropInfo[dropid][gunDropped] = 1;
	WeaponDropInfo[dropid][gunPosX] = PlayerPosX(playerid);
	WeaponDropInfo[dropid][gunPosY] = PlayerPosY(playerid);
	WeaponDropInfo[dropid][gunPosZ] = PlayerPosZ(playerid)-1;
	RemovePlayerWeapon(playerid, weaponid);
	if(IsMeleeWeapon(weaponid))
	{
		PlayerInfo[playerid][pMeleeWep] = 0;
	}
	if(IsPrimaryWeapon(weaponid))
	{
		PlayerInfo[playerid][pPerm1] = 0;
		PlayerInfo[playerid][pAmmo1] = 0;
	}
	if(IsSecondaryWeapon(weaponid))
	{
		PlayerInfo[playerid][pPerm2] = 0;
		PlayerInfo[playerid][pAmmo2] = 0;
	}
	SetPlayerWeapons(playerid);
	format(msg, sizeof(msg), "You have dropped your %s, ammo: %d, (/pgun) to get it back.", GetWeaponNameEx(weaponid), GetWeaponAmmo(playerid, weaponid));
	SCM(playerid, COLOR_GREEN, msg);
	format(msg, sizeof(msg), "has dropped his %s on the ground.", GetWeaponNameEx(weaponid));
	ActionMessage(playerid,15.0,msg);
	return 1;
}

CMD:pgun(playerid, params[])
{
	new dropid = GetClosestDroppedGun(playerid);
	if(dropid == -1) return SCM(playerid, COLOR_LIGHTRED, "There's nothing around you.");
	new weaponid = WeaponDropInfo[dropid][gunID];
	if(IsMeleeWeapon(weaponid) && IsMeleeSlotTaken(playerid)) return SCM(playerid, -1, "Your Melee weapon slot is taken.");
	if(IsPrimaryWeapon(weaponid) && IsPrimarySlotTaken(playerid)) return SCM(playerid, -1, "Your Primary weapon slot is taken.");
	if(IsSecondaryWeapon(weaponid) && IsSecondarySlotTaken(playerid)) return SCM(playerid, -1, "Your Secondary weapon slot is taken.");
	new ammo = WeaponDropInfo[dropid][gunAmmo];
	if(IsMeleeWeapon(weaponid))
	{
		GiveMeleeWeapon(playerid, weaponid);
	}
	if(IsPrimaryWeapon(weaponid))
	{
		GivePermWeapon(playerid, 2, weaponid, ammo);
	}
	if(IsSecondaryWeapon(weaponid))
	{
		GivePermWeapon(playerid, 3, weaponid, ammo);
	}
	SetPlayerWeapons(playerid);
	format(msg, sizeof(msg), "You have taken %s from the ground, ammo:%d.", GetWeaponNameEx(weaponid), ammo);
	SCM(playerid, COLOR_GREEN, msg);
	format(msg, sizeof(msg), "has picked up %s from the ground.", GetWeaponNameEx(weaponid));
	SetPlayerBubble(playerid, msg);
	DestroyDynamicObject(WeaponDropInfo[dropid][gunObject]);
	WeaponDropInfo[dropid][gunID] = 0;
	WeaponDropInfo[dropid][gunAmmo] = 0;
	WeaponDropInfo[dropid][gunDropped] = 0;
	WeaponDropInfo[dropid][gunPosX] = 0.0;
	WeaponDropInfo[dropid][gunPosY] = 0.0;
	WeaponDropInfo[dropid][gunPosZ] = 0.0;
	return 1;
}

CMD:rentchannel(playerid, params[])
{
	new channelid, pass[128], cost = 15000;
	if(sscanf(params,"ds[128]",channelid,pass))
	{
		SyntaxMSG(playerid, "/rentchannel [channel-id(1-9999)] [auth pass]");
		SCM(playerid, COLOR_RED, "[WARNING]: Do not use symbols at your auth pass.");
		return 1;
	}
	if(channelid == 911 && PlayerInfo[playerid][pFaction] != LSPD) return SCM(playerid, COLOR_GREY, "Your radio doesn't support in this channel (LSPD).");
	if(channelid == 912 && PlayerInfo[playerid][pFaction] != LSFD) return SCM(playerid, COLOR_GREY, "Your radio doesn't support in this channel (LSFD).");
	if(channelid == 913 && PlayerInfo[playerid][pFaction] != DOCS) return SCM(playerid, COLOR_GREY, "Your radio doesn't support in this channel (DOCS).");
	if(channelid > 9999 || channelid <= 0) return RadioMSG(playerid, "Invalid channel id, 1-9999.");
	if(!PlayerToPoint(4.0, playerid, 1167.8, -1507.22, 15.8001)) return SCM(playerid, COLOR_GRAD2, "You're not at the mall office.");
	if(PlayerOwnChannel(playerid)) return RadioMSG(playerid, "You already own a radio channel, '/sellchannel' to sell it.");
	if(ChannelExist(channelid)) return RadioMSG(playerid, "This channel is already taken.");
	if(StringHasSymbols(pass)) return SCM(playerid, COLOR_LIGHTRED, "Do not use symbols at your authorization password!");
	if(GetCash(playerid) < cost) return NoCashMSG(playerid);
	GiveCash(playerid, -cost);
	new channelslot = GetNextChannelSlot();
	format(msg, sizeof(msg), "You have rented a radio channel: %d, you may type '/radiohelp' for more info.", channelid);
	RadioMSG(playerid, msg);
	PlayerInfo[playerid][pOwnedChannel] = channelid;
	RadiosInfo[channelslot][radioChannel] = channelid;
	format(RadiosInfo[channelslot][radioOwner], 128, "%s", GetName(playerid));
	format(RadiosInfo[channelslot][radioPass], 128, "%s", pass);
	RadiosInfo[channelslot][radioOn] = 1;
	AddChannelToFile(playerid, channelid, pass, channelslot);
  SavePlayerStats(playerid);
	return 1;
}

CMD:sellchannel(playerid, params[])
{
	new award = 7500;
	new owned = GetOwnedChannel(playerid);
	new channelslot = GetChannelSlot(owned);
	new channel = GetPlayerChannel(playerid);
	if(!PlayerOwnChannel(playerid)) return RadioMSG(playerid, "You don't own any channel.");
	if(channel != owned) return RadioMSG(playerid, "You must be connected to your channel.");
	GiveCash(playerid, award);
	format(msg, sizeof(msg), "You have just sold your radio channel: %d, for the government and earned $%d.", owned,award);
	RadioMSG(playerid, msg);
	foreach(Player, i)
	{
		if(GetPlayerChannel(i) == owned && i != playerid)
		{
			RadioMSG(i, "The radio channel you are in has just been sold, and you were kicked out.");
			SetRadioChannel(i, 0);
		}
	}
	ResetOfflinePlayersChannel(channelslot);
	RadiosInfo[channelslot][radioChannel] = 0;
	format(RadiosInfo[channelslot][radioOwner], 128, "The State");
	RadiosInfo[channelslot][radioOn] = 0;
	PlayerInfo[playerid][pChannel] = 0;
	PlayerInfo[playerid][pOwnedChannel] = 0;
	SetRadioChannel(playerid, 0);
    SetRadioSlot(playerid, 0);
	OnPlayerSellChannel(channelslot);
	return 1;
}

CMD:setchannel(playerid, params[])
{
	new channelid,slot;
	if(sscanf(params,"dd",channelid,slot)) return SyntaxMSG(playerid, "/setchannel [channel-id] [slot(1-3)]");
	if(PlayerInfo[playerid][pRadio] == 0) return SCM(playerid, -1, "You don't have a radio.");
	if(channelid == 911 && PlayerInfo[playerid][pFaction] != LSPD) return SCM(playerid, COLOR_GREY, "Your radio doesn't support in this channel (LSPD).");
	if(channelid == 999 && PlayerInfo[playerid][pFaction] != LSPD) return SCM(playerid, COLOR_GREY, "Your radio doesn't support in this channel (SASD).");
	if(channelid == 912 && PlayerInfo[playerid][pFaction] != LSFD) return SCM(playerid, COLOR_GREY, "Your radio doesn't support in this channel (LSFD).");
	if(channelid == 998 && PlayerInfo[playerid][pFaction] != DOCS) return SCM(playerid, COLOR_GREY, "Your radio doesn't support in this channel (DOC).");
	if(channelid == 910 && PlayerInfo[playerid][pFaction] != GOV) return SCM(playerid, COLOR_GREY, "Your radio doesn't support in this channel (GOV).");
    if(channelid == 0 && slot == 0) return SCM(playerid, COLOR_YELLOWG, "You can't do this, check /leavechannel");
    if(channelid == GetPlayerChannel(playerid)) return RadioMSG(playerid, "You are in this channel already.");
	if(channelid == 911 && PlayerInfo[playerid][pFaction] == LSPD) {
    	RadioMSG(playerid, "You are now authorized to use this frequency.");
        PlayerInfo[playerid][pAuthed] = 1;
        SetRadioChannel(playerid, channelid);
    	SetRadioSlot(playerid, slot);
	}

	if(channelid == 999 && PlayerInfo[playerid][pFaction] == SASD) {
    	RadioMSG(playerid, "You are now authorized to use this frequency.");
        PlayerInfo[playerid][pAuthed] = 1;
        SetRadioChannel(playerid, channelid);
    	SetRadioSlot(playerid, slot);
	}

	if(channelid == 912 && PlayerInfo[playerid][pFaction] == LSFD) {
    	RadioMSG(playerid, "You are now authorized to use this frequency.");
        PlayerInfo[playerid][pAuthed] = 1;
        SetRadioChannel(playerid, channelid);
    	SetRadioSlot(playerid, slot);
	}

	if(channelid == 998 && PlayerInfo[playerid][pFaction] == DOCS) {
    	RadioMSG(playerid, "You are now authorized to use this frequency.");
        PlayerInfo[playerid][pAuthed] = 1;
        SetRadioChannel(playerid, channelid);
    	SetRadioSlot(playerid, slot);
	}

	if(channelid == 910 && PlayerInfo[playerid][pFaction] == GOV) {
    	RadioMSG(playerid, "You are now authorized to use this frequency.");
        PlayerInfo[playerid][pAuthed] = 1;
        SetRadioChannel(playerid, channelid);
    	SetRadioSlot(playerid, slot);
	}
	format(msg, sizeof(msg), "Radio Channel Set [CH: %d, Slot: %d]", channelid, slot);
	SCM(playerid, COLOR_GREEN, msg);
	RadioMSG(playerid, "Before you can /r please authorize, /auth.");
	PlayerInfo[playerid][pAuthed] = 0;
	SetRadioChannel(playerid, channelid);
	SetRadioSlot(playerid, slot);
	return 1;
}

CMD:setslot(playerid, params[])
{
	new slot;
	if(sscanf(params,"d",slot)) return SyntaxMSG(playerid, "/setslot [slot-id]");
	if(PlayerInfo[playerid][pRadio] == 0) return SCM(playerid, -1, "You don't have a radio.");
	if(slot == GetPlayerSlot(playerid)) return RadioMSG(playerid, "You are in this slot already.");
	if(slot > 3 || slot < 1) return SCM(playerid, COLOR_GREY, "Slot must be 1-3.");
	SetRadioSlot(playerid, slot);
	SCMEx(playerid, COLOR_LIGHTBLUE, "You have set your radio slot to %d.", slot);
	return 1;
}

CMD:leavechannel(playerid, params[])
{
	new channel = GetPlayerChannel(playerid);
	if(PlayerInfo[playerid][pRadio] == 0) return SCM(playerid, -1, "You don't have a radio.");
	if(channel == 0) return RadioMSG(playerid, "You're not in any channel.");
	format(msg, sizeof(msg), "You have just left your current radio channel %d.", channel);
	RadioMSG(playerid, msg);
	SetRadioChannel(playerid, 0);
  SetRadioSlot(playerid, 0);
	return 1;
}

CMD:auth(playerid, params[])
{
	new pass[128];
	if(sscanf(params,"s[128]",pass)) return SyntaxMSG(playerid, "/auth [channel password]");
	if(PlayerInfo[playerid][pRadio] == 0) return SCM(playerid, -1, "You don't have a radio.");
	new channel = GetPlayerChannel(playerid);
	new slotid = GetChannelSlot(channel);
	if(channel == 0) return RadioMSG(playerid, "You're not in any channel.");
	if(PlayerInfo[playerid][pAuthed] == 1) return RadioMSG(playerid, "You are already authorized in your current channel.");
	if(!AuthPassCorrect(slotid, pass)) return RadioMSG(playerid, "Invalid authorization password.");
	format(msg, sizeof(msg), "You have been authorized to use this channel, password: %s.", pass);
	RadioMSG(playerid, msg);
	PlayerInfo[playerid][pAuthed] = 1;
	return 1;
}

CMD:newauth(playerid, params[])
{
	new oldpass[128], newpass[128];
	if(sscanf(params,"s[128]s[128]",oldpass,newpass)) return SyntaxMSG(playerid, "/newauth [old password] [new password]");
	new channel = GetOwnedChannel(playerid);
	new slot = GetChannelSlot(channel);
	if(!PlayerOwnChannel(playerid)) return RadioMSG(playerid, "You don't own any channel.");
	if(!AuthPassCorrect(slot, oldpass)) return RadioMSG(playerid, "Invalid authorization password.");
	format(msg, sizeof(msg), "Your authorization password has been changed to, %s.", newpass);
	RadioMSG(playerid, msg);
	format(RadiosInfo[slot][radioPass], 128, "%s", newpass);
	UpdateRadioInfo(slot);
	return 1;
}

CMD:radiomembers(playerid, params[])
{
	new channel = GetPlayerChannel(playerid);
	new owned = GetOwnedChannel(playerid);
	if(!PlayerOwnChannel(playerid)) return SCM(playerid, COLOR_YELLOWG, "You don't own any channel.");
	if(channel != owned) return RadioMSG(playerid, "You must be connected to your channel.");
	SCM(playerid, COLOR_YELLOWG, "|_____________Members on the RADIO_____________|");
	foreach(Player, i)
	{
		if(GetPlayerChannel(i) == owned && i != playerid)
		{
			format(msg, sizeof(msg), "[ID:%d] %s.", i, GetNameEx(i));
			SCM(playerid, COLOR_FADE2, msg);
		}
	}
	SCM(playerid, COLOR_YELLOWG, "|______________________________________|");
	return 1;
}

CMD:kickoffradio(playerid, params[])
{
	new id;
	if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/kickoffradio [playerid]");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(id == playerid) return SCM(playerid, COLOR_WHITE, "You may not kick yourself.");
	new channel = GetPlayerChannel(playerid);
	new owned = GetOwnedChannel(playerid);
	if(!PlayerOwnChannel(playerid)) return RadioMSG(playerid, "You don't own any channel.");
	if(channel != owned) return RadioMSG(playerid, "You must be connected to your channel.");
	if(GetPlayerChannel(id) == owned || isLeader(playerid) && Factions[PlayerInfo[playerid][pFaction]][fType] == FACTION_LEGAL)
	{
		format(msg, sizeof(msg), "You have just kicked %s from your radio.", GetNameEx(id));
		RadioMSG(playerid, msg);
		RadioMSG(id, "You have been kicked from the radio channel you're currently in.");
		SetRadioChannel(id, 0);
	}
	else return RadioMSG(playerid, "This player isn't in your radio channel.");
	return 1;
}

CMD:radio(playerid, params[]) return cmd_r(playerid, params);
CMD:r(playerid, params[])
{
	new text[128];
	new channel = GetPlayerChannel(playerid);
	if(sscanf(params,"s[128]",text)) return SyntaxMSG(playerid, "/r [text]");
	if(PlayerInfo[playerid][pRadio] == 0) return SCM(playerid, -1, "You don't have a radio.");
	if(channel == 0) return RadioMSG(playerid, "You're not in any channel.");
	if(PlayerInfo[playerid][pAuthed] == 0) return RadioMSG(playerid, "You are not authorized in your current channel.");
	if(PlayerInfo[playerid][pFaction] == LSPD && channel == 911)
	{
		if(strlen(text) > MAXLEN)
		{
			new pos = MAXLEN;
			if(pos < MAXLEN-1) pos = MAXLEN;
			format(msg, sizeof(msg), "**[CH: %d S:1] %s: %.*s ...", channel, GetNameWithMask(playerid), pos, text);
			SendRadioMessage(playerid, channel, COLOR_RADIO, msg);
			format(msg, sizeof(msg), "**[CH: %d S:1] %s: ... %s", channel, GetNameWithMask(playerid), text[pos]);
			SendRadioMessage(playerid, channel, COLOR_RADIO, msg);
		}
		else
		{
			format(msg, sizeof(msg), "**[CH: %d S:1] %s: %s", channel, GetNameWithMask(playerid), text);
			SendRadioMessage(playerid, channel, COLOR_RADIO, msg);
		}
		if(strlen(text) > MAXLEN)
		{
			new pos = MAXLEN;
			if(pos < MAXLEN-1) pos = MAXLEN;
			format(msg, sizeof(msg), "(Radio) %s says: %.*s ...", GetNameWithMask(playerid), pos, text);
			SendLowProxRadioMessage(playerid, msg);
			format(msg, sizeof(msg), "(Radio) %s says: ... %s", GetNameWithMask(playerid), text[pos]);
			SendLowProxRadioMessage(playerid, msg);
		}
		else
		{
			format(msg, sizeof(msg), "(Radio) %s says: %s", GetNameWithMask(playerid), text);
			SendLowProxRadioMessage(playerid, msg);
		}
	}
	else
	{
		if(strlen(text) > MAXLEN)
		{
			new pos = MAXLEN;
			if(pos < MAXLEN-1) pos = MAXLEN;
			format(msg, sizeof(msg), "**[CH: %d] %s: %.*s ...", channel, GetNameWithMask(playerid), pos, text);
			SendRadioMessage(playerid, channel, COLOR_RADIO, msg);
			format(msg, sizeof(msg), "**[CH: %d] %s: ... %s", channel, GetNameWithMask(playerid), text[pos]);
			SendRadioMessage(playerid, channel, COLOR_RADIO, msg);
		}
		else
		{
			format(msg, sizeof(msg), "**[CH: %d] %s: %s", channel, GetNameWithMask(playerid), text);
			SendRadioMessage(playerid, channel, COLOR_RADIO, msg);
		}
		if(strlen(text) > MAXLEN)
		{
			new pos = MAXLEN;
			if(pos < MAXLEN-1) pos = MAXLEN;
			format(msg, sizeof(msg), "(Radio) %s says: %.*s ...", GetNameWithMask(playerid), pos, text);
			SendLowProxRadioMessage(playerid, msg);
			format(msg, sizeof(msg), "(Radio) %s says: ... %s", GetNameWithMask(playerid), text[pos]);
			SendLowProxRadioMessage(playerid, msg);
		}
		else
		{
			format(msg, sizeof(msg), "(Radio) %s says: %s", GetNameWithMask(playerid), text);
			SendLowProxRadioMessage(playerid, msg);
		}
	}
	return 1;
}

CMD:rlow(playerid, params[])
{
	new text[128];
	new channel = GetPlayerChannel(playerid);
	if(sscanf(params,"s[128]",text)) return SyntaxMSG(playerid, "/rlow [text]");
	if(PlayerInfo[playerid][pRadio] == 0) return SCM(playerid, -1, "You don't have a radio.");
	if(channel == 0) return RadioMSG(playerid, "You're not in any channel.");
	if(PlayerInfo[playerid][pAuthed] == 0) return RadioMSG(playerid, "You are not authorized in your current channel.");
	if(PlayerInfo[playerid][pFaction] == LSPD && channel == 911)
	{
		if(strlen(text) > MAXLEN)
		{
			new pos = MAXLEN;
			if(pos < MAXLEN-1) pos = MAXLEN;
			format(msg, sizeof(msg), "**[CH: %d] %s: %.*s ...", channel, GetNameWithMask(playerid), pos, text);
			SendRadioMessage(playerid, channel, COLOR_RADIO, msg);
			format(msg, sizeof(msg), "**[CH: %d] %s: ... %s", channel, GetNameWithMask(playerid), text[pos]);
			SendRadioMessage(playerid, channel, COLOR_RADIO, msg);
		}
		else
		{
			format(msg, sizeof(msg), "**[CH: %d] %s: %s", channel, GetNameWithMask(playerid), text);
			SendRadioMessage(playerid, channel, COLOR_RADIO, msg);
		}
		if(strlen(text) > MAXLEN)
		{
			new pos = MAXLEN;
			if(pos < MAXLEN-1) pos = MAXLEN;
			format(msg, sizeof(msg), "(Radio) %s says (low): %.*s ...", GetNameWithMask(playerid), pos, text);
			SendLowProxRadioMessage(playerid, msg);
			format(msg, sizeof(msg), "(Radio) %s says (low): ... %s", GetNameWithMask(playerid), text[pos]);
			SendLowProxRadioMessage(playerid, msg);
		}
		else
		{
			format(msg, sizeof(msg), "(Radio) %s says (low): %s", GetNameWithMask(playerid), text);
			SendLowProxRadioMessage(playerid, msg);
		}
	}
	else
	{
		if(strlen(text) > MAXLEN)
		{
			new pos = MAXLEN;
			if(pos < MAXLEN-1) pos = MAXLEN;
			format(msg, sizeof(msg), "**[CH: %d] %s: %.*s ...", channel, GetNameWithMask(playerid), pos, text);
			SendRadioMessage(playerid, channel, COLOR_RADIO, msg);
			format(msg, sizeof(msg), "**[CH: %d] %s: ... %s", channel, GetNameWithMask(playerid), text[pos]);
			SendRadioMessage(playerid, channel, COLOR_RADIO, msg);
		}
		else
		{
			format(msg, sizeof(msg), "**[CH: %d] %s: %s", channel, GetNameWithMask(playerid), text);
			SendRadioMessage(playerid, channel, COLOR_RADIO, msg);
		}
		if(strlen(text) > MAXLEN)
		{
			new pos = MAXLEN;
			if(pos < MAXLEN-1) pos = MAXLEN;
			format(msg, sizeof(msg), "(Radio) %s says (low): %.*s ...", GetNameWithMask(playerid), pos, text);
			SendLowProxRadioMessage(playerid, msg);
			format(msg, sizeof(msg), "(Radio) %s says (low): ... %s", GetNameWithMask(playerid), text[pos]);
			SendLowProxRadioMessage(playerid, msg);
		}
		else
		{
			format(msg, sizeof(msg), "(Radio) %s says (low): %s", GetNameWithMask(playerid), text);
			SendLowProxRadioMessage(playerid, msg);
		}
	}
	return 1;
}

CMD:accent(playerid, params[])
{
	new info[128];
	if(sscanf(params,"s[128]",info)) return SyntaxMSG(playerid, "/accent [info] (Type 'none' for no accent)");
	if(CompareStrings(info, "none"))
	{
		SCM(playerid, COLOR_CYAN, "You've removed the accent.");
		PlayerInfo[playerid][pAccentOn] = 0;
		format(PlayerInfo[playerid][pAccent], 128, "None");
	}
	else
	{
		format(msg, sizeof(msg), "Your new accent is: %s.", info);
		SCM(playerid, COLOR_FADE1, msg);
		PlayerInfo[playerid][pAccentOn] = 1;
		format(PlayerInfo[playerid][pAccent], 128, "%s", info);
	}
	return 1;
}
/*
CMD:maskpd(playerid,params[])
{
    new faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii On-Duty...");
	if(!maskOn{playerid})
	{
		GameTextForPlayer(playerid, "~h~~b~Ti-ai pus masca undercover.", 4000, 4);
		maskOn{playerid} = true;
		SetIntVar(playerid, "MaskID", randomEx(10000, 99999));
		ShowPlayerName(playerid, false);
	}
	else
	{
		GameTextForPlayer(playerid, "~h~~b~Ti-ai scos masca undercover.", 4000, 4);
		maskOn{playerid} = false;
		ShowPlayerName(playerid, true);
	}
}
*/

CMD:mask(playerid, params[])
{
	if(PlayerInfo[playerid][pMask] != 1 && !Mask{playerid} && !CopDuty{playerid}) return SCM(playerid, COLOR_FADE5, "You do not have a mask or you're not in that faction (LSPD).");
	if(!maskOn{playerid})
	{
		GameTextForPlayer(playerid, "~h~~b~You have used your mask", 4000, 4);
		maskOn{playerid} = true;
		SetIntVar(playerid, "MaskID", randomEx(10000, 99999));
		ShowPlayerName(playerid, false);
	}
	else
	{
		GameTextForPlayer(playerid, "~h~~b~You have removed your mask", 4000, 4);
		maskOn{playerid} = false;
		ShowPlayerName(playerid, true);
	}
	return 1;
}

CMD:buyclothes(playerid, params[])
{
	if(DoorEntered[playerid] != -1)
	{
		if(!PlayerToPoint(3.0, playerid, 207.576, -100.983, 1005.26)) return SCM(playerid, COLOR_LIGHTBLUE, "You're not at clothes shop.");
		if(GetCash(playerid) < 500) return NoCashMSG(playerid);
		PutPlayer(playerid, 217.8763, -98.5028, 1005.2578);
		SetPlayerFacingAngle(playerid, 87.9392);
		SetPlayerCameraPos(playerid, 212.6505, -98.5601, 1006.0);
		SetPlayerCameraLookAt(playerid, 217.8763, -98.5028, 1005.2578);
		SetWorld(playerid, playerid+100);
		FreezePlayer(playerid);
		SCM(playerid,COLOR_WHITE, "HINT: Choose which do you want and use /done when you are done.");
		InfoMSG(playerid, "~b~Binco~n~---------------~n~~y~~h~/done~w~ to buy a skin~n~~y~~h~/stop~w~ to stop buying", 10);
		SetIntVar(playerid, "SkinBuying", 1);
		SetIntVar(playerid, "BrowsingSkins", 1);
		SetPlayerSkin(playerid, 1);
		ShowTextDraw(playerid, ClothesText);
	}
	else return SCM(playerid, COLOR_INFO, "You're not at clothes shop.");
	return 1;
}

CMD:done(playerid, params[])
{
	if(GetIntVar(playerid, "BrowsingSkins") == 1)
	{
		PutPlayer(playerid, 207.576, -100.983, 1005.26);
		SetCameraBehindPlayer(playerid);
		SetWorld(playerid, 0);
		UnFreezePlayer(playerid);
		ServerMSG(playerid, "You bought this skin for $500 .");
		SetSkin(playerid, GetIntVar(playerid, "SkinBuying"));
		GiveCash(playerid, -500);
		RemoveVar(playerid, "BrowsingSkins");
		RemoveVar(playerid, "SkinBuying");
		SkinSlot[playerid] = 0;
		HideTextDraw(playerid, ClothesText);
	}
	return 1;
}
CMD:sa(playerid, params[]) return cmd_stopanim(playerid, params);
CMD:stopanim(playerid, params[])
{
  if(GetIntVar(playerid, "Injured") == 1) return 1;
	if(PlayerIsWounded(playerid)) return 1;
	StopPlayerAnims(playerid);
	if(PlayerInCar(playerid))
	{
		PutPlayerInOldCar(playerid);
	}
	return 1;
}

//====================================Vehicles====================================//
CMD:dropkey(playerid, params[])
{
	if(PlayerInfo[playerid][pSpareKey] == 0) return SCM(playerid, COLOR_GREEN, "You don't have a spare key.");
	SCM(playerid, COLOR_INFO, "You have dropped your spare key on the floor.");
	PlayerInfo[playerid][pSpareKey] = 0;
	return 1;
}
CMD:policeline(playerid, params[])
{
	new slot, faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(sscanf(params,"d",slot))
	{
		SyntaxMSG(playerid, "/policeline [slot(1-20)]");
		return 1;
	}
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty.");
	if(slot > 20 || slot < 1) return SCM(playerid, COLOR_INFO, "Invalid slot.");
	new Float:x, Float:y, Float:z, Float:a;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	if(PoliceLines[playerid][slot] != INVALID_OBJECT_ID) return SCM(playerid, COLOR_LIGHTRED, "This slot is already taken.");
	format(msg, sizeof(msg), "Police line placed. Remember to remove it after you do what you need to do.", slot);
	SCM(playerid, COLOR_WHITE, msg);
	PoliceLines[playerid][slot] = CreateDynamicObject(19834, x, y, z, 0.0, 0.0, a+180);
	SetPlayerPos(playerid, x, y+2, z);
	EditDynamicObject(playerid, PoliceLines[playerid][slot]);
	SetIntVar(playerid, "EditingPL", 1);
	SCM(playerid, COLOR_LIGHTRED, "You may edit the object position.");
	return 1;
}

CMD:removepoliceline(playerid, params[])
{
	new slot, faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(sscanf(params,"d",slot)) return SyntaxMSG(playerid, "/policelineremove [slot(1-20)]");
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty.");
	if(slot > 10 || slot < 1) return SCM(playerid, COLOR_INFO, "Invalid slot.");
	if(PoliceLines[playerid][slot] == INVALID_OBJECT_ID) return SCM(playerid, COLOR_LIGHTRED, "Slot not taken.");
	format(msg, sizeof(msg), "Police line %d removed.", slot);
	SCM(playerid, COLOR_WHITE, msg);
	DestroyDynamicObject(PoliceLines[playerid][slot]);
	PoliceLines[playerid][slot] = INVALID_OBJECT_ID;
	return 1;
}

CMD:attachbadge(playerid, params[])
{
   new faction = PlayerInfo[playerid][pFaction];
   if(faction != LSPD && faction != SASD && faction != GOV) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
   if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty.");
   if(doesbadge[playerid] == 1) return SCM(playerid, COLOR_LIGHTRED, "You have already a badge attached.");
   format(msg, sizeof(msg), "You attached a badge on you. Don't forget to deattach it. (/deattachbadge)");
   SCM(playerid, COLOR_WHITE, msg);
   SetPlayerAttachedObject(playerid, 11, 19347, 6);
   EditAttachedObject(playerid, 11);
   doesbadge[playerid] = 1;
   return 1;
}

CMD:deattachbadge(playerid, params[])
{
   new faction = PlayerInfo[playerid][pFaction];
   if(faction != LSPD && faction != SASD && faction != GOV) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
   if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty.");
   if(doesbadge[playerid] == 0) return SCM(playerid, COLOR_LIGHTRED, "You don't have a badge attached.");
   format(msg, sizeof(msg), "You deattached your badge. You can re-attach it using /attachbadge.");
   SCM(playerid, COLOR_WHITE, msg);
   RemovePlayerAttachedObject(playerid, 19347);
   doesbadge[playerid] = 0;
   return 1;
}


CMD:graffiti(playerid, params[])
{
    if(HouseEntered[playerid] == 1 && BizEntered[playerid] == 1) return SCM(playerid,COLOR_WHITE,"You can't give tags at home/biz.");
	if(PlayerInfo[playerid][pSprayPermission] == 1)
	{
	   GRAFFDIALOG
	}
	else if(PlayerInfo[playerid][pSprayPermission] == 0)
	{
	   SCM(playerid, COLOR_YELLOWG, "You need a permission to graffiti from faction leader.");
	   return 1;
	}
	return 1;
}

CMD:givespray(playerid, params[])
{
	new targetid;
	if(sscanf(params,"d",targetid)) return SyntaxMSG(playerid,"/givespray [playerid]");
	if(!PlayerIsOn(targetid)) return NotConnectedMSG(playerid);
	if(Factions[PlayerInfo[playerid][pFaction]][fType] == FACTION_ILLEGAL)
	{
	   format(msg,sizeof(msg),"%s gave you permission to spray. (/graffiti)",GetNameWithMask(playerid));
	   SCM(targetid, COLOR_YELLOWG, msg);
	   PlayerInfo[targetid][pSprayPermission] = 1;
	}
	else if(Factions[PlayerInfo[playerid][pFaction]][fType] != FACTION_ILLEGAL)
	{
	   SCM(playerid, COLOR_LIGHTRED, "You must be in an illegal faction to give permission.");
	   return 1;
	}
	return 1;
}

CMD:takespray(playerid, params[])
{
	new targetid;
	if(sscanf(params,"d",targetid)) return SyntaxMSG(playerid,"/takespray [playerid]");
	if(!PlayerIsOn(targetid)) return NotConnectedMSG(playerid);
	if(Factions[PlayerInfo[playerid][pFaction]][fType] == FACTION_ILLEGAL)
	{
	   format(msg,sizeof(msg),"%s take your permission to spray. (/graffiti).",GetNameWithMask(playerid));
	   SCM(targetid, COLOR_YELLOWG, msg);
	   PlayerInfo[targetid][pSprayPermission] = 0;
	}
	else if(Factions[PlayerInfo[playerid][pFaction]][fType] != FACTION_ILLEGAL)
	{
	   SCM(playerid, COLOR_LIGHTRED, "You must be in an illegal faction to take permission.");
	   return 1;
	}
	return 1;
}

CMD:damages(playerid, params[])
{
    new id;
    if(sscanf(params, "u", id)) return SyntaxMSG(playerid,"/damages [playerid/PartOfName]");
    if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_LIGHTRED, "This player is not connected.");
    if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
    DisplayDamages(playerid, id);
    return 1;
}

CMD:remove_carsign(playerid, params[])
{
  new veh = GetPlayerVehicleID(playerid);
  if(PlayerInfo[playerid][pFaction] != LSPD && PlayerInfo[playerid][pFaction] != LSFD && PlayerInfo[playerid][pFaction] != SASD && PlayerInfo[playerid][pFaction] != DOCS) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
  if(IsACopCar(veh) || IsAFDCar(veh))
  {
		if(veicolo_callsign_status[veh])
    {
  		Delete3DTextLabel(veicolo_callsign_testo[veh]);
			veicolo_callsign_status[veh] = 0;
			return 1;
		}
    else return SCM(playerid, COLOR_RED, "You don't have a carsign for your car.");
	}
	else SCM(playerid, COLOR_RED, "You need to be in a law enforcement vehicle.");
	return 1;
}

CMD:carsign(playerid,params[])
{
  new veh = GetPlayerVehicleID(playerid);
  if(PlayerInfo[playerid][pFaction] != LSPD && PlayerInfo[playerid][pFaction] != LSFD && PlayerInfo[playerid][pFaction] != SASD && PlayerInfo[playerid][pFaction] != DOCS) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(IsACopCar(veh) || IsAFDCar(veh))
  {
		if(isnull(params)) return SyntaxMSG(playerid,"/carsign [text]");
		if(!veicolo_callsign_status[veh])
    {
      new string[128];
      format(string,sizeof(string), "%s",params);
     	veicolo_callsign_testo[veh] = Create3DTextLabel(string, 0xFFFFFFFF, 0.0, 0.0, 0.0, 50.0, 0, 1);
     	Attach3DTextLabelToVehicle( veicolo_callsign_testo[veh], veh, -0.7, -1.9, -0.3);
     	veicolo_callsign_status[veh] = 1;
     	SCM(playerid, COLOR_LIGHTRED, "USAGE: /remove_carsign - {FFFFFF} When you're done with it");
		}
	}
	else return SCM(playerid, COLOR_RED, "You need to be in a law enforcement vehicle");
	return 1;
}

CMD:che(playerid, params[]) return cmd_cheque(playerid, params);
CMD:cheque(playerid, params[])
{
	new option[24], secoption, thirdoption, fourthoption;
	if(sscanf(params, "s[24]D(-1)D(-1)D(-1)", option, secoption, thirdoption, fourthoption))
	{
		SCM(playerid, COLOR_YELLOW3, "_____________________________________________");
		SyntaxMSG(playerid, "(/che)que [usage]");
		SCM(playerid, -1, "[Actions] list");
		SCM(playerid, COLOR_YELLOW3, "_____________________________________________");
		return 1;
	}
	if(!strcmp(option, "list", true))
	{
        if(PlayerInfo[playerid][pVehicles] == 0) return SCM(playerid, COLOR_LIGHTRED, "You do not own any vehicles.");
		SCMEx(playerid, COLOR_GREEN, "______________Your Vehicles(%d)______________", PlayerInfo[playerid][pVehicles]);
		for(new i = 0; i <= PlayerInfo[playerid][pCheques]; i++)
		{
			SCMEx(playerid, COLOR_WHITE, "Yay, you got a cheque buddy.");
		}
		if(PlayerInfo[playerid][pCheques] == 0)
		{
			SCM(playerid, COLOR_LIGHTRED, "You don't have any check right now. You can create one by (/che)que create.");
		}
		return 1;
	}
	return 1;
}

CMD:edittexture(playerid, params[])
{
	new index, model, txdname[25], texture[48], obID, string[128], furnitureid;
  if(cantexture[playerid] == 1 && PlayerInfo[playerid][pDonateRank] >= 2)
	{
	    if(!sscanf(params, "iis[25]s[49]", index,model,txdname,texture))
	    {
          obID = GetIntVar(playerid, "ChosenFurnitureSlot");
          furnitureid = FurnitureInfo[PlayerInfo[playerid][pHouseKey]][obID][fObject];
          SetDynamicObjectMaterial(furnitureid, 0, model, txdname, texture, 0);
          format(string, sizeof(string), "You have successfully changed the texture of object: '{FFFFFF}%s{FF6347}'", FurnitureInfo[PlayerInfo[playerid][pHouseKey]][obID][fName]);
          SendClientMessage(playerid, 0xFF6347AA, string);
          cantexture[playerid] = 0;
	    }
	    else return SyntaxMSG(playerid, "/edittexture [index] [model] [txdname] [texture]");
	}
	else return SCM(playerid, -1, "You didn't selected the texture furniture (/furniture) or your donate rank isn't high enough.");
	return 1;
}

CMD:v(playerid, params[]) return cmd_vehicle(playerid, params);
CMD:vehicle(playerid, params[])
{
	new option[24], secoption, thirdoption, fourthoption;
	if(gettime() - GetIntVar(playerid, "VehicleDelay") < 3) return SCM(playerid, COLOR_WHITE, "Please wait for 3 seconds after each command.");
	SetIntVar(playerid, "VehicleDelay", gettime());
	if(sscanf(params, "s[24]D(-1)D(-1)D(-1)", option, secoption, thirdoption, fourthoption))
	{
		SCM(playerid, COLOR_YELLOW3, "_____________________________________________");
		SyntaxMSG(playerid, "(/v)ehicle [usage]");
		SCM(playerid, -1, "[Actions] list, get, park, sell, accept, refuse, lock, info, colour");
		SCM(playerid, -1, "[Actions] buylock, buyalarm, buyimmob, buyinsurance, buygps, buypark");
		SCM(playerid, -1, "[Actions] find, duplicatekey, lights, sell, buy, mod, tickets, payticket");
		SCM(playerid, -1, "[Delete] scrap (WARNING: Permanently delete car)");
		SCM(playerid, COLOR_YELLOW3, "_____________________________________________");
		return 1;
	}
	if(!strcmp(option, "list", true))
	{
        if(PlayerInfo[playerid][pVehicles] == 0) return SCM(playerid, COLOR_LIGHTRED, "You do not own any vehicles.");
		SCMEx(playerid, COLOR_GREEN, "______________Your Vehicles(%d)______________", PlayerInfo[playerid][pVehicles]);
		for(new i = 0; i <= PlayerInfo[playerid][pVehicles]; i++)
		{
			if(VehicleStatus[playerid][i][carOn] == 1)
			{
				if(FindVehicleByPlate(VehicleStatus[playerid][i][carPlate]))
				{
					SCMEx(playerid, COLOR_WHITE, "Vehicle %d: %s, Lock[%d], Alarm[%d], Immobilizer[%d], Insurances[%d], Times Destroyed[%d], Next Insurance Price[$%d]", i, VehicleNames[VehicleStatus[playerid][i][carModel]-400],VehicleStatus[playerid][i][carLock],VehicleStatus[playerid][i][carAlarm],VehicleStatus[playerid][i][carImmob],VehicleStatus[playerid][i][carInsurances],VehicleStatus[playerid][i][carDestroyed],GetInsurancePrice2(playerid, i));
				}
				else
				{
					SCMEx(playerid, COLOR_WHITE, "Vehicle %d: %s, Lock[%d], Alarm[%d], Immobilizer[%d], Insurances[%d], Times Destroyed[%d], Next Insurance Price[$%d]", i, VehicleNames[VehicleStatus[playerid][i][carModel]-400],VehicleStatus[playerid][i][carLock],VehicleStatus[playerid][i][carAlarm],VehicleStatus[playerid][i][carImmob],VehicleStatus[playerid][i][carInsurances],VehicleStatus[playerid][i][carDestroyed],GetInsurancePrice2(playerid, i));
				}
			}
		}
		return 1;
	}
	if(!strcmp(option, "tickets", true))
	{
		new vehicle = GetPlayerVehicleID(playerid), string[500];
		if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "You don't have a spawned vehicle.");
		if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
		if(!PlayerOwnVehicle(playerid, vehicle)) return SCM(playerid, -1, "You don't own this vehicle.");
		for(new i = 0; i < MAX_CAR_TICKETS; i++)
		{
			if(VehicleInfo[vehicle][carTicket][i] != 0)
				format(string, sizeof(string), "%s\n(Ticket %d) Amount: $%d.", string, i, VehicleInfo[vehicle][carTicket][i]);
			else
				format(string, sizeof(string), "%s\nNone.", string, i, VehicleInfo[vehicle][carTicket][i]);
		}
		ShowDialog(playerid, Show:<CarTickets>, DIALOG_STYLE_LIST, "Vehicle Tickets(/v payticket)", string, "Accept", "Cancel");
		return 1;
	}
	if(!strcmp(option, "payticket", true))
	{
		new vehicle = GetPlayerVehicleID(playerid), slot, id;
		if(sscanf(params, "{s[16]}dd", slot, id)) return SyntaxMSG(playerid, "/v payticket [slot(0-9)] [OfficerID]");
		if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "You don't have a spawned vehicle.");
		if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
		if(!PlayerOwnVehicle(playerid, vehicle)) return SCM(playerid, -1, "You don't own this vehicle.");
    if(GetCash(playerid) < VehicleInfo[vehicle][carTicket][slot]) return SCM(playerid,COLOR_GREY,"You don't have enough money for the payment of this fine!");
		if(VehicleInfo[vehicle][carTicket][slot] == 0) return SCM(playerid, COLOR_LIGHTRED, "You don't have a ticket in this slot.");
		if(id == playerid) return SCM(playerid, COLOR_LIGHTRED, "Not possible.");
		if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
		if(PlayerInfo[id][pFaction] != LSPD) return SCM(playerid, COLOR_GREY, "This player is not an officer in the LSPD.");
		format(msg, sizeof(msg), "You have successfully paid a ticket in slot %d, amount: $%d to officer %s.", slot, VehicleInfo[vehicle][carTicket][slot], GetNameWithMask(id));
		SCM(playerid, COLOR_LIGHTBLUE, msg);
		format(msg, sizeof(msg), "%s has paid your car ticket for amount $%d.", GetNameWithMask(playerid), VehicleInfo[vehicle][carTicket][slot]);
		SCM(id, COLOR_YELLOWG, msg);
		GiveCash(playerid, -VehicleInfo[vehicle][carTicket][slot]);
		GiveCash(id, VehicleInfo[vehicle][carTicket][slot]);
		VehicleInfo[vehicle][carTicket][slot] = 0;
		return 1;
	}
	if(!strcmp(option, "mod", true))
	{
		new vehicle = GetPlayerVehicleID(playerid);
		if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "You don't have a spawned vehicle.");
		if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
		if(!PlayerOwnVehicle(playerid, vehicle)) return SCM(playerid, -1, "You don't own this vehicle.");
		new dealerid = GetClosestDealerShip(playerid);
		if(dealerid == -1) return SCM(playerid, COLOR_FADE2, "Not near any car dealerships.");
		ShowDialog(playerid, Show:<ModDialog>, DIALOG_STYLE_LIST, "Vehicle Modification", "Wheels\nSpoilers\nScoops\nRoofs\nPaintJobs\nSideskirts\nExhausts\nHydraulics\nBoomBox ", "Select", "Cancel");
		return 1;
	}
	if(!strcmp(option, "buy", true))
	{
	  if(PlayerInfo[playerid][pVehicles] == 3) return SCM(playerid, COLOR_FADE2, "You already have the maximum of vehicles.");
		new dealerid = GetClosestDealerShip(playerid);
		if(dealerid == -1) return SCM(playerid, COLOR_FADE2, "Not near any car dealerships.");
		ShowBuyableCars(playerid);
	}
	if(!strcmp(option, "get", true))
	{
		new slot;
		if(sscanf(params, "{s[7]}d", slot)) return SyntaxMSG(playerid, "/v get [slot(1-5)]");
		if(slot > 5 || slot < 1) return SCM(playerid, -1, "There are no more than 5 slots.");
		if(IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return SCM(playerid,COLOR_RED, "SERVER: You already have your max amount of private vehicles spawned.");
		if(VehSpawned != 0) return SCM(playerid, COLOR_WHITE, "Someone has just spawn a car, wait 3 seconds.");
		LoadVehicleFromSlot(playerid, slot);
		return 1;
	}
	if(!strcmp(option, "park", true))
	{
		new veh = PlayerInfo[playerid][pCarKey];
		if(!IsVehicleSpawned(veh)) return ErrorMsg(playerid, "You don't have a spawned vehicle.");
		if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
		if(!PlayerOwnVehicle(playerid, GetPlayerVehicleID(playerid))) return SCM(playerid, -1, "You don't own this vehicle.");
		if(!PlayerToPoint(5.0, playerid, VehicleInfo[veh][carParkX],VehicleInfo[veh][carParkY],VehicleInfo[veh][carParkZ]))
		{
			SCM(playerid, COLOR_WHITE, "There are parking spot near you bought, your location's parking spot was marked on the map.");
			SetCheckPoint(playerid, FINEVEH, VehicleInfo[veh][carParkX],VehicleInfo[veh][carParkY],VehicleInfo[veh][carParkZ], 6.0);
			return 1;
		}
        PlayerInfo[playerid][pCarKey] = 0;
        PlayerInfo[playerid][pVehSlot] = 0;
		new Float:hp;
		GetVehicleHealth(veh, hp);
		if(hp < 400.0) return SCM(playerid, COLOR_LIGHTRED, "You can't park your car because it is damaged.");
		VehicleInfo[veh][carSpawned] = 0;
		StopCarBoomBox(veh);
		format(msg, sizeof(msg), "Your car was parked (%s)", VehicleNames[VehicleInfo[veh][carModel]-400]);
		SCM(playerid, COLOR_GREEN, msg);
		DestoryCar(veh);
		SaveVehicle(veh);
		return 1;
	}
	if(!strcmp(option, "buypark", true))
	{
		new veh = PlayerInfo[playerid][pCarKey];
		new vehicle = GetPlayerVehicleID(playerid);
		if(!IsVehicleSpawned(veh)) return ErrorMsg(playerid, "You don't have a spawned vehicle.");
		if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
		if(!PlayerOwnVehicle(playerid, veh)) return SCM(playerid, -1, "You don't own this vehicle.");
		new Float:X, Float:Y, Float:Z, Float:A;
		GetVehiclePos(vehicle, X, Y, Z);
		GetVehicleZAngle(vehicle, A);
		VehicleInfo[veh][carParkX] = X;
		VehicleInfo[veh][carParkY] = Y;
		VehicleInfo[veh][carParkZ] = Z;
		VehicleInfo[veh][carParkA] = A;
		if(GetCash(playerid) >= 250)
		{
			SCM(playerid, COLOR_GREEN, "You bought a parking spot for $250.");
			GiveCash(playerid, -250);
			format(query, sizeof(query), "UPDATE `ownedvehicles` SET `parkx` = %f, `parky` = %f, `parkz` = %f, `parka` = %f WHERE `owner` = '%s' AND `slot` = %d", X, Y, Z, A, GetName(playerid), PlayerInfo[playerid][pVehSlot]);
			mysql_function_query(dbHandle, query, false, "", "");
			SaveVehicle(veh);
		}
		else
		{
			SCM(playerid, COLOR_GREEN, "To park your car you need $250.");
		}
		return 1;
	}
	if(!strcmp(option, "buylock", true))
  {
    new vehicle = GetPlayerVehicleID(playerid);
    if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "You don't have a spawned vehicle.");
    if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
    if(!PlayerOwnVehicle(playerid, vehicle)) return SCM(playerid, -1, "You don't own this vehicle.");
    new dealerid = GetClosestDealerShip(playerid);
    new level;
    if(dealerid == -1) return SCM(playerid, COLOR_FADE2, "Not near any car dealerships.");
    if(sscanf(params, "{s[64]}d", level))
    {
      SyntaxMSG(playerid, "/v buylock [level]");
      SCM(playerid, COLOR_INFO, "Level-1: $1500");
      SCM(playerid, COLOR_INFO, "Level-2: $3500");
      SCM(playerid, COLOR_INFO, "Level-3: $5500");
      SCM(playerid, COLOR_INFO, "Level-4: $7500");
      SCM(playerid, COLOR_INFO, "Level-5: $9500");
        return 1;
    }
    if(level < 1 || level > 5) return SCM(playerid, COLOR_INFO, "Lock level must be between 1 and 5!");
    if(level > VehicleInfo[vehicle][carLock]+1) return SCM(playerid, COLOR_LIGHTRED, "You must buy the locks in the right order.");
    if(VehicleInfo[vehicle][carLock] >= level)
    {
      format(msg, sizeof(msg), "You already own a lock level %d or more!", level);
      SCM(playerid, COLOR_LIGHTRED, msg);
      return 1;
    }
    new lockcost;
    if(level == 1)
    lockcost = 1500;
    if(level == 2)
    lockcost = 3500;
    if(level == 3)
    lockcost = 5500;
    if(level == 4)
    lockcost = 7500;
    if(level == 5)
    lockcost = 9500;
    if(GetCash(playerid) < lockcost) return NoCashMSG(playerid);
    format(msg, sizeof(msg), "You bought a lock (Nivel %d).", level);
    SCM(playerid, COLOR_INFO, msg);
    GiveCash(playerid, -lockcost);
    VehicleInfo[vehicle][carLock] = level;
    format(query, sizeof(query), "UPDATE `ownedvehicles` SET `lock` = %d WHERE `owner` = '%s' AND `slot` = %d", level, GetName(playerid), PlayerInfo[playerid][pVehSlot]);
    mysql_function_query(dbHandle, query, false, "", "");
    UpdateVehicleStatus(playerid, vehicle);
    return 1;
  }
  if(!strcmp(option, "buyalarm", true))
  {
    new vehicle = GetPlayerVehicleID(playerid);
    if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "You don't have a spawned vehicle.");
    if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
    if(!PlayerOwnVehicle(playerid, vehicle)) return SCM(playerid, -1, "You don't own this vehicle.");
    new dealerid = GetClosestDealerShip(playerid);
    new level;
    if(dealerid == -1) return SCM(playerid, COLOR_FADE2, "Not near any car dealerships.");
    if(sscanf(params, "{s[64]}d", level))
    {
      SyntaxMSG(playerid, "/v buyalarm [level]");
      SCM(playerid, COLOR_INFO, "Level-1: $2000");
      SCM(playerid, COLOR_INFO, "Level-2: $4000");
      SCM(playerid, COLOR_INFO, "Level-3: $6000");
      SCM(playerid, COLOR_INFO, "Level-4: $8000");
      SCM(playerid, COLOR_INFO, "Level-5: $10000");
        return 1;
    }
    if(level < 1 || level > 5) return SCM(playerid, COLOR_INFO, "Alarm level can't be below 1 or above 5!");
    if(level > VehicleInfo[vehicle][carAlarm]+1) return SCM(playerid, COLOR_LIGHTRED, "You must buy the alarm in the right order.");
    if(VehicleInfo[vehicle][carAlarm] >= level)
    {
      format(msg, sizeof(msg), "You already own a alarm level %d or more !", level);
      SCM(playerid, COLOR_LIGHTRED, msg);
      return 1;
    }
    new alarmcost;
    if(level == 1)
    alarmcost = 2000;
    if(level == 2)
    alarmcost = 4000;
    if(level == 3)
    alarmcost = 6000;
    if(level == 4)
    alarmcost = 8000;
    if(level == 5)
    alarmcost = 10000;
    if(GetCash(playerid) < alarmcost) return NoCashMSG(playerid);
    format(msg, sizeof(msg), "You have succefully bought alarm level %d.", level);
    SCM(playerid, COLOR_INFO, msg);
    GiveCash(playerid, -alarmcost);
    VehicleInfo[vehicle][carAlarm] = level;
    format(query, sizeof(query), "UPDATE `ownedvehicles` SET `alarm` = %d WHERE `owner` = '%s' AND `slot` = %d", level, GetName(playerid), PlayerInfo[playerid][pVehSlot]);
    mysql_function_query(dbHandle, query, false, "", "");
    UpdateVehicleStatus(playerid, vehicle);
    return 1;
  }
  if(!strcmp(option, "buyimmob", true))
  {
    new vehicle = GetPlayerVehicleID(playerid);
    if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "You don't have a spawned vehicle.");
    if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
    if(!PlayerOwnVehicle(playerid, vehicle)) return SCM(playerid, -1, "You don't own this vehicle.");
    new dealerid = GetClosestDealerShip(playerid);
    new level;
    if(dealerid == -1) return SCM(playerid, COLOR_FADE2, "Not near any car dealerships.");
    if(sscanf(params, "{s[64]}d", level))
    {
      SyntaxMSG(playerid, "/v buyimmob [level]");
      SCM(playerid, COLOR_INFO, "Level-1: $900");
      SCM(playerid, COLOR_INFO, "Level-2: $1800");
      SCM(playerid, COLOR_INFO, "Level-3: $2700");
      SCM(playerid, COLOR_INFO, "Level-4: $3600");
      SCM(playerid, COLOR_INFO, "Level-5: $4500");
        return 1;
    }
    if(level < 1 || level > 5) return SCM(playerid, COLOR_INFO, "Immob level can't be below 1 or above 5 !");
    if(level > VehicleInfo[vehicle][carImmob]+1) return SCM(playerid, COLOR_LIGHTRED, "You must buy the immob in the right order.");
    if(VehicleInfo[vehicle][carImmob] >= level)
    {
      format(msg, sizeof(msg), "You already own a immob level %d or more !", level);
      SCM(playerid, COLOR_LIGHTRED, msg);
      return 1;
    }
    new immobcost;
    if(level == 1)
    immobcost = 900;
    if(level == 2)
    immobcost = 1800;
    if(level == 3)
    immobcost = 2700;
    if(level == 4)
    immobcost = 3600;
    if(level == 5)
    immobcost = 4500;
    if(GetCash(playerid) < immobcost) return NoCashMSG(playerid);
    format(msg, sizeof(msg), "You have succefully bought immob level %d.", level);
    SCM(playerid, COLOR_INFO, msg);
    GiveCash(playerid, -immobcost);
    VehicleInfo[vehicle][carImmob] = level;
    format(query, sizeof(query), "UPDATE `ownedvehicles` SET `immob` = %d WHERE `owner` = '%s' AND `slot` = %d", level, GetName(playerid), PlayerInfo[playerid][pVehSlot]);
    mysql_function_query(dbHandle, query, false, "", "");
    UpdateVehicleStatus(playerid, vehicle);
    return 1;
  }
	if(!strcmp(option, "duplicatekey", true))
	{
		new vehicle = GetPlayerVehicleID(playerid);
		if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "You don't have a spawned vehicle.");
		if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
		if(!PlayerOwnVehicle(playerid, vehicle)) return SCM(playerid, -1, "You don't own this vehicle.");
		new id;
		if(sscanf(params, "{s[64]}d", id)) return SyntaxMSG(playerid, "/v duplicatekey [playerid]");
		if(id == playerid) return ErrorMsg(playerid, "You may not duplicate a key to yourself.");
		if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
		if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
		if(GetCash(playerid) < 2000) return SCM(playerid, COLOR_LIGHTRED, "Duplicating key costs $2,000.");
		if(PlayerInfo[id][pSpareKey] != 0) return SCM(playerid, COLOR_INFO, "This player has another key, '/dropkey'");
		format(msg, sizeof(msg), "%s has given you a duplicated vehicle key to his vehicle.", GetNameWithMask(playerid));
		SCM(id, COLOR_INFO, msg);
		format(msg, sizeof(msg), "You have given %s a duplicated vehicle key to your vehicle.", GetNameWithMask(id));
		SCM(playerid, COLOR_INFO, msg);
		PlayerInfo[id][pSpareKey] = VehicleInfo[vehicle][carDupKey];
		GiveCash(playerid, -2000);
		return 1;
	}
	if(!strcmp(option, "sell", true))
	{
		new vehicle = GetPlayerVehicleID(playerid), id, price;
		if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "You don't have a spawned vehicle.");
		if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
		if(!PlayerOwnVehicle(playerid, vehicle)) return SCM(playerid, -1, "You don't own this vehicle.");
		if(sscanf(params, "{s[64]}ud", id, price)) return SyntaxMSG(playerid, "/v sell [playerid/PartOfName] [price]");
		if(IsADonateCar(vehicle)) return SCM(playerid, COLOR_INFO, "You may not sell donating vehicles.");
		if(id == playerid) return ErrorMsg(playerid, "You may not sell the vehicle to yourself.");
		if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
		if(PlayerInfo[id][pCarKey] != 0) return SCM(playerid, COLOR_GRAD2, "That player has already spawned a car.");
		if(GetOwnedVehicles(id) == 3) return SCM(playerid, COLOR_GRAD2, "That player has already three owned vehicles.");
		if(price < 0) return ErrorMsg(playerid, "Invalid price.");
		format(msg, sizeof(msg), "%s offers you his %s for $%d, use '/v accept' or '/v refuse'.", GetNameWithMask(playerid), VehicleNames[GetVehicleModel(vehicle)-400], price);
		ShowJobMessage(id, msg);
		format(msg, sizeof(msg), "%s, Alarm[%d], Lock[%d], Immobilizer[%d], GPS[%d], Insurances[%d], Times destroyed[%d], Insurance price[%d]",
		VehicleNames[GetVehicleModel(vehicle)-400],
		VehicleInfo[vehicle][carAlarm],
		VehicleInfo[vehicle][carLock],
		VehicleInfo[vehicle][carImmob],
		VehicleInfo[vehicle][carGps],
		VehicleInfo[vehicle][carInsurances],
		VehicleInfo[vehicle][carDestroyed],
		GetInsurancePrice(vehicle));
		SCM(id, COLOR_YELLOWG, msg);
		format(msg, sizeof(msg), "You offered %s to %s for $%d.", VehicleNames[GetVehicleModel(vehicle)-400], GetNameWithMask(id), price);
		SCM(playerid, COLOR_GREEN, msg);
		pToAccept[id] = playerid;
		vToAccept[id] = vehicle;
		prToAccept[id] = price;
		return 1;
	}
	if(!strcmp(option, "refuse", true))
	{
		if(pToAccept[playerid] == INVALID_PLAYER_ID) return SCM(playerid, COLOR_LIGHTRED, "You haven't anything to accept");
		format(msg, sizeof(msg), "You refused the %s of %s.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], GetNameWithMask(vToAccept[playerid]));
	   	SCM(playerid, COLOR_LIGHTRED, msg);
	   	format(msg, sizeof(msg), "%s has refused your %s.", GetNameWithMask(playerid), VehicleNames[GetVehicleModel(vToAccept[playerid])-400]);
	   	SCM(pToAccept[playerid], COLOR_LIGHTRED, msg);
	   	pToAccept[playerid] = INVALID_PLAYER_ID; vToAccept[playerid] = INVALID_VEHICLE_ID; prToAccept[playerid] = 0;
	   	return 1;
	}
	if(!strcmp(option, "accept", true))
	{
		if(pToAccept[playerid] == INVALID_PLAYER_ID) return SCM(playerid, COLOR_LIGHTRED, "You haven't anything to accept");
		if(GetCash(playerid) >= prToAccept[playerid])
		{
			format(msg, sizeof(msg), "You accepted the %s of %s for $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], GetNameWithMask(pToAccept[playerid]), prToAccept[playerid]);
			SCM(playerid, COLOR_GREEN, msg);
			format(msg, sizeof(msg), "%s has accepted your %s for $%d.", GetNameWithMask(playerid), VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
			SCM(pToAccept[playerid], COLOR_GREEN, msg);
			GiveCash(pToAccept[playerid], prToAccept[playerid]);
			GiveCash(playerid, -prToAccept[playerid]);
			PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
			PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
			format(VehicleInfo[PlayerInfo[playerid][pCarKey]][carPlate], 128, "%s%d", FirstNameLetters(GetName(playerid)), randomEx(10000, 99999));
			format(VehicleInfo[PlayerInfo[playerid][pCarKey]][carOwner], 128, "%s", GetName(playerid));

			PlayerInfo[playerid][pVehicles]++;
			PlayerInfo[pToAccept[playerid]][pVehicles]--;
			format(query, sizeof(query), "UPDATE `users` SET `vehicles` = %d WHERE `name` = '%s'", PlayerInfo[playerid][pVehicles], GetName(playerid));
			mysql_function_query(dbHandle, query, false, "", "");
			format(query, sizeof(query), "UPDATE `users` SET `vehicles` = %d WHERE `name` = '%s'", PlayerInfo[pToAccept[playerid]][pVehicles], GetName(pToAccept[playerid]));
			mysql_function_query(dbHandle, query, false, "", "");

			if(CompareStrings(PlayerVehicle[playerid][pVeh1], "None"))
			{
				format(query, sizeof(query), "UPDATE `ownedvehicles` SET `owner` = '%s', `plate` = '%s', `slot` = %d WHERE `owner` = '%s' AND `id` = %d",
				VehicleInfo[PlayerInfo[playerid][pCarKey]][carOwner], VehicleInfo[PlayerInfo[playerid][pCarKey]][carPlate], 1, GetName(pToAccept[playerid]), VehicleInfo[vToAccept[playerid]][carID]);
				mysql_function_query(dbHandle, query, false, "", "");
				format(PlayerVehicle[playerid][pVeh1], 128, "%s", VehicleNames[GetVehicleModel(vToAccept[playerid])-400]);
				format(query, sizeof(query), "UPDATE `users` SET `veh1` = '%s' WHERE `name` = '%s'", PlayerVehicle[playerid][pVeh1], GetName(playerid));
				mysql_function_query(dbHandle, query, false, "", "");
			}
			else if(CompareStrings(PlayerVehicle[playerid][pVeh2], "None"))
			{
				format(query, sizeof(query), "UPDATE `ownedvehicles` SET `owner` = '%s', `plate` = '%s', `slot` = %d WHERE `owner` = '%s' AND `id` = %d",
				VehicleInfo[PlayerInfo[playerid][pCarKey]][carOwner], VehicleInfo[PlayerInfo[playerid][pCarKey]][carPlate], 2, GetName(pToAccept[playerid]), VehicleInfo[vToAccept[playerid]][carID]);
				mysql_function_query(dbHandle, query, false, "", "");
				format(PlayerVehicle[playerid][pVeh2], 128, "%s", VehicleNames[GetVehicleModel(vToAccept[playerid])-400]);
				format(query, sizeof(query), "UPDATE `users` SET `veh2` = '%s' WHERE `name` = '%s'", PlayerVehicle[playerid][pVeh2], GetName(playerid));
				mysql_function_query(dbHandle, query, false, "", "");
			}
			else if(CompareStrings(PlayerVehicle[playerid][pVeh3], "None"))
			{
				format(query, sizeof(query), "UPDATE `ownedvehicles` SET `owner` = '%s', `plate` = '%s', `slot` = %d WHERE `owner` = '%s' AND `id` = %d",
				VehicleInfo[PlayerInfo[playerid][pCarKey]][carOwner], VehicleInfo[PlayerInfo[playerid][pCarKey]][carPlate], 3, GetName(pToAccept[playerid]), VehicleInfo[vToAccept[playerid]][carID]);
				mysql_function_query(dbHandle, query, false, "", "");
				format(PlayerVehicle[playerid][pVeh3], 128, "%s", VehicleNames[GetVehicleModel(vToAccept[playerid])-400]);
				format(query, sizeof(query), "UPDATE `users` SET `veh3` = '%s' WHERE `name` = '%s'", PlayerVehicle[playerid][pVeh3], GetName(playerid));
				mysql_function_query(dbHandle, query, false, "", "");
			}

			if(PlayerInfo[pToAccept[playerid]][pVehSlot] == 1)
			{
				strmid(PlayerVehicle[pToAccept[playerid]][pVeh1], "None", 0, strlen("None"), 255);
				format(query, sizeof(query), "UPDATE `users` SET `veh1` = '%s' WHERE `name` = '%s'", "None", GetName(pToAccept[playerid]));
				mysql_function_query(dbHandle, query, false, "", "");
				if(!CompareStrings(PlayerVehicle[pToAccept[playerid]][pVeh2], "None"))
				{
					format(query, sizeof(query), "UPDATE `ownedvehicles` SET `slot` = %d WHERE `owner` = '%s' AND `slot` = %d", 1, GetName(pToAccept[playerid]), 2);
					mysql_function_query(dbHandle, query, false, "", "");
					format(PlayerVehicle[pToAccept[playerid]][pVeh1], 128, "%s", PlayerVehicle[pToAccept[playerid]][pVeh2]);
					format(PlayerVehicle[pToAccept[playerid]][pVeh2], 128, "None");
					format(query, sizeof(query), "UPDATE `users` SET `veh1` = '%s', `veh2` = '%s' WHERE `name` = '%s'", PlayerVehicle[pToAccept[playerid]][pVeh1], "None", GetName(pToAccept[playerid]));
					mysql_function_query(dbHandle, query, false, "", "");
				}
				if(!CompareStrings(PlayerVehicle[pToAccept[playerid]][pVeh3], "None"))
				{
					format(query, sizeof(query), "UPDATE `ownedvehicles` SET `slot` = %d WHERE `owner` = '%s' AND `slot` = %d", 2, GetName(pToAccept[playerid]), 3);
					mysql_function_query(dbHandle, query, false, "", "");
					format(PlayerVehicle[pToAccept[playerid]][pVeh2], 128, "%s", PlayerVehicle[pToAccept[playerid]][pVeh3]);
					format(PlayerVehicle[pToAccept[playerid]][pVeh3], 128, "None");
					format(query, sizeof(query), "UPDATE `users` SET `veh2` = '%s', `veh3` = '%s' WHERE `name` = '%s'", PlayerVehicle[pToAccept[playerid]][pVeh2], "None", GetName(pToAccept[playerid]));
					mysql_function_query(dbHandle, query, false, "", "");
				}
			}
			else if(PlayerInfo[pToAccept[playerid]][pVehSlot] == 2)
			{
				if(!CompareStrings(PlayerVehicle[pToAccept[playerid]][pVeh3], "None"))
				{
					format(query, sizeof(query), "UPDATE `ownedvehicles` SET `slot` = %d WHERE `owner` = '%s' AND `slot` = %d", 2, GetName(pToAccept[playerid]), 3);
					mysql_function_query(dbHandle, query, false, "", "");
					format(PlayerVehicle[pToAccept[playerid]][pVeh2], 128, "%s", PlayerVehicle[pToAccept[playerid]][pVeh3]);
					format(PlayerVehicle[pToAccept[playerid]][pVeh3], 128, "None");
					format(query, sizeof(query), "UPDATE `users` SET `veh2` = '%s', `veh3` = '%s' WHERE `name` = '%s'", PlayerVehicle[pToAccept[playerid]][pVeh2], "None", GetName(pToAccept[playerid]));
					mysql_function_query(dbHandle, query, false, "", "");
				}
				else
				{
					strmid(PlayerVehicle[pToAccept[playerid]][pVeh2], "None", 0, strlen("None"), 255);
					format(query, sizeof(query), "UPDATE `users` SET `veh2` = '%s' WHERE `name` = '%s'", "None", GetName(pToAccept[playerid]));
					mysql_function_query(dbHandle, query, false, "", "");
				}
			}
			else if(PlayerInfo[pToAccept[playerid]][pVehSlot] == 3)
			{
				strmid(PlayerVehicle[pToAccept[playerid]][pVeh3], "None", 0, strlen("None"), 255);
				format(query, sizeof(query), "UPDATE `users` SET `veh3` = '%s' WHERE `name` = '%s'", "None", GetName(pToAccept[playerid]));
				mysql_function_query(dbHandle, query, false, "", "");
			}
			CheckOwnedVehicles(playerid);
			CheckOwnedVehicles(pToAccept[playerid]);
			pToAccept[playerid] = INVALID_PLAYER_ID; vToAccept[playerid] = INVALID_VEHICLE_ID; prToAccept[playerid] = 0;
 		}
		else
		{
			SCM(playerid, COLOR_LIGHTRED, "You do not have enough money for that.");
			SCM(pToAccept[playerid], COLOR_LIGHTRED, "You're vehicle cannot be sold because that player does not have enough money.");
			pToAccept[playerid] = INVALID_PLAYER_ID; vToAccept[playerid] = INVALID_VEHICLE_ID; prToAccept[playerid] = 0;
		}
		return 1;
	}
	if(!strcmp(option, "lights", true))
	{
		if(!IsDriver(playerid)) return NotInCarMSG(playerid);
		new vehicleid = GetPlayerVehicleID(playerid);
		new param[7];
		GetVehicleParamsEx(vehicleid,param[0],param[1],param[2],param[3],param[4],param[5],param[6]);
		if(param[1])
		{
			SetVehicleParamsEx(vehicleid,param[0],0,param[2],param[3],param[4],param[5],param[6]);
			return 1;
		}
		else
		{
			SetVehicleParamsEx(vehicleid,param[0],1,param[2],param[3],param[4],param[5],param[6]);
			return 1;
		}
	}
	if(!strcmp(option, "buygps", true))
	{
		new vehicle = GetPlayerVehicleID(playerid);
		if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "You don't have a spawned vehicle.");
		if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
		if(!PlayerOwnVehicle(playerid, vehicle)) return SCM(playerid, -1, "You don't own this vehicle.");
		new dealerid = GetClosestDealerShip(playerid);
		if(dealerid == -1) return SCM(playerid, COLOR_FADE2, "Not near any car dealerships.");
		if(VehicleInfo[vehicle][carGps] == 1) return SCM(playerid, COLOR_LIGHTRED, "Your vehicle has a GPS already.");
		if(GetCash(playerid) < 3500) return SCM(playerid, COLOR_INFO, "GPS costs $3,500.");
		SCM(playerid, COLOR_INFO, "You have succefully bought a GPS for $3,500.");
		GiveCash(playerid, -3500);
		VehicleInfo[vehicle][carGps] = 1;
		format(query, sizeof(query), "UPDATE `ownedvehicles` SET `gps` = %d WHERE `owner` = '%s' AND `slot` = %d", 1, GetName(playerid), PlayerInfo[playerid][pVehSlot]);
		mysql_function_query(dbHandle, query, false, "", "");
		UpdateVehicleStatus(playerid, vehicle);
		return 1;
	}
	if(!strcmp(option, "buyinsurance", true))
	{
		new vehicle = GetPlayerVehicleID(playerid);
		if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "You don't have a spawned vehicle.");
		if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
		if(!PlayerOwnVehicle(playerid, vehicle)) return SCM(playerid, -1, "You don't own this vehicle.");
		new dealerid = GetClosestDealerShip(playerid);
		if(dealerid == -1) return SCM(playerid, COLOR_FADE2, "Not near any car dealerships.");
		if(VehicleInfo[vehicle][carInsurances] >= 5) return SCM(playerid, COLOR_INFO, "You already have 5 insurances on this vehicle.");
		new price = GetInsurancePrice(vehicle);
		if(GetCash(playerid) < price) NoCashMSG(playerid);
		GiveCash(playerid, -price);
		VehicleInfo[vehicle][carInsurances] += 1;
		format(msg, sizeof(msg), "You have succefully bought an insurance for $%d.", price);
		SCM(playerid, COLOR_GREEN, msg);
		format(query, sizeof(query), "UPDATE `ownedvehicles` SET `insurances` = %d WHERE `owner` = '%s' AND `slot` = %d", VehicleInfo[vehicle][carInsurances], GetName(playerid), PlayerInfo[playerid][pVehSlot]);
		mysql_function_query(dbHandle, query, false, "", "");
		UpdateVehicleStatus(playerid, vehicle);
		return 1;
	}
	if(!strcmp(option, "color", true))
	{
		new vehicle = GetPlayerVehicleID(playerid);
		new color1, color2;
		if(GetCash(playerid) < 350) return SCM(playerid, COLOR_INFO, "Change color costs $350.");
		if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "You don't have a spawned vehicle.");
		if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
		if(!PlayerOwnVehicle(playerid, vehicle)) return SCM(playerid, -1, "You don't own this vehicle.");
		new dealerid = GetClosestDealerShip(playerid);
		if(dealerid == -1) return SCM(playerid, COLOR_FADE2, "Not near any car dealerships.");
		if(sscanf(params, "{s[64]}dd", color1, color2)) return SyntaxMSG(playerid, "/v colour [color 1] [color 2]");
		if(color2 < 0 || color2 > 255 || color1 < 0 || color1 > 255) return SCM(playerid, COLOR_LIGHTRED, "Invalid color ID, (0-255)!");
		VehColor1{playerid} = color1;
		VehColor2{playerid} = color2;
		Painting{playerid} = 12;
		return 1;
	}
	if(!strcmp(option, "lock", true))
	{
		if(PlayerNearVehicle(3.0, playerid, PlayerInfo[playerid][pCarKey]))
		{
			if(vLocked{PlayerInfo[playerid][pCarKey]})
			{
				PlaySound(playerid, 1145);
				ToggleVehicleLock(PlayerInfo[playerid][pCarKey], false);
				ToggleVehicleLockForPlayer(playerid, PlayerInfo[playerid][pCarKey], false);
				format(msg, sizeof(msg), "~w~%s UNLOCKED", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400]);
				GameTextForPlayer(playerid, msg, 2000, 4);
				return 1;
			}
			else
			{
				PlaySound(playerid, 1145);
				ToggleVehicleLock(PlayerInfo[playerid][pCarKey], true);
				ToggleVehicleLockForPlayer(playerid, PlayerInfo[playerid][pCarKey], true);
				format(msg, sizeof(msg), "~w~%s LOCKED", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400]);
				GameTextForPlayer(playerid, msg, 2000, 4);
				return 1;
			}
		}
		return 1;
	}
	if(!strcmp(option, "find", true))
	{
		if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey])) return ErrorMsg(playerid, "You don't have a spawned vehicle.");
		if(!VehicleEmpty(PlayerInfo[playerid][pCarKey])) return SCM(playerid, COLOR_GREY, "Somebody is inside your vehicle, cannot find it then.");
		if(VehicleInfo[PlayerInfo[playerid][pCarKey]][carGps] == 0) return SCM(playerid, COLOR_GREY, "Your car does not have a GPS installed.");
		new Float:x, Float:y, Float:z;
		GetVehiclePos(PlayerInfo[playerid][pCarKey], x, y, z);
		new vZone[MAX_ZONE_NAME];
		GetVehicleZone(PlayerInfo[playerid][pCarKey], vZone, MAX_ZONE_NAME);
		format(msg, sizeof(msg), "[GPS] Your %s was located in %s.", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400], vZone);
		SCM(playerid, COLOR_WHITE, msg);
		SetCheckPoint(playerid, FINEVEH, x, y, z, 6.0);
		return 1;
	}
	if(!strcmp(option, "info", true))
	{
		new veh = PlayerInfo[playerid][pCarKey];
		if(!IsVehicleSpawned(veh)) return ErrorMsg(playerid, "You don't have a spawned vehicle.");
		if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
		if(!PlayerOwnVehicle(playerid, GetPlayerVehicleID(playerid))) return SCM(playerid, -1, "You don't own this vehicle.");
		/*format(msg, sizeof(msg), "%s, Alarma[%d], Incuietoare[%d], Immobilizer[%d], GPS[%d], Asigurari[%d], Distrus[%d], Puncte asigurari[$%d]", VehicleNames[GetVehicleModel(veh)-400],
		VehicleInfo[veh][carAlarm], VehicleInfo[veh][carLock], VehicleInfo[veh][carImmob], VehicleInfo[veh][carGps], VehicleInfo[veh][carInsurances], VehicleInfo[veh][carDestroyed],
		GetInsurancePrice(veh));*/
	    format(msg, sizeof(msg), "Life Span: Engine Life[%d], Battery Life[%d]",
	    VehicleInfo[veh][carEngineLife], VehicleInfo[veh][carBatteryLife]);
		  SCM(playerid, COLOR_WHITE, msg);
	    format(msg, sizeof(msg), "Security: Lock[%d], Alarm[%d], Immobiliser[%d], Insurance[%d]",
	    VehicleInfo[veh][carLock], VehicleInfo[veh][carAlarm], VehicleInfo[veh][carImmob], VehicleInfo[veh][carInsurances]);
	    SCM(playerid, COLOR_WHITE, msg);
	    format(msg, sizeof(msg), "Misc: Primary Color[#%d], Secondary Color[#%d], License Plate[%s{FFFFFF}]",
	    VehicleInfo[veh][carColor1], VehicleInfo[veh][carColor2], VehicleInfo[veh][carPlate]);
	    SCM(playerid, COLOR_WHITE, msg);
		return 1;
	}
	if(!strcmp(option, "scrap", true))
	{
		new veh = PlayerInfo[playerid][pCarKey];
		if(!IsVehicleSpawned(veh)) return ErrorMsg(playerid, "You don't have a spawned vehicle.");
		if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
		if(!PlayerOwnVehicle(playerid, GetPlayerVehicleID(playerid))) return SCM(playerid, -1, "You don't own this vehicle.");
		VehicleInfo[veh][carOwnerSlot] = 0;
		VehicleInfo[veh][carOwned] = 0;
		PlayerInfo[playerid][pCarKey] = 0;
		PlayerInfo[playerid][pVehicles]--;
		StopCarBoomBox(veh);
		format(msg, sizeof(msg), "You gave you %s to car scrap, and you received $%d from it.", VehicleNames[VehicleInfo[veh][carModel]-400], GetVehiclePrice(VehicleInfo[veh][carModel])/2);
		SCM(playerid,COLOR_WHITE, msg);
		GiveCash(playerid,  GetVehiclePrice(VehicleInfo[veh][carModel])/2);
		DestoryCar(veh);
		format(query, sizeof(query), "DELETE FROM `ownedvehicles` WHERE `owner` = '%s' AND `slot` = %d", GetName(playerid), PlayerInfo[playerid][pVehSlot]);
		mysql_function_query(dbHandle, query, false, "", "");
		format(query, sizeof(query), "UPDATE `users` SET `vehicles` = %d WHERE `name` = '%s'", PlayerInfo[playerid][pVehicles], GetName(playerid));
		mysql_function_query(dbHandle, query, false, "", "");
		if(PlayerInfo[playerid][pVehSlot] == 1)
		{
			strmid(PlayerVehicle[playerid][pVeh1], "None", 0, strlen("None"), 255);
			format(query, sizeof(query), "UPDATE `users` SET `veh1` = '%s' WHERE `name` = '%s'", "None", GetName(playerid));
			mysql_function_query(dbHandle, query, false, "", "");
			if(!CompareStrings(PlayerVehicle[playerid][pVeh2], "None"))
			{
				format(query, sizeof(query), "UPDATE `ownedvehicles` SET `slot` = %d WHERE `owner` = '%s' AND `slot` = %d", 1, GetName(playerid), 2);
				mysql_function_query(dbHandle, query, false, "", "");
				format(PlayerVehicle[playerid][pVeh1], 128, "%s", PlayerVehicle[playerid][pVeh2]);
				format(PlayerVehicle[playerid][pVeh2], 128, "None");
				format(query, sizeof(query), "UPDATE `users` SET `veh1` = '%s', `veh2` = '%s' WHERE `name` = '%s'", PlayerVehicle[playerid][pVeh1], "None", GetName(playerid));
				mysql_function_query(dbHandle, query, false, "", "");
			}
			if(!CompareStrings(PlayerVehicle[playerid][pVeh3], "None"))
			{
				format(query, sizeof(query), "UPDATE `ownedvehicles` SET `slot` = %d WHERE `owner` = '%s' AND `slot` = %d", 2, GetName(playerid), 3);
				mysql_function_query(dbHandle, query, false, "", "");
				format(PlayerVehicle[playerid][pVeh2], 128, "%s", PlayerVehicle[playerid][pVeh3]);
				format(PlayerVehicle[playerid][pVeh3], 128, "None");
				format(query, sizeof(query), "UPDATE `users` SET `veh2` = '%s', `veh3` = '%s' WHERE `name` = '%s'", PlayerVehicle[playerid][pVeh2], "None", GetName(playerid));
				mysql_function_query(dbHandle, query, false, "", "");
			}
		}
		else if(PlayerInfo[playerid][pVehSlot] == 2)
		{
			if(!CompareStrings(PlayerVehicle[playerid][pVeh3], "None"))
			{
				format(query, sizeof(query), "UPDATE `ownedvehicles` SET `slot` = %d WHERE `owner` = '%s' AND `slot` = %d", 2, GetName(playerid), 3);
				mysql_function_query(dbHandle, query, false, "", "");
				format(PlayerVehicle[playerid][pVeh2], 128, "%s", PlayerVehicle[playerid][pVeh3]);
				format(PlayerVehicle[playerid][pVeh3], 128, "None");
				format(query, sizeof(query), "UPDATE `users` SET `veh2` = '%s', `veh3` = '%s' WHERE `name` = '%s'", PlayerVehicle[playerid][pVeh2], "None", GetName(playerid));
				mysql_function_query(dbHandle, query, false, "", "");
			}
			else
			{
				strmid(PlayerVehicle[playerid][pVeh2], "None", 0, strlen("None"), 255);
				format(query, sizeof(query), "UPDATE `users` SET `veh2` = '%s' WHERE `name` = '%s'", "None", GetName(playerid));
				mysql_function_query(dbHandle, query, false, "", "");
			}
		}
		else if(PlayerInfo[playerid][pVehSlot] == 3)
		{
			strmid(PlayerVehicle[playerid][pVeh3], "None", 0, strlen("None"), 255);
			format(query, sizeof(query), "UPDATE `users` SET `veh3` = '%s' WHERE `name` = '%s'", "None", GetName(playerid));
			mysql_function_query(dbHandle, query, false, "", "");
		}
		PlayerInfo[playerid][pVehSlot] = 0;
		CheckOwnedVehicles(playerid);
		return 1;
	}
	return 1;
}

CMD:parkmeter(playerid, params[])
{
	new parkid = GetClosestParkMeter(playerid), minutes;
	if(sscanf(params,"d",minutes)) return SyntaxMSG(playerid, "/parkmeter [minutes] (Each minute costs $10)");
	if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
	if(parkid == -1) return InfoMSG(playerid, "~y~You're not near a Park Meter.", 5);
	if(minutes < 0 || minutes > 60) return SCM(playerid, COLOR_INFO, "You can get a park meter from 1 to 60 minutes (1-60)");
	if(minutes + ParkMeters[parkid][parkMinutes] > 60) return SCM(playerid, COLOR_LIGHTRED, "You can't go over 60 minutes, it's the maximum for per park meter.");
	if(GetCash(playerid) < minutes * 10) return NoCashMSG(playerid);
	format(msg, sizeof(msg), "~b~You bought ~g~%d~b~ minute for ~g~$%d~b~, have a good day.", minutes, minutes * 10);
	InfoMSG(playerid, msg, 5);
	GiveCash(playerid, -minutes * 10);
	ParkMeters[parkid][parkMinutes] += minutes;
	format(msg, sizeof(msg), ""EMBED_CYAN"%d minute", ParkMeters[parkid][parkMinutes]);
	UpdateDynamic3DTextLabelText(Text3D:ParkMeters[parkid][parkLabel], -1, msg);
	return 1;
}

CMD:stop(playerid, params[])
{
	if(PlayerIsWounded(playerid)) return 1;
	if(GetIntVar(playerid, "BrowsingSkins") == 1)
	{
		PutPlayer(playerid, 207.576, -100.983, 1005.26);
		SetCameraBehindPlayer(playerid);
		SetWorld(playerid, 0);
		UnFreezePlayer(playerid);
		ServerMSG(playerid, "You have bought stopped browsing skins.");
		SetSkin(playerid, GetSkin(playerid));
		RemoveVar(playerid, "BrowsingSkins");
		RemoveVar(playerid, "SkinBuying");
		SkinSlot[playerid] = 0;
		HideTextDraw(playerid, ClothesText);
	}
	if(JackingEngine[playerid] != 0)
	{
		JackingEngine[playerid] = 0;
		SCM(playerid, COLOR_YELLOWG, "You have stopped jacking the engine.");
		UnFreezePlayer(playerid);
	}
	if(JackingLock[playerid] != 0)
	{
		JackingLock[playerid] = 0;
		SCM(playerid, COLOR_YELLOWG, "You have stopped jacking the lock.");
		DoorJacking[playerid] = 0;
		UnFreezePlayer(playerid);
	}
	if(PickingTime{playerid} != 0)
	{
		SCM(playerid, COLOR_YELLOWG, "You have stopped picking up the plant.");
		UnFreezePlayer(playerid);
		StopPlayerAnims(playerid);
		PickingTime{playerid} = 0;
	}
	if(PlantingTime{playerid} != 0)
	{
		SCM(playerid, COLOR_YELLOWG, "You have stopped planting the plant.");
		UnFreezePlayer(playerid);
		StopPlayerAnims(playerid);
		PlantingTime{playerid} = 0;
	}
	return 1;
}

CMD:smoke(playerid, params[])
{
	if(IsSmoking{playerid}) return SCM(playerid, COLOR_GREY, "You are already smoking.");
	if(Cuffed{playerid}) return SCM(playerid, COLOR_YELLOWG,"You are cuffed");
	if(PlayerInfo[playerid][pLighter] == 0) return SCM(playerid, COLOR_GREY, "You don't have a lighter to light up your cigarette!");
	if(PlayerInfo[playerid][pCigars] == 0) return SCM(playerid, COLOR_GREY, "You don't have a cigarette to smoke!");
	PlayerInfo[playerid][pLighter] -= 1;
	PlayerInfo[playerid][pCigars] -= 1;
	if(PlayerInfo[playerid][pSex] == 1)
		ActionMessage(playerid,15.0,"pull out a lighter and a cigarette cases to a Kindle.");
	else
		ActionMessage(playerid,15.0,"pull out a lighter and a cigarette cases to a Kindle.");
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
	SCM(playerid, COLOR_WHITE, "HINT: You can use /dropsmoke when you are done.");
	IsSmoking{playerid} = true;
	return 1;
}

CMD:dropsmoke(playerid, params[])
{
	if(!IsSmoking{playerid}) return SCM(playerid, COLOR_GREY, "You are not smoking.");
	if(Cuffed{playerid}) return SCM(playerid, COLOR_YELLOWG,"You are cuffed");
	if(PlayerInfo[playerid][pSex] == 1)
		ActionMessage(playerid,15.0,"removing the cigarette from his mouth followed by a blow on the bottom and it's a doozer.");
	else
		ActionMessage(playerid,15.0,"removing the cigarette from his mouth followed by a blow on the bottom and it's a doozer.");
	StopPlayerAnims(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	IsSmoking{playerid} = false;
	return 1;
}

CMD:bizinfo(playerid, params[])
{
	new key = PlayerInfo[playerid][pBizKey];
	if(OwnBusiness(playerid))
	{
		if(BizEntered[playerid] == key)
		{
			format(msg, sizeof(msg), "Business Name: %s - Business Type: %s - Locked: %d", BizInfo[key][bizName], BizInfo[key][bizInfo],  BizInfo[key][bizLocked]);
			SCM(playerid, COLOR_GRAD2, msg);
			format(msg, sizeof(msg), "CashBox: $%d - Entrance Fee: $%d", BizInfo[key][bizCash], BizInfo[key][bizEntrance]);
			SCM(playerid, COLOR_GRAD2, msg);
		}
		else return SCM(playerid, COLOR_LIGHTRED, "You must be inside your business.");
	}
	else return SCM(playerid, COLOR_LIGHTRED, "You don't own a business.");
	return 1;
}

CMD:bizfee(playerid, params[])
{
	new fee;
	new key = PlayerInfo[playerid][pBizKey];
	if(sscanf(params,"d",fee)) return SyntaxMSG(playerid, "/bizfee [fee(1-1000)]");
	if(OwnBusiness(playerid))
	{
		if(fee < 0 || fee > 1000) return SCM(playerid, COLOR_LIGHTRED, "The price should be between $1-$1000.");
		format(msg, sizeof(msg), "The price of entry to this business is: $%d", fee);
		SCM(playerid, COLOR_WHITE, msg);
		BizInfo[key][bizEntrance] = fee;
		UpdateBizInfo(key);
	}
	else return SCM(playerid, COLOR_LIGHTRED, "NYou don't own a business.");
	return 1;
}

CMD:bizname(playerid, params[])
{
	new name[30];
	new key = PlayerInfo[playerid][pBizKey];
	if(sscanf(params,"s[30]",name))
	{
		SyntaxMSG(playerid, "/bizname [name] (Max characters: 30)");
		SCM(playerid, COLOR_INFO, "Colors: ~b~ = {0000FF}blue{FFFFFF}, ~r~ = {FF0000}red{FFFFFF}, ~y~ = {FFFF00}yellow{FFFFFF}.");
		SCM(playerid, COLOR_INFO, "Colors: ~g~ = {808000}green{FFFFFF}, ~w~ = {FFFFFF}white{FFFFFF}, ~p~ = {004080}purple{FFFFFF}, ~h~ = lighter color.");
		return 1;
	}
	if(OwnBusiness(playerid))
	{
		if(NearBusiness(playerid))
		{
			if(strlen(name) > 30) return SCM(playerid, COLOR_LIGHTRED, "Business name must contain only 1-30 characters.");
			format(msg, sizeof(msg), "You have set your business name to: %s", name);
			SCM(playerid, COLOR_WHITE, msg);
			format(BizInfo[key][bizName], 128, "%s", name);
			UpdateBizInfo(key);
		}
	}
	else return SCM(playerid, COLOR_LIGHTRED, "You don't own a business.");
	return 1;
}

CMD:bizdeposit(playerid, params[])
{
	new amount;
	new key = PlayerInfo[playerid][pBizKey];
	if(sscanf(params,"d",amount))
	{
		SyntaxMSG(playerid, "/bizdeposit [amount]");
		format(msg, sizeof(msg), "You've got $%d, in your cashbox.", BizInfo[key][bizCash]);
		SCM(playerid, COLOR_WHITE, msg);
		return 1;
	}
	if(OwnBusiness(playerid) || PlayerInfo[playerid][pWorkOn] != -1)
	{
		if(InBusiness(playerid))
		{
			if(GetCash(playerid) < amount) return NoCashMSG(playerid);
			if(BizInfo[key][bizCash] >= 5000000) return SCM(playerid, COLOR_INFO, "The amount you entered exceeds the $5,000,000 business limit.");
			ActionMessage(playerid, 15.0, "opens the business cashbox and deposits some cash inside.");
			GiveCash(playerid, -amount);
			BizInfo[key][bizCash] += amount;
			format(msg, sizeof(msg), "You have put $%d into the business till, Total: $%d", amount, BizInfo[key][bizCash]);
			SCM(playerid, COLOR_WHITE, msg);
			UpdateBizInfo(key);
		}
	}
	else return SCM(playerid, COLOR_LIGHTRED, "You don't own/work a business.");
	return 1;
}

CMD:bizwithdraw(playerid, params[])
{
	new amount;
	new key = PlayerInfo[playerid][pBizKey];
	if(sscanf(params,"d",amount))
	{
		SyntaxMSG(playerid, "/bizwithdraw [amount]");
		format(msg, sizeof(msg), "You've got $%d, in your cashbox.", BizInfo[key][bizCash]);
		SCM(playerid, COLOR_WHITE, msg);
		return 1;
	}
	if(OwnBusiness(playerid))
	{
		if(InBusiness(playerid))
		{
			if(BizInfo[key][bizCash] < amount) return SCM(playerid, COLOR_INFO, "Your business doesn't have that much.");
			if(amount <= 0 || amount > 5000000) return SCM(playerid, COLOR_INFO, "The amount must be between, $1, - $5,000,000.");
			ActionMessage(playerid, 15.0, "opens the business cashbox and withdraws some cash.");
			GiveCash(playerid, amount);
			BizInfo[key][bizCash] -= amount;
			format(msg, sizeof(msg), "You have withdrawn $%d from your business till, New Total: $%d", amount, BizInfo[key][bizCash]);
			SCM(playerid, COLOR_WHITE, msg);
			UpdateBizInfo(key);
		}
	}
	else return SCM(playerid, COLOR_LIGHTRED, "You don't own a business.");
	return 1;
}

CMD:buybiz(playerid, params[])
{
	if(OwnBusiness(playerid)) return SCM(playerid, COLOR_INFO, "You can only own one business, sell your original business first");
	for(new b = 0; b < sizeof(BizInfo); b++)
	{
		if(PlayerToPoint(2.0, playerid, BizInfo[b][bizPosX], BizInfo[b][bizPosY], BizInfo[b][bizPosZ]) && BizInfo[b][bizOwned] == 0)
		{
			if(PlayerInfo[playerid][pLevel] < BizInfo[b][bizLevelbuy])
			{
				format(msg, sizeof(msg), "You must be level %d to Purchase This",BizInfo[b][bizLevelbuy]);
				SCM(playerid, COLOR_GRAD5, msg);
				return 1;
			}
			if(GetCash(playerid) < BizInfo[b][bizPrice]) return NoCashMSG(playerid);
			BizInfo[b][bizOwned] = 1;
			BizInfo[b][bizLocked] = 1;
			PlayerInfo[playerid][pBizKey] = b;
			format(BizInfo[b][bizOwner], 128, "%s", GetName(playerid));
			GiveCash(playerid,-BizInfo[b][bizPrice]);
			SCM(playerid, COLOR_INFO, "Congratulations! You have successfully purchased this business");
			UpdateBizInfo(b);
			SavePlayerStats(playerid);
		}
	}
	return 1;
}

CMD:sellbiz(playerid, params[])
{
	new key = PlayerInfo[playerid][pBizKey];
	if(!OwnBusiness(playerid)) return SCM(playerid, COLOR_LIGHTRED, "You don't own a business.");
	StopBusinessBoomBox(key);
	PlaySound(playerid, 1052);
	BizInfo[key][bizOwned] = 0;
	BizInfo[key][bizLocked] = 1;
	BizInfo[key][bizRadio] = 0;
	BizInfo[key][bizRadioOn] = 0;
	strmid(BizInfo[key][bizOwner], "The State", 0, strlen("The State"), 255);
	new bizvalue = BizInfo[key][bizPrice] / 4 * 3;
	GiveCash(playerid, bizvalue);
	format(msg, sizeof(msg), "Congratulations You have sold your property for {FFFF00}$%d", bizvalue);
	SCM(playerid, COLOR_INFO, msg);
	if(BizInfo[key][bizCash] > 0)
	{
		format(msg, sizeof(msg), "As you had $%d in your cashbox, you got it back.", BizInfo[key][bizCash]);
		SCM(playerid, COLOR_INFO, msg);
		GiveCash(playerid, BizInfo[key][bizCash]);
	}
	BizInfo[key][bizCash] = 0;
	foreach(Player, i)
	{
		if(BizEntered[i] == key)
		{
			SetPlayerPos(i,BizInfo[key][bizPosX], BizInfo[key][bizPosY], BizInfo[key][bizPosZ]);
			SetInterior(i,0);
			SetWorld(i,0);
			BizEntered[i] = -1;
			FreezePlayer(i);
			SetTimerEx("UnFreezePlayer", 1000, 0, "i", i);
			SCM(i, COLOR_INFO, "The owner has just sold this business, everyone out.");
		}
	}
	UpdateBizInfo(key);
	PlayerInfo[playerid][pBizKey] = -1;
	return 1;
}

CMD:bizupgrade(playerid, params[])
{
	new option[16], biz = PlayerInfo[playerid][pBizKey];
	if(!OwnBusiness(playerid)) return SCM(playerid, COLOR_LIGHTRED, "You don't own a business.");
	if(InBusiness(playerid))
	{
		if(sscanf(params, "s[16]", option))
		{
			SyntaxMSG(playerid, "/bizupgrade [option]");
			SCM(playerid, COLOR_GREY, "Avaliable options: XM-Radio (Cost: $10.000)");
		}
		if(CompareStrings(option, "XM-Radio"))
		{
			if(BizInfo[biz][bizRadio] == 1) return SCM(playerid, COLOR_WHITE, "Your business has a radio already.");
			if(GetCash(playerid) < 10000) return SCM(playerid, COLOR_GREY, "Business radio costs $10,000.");
			SCM(playerid, COLOR_LIGHTBLUE, "* You have successfully bought a business XM-Radio, for use /setstation.");
			BizInfo[biz][bizRadio] = 1;
			GiveCash(playerid, -10000);
		}
	}
	else return SCM(playerid, COLOR_GREY, "You must be inside your business.");
	return 1;
}

CMD:hire(playerid, params[])
{
	new id;
	if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/hire [playerid/PartOfName]");
	if(!OwnBusiness(playerid)) return SCM(playerid, COLOR_LIGHTRED, "You don't own a business.");
	if(id == playerid) return SCM(playerid, COLOR_INFO, "You cannot hire yourself.");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
	HireRequester[id] = playerid;
	format(msg, sizeof(msg),"* %s invited you to work for his business, (/accept job) if you want to join.", GetNameWithMask(playerid));
	SCM(id, COLOR_LIGHTBLUE, msg);
	format(msg, sizeof(msg), "* You have invited %s to work at your business.", GetNameWithMask(id));
	SCM(playerid, COLOR_INFO, msg);
	return 1;
}

CMD:fire(playerid, params[])
{
	new id;
	if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/fire [playerid/PartOfName]");
	if(!OwnBusiness(playerid)) return SCM(playerid, COLOR_LIGHTRED, "You don't own a business.");
	if(id == playerid) return SCM(playerid, COLOR_INFO, "You cannot fire yourself.");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
	if(PlayerInfo[id][pWorkOn] != PlayerInfo[playerid][pBizKey]) return SCM(playerid, COLOR_LIGHTRED, "This player is not working for you.");
	format(msg, sizeof(msg),"* You've been resigned from the business by %s.", GetNameEx(playerid));
	SCM(id, COLOR_LIGHTBLUE, msg);
	format(msg, sizeof(msg), "* You've resigned %s from your business so it no longer has the key to the bussiness.", GetNameEx(id));
	SCM(playerid, COLOR_INFO, msg);
	PlayerInfo[id][pWorkOn] = -1;
	return 1;
}

CMD:accept(playerid, params[])
{
	new option[128];
	if(sscanf(params,"s[128]",option))
	{
		SyntaxMSG(playerid, "/accept [option]");
		SCM(playerid, COLOR_GREY, "Options: | job | faction | refill | repair | heal |");
		return 1;
	}
	if(CompareStrings(option, "heal"))
	{
		new id = GetIntVar(playerid, "HealFrom"), price = GetIntVar(playerid, "HealPrice");
		if(id == 0) return SCM(playerid, COLOR_INFO, "You have not been offered a heal.");
		SCMEx(playerid, COLOR_WHITE, "You have been healed to 100 percent, -$%d.", price);
		SCMEx(id, COLOR_WHITE, "You healed %s for $%d.", GetNameEx(playerid), price);
		SetPlayerHealth(playerid, 100.0);
		GiveCash(id, price);
		GiveCash(playerid, -price);
		RemoveVar(playerid, "HealPrice");
		RemoveVar(playerid, "HealFrom");
		return 1;
	}
	if(CompareStrings(option, "job"))
	{
		if(HireRequester[playerid] == INVALID_PLAYER_ID) return SCM(playerid, COLOR_INFO, "You have not been offered a job invite.");
		PlayerInfo[playerid][pWorkOn] = PlayerInfo[HireRequester[playerid]][pBizKey];
		SCM(playerid, COLOR_GREY, "You have accepted the offer of work.");
		SCM(HireRequester[playerid], COLOR_GREY, "Someone accepted the offer of work.");
		HireRequester[playerid] = INVALID_PLAYER_ID;
		return 1;
	}
	if(CompareStrings(option, "faction"))
	{
		if(FactionRequest[playerid] == INVALID_PLAYER_ID) return SCM(playerid, COLOR_INFO, "You have not been offered a faction invite.");
		PlayerInfo[playerid][pFaction] = FactionRequest[playerid];
		PlayerInfo[playerid][pRank] = Factions[FactionRequest[playerid]][fJoinRank];
		PlayerInfo[playerid][pBadgeNumber] = randomEx(23465, 99999);
		format(msg, 43+55,"You are now a member of the %s", Factions[FactionRequest[playerid]][fName]);
		SCM(playerid, COLOR_YELLOWG, msg);
		format(msg, 33+MAX_PLAYER_NAME, "** [Faction] %s was joined faction", GetNameEx(playerid));
		SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, msg);
		FactionRequest[playerid] = INVALID_PLAYER_ID;
		if(Factions[PlayerInfo[playerid][pFaction]][fType] == FACTION_ILLEGAL)
		{
		   PlayerInfo[playerid][pSprayPermission] = 1;
		}
		return 1;
	}
	if(CompareStrings(option, "refill"))
	{
		if(RefillOffer[playerid] == INVALID_PLAYER_ID) return SCM(playerid, COLOR_INFO, "You have not been offered a refill.");
		new vehicle = GetPlayerVehicleID(playerid);
		if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "You must be inside a vehicle as a driver.");
		if(!PlayerNearPlayer(6.0, playerid, RefillOffer[playerid])) return NotNearPlayerMSG(playerid);
		if(GetCash(playerid) < RefillPrice[playerid]) return NoCashMSG(playerid);
		GiveCash(playerid, -RefillPrice[playerid]);
		GiveCash(RefillOffer[playerid], RefillPrice[playerid]);
		format(msg, sizeof(msg), "accepts %s's blank for refilling his car gas tank for $%d.", GetNameWithMask(RefillOffer[playerid]), -RefillPrice[playerid]);
		ActionMessage(playerid, 10.0, msg);
		Gas{vehicle} = 100;
		RefillPrice[playerid] = 0;
		RefillOffer[playerid] = INVALID_PLAYER_ID;
		return 1;
	}
	if(CompareStrings(option, "tow"))
	{
		new id = GetIntVar(playerid, "RepairFrom");
		if(!GettingRepair{playerid}) return SCM(playerid, COLOR_GREY, "You haven't been offered a vehicle repair.");
		if(!PlayerNearPlayer(8.0, playerid, id)) return NotNearPlayerMSG(playerid);
		if(PlayerInCar(playerid)) return SCM(playerid, COLOR_GREY, "You must be outside of the vehicle.");
		format(msg, sizeof(msg), "authorized %s to attach the %s.", GetNameWithMask(id), VehicleNames[GetVehicleModel(OldVehicle[playerid])-400]);
		ActionMessage(playerid, 10.0, msg);
		new Float:x, Float:y, Float:z, Float:vX, Float:vY, Float:vZ;
		GetPlayerPos(playerid, x, y, z);
		GetVehiclePos(OldVehicle[playerid], vX, vY, vZ);
		if((floatabs(x-vX)<7.0) && (floatabs(y-vY)<7.0) && (floatabs(z-vZ)<7.0) && (OldVehicle[playerid]!=GetPlayerVehicleID(id)))
		{
			AttachTrailerToVehicle(OldVehicle[playerid], GetPlayerVehicleID(id));
		}
		RemoveVar(playerid, "RepairFrom");
		GettingRepair{playerid} = false;
	}
	if(CompareStrings(option, "repair"))
	{
		new vehicle = GetPlayerVehicleID(playerid), id = GetIntVar(playerid, "RepairFrom");
		if(!GettingRepair{playerid}) return SCM(playerid, COLOR_GREY, "You haven't been offered a vehicle repair.");
		if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "You must be in a vehicle as a driver.");
		if(!PlayerNearPlayer(6.0, playerid, id)) return NotNearPlayerMSG(playerid);
		if(GetIntVar(playerid, "RepairType") == 1)
		{
			RepairOffer[id] = playerid;
			GettingRepair{playerid} = false;
			VehicleToRepair[id] = vehicle;
			RepairService[id][REPAIR_ENGINE] = 1;
			SetIntVar(id, "CurrentTowTruck", GetPlayerVehicleID(id));
			format(msg, sizeof(msg), "authorized %s to repair the %s.", GetNameWithMask(id), VehicleNames[GetVehicleModel(vehicle)-400]);
			ActionMessage(playerid, 10.0, msg);
			ShowJobMessage(id, "~h~~p~PULL OUT YOUR SPRAYCAN.");
			RemoveVar(playerid, "RepairType");
			RemoveVar(playerid, "RepairFrom");
		}
		else if(GetIntVar(playerid, "RepairType") == 2)
		{
			RepairOffer[id] = playerid;
			GettingRepair{playerid} = false;
			VehicleToRepair[id] = vehicle;
			RepairService[id][REPAIR_BODY] = 1;
			SetIntVar(id, "CurrentTowTruck", GetPlayerVehicleID(id));
			format(msg, sizeof(msg), "authorized %s to repair the %s.", GetNameWithMask(id), VehicleNames[GetVehicleModel(vehicle)-400]);
			ActionMessage(playerid, 10.0, msg);
			ShowJobMessage(id, "~h~~p~PULL OUT YOUR SPRAYCAN.");
			RemoveVar(playerid, "RepairType");
			RemoveVar(playerid, "RepairFrom");
		}
		else if(GetIntVar(playerid, "RepairType") == 3)
		{
			RepairOffer[id] = playerid;
			GettingRepair{playerid} = false;
			VehicleToRepair[id] = vehicle;
			RepairService[id][REPAIR_DEAD] = 1;
			SetIntVar(id, "CurrentTowTruck", GetPlayerVehicleID(id));
			format(msg, sizeof(msg), "authorized %s to repair the %s.", GetNameWithMask(id), VehicleNames[GetVehicleModel(vehicle)-400]);
			ActionMessage(playerid, 10.0, msg);
			ShowJobMessage(id, "~h~~p~PULL OUT YOUR SPRAYCAN.");
			RemoveVar(playerid, "RepairType");
			RemoveVar(playerid, "RepairFrom");
		}
		else if(GetIntVar(playerid, "RepairType") == 4)
		{
			GettingRepair{playerid} = false;
			format(msg, sizeof(msg), "%s removed %s's %s destroys(%d).", GetNameWithMask(id), GetNameWithMask(playerid), VehicleNames[GetVehicleModel(vehicle)-400], GetIntVar(playerid, "DentsAmount"));
			ProxDetector(10.0, playerid, msg, COLOR_PURPLE);
			VehicleInfo[vehicle][carDestroyed] -= GetIntVar(playerid, "DentsAmount");
			RemoveVar(playerid, "RepairType");
			RemoveVar(playerid, "DentsAmount");
			RemoveVar(playerid, "RepairFrom");
		}
		else if(GetIntVar(playerid, "RepairType") == 5)
		{
			RepairOffer[id] = playerid;
			GettingRepair{playerid} = false;
			VehicleToRepair[id] = vehicle;
			RepairService[id][REPAIR_PAINT] = 1;
			SetIntVar(id, "CurrentTowTruck", GetPlayerVehicleID(id));
			format(msg, sizeof(msg), "authorized %s to repaint the %s.", GetNameWithMask(id), VehicleNames[GetVehicleModel(vehicle)-400]);
			ActionMessage(playerid, 10.0, msg);
			ShowJobMessage(id, "~h~~p~PULL OUT YOUR SPRAYCAN.");
			RemoveVar(playerid, "RepairType");
			RemoveVar(playerid, "RepairFrom");
		}
	}
	return 1;
}

//=====================Animations=====================//

CMD:animlist(playerid, params[])
{
	SCM(playerid,COLOR_WHITE,"____________________________________________________________________________________");
	SCM(playerid, COLOR_GRAD2, "/gsign /fucku /tired /lookout /aim /lay /bat /cry /dealerstance /batidle");
	SCM(playerid, COLOR_GRAD2, "/sit /handsup /dance /deal /piss /injured /riot /win /cover /strip /rap /putdown");
  SCM(playerid, COLOR_GRAD2, "/slapass /wave /crossarms /lean /basket /dribble /dunk /sleep /idle /reload");
  SCM(playerid, COLOR_GRAD2, "/tapcig /crack /fall /plant /hide /laugh /vomit /inbedleft /stretch /liftup");
  SCM(playerid, COLOR_GRAD2, "/inbedright /getarrested /camera /stance /yell /walk {EE5555}/stopanim{FFFFFF}");
  SCM(playerid,COLOR_WHITE,"????????????????????????????????????????????????????????????????????????????????????");
	return 1;
}

CMD:strip(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/strip [1-18]");
    switch(type)
    {
		case 1: OnPlayAnim(playerid,"STRIP","PLY_CASH",4.1,1,0,0,1,0);
		case 2: OnPlayAnim(playerid,"STRIP","PUN_CASH",4.1,1,0,0,1,0);
		case 3: OnPlayAnim(playerid,"STRIP","strip_A",4.1,1,0,0,1,0);
		case 4: OnPlayAnim(playerid,"STRIP","strip_B",4.1,1,0,0,1,0);
		case 5: OnPlayAnim(playerid,"STRIP","strip_C",4.1,1,0,0,1,0);
		case 6: OnPlayAnim(playerid,"STRIP","strip_D",4.1,1,0,0,1,0);
		case 7: OnPlayAnim(playerid,"STRIP","strip_E",4.1,1,0,0,1,0);
		case 8: OnPlayAnim(playerid,"STRIP","strip_F",4.1,1,0,0,1,0);
		case 9: OnPlayAnim(playerid,"STRIP","strip_G",4.1,1,0,0,1,0);
		case 10: OnPlayAnim(playerid,"STRIP","STR_A2B",4.1,1,0,0,1,0);
		case 11: OnPlayAnim(playerid,"STRIP","STR_B2A",4.1,1,0,0,1,0);
		case 12: OnPlayAnim(playerid,"STRIP","STR_B2C",4.1,1,0,0,1,0);
		case 13: OnPlayAnim(playerid,"STRIP","STR_C1",4.1,1,0,0,1,0);
		case 14: OnPlayAnim(playerid,"STRIP","STR_C2",4.1,1,0,0,1,0);
		case 15: OnPlayAnim(playerid,"STRIP","STR_C2B",4.1,1,0,0,1,0);
		case 16: OnPlayAnim(playerid,"STRIP","STR_Loop_A",4.1,1,0,0,1,0);
		case 17: OnPlayAnim(playerid,"STRIP","STR_Loop_B",4.1,1,0,0,1,0);
		case 18: OnPlayAnim(playerid,"STRIP","STR_Loop_C",4.1,1,0,0,1,0);
		default: SyntaxMSG(playerid, "/strip [1-18]");
    }
    return 1;
}

CMD:liftup(playerid, params[])
{
	OnPlayAnim(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:caranim(playerid, params[])
{
  new option[11];
  if(sscanf(params, "s[11]", option)) return SyntaxMSG(playerid, "/caranim [relax/tap]");
  if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
  if(CompareStrings(option, "relax"))
  {
    ApplyAnimation(playerid,"CAR","Sit_relaxed",4.1,1,0,0,1,0);
  }
  else if(CompareStrings(option, "tap"))
  {
    ApplyAnimation(playerid,"CAR","Tap_hand",4.1,1,0,0,1,0);
  }
  return 1;
}

CMD:putdown(playerid, params[])
{
	OnPlayAnim(playerid, "CARRY", "putdwn", 3.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:stretch(playerid, params[])
{
	OnPlayAnim(playerid,"STRIP","PUN_HOLLER",4.1,1,0,0,1,0);
	return 1;
}

CMD:idle(playerid, params[])
{
	OnPlayAnim(playerid,"STRIP","PUN_LOOP",4.1,1,0,0,1,0);
	return 1;
}

CMD:batidle(playerid, params[])
{
	OnPlayAnim(playerid,"BASEBALL","Bat_IDLE",4.1,1,0,0,1,0);
	return 1;
}

CMD:aim(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/aim [1-2]");
    switch(type)
    {
		case 1: OnPlayAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
		case 2: OnPlayAnim(playerid,"PED", "gang_gunstand", 4.0,1,0,0,0,0);
		default: SyntaxMSG(playerid, "/aim [1-2]");
    }
    return 1;
}

CMD:lay(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/lay [1-9]");
    switch(type)
    {
		case 1: OnPlayAnim(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
		case 2: OnPlayAnim(playerid,"BEACH", "parksit_w_loop", 4.0, 1, 0, 0, 0, 0);
		case 3: OnPlayAnim(playerid,"BEACH","parksit_m_loop", 4.0, 1, 0, 0, 0, 0);
		case 4: OnPlayAnim(playerid,"BEACH","lay_bac_loop", 4.0, 1, 0, 0, 0, 0);
		case 5: OnPlayAnim(playerid,"BEACH","sitnwait_loop_w", 4.0, 1, 0, 0, 0, 0);
		case 6: OnPlayAnim(playerid,"SUNBATHE","Lay_Bac_in",3.0, 1, 0, 0, 0, 0);
		case 7: OnPlayAnim(playerid,"SUNBATHE","batherdown",3.0, 1, 0, 0, 0, 0);
		case 8: OnPlayAnim(playerid,"SUNBATHE","parksit_m_in",3.0, 1, 0, 0, 0, 0);
		case 9: OnPlayAnim(playerid,"CAR", "Fixn_Car_Loop", 4.0, 1, 0, 0, 0, 0);
		default: SyntaxMSG(playerid, "/lay [1-9]");
    }
    return 1;
}

CMD:crack(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/crack [1-4]");
    switch(type)
    {
		case 1: OnPlayAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
		case 2: OnPlayAnim(playerid,"CRACK", "crckidle1", 4.0, 1, 0, 0, 0, 0);
		case 3: OnPlayAnim(playerid,"CRACK","crckidle3", 4.0, 1, 0, 0, 0, 0);
		case 4: OnPlayAnim(playerid,"CRACK","crckidle4", 4.0, 1, 0, 0, 0, 0);
		default: SyntaxMSG(playerid, "/crack [1-4]");
    }
    return 1;
}

CMD:reload(playerid, params[])
{
	OnPlayAnim(playerid,"TEC","TEC_reload",4.0,0,0,0,0,0);
    return 1;
}

CMD:bat(playerid, params[])
{
	OnPlayAnim(playerid,"BASEBALL","Bat_IDLE",4.0,1,1,1,1,0);
    return 1;
}

CMD:tapcig(playerid, params[])
{
	OnPlayAnim(playerid,"SMOKING","M_smk_tap",3.0,0,0,0,0,0);
    return 1;
}

CMD:fall(playerid, params[])
{
	OnPlayAnim(playerid,"PARACHUTE","FALL_skyDive_DIE",3.5,0,0,0,1,0);
    return 1;
}

CMD:plant(playerid, params[])
{
	OnPlayAnim(playerid,"BOMBER","BOM_Plant",3.0,0,0,0,0,0);
    return 1;
}

CMD:laugh(playerid, params[])
{
	OnPlayAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
    return 1;
}

CMD:vomit(playerid, params[])
{
	OnPlayAnim(playerid,"FOOD","EAT_Vomit_P",3.2,0,0,0,0,0);
    return 1;
}

CMD:inbedleft(playerid, params[])
{
	OnPlayAnim(playerid,"INT_HOUSE","BED_Loop_L",4.0,1,0,0,0,0);
    return 1;
}

CMD:inbedright(playerid, params[])
{
	OnPlayAnim(playerid,"INT_HOUSE","BED_Loop_R",4.0,1,0,0,0,0);
    return 1;
}

CMD:getarrested(playerid, params[])
{
	OnPlayAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1);
    return 1;
}

CMD:cry(playerid, params[])
{
	OnPlayAnim(playerid,"GRAVEYARD","mrnf_loop",4.0,1,0,0,0,0);
    return 1;
}

CMD:sleep(playerid, params[])
{
	OnPlayAnim(playerid,"CRACK","crckidle2", 4.0, 1, 0, 0, 0, 0);
    return 1;
}

CMD:hide(playerid, params[])
{
	OnPlayAnim(playerid,"ON_LOOKERS","panic_hide",3.0,1,0,0,0,0);
    return 1;
}

CMD:cover(playerid, params[])
{
	OnPlayAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
    return 1;
}

CMD:dealerstance(playerid, params[])
{
	OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
    return 1;
}

CMD:stance(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/stance [1-11]");
    switch(type)
    {
		case 1: OnPlayAnim(playerid,"PED","WOMAN_IDLESTANCE",4.0,1,0,0,0,0);
		case 2: OnPlayAnim(playerid,"PED","CAR_HOOKERTALK",4.0,1,0,0,0,0);
		case 3: OnPlayAnim(playerid,"FAT","FatIdle",4.0,1,0,0,0,0);
		case 4: OnPlayAnim(playerid,"WUZI","Wuzi_Stand_Loop",4.0,1,0,0,0,0);
		case 5: OnPlayAnim(playerid,"GRAVEYARD","mrnm_loop",4.0,1,0,0,0,0);
		case 6: OnPlayAnim(playerid,"GRAVEYARD","prst_loopa",4.0,1,0,0,0,0);
		case 7: OnPlayAnim(playerid,"PED","idlestance_fat",4.0,1,0,0,0,0);
		case 8: OnPlayAnim(playerid,"PED","idlestance_old",4.0,1,0,0,0,0);
		case 9: OnPlayAnim(playerid,"PED","turn_l",4.0,1,0,0,0,0);
		case 10: OnPlayAnim(playerid,"BAR","Barcustom_loop",4.0,1,0,0,0,0);
		case 11: OnPlayAnim(playerid,"BAR","Barserve_loop",4.0,1,0,0,0,0);
		default: SyntaxMSG(playerid, "/stance [1-11]");
    }
    return 1;
}

CMD:yell(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/yell [1-3]");
    switch(type)
    {
		case 1: OnPlayAnim(playerid,"ON_LOOKERS","shout_loop",3.0,1,0,0,0,0);
		case 2: OnPlayAnim(playerid,"ON_LOOKERS","shout_01",3.0,1,0,0,0,0);
		case 3: OnPlayAnim(playerid,"ON_LOOKERS","shout_02",3.0,1,0,0,0,0);
		default: SyntaxMSG(playerid, "/yell [1-3]");
    }
    return 1;
}

CMD:gsign(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/gsign [1-6]");
    switch(type)
    {
		case 1: OnPlayAnim(playerid,"GHANDS","gsign1",4.1, 0, 0, 0, 0, 0);
		case 2: OnPlayAnim(playerid,"GHANDS","gsign1LH",4.1, 0, 0, 0, 0, 0);
		case 3: OnPlayAnim(playerid,"GHANDS","gsign2LH", 4.1, 0, 0, 0, 0, 0);
		case 4: OnPlayAnim(playerid,"GHANDS","gsign4",4.1, 0, 0, 0, 0, 0);
		case 5: OnPlayAnim(playerid,"GHANDS","gsign4LH", 4.1, 0, 0, 0, 0, 0);
		case 6: OnPlayAnim(playerid,"GHANDS","gsign5",4.1, 0, 0, 0, 0, 0);
		default: SyntaxMSG(playerid, "/gsign [1-6]");
    }
    return 1;
}

CMD:rap(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/rap [1-3]");
    switch(type)
    {
		case 1: OnPlayAnim(playerid,"LOWRIDER","RAP_A_Loop",4.1, 1, 0, 0, 0, 0);
		case 2: OnPlayAnim(playerid,"LOWRIDER","RAP_B_Loop", 4.1, 1, 0, 0, 0, 0);
		case 3: OnPlayAnim(playerid,"LOWRIDER","RAP_C_Loop",4.1, 1, 0, 0, 0, 0);
		default: SyntaxMSG(playerid, "/rap [1-3]");
    }
    return 1;
}

CMD:fucku(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/fucku [1-2]");
    switch(type)
    {
		case 1: OnPlayAnim(playerid,"PED","fucku",4.0,0,0,0,0,0);
		case 2: OnPlayAnim(playerid,"RIOT","RIOT_FUKU",5.0,0,0,0,0,0);
		default: SyntaxMSG(playerid, "/fucku [1-2]");
    }
    return 1;
}

CMD:tired(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/tired [1-2]");
    switch(type)
    {
		case 1: OnPlayAnim(playerid,"PED","IDLE_tired",3.0,1,0,0,0,0);
		case 2: OnPlayAnim(playerid,"FAT","Idle_Tired",3.0,1,0,0,0,0);
		default: SyntaxMSG(playerid, "/tired [1-2]");
    }
    return 1;
}

CMD:sit(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/sit [1-6]");
    switch(type)
    {
		case 1: OnPlayAnim(playerid,"PED","SEAT_down",4.1,0,1,1,1,0);
		case 2: OnPlayAnim(playerid,"MISC","seat_lr",2.0,1,0,0,0,0);
		case 3: OnPlayAnim(playerid,"MISC","seat_talk_01",2.0,1,0,0,0,0);
		case 4: OnPlayAnim(playerid,"MISC","seat_talk_02",2.0,1,0,0,0,0);
		case 5: OnPlayAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
		case 6: OnPlayAnim(playerid,"BEACH", "ParkSit_W_loop", 4.0, 1, 0, 0, 0, 0);
		default: SyntaxMSG(playerid, "/sit [1-6]");
    }
    return 1;
}

CMD:dance(playerid, params[])
{
	new type;
	if(PlayerIsWounded(playerid) || PlayerInCar(playerid) || JackingEngine[playerid] != 0 || JackingLock[playerid] != 0) return 1;
	if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/dance [1-4]");
    switch(type)
    {
		case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		case 4: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		default: SyntaxMSG(playerid, "/dance [1-4]");
    }
    return 1;
}

CMD:injured(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/injured [1-3]");
    switch(type)
    {
		case 1: OnPlayAnim(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
		case 2: OnPlayAnim(playerid, "WUZI", "CS_Dead_Guy", 4.0, 1, 1, 1, 1, 0);
		case 3: OnPlayAnim(playerid, "SWAT", "gnstwall_injurd", 4.0, 1,1,1,1, 0);
		default: SyntaxMSG(playerid, "/injured [1-3]");
    }
    return 1;
}

CMD:handsup(playerid, params[])
{
	if(PlayerIsWounded(playerid) || PlayerInCar(playerid) || JackingEngine[playerid] != 0 || JackingLock[playerid] != 0) return 1;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
    return 1;
}

CMD:deal(playerid, params[])
{
	OnPlayAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 1, 1, 1, 0);
    return 1;
}

CMD:piss(playerid, params[])
{
	OnPlayAnim(playerid,"PAULNMAC","Piss_in",4.0,0,0,0,0,0);
    return 1;
}

CMD:riot(playerid, params[])
{
	OnPlayAnim(playerid,"RIOT","RIOT_CHANT",4.0,1,1,1,1,0);
    return 1;
}

CMD:slapass(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/slapass [1-2]");
    switch(type)
    {
		case 1: OnPlayAnim(playerid,"SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
		case 2: OnPlayAnim(playerid,"MISC","Bitchslap",4.0,1,0,0,0,0);
		default: SyntaxMSG(playerid, "/slapss [1-2]");
    }
    return 1;
}

CMD:wave(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/wave [1-4]");
    switch(type)
    {
		case 1: OnPlayAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0);
		case 2: OnPlayAnim(playerid,"BD_Fire", "BD_GF_Wave", 4.0, 0, 0, 0, 0, 0);
		case 3: OnPlayAnim(playerid,"WUZI", "Wuzi_Follow", 5.0, 0, 0, 0, 0, 0);
		case 4: OnPlayAnim(playerid,"KISSING", "gfwave2", 4.0, 0, 0, 0, 0, 0);
		default: SyntaxMSG(playerid, "/wave [1-4]");
    }
    return 1;
}

CMD:crossarms(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/crossarms [1-2]");
    switch(type)
    {
		case 1: OnPlayAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
		case 2: OnPlayAnim(playerid,"OTB", "wtchrace_loop", 4.0, 1, 0, 0, 0, 0);
		default: SyntaxMSG(playerid, "/crossarms [1-2]");
    }
    return 1;
}

CMD:lean(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/lean [1-3]");
    switch(type)
    {
		case 1: OnPlayAnim(playerid,"GANGS","leanIDLE",4.0,0,1,1,1,0);
		case 2: OnPlayAnim(playerid,"MISC","Plyrlean_loop",4.0,0,1,1,1,0);
		case 3: OnPlayAnim(playerid,"BAR","BARman_idle",3.0,0,1,1,1,0);
		default: SyntaxMSG(playerid, "/lean [1-3]");
    }
    return 1;
}

CMD:basket(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/basket [1-4]");
    switch(type)
    {
		case 1: OnPlayAnim(playerid,"BSKTBALL","BBALL_idleloop",4.0,1,0,0,0,0);
		case 2: OnPlayAnim(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
		case 3: OnPlayAnim(playerid,"BSKTBALL","BBALL_pickup",4.0,0,0,0,0,0);
		case 4: OnPlayAnim(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
		default: SyntaxMSG(playerid, "/basket [1-4]");
    }
    return 1;
}

CMD:dribble(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/dribble [1-2]");
    switch(type)
    {
		case 1: ApplyAnimation(playerid,"BSKTBALL","BBALL_run",4.1,1,1,1,1,1);
		case 2: ApplyAnimation(playerid,"BSKTBALL","BBALL_walk",4.1,1,1,1,1,1);
		default: SyntaxMSG(playerid, "/dribble [1-2]");
    }
    return 1;
}

CMD:lookout(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/lookout [1-2]");
    switch(type)
    {
		case 1: OnPlayAnim(playerid, "FOOD", "eat_vomit_sk", 4.0,0,0,0,0,0);
		case 2: OnPlayAnim(playerid, "PED", "handscower", 4.0,0,1,1,1,1);
		default: SyntaxMSG(playerid, "/lookout [1-2]");
    }
    return 1;
}


CMD:dunk(playerid, params[])
{
	OnPlayAnim(playerid,"BSKTBALL","BBALL_Dnk",4.0,0,0,0,0,0);
    return 1;
}

CMD:win(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/win [1-5]");
    switch(type)
    {
		case 1: OnPlayAnim(playerid,"CASINO","manwinb",4.1,0,0,0,0,0);
		case 2: OnPlayAnim(playerid,"CASINO","manwind",4.1,0,0,0,0,0);
		case 3: OnPlayAnim(playerid,"CASINO","cards_win",4.1,0,0,0,0,0);
		case 4: OnPlayAnim(playerid,"CASINO","Roulette_win",4.1,0,0,0,0,0);
		case 5: OnPlayAnim(playerid,"CASINO","Slot_win_out",4.1,0,0,0,0,0);
		default: SyntaxMSG(playerid, "/win [1-5]");
    }
    return 1;
}
CMD:camera(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/camera [1-3]");
	switch(type)
    {
	    case 1: OnPlayAnim(playerid,"CAMERA","camcrch_cmon",4.1,0,1,1,1,1);
	    case 2: OnPlayAnim(playerid,"CAMERA","camcrch_to_camstnd",4.1,0,1,1,1,1);
	    case 3: OnPlayAnim(playerid,"CAMERA","camstnd_cmon",4.1,0,1,1,1,1);
	}
	return 1;
}
CMD:crouchreload(playerid, params[])
{
	OnPlayAnim(playerid,"BUDDY","buddy_crouchreload",4.1,0,1,1,1,1);
	return 1;
}
CMD:crouchshoot(playerid, params[])
{
  OnPlayAnim(playerid,"BUDDY","buddy_crouchfire",4.1,1,1,1,1,1);
  return 1;
}
CMD:walk(playerid, params[])
{
 	new type;
 	if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/walk [1-2]");
 	switch(type)
	{
    	  case 1:OnPlayAnim(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
   		  case 2:OnPlayAnim(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
 	}
 	return 1;
}
CMD:walkd(playerid, params[])
{
	switch(PlayerInfo[playerid][pWalk])
	{
		case 1: ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
		case 2: ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
		case 3: ApplyAnimation(playerid,"PED","WALK_armed",4.1,1,1,1,1,1);
		case 4: ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
		case 5: ApplyAnimation(playerid,"PED","WALK_csaw",4.1,1,1,1,1,1);
		case 6: ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
		case 7: ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
		case 8: ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
		case 9: ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
		case 10: ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
		case 11: ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
		case 12: ApplyAnimation(playerid,"PED","WALK_rocket",4.1,1,1,1,1,1);
		case 13: ApplyAnimation(playerid,"PED","WALK_shuffle",4.1,1,1,1,1,1);
		case 14: ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
		case 15: ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
		case 16: ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
		case 17: ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
		case 18: ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
	}
	return 1;
}

//=====================Animations=====================//

CMD:setstyle(playerid, params[])
{
	new option, secoption;
	if(sscanf(params,"dD(-1)", option, secoption)) return SyntaxMSG(playerid, "/setstyle (1 - Walk Style | 2 - Chat Style)");
	if(PlayerInfo[playerid][pDonateRank] < 1) return SCM(playerid, COLOR_LIGHTRED, "Only donators can use this feature.");
	if(option == 1)
	{
		new style;
		if(sscanf(params,"{d}d",style))
		{
			SyntaxMSG(playerid, "/setstyle 1 [StyleID]");
			SCM(playerid, COLOR_WHITE, "Walk Styles: 1,2,3,4,5,6,7,8,9");
			SCM(playerid, COLOR_WHITE, "Walk Styles: 10,11,12,13,14,15,16");
			SCM(playerid, COLOR_WHITE, "Walk Styles: 17,18");
			return 1;
		}
		if(style < 1 || style > 18) return SCM(playerid, COLOR_INFO, "1-18.");
		PlayerInfo[playerid][pWalk] = style;
		format(msg, sizeof(msg), "You have set your walking style: %d", style);
		SCM(playerid, COLOR_INFO, msg);
	}
	else if(option == 2)
	{
		new style;
		if(sscanf(params,"{d}d",style))
		{
			SyntaxMSG(playerid, "/setstyle 2 [StyleID]");
			SCM(playerid, COLOR_WHITE, "Chat Styles: 0,1,2,3,4,5,6,7,8");
			return 1;
		}
		if(style < 0 || style > 8) return SCM(playerid, COLOR_INFO, "0-8.");
		PlayerInfo[playerid][pTalk] = style;
		format(msg, sizeof(msg), "You have set your walking style: %d", style);
		SCM(playerid, COLOR_INFO, msg);
	}
	return 1;
}

CMD:casino(playerid, params[])
{
	new option[64];
	if(BizEntered[playerid] != -1 && BizInfo[BizEntered[playerid]][bizType] == 2)
	{
		if(gettime() - JustCasinoed[playerid] < 2) return SCM(playerid, COLOR_INFO, "Please wait 2 seconds between each /casino.");
		if(sscanf(params,"s[64]",option)) return SyntaxMSG(playerid, "/casino [item(pull)]");
		if(CompareStrings(option, "pull"))
		{
			if(!IsAtPullMachine(playerid)) return SCM(playerid, COLOR_LIGHTRED, "You must be near the pull machines.");
			if(GetCash(playerid) < 150) return SCM(playerid, COLOR_LIGHTRED, "You must have $100 to give roll.");
			OnPlayAnim(playerid, "HEIST9", "Use_SwipeCard", 4.1, 0, 0, 0, 0, 0);
			JustCasinoed[playerid] = gettime();
			new n1, n2, n3;
			n1 = randomEx(0, 7);
			n2 = randomEx(0, 7);
			n3 = randomEx(0, 7);
			if(n1 == n2 && n2 == n3)
			{
				format(msg, sizeof(msg), "~g~congratulations~n~~y~$650~n~~w~%d %d %d~n~~r~jackpot", n1, n2, n3);
				GameTextForPlayer(playerid, msg, 3000, 6);
				GiveCash(playerid, 200);
				BizInfo[BizEntered[playerid]][bizCash] -= 650;
			}
			else
			{
				format(msg, sizeof(msg), "~r~sorry~n~~w~%d %d %d~n~~r~-$125", n1, n2, n3);
				GameTextForPlayer(playerid, msg, 3000, 6);
				GiveCash(playerid, -125);
				BizInfo[BizEntered[playerid]][bizCash] += 125;
			}
			return 1;
		}
	}
	else return SCM(playerid, COLOR_INFO, "This command may be performed at the casino.");
	return 1;
}


CMD:buydrink(playerid, params[])
{
	new option[11];
	if(sscanf(params,"s[11]",option))
	{
		SyntaxMSG(playerid, "/buydrink [item]");
		SCM(playerid, COLOR_WHITE, "Beer - Price: $16");
		SCM(playerid, COLOR_WHITE, "Vodka - Price: $24");
		SCM(playerid, COLOR_WHITE, "Coke - Price: $10");
		SCM(playerid, COLOR_WHITE, "Water - Price: $4");
		SCM(playerid, COLOR_WHITE, "Whiskey - Price: $15");
		SCM(playerid, COLOR_WHITE, "Brandy - Price: $26");
		SCM(playerid, COLOR_WHITE, "Soda - Price: $6");
		return 1;
	}
	if(BizEntered[playerid] != -1)
	{
		if(BizInfo[BizEntered[playerid]][bizType] == 6 || BizInfo[BizEntered[playerid]][bizType] == 11)
		{
			if(CompareStrings(option, "beer"))
			{
				if(GetCash(playerid) < 16) return NoCashMSG(playerid);
				GiveCash(playerid, -16);
				BizInfo[BizEntered[playerid]][bizCash] += 16;
				DrunkLevel[playerid]++;
				if(DrunkLevel[playerid] >= 10) GameTextForPlayer(playerid, "~w~You are ~p~Drunk", 3500, 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
				SetPlayerBubble(playerid, "purchases a beer shot and drinks it.");
			}
			if(CompareStrings(option, "vodka"))
			{
				if(GetCash(playerid) < 24) return NoCashMSG(playerid);
				GiveCash(playerid, -24);
				BizInfo[BizEntered[playerid]][bizCash] += 24;
				DrunkLevel[playerid] += 2;
				if(DrunkLevel[playerid] >= 10) GameTextForPlayer(playerid, "~w~You are ~p~Drunk", 3500, 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
				SetPlayerBubble(playerid, "purchases a vodka shot and drinks it.");
			}
			if(CompareStrings(option, "coke"))
			{
				if(GetCash(playerid) < 10) return NoCashMSG(playerid);
				GiveCash(playerid, -10);
				BizInfo[BizEntered[playerid]][bizCash] += 10;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
				SetPlayerBubble(playerid, "purchases a coke can and drinks it.");
			}
			if(CompareStrings(option, "water"))
			{
				if(GetCash(playerid) < 4) return NoCashMSG(playerid);
				GiveCash(playerid, -4);
				BizInfo[BizEntered[playerid]][bizCash] += 4;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
				SetPlayerBubble(playerid, "purchases a water cup and drinks it.");
			}
			if(CompareStrings(option, "whiskey"))
			{
				if(GetCash(playerid) < 15) return NoCashMSG(playerid);
				GiveCash(playerid, -15);
				BizInfo[BizEntered[playerid]][bizCash] += 15;
				DrunkLevel[playerid] += 2;
				if(DrunkLevel[playerid] >= 10) GameTextForPlayer(playerid, "~w~You are ~p~Drunk", 3500, 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
				SetPlayerBubble(playerid, "purchases a whiskey shot and drinks it.");
			}
			if(CompareStrings(option, "brandy"))
			{
				if(GetCash(playerid) < 26) return NoCashMSG(playerid);
				GiveCash(playerid, -26);
				BizInfo[BizEntered[playerid]][bizCash] += 26;
				DrunkLevel[playerid] += 2;
				if(DrunkLevel[playerid] >= 10) GameTextForPlayer(playerid, "~w~You are ~p~Drunk", 3500, 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
				SetPlayerBubble(playerid, "purchases a brandy shot and drinks it.");
			}
			if(CompareStrings(option, "soda"))
			{
				if(GetCash(playerid) < 6) return NoCashMSG(playerid);
				GiveCash(playerid, -6);
				BizInfo[BizEntered[playerid]][bizCash] += 6;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
				SetPlayerBubble(playerid, "purchases a soda can and drinks it.");
			}
		}
	}
	return 1;
}

CMD:eatfood(playerid, params[])
{
	if(BizEntered[playerid] != -1)
	{
		if(BizInfo[BizEntered[playerid]][bizType] == 1)
		{
			if(GetCash(playerid) < 5) return SCM(playerid, COLOR_WHITE, "You must have more than $5 to buy some food,");
			if(GetPlayerHP(playerid) == 100) return 1;
			if(PlayerToPoint(25.0,playerid,377.0869,-68.1940,1001.5151))
			{
				SCM(playerid, COLOR_WHITE, "You have eaten a hamburger and fries. -$5");
				GiveCash(playerid,-5);
				BizInfo[BizEntered[playerid]][bizCash] += 5;
				SetPlayerHealth(playerid, 100);
				SetPlayerBubble(playerid, "ate a hamburger and fries");
			}
			else if(PlayerToPoint(25.0,playerid,369.6264,-6.5964,1001.8589))
			{
				SCM(playerid, COLOR_WHITE, "You have eaten a chickenburger and fries. -$5");
				GiveCash(playerid,-5);
				BizInfo[BizEntered[playerid]][bizCash] += 5;
				SetPlayerHealth(playerid, 100);
				SetPlayerBubble(playerid, "ate a chickenburger and fries");
			}
			else if(PlayerToPoint(25.0,playerid,375.7379,-119.1621,1001.4995))
			{
				SCM(playerid, COLOR_WHITE, "You have eaten a large pizza and drank a large drink. -$5");
				GiveCash(playerid,-5);
				BizInfo[BizEntered[playerid]][bizCash] += 5;
				SetPlayerHealth(playerid, 100);
				SetPlayerBubble(playerid, "ate a large pizza and drank a large drink");
			}
			else if(PlayerToPoint(25.0,playerid,378.7731,-186.7205,1000.6328))
			{
				SCM(playerid, COLOR_WHITE, "You have eaten two donuts and had a large drink. -$5");
				GiveCash(playerid,-5);
				BizInfo[BizEntered[playerid]][bizCash] += 5;
				SetPlayerHealth(playerid, 100);
				SetPlayerBubble(playerid, "ate two donuts and had a large drink");
			}
			else
			{
				SCM(playerid, COLOR_WHITE, "You have eaten some food. -$5");
				GiveCash(playerid,-5);
				BizInfo[BizEntered[playerid]][bizCash] += 5;
				SetPlayerHealth(playerid, 100);
				SetPlayerBubble(playerid, "ate some food");
			}

		}
	}
	return 1;
}

CMD:buygun(playerid, params[])
{
	new gun[16], ammo, ammo2;
	if(BizEntered[playerid] != -1)
	{
		if(BizInfo[BizEntered[playerid]][bizType] == 4)
		{
			if(PlayerInfo[playerid][pWepLic] != 1) return SCM(playerid, COLOR_YELLOWG, "You must have a valid firearms license to buy.");
			if(sscanf(params,"s[16]d", gun, ammo))
			{
				SyntaxMSG(playerid, "/buygun [GunName] [ammo]");
				SCM(playerid, COLOR_GREEN, "Available weapons: armour($10,000), knife ($2500)");
				SCM(playerid, COLOR_GREEN, "Available weapons: deagle ($8,000), 9mm( $6,500)");
				SCM(playerid, COLOR_GREEN, "Available weapons: shotgun ($12,000) mp5 ($8,500)");
				SCM(playerid, COLOR_GREEN, "|______Price Per Ammo______|");
				SCM(playerid, COLOR_GREEN, "Clips: deagleammo ($450) 9mm ($350) shotgunammo ($500) mp5ammo ($320)");
				return 1;
			}
			if(CompareStrings(gun, "knife"))
			{
				if(IsMeleeSlotTaken(playerid)) return SCM(playerid, COLOR_INFO, "Your melee slot is taken.");
				if(GetCash(playerid) < 2500) return NoCashMSG(playerid);
				format(msg, sizeof(msg), "You have bought a melee weapon, Knife for $2500.");
				SCM(playerid, COLOR_GREEN, msg);
				GiveMeleeWeapon(playerid, 4);
				GiveCash(playerid, -2500);
				BizInfo[BizEntered[playerid]][bizCash] += 2500;
			}
			if(CompareStrings(gun, "armour"))
			{
				if(GetCash(playerid) < 10000) return NoCashMSG(playerid);
				format(msg, sizeof(msg), "You have bought an Armour $10000.");
				SCM(playerid, COLOR_GREEN, msg);
				SetPlayerArmour(playerid, 50);
				PlayerInfo[playerid][pArmour] = 50.0;
				PlayerInfo[playerid][pHasArmour] = 1;
				BizInfo[BizEntered[playerid]][bizCash] += 10000;
			}
			if(CompareStrings(gun, "deagle"))
			{
				if(GetPrimaryWeapon(playerid) == 24)
				{
					ammo2 = GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm1]);
				}
				else if(IsPrimarySlotTaken(playerid))
				{
					SCM(playerid, COLOR_INFO, "Your primary slot is taken.");
					return 1;
				}
				if(GetCash(playerid) < ammo * 650)
				{
					format(msg, sizeof(msg), "You must have $%d, for a deagle with %d ammo.", ammo * 650, ammo);
					SCM(playerid, COLOR_GREEN, msg);
					return 1;
				}
				format(msg, sizeof(msg), "You have bought a deagle with %d ammo for $%d.", ammo, ammo * 650);
				SCM(playerid, COLOR_GREEN, msg);
				if(ammo2 > 0)
				{
					format(msg, sizeof(msg), "As you had a deagle before, the ammo has been added to the exists %d.", ammo2);
					SCM(playerid, COLOR_GREEN, msg);
				}
				GiveCash(playerid, -ammo * 650);
				GivePermWeapon(playerid, 2, 24, ammo+ammo2);
				BizInfo[BizEntered[playerid]][bizCash] += ammo * 650;
			}
			if(CompareStrings(gun, "9mm"))
			{
				if(GetPrimaryWeapon(playerid) == 22)
				{
					ammo2 = GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm1]);
				}
				else if(IsPrimarySlotTaken(playerid))
				{
					SCM(playerid, COLOR_INFO, "Your primary slot is taken.");
					return 1;
				}
				if(GetCash(playerid) < ammo * 450)
				{
					format(msg, sizeof(msg), "You must have $%d, for a 9mm with %d ammo.", ammo * 450, ammo);
					SCM(playerid, COLOR_GREEN, msg);
					return 1;
				}
				format(msg, sizeof(msg), "You have bought a 9mm with %d ammo for $%d.", ammo, ammo * 450);
				SCM(playerid, COLOR_GREEN, msg);
				if(ammo2 > 0)
				{
					format(msg, sizeof(msg), "As you had a 9mm before, the ammo has been added to the exists %d.", ammo2);
					SCM(playerid, COLOR_GREEN, msg);
				}
				GiveCash(playerid, -ammo * 450);
				GivePermWeapon(playerid, 2, 22, ammo+ammo2);
				BizInfo[BizEntered[playerid]][bizCash] += ammo * 450;
			}
			if(CompareStrings(gun, "shotgun"))
			{
				if(GetSecondaryWeapon(playerid) == 25)
				{
					ammo2 = GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm2]);
				}
				else if(IsSecondarySlotTaken(playerid))
				{
					SCM(playerid, COLOR_INFO, "Your secondary slot is taken.");
					return 1;
				}
				if(GetCash(playerid) < ammo * 700)
				{
					format(msg, sizeof(msg), "You must have $%d, for a shotgun with %d ammo.", ammo * 700, ammo);
					SCM(playerid, COLOR_GREEN, msg);
					return 1;
				}
				format(msg, sizeof(msg), "You have bought a shotgun with %d ammo for $%d.", ammo, ammo * 700);
				SCM(playerid, COLOR_GREEN, msg);
				if(ammo2 > 0)
				{
					format(msg, sizeof(msg), "As you had a shotgun before, the ammo has been added to the exists %d.", ammo2);
					SCM(playerid, COLOR_GREEN, msg);
				}
				GiveCash(playerid, -ammo * 700);
				GivePermWeapon(playerid, 3, 25, ammo+ammo2);
				BizInfo[BizEntered[playerid]][bizCash] += ammo * 700;
			}
			if(CompareStrings(gun, "mp5"))
			{
				if(GetSecondaryWeapon(playerid) == 29)
				{
					ammo2 = GetWeaponAmmo(playerid, PlayerInfo[playerid][pPerm2]);
				}
				else if(IsSecondarySlotTaken(playerid))
				{
					SCM(playerid, COLOR_INFO, "Your secondary slot is taken.");
					return 1;
				}
				if(GetCash(playerid) < ammo * 320)
				{
					format(msg, sizeof(msg), "You must have $%d, for a MP5 with %d ammo.", ammo * 320, ammo);
					SCM(playerid, COLOR_GREEN, msg);
					return 1;
				}
				format(msg, sizeof(msg), "You have bought a MP5 with %d ammo for $%d.", ammo, ammo * 320);
				SCM(playerid, COLOR_GREEN, msg);
				if(ammo2 > 0)
				{
					format(msg, sizeof(msg), "As you had a MP5 before, the ammo has been added to the exists %d.", ammo2);
					SCM(playerid, COLOR_GREEN, msg);
				}
				GiveCash(playerid, -ammo * 320);
				GivePermWeapon(playerid, 3, 29, ammo+ammo2);
				BizInfo[BizEntered[playerid]][bizCash] += ammo * 320;
			}
		}
		else
		{
		    SCM(playerid,COLOR_YELLOWG,"You are not at GunShop.");
		}
	}
	return 1;
}

CMD:flist(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 0) return SCM(playerid, COLOR_GREY, "You are not in any faction.");
	SCM(playerid, COLOR_GREEN, "Members Online:");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(PlayerIsOn(i))
		{
			if(PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction])
			{
				format(msg, 128, "Name: %s | Rank: %s", GetNameEx(i), GetRankName(i));
				SCM(playerid, COLOR_GRAD2, msg);
			}
		}
	}
	return 1;
}

CMD:factionon(playerid, params[])
{
	new id;
	if(sscanf(params,"d",id)) return SyntaxMSG(playerid, "/factionon [factionid]");
	SCM(playerid, COLOR_GREEN, "Faction Members:");
	new online = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(PlayerInfo[i][pFaction] == id)
		{
			if(PlayerIsOn(i))
			{
				online++;
			}
		}
	}
	if(Factions[id][fON] == 0)
	{
		format(msg, sizeof(msg), "(( There are no members online ))");
	}
	else
	{
		format(msg, sizeof(msg), "(( There are %d members online on %s ))", online, Factions[id][fName]);
	}
	SCM(playerid, COLOR_WHITE, msg);
	return 1;
}

CMD:d(playerid, params[]) return cmd_departments(playerid, params);
CMD:departments(playerid, params[])
{
	new text[128], faction[23];
	if(sscanf(params,"s[128]",text)) return SyntaxMSG(playerid, "(/d)epartments [chat]");
	if(Factions[PlayerInfo[playerid][pFaction]][fType] != FACTION_LEGAL) return SCM(playerid, COLOR_LIGHTRED, "You must be a LEO to perform this command.");
	format(faction, sizeof(faction), "%s", GetShortFactionName(PlayerInfo[playerid][pFaction]));
	if(Factions[PlayerInfo[playerid][pFaction]][fType] != FACTION_ILLEGAL)
	{
	if(strlen(text) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		format(msg, sizeof(msg), "** [%s] %s %s: %.*s ...", faction, GetRankName(playerid), GetNameWithMask(playerid), pos, text);
		SendFactionMessage(LSPD, COLOR_ALLDEPT, msg);
		SendFactionMessage(LSFD, COLOR_ALLDEPT, msg);
		SendFactionMessage(SASD, COLOR_ALLDEPT, msg);
		SendFactionMessage(DOCS, COLOR_ALLDEPT, msg);
		SendFactionMessage(GOV, COLOR_ALLDEPT, msg);
		format(msg, sizeof(msg), "** [%s] %s %s: ... %s **", faction, GetRankName(playerid), GetNameWithMask(playerid), text[pos]);
		SendFactionMessage(LSPD, COLOR_ALLDEPT, msg);
		SendFactionMessage(LSFD, COLOR_ALLDEPT, msg);
		SendFactionMessage(SASD, COLOR_ALLDEPT, msg);
		SendFactionMessage(DOCS, COLOR_ALLDEPT, msg);
		SendFactionMessage(GOV, COLOR_ALLDEPT, msg);
	}
	else
	{
		format(msg, sizeof(msg), "** [%s] %s %s: %s **", faction, GetRankName(playerid), GetNameWithMask(playerid), text);
		SendFactionMessage(LSPD, COLOR_ALLDEPT, msg);
		SendFactionMessage(LSFD, COLOR_ALLDEPT, msg);
		SendFactionMessage(SASD, COLOR_ALLDEPT, msg);
		SendFactionMessage(DOCS, COLOR_ALLDEPT, msg);
		SendFactionMessage(GOV, COLOR_ALLDEPT, msg);
	}
	if(strlen(text) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		format(msg, sizeof(msg), "(Radio) %s says: %.*s ...", GetNameWithMask(playerid), pos, text);
		SendProxRadioMessage(playerid, msg);
		format(msg, sizeof(msg), "(Radio) %s says: ... %s", GetNameWithMask(playerid), text[pos]);
		SendProxRadioMessage(playerid, msg);
	}
	else
	{
		format(msg, sizeof(msg), "(Radio) %s says: %s", GetNameWithMask(playerid), text);
		SendProxRadioMessage(playerid, msg);
	}
	}
	return 1;
}

CMD:f(playerid, params[]) return cmd_faction(playerid, params);
CMD:faction(playerid, params[])
{
	new text[128];
	if(sscanf(params,"s[128]",text)) return SyntaxMSG(playerid, "(/f)action [ooc chat]");
  if(factionon{playerid} == 0) return SCM(playerid,COLOR_YELLOWG, "You have tog the family chat (/turnfam)");
	if(PlayerInfo[playerid][pFaction] == 0) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(Factions[PlayerInfo[playerid][pFaction]][fChatON] == 0) return SCM(playerid, COLOR_WHITE, "The OOC faction chat has been disabled by the leader.");
	if(strlen(text) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		format(msg, sizeof(msg), "**(( %s %s: %.*s ... ))**", GetRankName(playerid), GetNameEx(playerid), pos, text);
		if(PlayerInfo[playerid][pFaction] == LSPD)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, msg);
		if(PlayerInfo[playerid][pFaction] == LSFD)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, msg);
    if(PlayerInfo[playerid][pFaction] == GOV)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, msg);
    if(PlayerInfo[playerid][pFaction] == TRANSC)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, msg);
		format(msg, sizeof(msg), "**(( %s %s: ... %s ))**", GetRankName(playerid), GetNameEx(playerid), text[pos]);
		if(PlayerInfo[playerid][pFaction] == LSPD)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, msg);
		if(PlayerInfo[playerid][pFaction] == LSFD)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, msg);
		if(PlayerInfo[playerid][pFaction] == GOV)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, msg);
        if(PlayerInfo[playerid][pFaction] == TRANSC)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, msg);
	}
	else
	{
		format(msg, sizeof(msg), "**(( %s %s: %s ))**", GetRankName(playerid), GetNameEx(playerid), text);
		if(PlayerInfo[playerid][pFaction] == LSPD)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, msg);
		if(PlayerInfo[playerid][pFaction] == LSFD)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, msg);
    if(PlayerInfo[playerid][pFaction] == GOV)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, msg);
    if(PlayerInfo[playerid][pFaction] == TRANSC)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, msg);
	}
	{
		format(msg, sizeof(msg), "**(( %s %s: %s ))**", GetRankName(playerid), GetNameEx(playerid), text);
		if(PlayerInfo[playerid][pFaction] == SASD)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, msg);
		if(PlayerInfo[playerid][pFaction] == DOCS)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, msg);
	}
	return 1;
}
CMD:hq(playerid, params[])
{
	new text[128];
	if(sscanf(params,"s[128]",text)) return SyntaxMSG(playerid, "/hq [DISPATCH CHAT]");
	if(PlayerInfo[playerid][pFaction] == 0) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(strlen(text) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		format(msg, sizeof(msg), "[HQ] %s %s: %.*s ...", GetRankName(playerid), GetNameEx(playerid), pos, text);
		if(PlayerInfo[playerid][pFaction] == LSPD)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, msg);
		if(PlayerInfo[playerid][pFaction] == LSFD)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, msg);
        if(PlayerInfo[playerid][pFaction] == GOV)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, msg);
        if(PlayerInfo[playerid][pFaction] == TRANSC)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, msg);
		format(msg, sizeof(msg), "[HQ] %s %s: ... %s**", GetRankName(playerid), GetNameEx(playerid), text[pos]);
		if(PlayerInfo[playerid][pFaction] == LSPD)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, msg);
		if(PlayerInfo[playerid][pFaction] == LSFD)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, msg);
		if(PlayerInfo[playerid][pFaction] == GOV)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, msg);
        if(PlayerInfo[playerid][pFaction] == TRANSC)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, msg);
	}
	else
	{
		format(msg, sizeof(msg), "[HQ] %s %s: %s", GetRankName(playerid), GetNameEx(playerid), text);
		if(PlayerInfo[playerid][pFaction] == LSPD)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, msg);
		if(PlayerInfo[playerid][pFaction] == LSFD)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, msg);
        if(PlayerInfo[playerid][pFaction] == GOV)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, msg);
        if(PlayerInfo[playerid][pFaction] == TRANSC)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, msg);
	}
	{
		format(msg, sizeof(msg), "[HQ] %s %s: %s", GetRankName(playerid), GetNameEx(playerid), text);
		if(PlayerInfo[playerid][pFaction] == SASD)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, msg);
		if(PlayerInfo[playerid][pFaction] == DOCS)
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, msg);
	}
	return 1;
}

CMD:showbadge(playerid, params[])
{
	new iPlayerID;
	if(PlayerInfo[playerid][pFaction] != LSPD && PlayerInfo[playerid][pFaction] != LSFD && PlayerInfo[playerid][pFaction] != GOV) return SCM(playerid, COLOR_GREY, "You are not a part of a lawfaction");
	if(sscanf(params, "u", iPlayerID)) return SyntaxMSG(playerid, "/showbadge [playerid/PartOfName]");
	if(!PlayerIsOn(iPlayerID)) return NotConnectedMSG(playerid);
	ShowBadgeToPlayer(playerid, iPlayerID);
	return 1;
}

CMD:factionchat(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if(faction == 0) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(isLeader(playerid))
	{
		if(Factions[faction][fChatON] == 1)
		{
			format(msg, sizeof(msg), " ** %s closed faction chat **", GetNameEx(playerid));
			SendFactionMessage(faction, COLOR_LIGHTBLUE, msg);
			Factions[faction][fChatON] = 0;
		}
		else
		{
			format(msg, sizeof(msg), " ** %s open faction chat **", GetNameEx(playerid));
			SendFactionMessage(faction, COLOR_LIGHTBLUE, msg);
			Factions[faction][fChatON] = 1;
		}
		SaveFaction(faction);
	}
	else return SCM(playerid, COLOR_LIGHTRED, "You are not the leader.");
	return 1;
}

CMD:finvite(playerid, params[])
{
	new iPlayerID;
	if(sscanf(params,"u",iPlayerID)) return SyntaxMSG(playerid, "/finvite [playerid/PartOfName]");
	if(PlayerInfo[playerid][pFaction] == 0) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(!PlayerIsOn(iPlayerID)) return NotConnectedMSG(playerid);
	if(iPlayerID == playerid) return SCM(playerid, COLOR_INFO, "You may not invite yourself.");
	if(isLeader(playerid))
	{
		if(PlayerInfo[playerid][pFaction] == LSPD || PlayerInfo[playerid][pFaction] == LSFD || PlayerInfo[playerid][pFaction] == DOCS || PlayerInfo[playerid][pFaction] == SASD || PlayerInfo[playerid][pFaction] == GOV || PlayerInfo[playerid][pFaction] == NEWS || PlayerInfo[playerid][pFaction] == TRANSC)
		{
			if(Factions[PlayerInfo[playerid][pFaction]][fJoinRank] == 0) return SCM(playerid, COLOR_GREY, "Please set your factions joinrank/rankamount before inviting people");
			if(PlayerInfo[iPlayerID][pFaction] == 0)
			{
				FactionRequest[iPlayerID] = PlayerInfo[playerid][pFaction];
				format(msg, sizeof(msg), "* You have been invited to %s by %s ('/accept faction' if you want to join.)", Factions[PlayerInfo[playerid][pFaction]][fName], GetNameWithMask(playerid));
				SCM(iPlayerID, COLOR_YELLOWG, msg);
				format(msg,sizeof(msg),"* You have invited %s to join in %s",GetNameWithMask(iPlayerID), Factions[PlayerInfo[playerid][pFaction]][fName]);
				SCM(playerid, COLOR_YELLOWG, msg);
			}
			else return SCM(playerid, COLOR_LIGHTRED, "This player is in a faction already.");
		}
	}
	else return SCM(playerid, COLOR_LIGHTRED, "You are not the leader.");
	return 1;
}

CMD:funinvite(playerid, params[])
{
	new iPlayerID;
	if(sscanf(params,"u",iPlayerID)) return SyntaxMSG(playerid, "/funinvite [playerid/PartOfName]");
	if(PlayerInfo[playerid][pFaction] == 0) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(!PlayerIsOn(iPlayerID)) return NotConnectedMSG(playerid);
	if(iPlayerID == playerid) return SCM(playerid, COLOR_INFO, "You may not uninvite yourself.");
	if(isLeader(playerid))
	{
		if(PlayerInfo[playerid][pFaction] == LSPD || PlayerInfo[playerid][pFaction] == LSFD || PlayerInfo[playerid][pFaction] == GOV || PlayerInfo[playerid][pFaction] == NEWS || PlayerInfo[playerid][pFaction] == TRANSC)
		{
			if(PlayerInfo[iPlayerID][pFaction] == PlayerInfo[playerid][pFaction])
			{
				format(msg, sizeof(msg), "* You have been uninvited from %s by %s", Factions[PlayerInfo[playerid][pFaction]][fName], GetNameEx(playerid));
				SCM(iPlayerID, COLOR_LIGHTBLUE, msg);
				format(msg, sizeof(msg), "* You have uninvited %s from %s", GetNameEx(iPlayerID), Factions[PlayerInfo[playerid][pFaction]][fName]);
				SCM(playerid, COLOR_LIGHTBLUE, msg);
				PlayerInfo[iPlayerID][pFaction] = 0;
				PlayerInfo[iPlayerID][pRank] = 0;
				PlayerInfo[iPlayerID][pBadgeNumber] = 0;
				PlayerInfo[iPlayerID][pSpawnType] = 0;
				FullResetPlayerWeapons(iPlayerID);
				CopDuty{playerid} = false;
				SetPlayerColor(iPlayerID, COLOR_WHITE);
				format(msg, sizeof(msg), "** [Faction] %s has been uninvited from the faction by %s", GetNameEx(iPlayerID), GetNameEx(playerid));
				SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, msg);
        SetRadioChannel(playerid, 0);
        SetRadioSlot(playerid, 0);
			}
			else return SCM(playerid, COLOR_LIGHTRED, "This player is not in your faction.");
		}
	}
	else return SCM(playerid, COLOR_LIGHTRED, "You are not the leader.");
	return 1;
}

CMD:givebadge(playerid, params[])
{
  new faction = PlayerInfo[playerid][pFaction], id, badge;
  if(faction != LSPD && faction != SASD && faction != GOV) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
  if(sscanf(params,"ud",id, badge)) return SyntaxMSG(playerid, "/givebadge [playerid] [badgenumber]");
  if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
  if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty.");
  if(!isLeader(playerid)) return SCM(playerid, COLOR_YELLOWG,"You are not a leader");
  if(badge > 999999 || badge < 1) return SCM(playerid, COLOR_INFO, "His badge number must be between 999999 and 1.");
  format(msg, sizeof(msg), "* Your badge number has been changed by %s, your badge is: %d", GetNameEx(playerid), badge);
  SCM(id, COLOR_YELLOWG, msg);
  format(msg, sizeof(msg), "You have set badge number %d to %s",badge,GetNameEx(id));
  SCM(playerid, COLOR_YELLOWG, msg);
  PlayerInfo[id][pBadgeNumber] = badge;
  return 1;
}

CMD:setrank(playerid, params[])
{
	new iPlayerID, rank;
	if(sscanf(params,"ud",iPlayerID,rank)) return SyntaxMSG(playerid, "/setrank [playerid/PartOfName] [rank]");
	if(PlayerInfo[playerid][pFaction] == 0) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(!PlayerIsOn(iPlayerID)) return NotConnectedMSG(playerid);
 	if(isLeader(playerid))
	{
		if(iPlayerID == playerid) return SCM(playerid, COLOR_INFO, "You may not rank yourself.");
		if(PlayerInfo[playerid][pFaction] == LSPD || PlayerInfo[playerid][pFaction] == LSFD || PlayerInfo[playerid][pFaction] == GOV || PlayerInfo[playerid][pFaction] == NEWS || PlayerInfo[playerid][pFaction] == TRANSC)
		{
			if(PlayerInfo[iPlayerID][pFaction] == PlayerInfo[playerid][pFaction])
			{
				if(rank > 0 && rank <= Factions[PlayerInfo[playerid][pFaction]][fRankAmount])
				{
					PlayerInfo[iPlayerID][pRank] = rank;
					format(msg, sizeof(msg), "* Your rank has been changed by %s, you are now rank: %d", GetNameEx(playerid), rank);
					SCM(iPlayerID, COLOR_LIGHTBLUE, msg);
					format(msg, sizeof(msg), "* You have changed %s's rank to: %d", GetNameEx(iPlayerID), rank);
					SCM(playerid, COLOR_LIGHTBLUE, msg);
				}
				else return SCM(playerid, COLOR_GREY, "Rank must be below or equal to the factions rank amount (/factionranks)");
			}
			else return SCM(playerid, COLOR_LIGHTRED, "This player is not in your faction.");
		}
	}
	else return SCM(playerid, COLOR_LIGHTRED, "You are not the leader.");
	return 1;
}

CMD:factionranks(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if(faction == 0) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(!isLeader(playerid)) return SCM(playerid, COLOR_WHITE, "You are not the leader.");
	format(msg, sizeof(msg), "Rank Amount: %d | R1: %s | R2: %s | R3: %s | R4: %s | R5: %s", Factions[faction][fRankAmount], Factions[faction][fRank1], Factions[faction][fRank2],Factions[faction][fRank3], Factions[faction][fRank4], Factions[faction][fRank5]);
	SCM(playerid, COLOR_WHITE, msg);
	format(msg, sizeof(msg), "R6: %s | R7: %s | R8: %s | R9: %s | R10: %s", Factions[faction][fRank6], Factions[faction][fRank7], Factions[faction][fRank8], Factions[faction][fRank9], Factions[faction][fRank10]);
	SCM(playerid, COLOR_WHITE, msg);
	format(msg, sizeof(msg), "R11: %s | R12: %s | R13: %s | R14: %s | R15: %s", Factions[faction][fRank11], Factions[faction][fRank12], Factions[faction][fRank13], Factions[faction][fRank14], Factions[faction][fRank15]);
	SCM(playerid, COLOR_WHITE, msg);
	format(msg, sizeof(msg), "R16: %s | R17: %s | R18: %s | R19: %s | R20: %s", Factions[faction][fRank16], Factions[faction][fRank17], Factions[faction][fRank18], Factions[faction][fRank19], Factions[faction][fRank20]);
	SCM(playerid, COLOR_WHITE, msg);
	return 1;
}
CMD:tagcolor(playerid, params[])
{
  new faction = PlayerInfo[playerid][pFaction];
	if(faction == 0) return SCM(playerid, COLOR_LIGHTRED, "You're not in a faction.");
  if(faction == LSPD || faction == SASD)
	{
		if(CopDuty{playerid})
		{
			if(Tagcolor[playerid] == 0)
			{
		    SetPlayerColor(playerid, COLOR_WHITE);
	      SCM(playerid, COLOR_WHITE, "Your new color is: White");
				Tagcolor[playerid] = 1;
		    return 1;
			}
      if(Tagcolor[playerid] == 1)
      {
  	    SetPlayerColor(playerid, 0x8c8cfeff);
  	    SCM(playerid, COLOR_WHITE, "Your new color is: {7575FF}Blue");
  	    Tagcolor[playerid] = 0;
  	    return 1;
			}
		}
	}
	return 1;
}
stock AbleToDuty(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,30.0,312.2816,-165.5768,999.6010)) return true;
	if(IsPlayerInRangeOfPoint(playerid,7.5,1376.2856,-13.2029,1000.9543)) return true;
	if(IsPlayerInRangeOfPoint(playerid,7.5,1398.5748,-18.6872,1004.5540)) return true;
	if(IsPlayerInRangeOfPoint(playerid,10.0,1564.7664,-1694.2834,1101.0859)) return true;

	return false;
}

CMD:duty(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if(faction == 0) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");

	if(faction == LSPD || faction == SASD)
	{
		if(!CopDuty{playerid})
		{
		    if(!AbleToDuty(playerid)) return SCM(playerid, COLOR_WHITE, "You are not at the locker room.");
			//if(!PlayerToPoint(30.0, playerid, 312.2816,-165.5768,999.6010)) return SCM(playerid, COLOR_WHITE, "Nu esti in armoury.");
			format(msg, sizeof(msg), "%s %s removing their badge in the closet", GetRankName(playerid), GetNameWithMask(playerid));
			ProxDetector(15.0, playerid, msg, COLOR_PURPLE);
			SCM(playerid, COLOR_GREY,"To change the color of your use /tagcolor");
			SetPlayerHealth(playerid, 100.0);
			SetPlayerArmour(playerid, 100.0);
			format(msg, sizeof(msg), "** HQ: %s %s is now OnDuty! **", GetRankName(playerid), GetNameEx(playerid));
			SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, msg);
			SafeResetPlayerWeapons(playerid);
			CopDuty{playerid} = true;
			SetPlayerColor(playerid, 0x8c8cfeff);
			PoliceLines[playerid][1] = INVALID_OBJECT_ID;
		}
		else
		{
			format(msg, sizeof(msg), "** HQ: %s %s is now OffDuty! **", GetRankName(playerid), GetNameEx(playerid));
			SendFactionMessage(faction, COLOR_LSPDNEW, msg);
			CopDuty{playerid} = false;
			ShowPlayerName(playerid, true);
			SetNormalColor(playerid);
			SetPlayerArmour(playerid,0);
			SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
			if(PlayerInfo[playerid][pHasArmour] == 1)
			{
				SetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);
			}
			SafeResetPlayerWeapons(playerid);
			SetPlayerWeapons(playerid);
		}
	}
	if(faction == LSFD)
	{
		if(!PlayerToPoint(10.0, playerid, 1153.2913,-1323.6392,1101.0859)) return SCM(playerid, COLOR_GREY, "You are not at the locker room.");
		if(!MedicDuty{playerid})
		{
			if(PlayerInfo[playerid][pSex] == 1)
				ActionMessage(playerid,15.0,"removing their badge in the closet");
			else
				ActionMessage(playerid,15.0,"removing their badge in the closet");
			MedicDuty{playerid} = true;
			format(msg, sizeof(msg), "** HQ: %s %s is now OnDuty! **",GetRankName(playerid), GetPlayerLastName(playerid));
			SendFactionMessage(LSFD, COLOR_LIGHTBLUE, msg);
		}
		else
		{
			MedicDuty{playerid} = false;
			format(msg, sizeof(msg), "** HQ: %s %s is now OffDuty! **",GetRankName(playerid), GetPlayerLastName(playerid));
			SendFactionMessage(LSFD, COLOR_LIGHTBLUE, msg);
			SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
			SetNormalColor(playerid);
		}
	}
    if(faction == GOV)
	{
		if(!PlayerToPoint(10.0, playerid, 366.93619, 215.85332, 1007.94287)) return SCM(playerid, COLOR_GREY, "You are not at the locker room.");
		if(!GovDuty{playerid})
		{
			if(PlayerInfo[playerid][pSex] == 1)
				ActionMessage(playerid,15.0,"removing their badge in the closet");
			else
				ActionMessage(playerid,15.0,"removing their badge in the closet");
			GovDuty{playerid} = true;
			format(msg, sizeof(msg), "** GOV: %s %s is now OnDuty! **",GetRankName(playerid), GetPlayerLastName(playerid));
			SendFactionMessage(GOV, COLOR_LSPDNEW, msg);
		}
		else
		{
			GovDuty{playerid} = false;
			format(msg, sizeof(msg), "** GOV: %s %s is now OffDuty! **",GetRankName(playerid), GetPlayerLastName(playerid));
			SendFactionMessage(GOV, COLOR_LSPDNEW, msg);
			SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		}
	}
  if(faction == NEWS)
	{
		if(!PlayerToPoint(25.0, playerid, 716.6247,-574.5724,-52.2113)) return SCM(playerid, COLOR_GREY, "You are not at the locker room.");
		if(!NewsDuty{playerid})
		{
			if(PlayerInfo[playerid][pSex] == 1)
				ActionMessage(playerid,15.0,"removing their badge in the closet");
			else
				ActionMessage(playerid,15.0,"removing their badge in the closet");
			NewsDuty{playerid} = true;
			format(msg, sizeof(msg), "** NEWS: %s %s is now OnDuty! **",GetRankName(playerid), GetPlayerLastName(playerid));
			SendFactionMessage(NEWS, COLOR_LSPDNEW, msg);
		}
		else
		{
			NewsDuty{playerid} = false;
			format(msg, sizeof(msg), "** NEWS: %s %s is now OffDuty! **",GetRankName(playerid), GetPlayerLastName(playerid));
			SendFactionMessage(NEWS, COLOR_LSPDNEW, msg);
			SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		}
	}
	return 1;
}
stock AbleToUniform(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,8.0,1398.7670,-20.2222,1004.9885)) return true;
	if(IsPlayerInRangeOfPoint(playerid,8.0,1376.4968,-14.7622,1001.3798)) return true;

	return false;
}

stock AbleToCctv(playerid)
{
  if(IsPlayerInRangeOfPoint(playerid,8.0,1570.4271,-1681.8495,1101.0859)) return true;
	if(IsPlayerInRangeOfPoint(playerid,8.0,1382.6930,0.5625,1000.9443)) return true;
	if(IsPlayerInRangeOfPoint(playerid,8.0,1390.1898,4.1386,1004.5540)) return true;
	return false;
}

CMD:uniform(playerid, params[])
{
  new faction = PlayerInfo[playerid][pFaction];
  if(faction == 0) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
  if(AbleToUniform(playerid)) return ShowDialog(playerid, Show:<UniformPD>, DIALOG_STYLE_LIST,"LSPD Uniforms","Police Officer Type I \nPolice Officer Type II\nPolice Officer Type III \nPolice Officer Type IV\nPolice Officer Type V\nPolice Officer Type VI\nPolice Officer Type VII\nDetective Type I\nDetective Type II\nDetective Type III \nFemale Police Officer Type I\nFemale Police Officer Type I\nAcademy Uniform\nJanitor Uniform","Select", "");
  if(PlayerToPoint(3.0, playerid, Factions[faction][fUniformX], Factions[faction][fUniformY], Factions[faction][fUniformZ]))
  {
    if(faction == LSPD)
    {
      if(!CopDuty{playerid}) return SCM(playerid, COLOR_INFO, "You must be On-Duty to change your uniform.");
      SetPlayerPos(playerid, 1564.9683,-1697.4225,1101.0859);
      SetPlayerFacingAngle(playerid, 0.6369);
      SetPlayerCameraPos(playerid, 1564.6693, -1693.3795, 1101.9133);
      SetPlayerCameraLookAt(playerid, 1564.6954, -1694.3755, 1101.8021);
      //SetPlayerCameraPos(playerid, 317.1448, -165.3633, 1001.2852);
      //SetPlayerCameraLookAt(playerid, 317.1406, -164.3649, 1000.8942);
      SelectTextDraw(playerid, 0xFFFFFFFF);
      PlayerTextDrawShow(playerid, WearButton[playerid]);
      PlayerTextDrawShow(playerid, NextButton[playerid]);
      PlayerTextDrawShow(playerid, PrevButton[playerid]);
      PlayerTextDrawShow(playerid, Dusule1[playerid]);
      PlayerTextDrawShow(playerid, Dusule2[playerid]);
      PlayerTextDrawShow(playerid, Dusule3[playerid]);
      SetIntVar(playerid, "SelectingUniform", 1);
      SetPlayerSkin(playerid, LSPDSkins[0]);
      SkinSlot[playerid] = 0;
      OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
    }
    if(faction == LSFD)
    {
      if(!MedicDuty{playerid}) return SCM(playerid, COLOR_INFO, "You must be On-Duty to change your uniform.");
      SetPlayerPos(playerid, 1149.9670,-1323.3398,1101.0859);
      SetPlayerFacingAngle(playerid, 271.2551);
      SetPlayerCameraPos(playerid, 1155.0348, -1323.5275, 1102.4965);
      SetPlayerCameraLookAt(playerid, 1154.0360, -1323.5331, 1102.2617);
      SelectTextDraw(playerid, 0xFFFFFFFF);
      PlayerTextDrawShow(playerid, WearButton[playerid]);
      PlayerTextDrawShow(playerid, NextButton[playerid]);
      PlayerTextDrawShow(playerid, PrevButton[playerid]);
      PlayerTextDrawShow(playerid, Dusule1[playerid]);
      PlayerTextDrawShow(playerid, Dusule2[playerid]);
      PlayerTextDrawShow(playerid, Dusule3[playerid]);
      SetIntVar(playerid, "SelectingUniform", 2);
      SetPlayerSkin(playerid, LSFDSkins[0]);
      SkinSlot[playerid] = 0;
      OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
    }
    if(faction == GOV)
    {
      if(PlayerInfo[playerid][pSex] == 2) return SCM(playerid, COLOR_LIGHTRED, "Uniform is only for males.");
      if(!GovDuty{playerid}) return SCM(playerid, COLOR_INFO, "You must be On-Duty to change your uniform.");
      SetPlayerPos(playerid, 368.0215,207.2616,1008.3828);
      SetPlayerFacingAngle(playerid, 89.3372);
      SetPlayerCameraPos(playerid, 362.5712, 207.0600, 1009.9198);
      SetPlayerCameraLookAt(playerid, 363.5698, 207.0535, 1009.5903);
      SelectTextDraw(playerid, 0xFFFFFFFF);
      PlayerTextDrawShow(playerid, WearButton[playerid]);
      PlayerTextDrawShow(playerid, NextButton[playerid]);
      PlayerTextDrawShow(playerid, PrevButton[playerid]);
      PlayerTextDrawShow(playerid, Dusule1[playerid]);
      PlayerTextDrawShow(playerid, Dusule2[playerid]);
      PlayerTextDrawShow(playerid, Dusule3[playerid]);
      SetIntVar(playerid, "SelectingUniform", 3);
      SetPlayerSkin(playerid, GovSkins[0]);
      SkinSlot[playerid] = 0;
      OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
    }
    if(faction == NEWS)
    {
      if(!NewsDuty{playerid}) return SCM(playerid, COLOR_INFO, "You must be On-Duty to change your uniform.");
      SetPlayerPos(playerid, 716.6060,-574.3179,-52.2113);
      SetPlayerFacingAngle(playerid, 91.7609);
      SetPlayerCameraPos(playerid, 709.2285, -574.3010, -50.6226);
      SetPlayerCameraLookAt(playerid, 710.2257, -574.2482, -50.8276);
      SelectTextDraw(playerid, 0xFFFFFFFF);
      PlayerTextDrawShow(playerid, WearButton[playerid]);
      PlayerTextDrawShow(playerid, NextButton[playerid]);
      PlayerTextDrawShow(playerid, PrevButton[playerid]);
      PlayerTextDrawShow(playerid, Dusule1[playerid]);
      PlayerTextDrawShow(playerid, Dusule2[playerid]);
      PlayerTextDrawShow(playerid, Dusule3[playerid]);
      SetIntVar(playerid, "SelectingUniform", 4);
      SetPlayerSkin(playerid, NewsSkins[0]);
      SkinSlot[playerid] = 0;
      OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
    }
  }
  else return SCM(playerid, COLOR_LIGHTRED, "You're not at the place to take the uniform.");
  return 1;

}

stock AbleToArmoury(playerid)
{
  if(IsPlayerInRangeOfPoint(playerid,5.0, 12.2816,-165.5768,999.6010)) return true;
  if(IsPlayerInRangeOfPoint(playerid,5.0,1375.8783,-12.0652,1000.9543)) return true;
  if(IsPlayerInRangeOfPoint(playerid,5.0,1397.8953,-20.0400,1004.5540)) return true;
  if(IsPlayerInRangeOfPoint(playerid,5.0,1564.7664,-1694.2834,1101.0859)) return true;
  return false;
}


CMD:armoury(playerid, params[])
{
  if(PlayerInfo[playerid][pFaction] == 0 || PlayerInfo[playerid][pFaction] != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
  if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty...");
  if(AbleToArmoury(playerid)) return ShowDialog(playerid, Show:<LSPDArmoury>, DIALOG_STYLE_LIST, "LSPD Equipment", "Weapons\nPolice items", "Select", "Cancel");
  return 1;
}
CMD:armourygov(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == 0 || PlayerInfo[playerid][pFaction] != GOV) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
  if(!GovDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty...");
  if(!PlayerToPoint(3.0, playerid, 366.936,215.853,1007.94)) return SCM(playerid, COLOR_WHITE, "You're not in locker room.");
  ShowDialog(playerid, Show:<GovArmoury>, DIALOG_STYLE_LIST, "LSGOV Wardrobe", "Pepper spray\nTonfa\nChamber", "Select", "Cancel");
  return 1;
}
CMD:door(playerid, params[])
{
	if(HouseEntered[playerid] == 0)
	{
		for(new i = 0; i < MAX_OBJECTS; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, Doors[i][doorPosX], Doors[i][doorPosY], Doors[i][doorPosZ]) && Doors[i][doorObjectOn])
			{
				if(Doors[i][doorFaction] != 0 && Doors[i][doorFaction] == PlayerInfo[playerid][pFaction])
				{
					if(Doors[i][doorOpened] == 1)
					{
						Doors[i][doorOpened] = 0;
						MoveDynamicObject(Doors[i][doorObject], Doors[i][doorPosX], Doors[i][doorPosY], Doors[i][doorPosZ], Doors[i][doorOpenSpeed], Doors[i][doorPosRX], Doors[i][doorPosRY], Doors[i][doorPosRZ]);
					}
					else
					{
						Doors[i][doorOpened] = 1;
						MoveDynamicObject(Doors[i][doorObject], Doors[i][doorPosX]-Doors[i][doorMoveX], Doors[i][doorPosY]-Doors[i][doorMoveY], Doors[i][doorPosZ]-Doors[i][doorMoveZ], Doors[i][doorOpenSpeed], Doors[i][doorPosRX], Doors[i][doorPosRY], Doors[i][doorPosRZ]);
					}
					return 1;
				}
			}
		}
	}
	else
	{
		new house = HouseEntered[playerid];
		for(new i = 0; i < MAX_FURNITURE; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, FurnitureInfo[house][i][fPosX], FurnitureInfo[house][i][fPosY], FurnitureInfo[house][i][fPosZ]) && FurnitureInfo[house][i][fOn] && isHouseDoor(FurnitureInfo[house][i][fModel]))
			{
				if(FurnitureInfo[house][i][fOpened] == 0)
				{
					if(FurnitureInfo[house][i][fLocked] == 1) return SCM(playerid, COLOR_GREY, "Door is locked.");
					MoveDynamicObject(FurnitureInfo[house][i][fObject], FurnitureInfo[house][i][fPosX], FurnitureInfo[house][i][fPosY], FurnitureInfo[house][i][fPosZ], 1.5, FurnitureInfo[house][i][fPosRX], FurnitureInfo[house][i][fPosRY], FurnitureInfo[house][i][fPosRZ]-90.0);
					FurnitureInfo[house][i][fOpened] = 1;
				}
				else
				{
					FurnitureInfo[house][i][fOpened] = 0;
					MoveDynamicObject(FurnitureInfo[house][i][fObject], FurnitureInfo[house][i][fPosX], FurnitureInfo[house][i][fPosY], FurnitureInfo[house][i][fPosZ], 1.5, FurnitureInfo[house][i][fPosRX], FurnitureInfo[house][i][fPosRY], FurnitureInfo[house][i][fPosRZ]);
				}
				return 1;
			}
		}
	}
	return 1;
}
CMD:news(playerid, params[])
{
	new pName[MAX_PLAYER_NAME];
	new faction = PlayerInfo[playerid][pFaction];
	new vehicle = GetPlayerVehicleID(playerid);
	new modelcar = GetVehicleModel(vehicle);
	if(isnull(params)) return SyntaxMSG(playerid, "/news [NEWS CHAT]");
	if(faction != NEWS) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	GetPlayerName(playerid, pName, sizeof(pName));
	if(modelcar == 582)
	{
		if(strlen(params) > MAXLEN)
		{
			new pos = MAXLEN;
			if(pos < MAXLEN-1) pos = MAXLEN;
		    format(msg, sizeof(msg), "[NEWS] %s: %.*s ...", GetNameEx(playerid), pos, params);
			SCMALL(COLOR_ORANGE, msg);
			format(msg, sizeof(msg), "[NEWS] %s: ... %s", GetNameEx(playerid), params[pos]);
			SCMALL(COLOR_ORANGE, msg);
		}
		else
		{
			format(msg, sizeof(msg), "[NEWS] %s: %s", GetNameEx(playerid), params);
			SCMALL(COLOR_ORANGE, msg);
		}
	}
	return 1;
}
/*CMD:sangate(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
	if(faction != NEWS) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(newsgatestatus == 0)
	{
		if(PlayerToPoint(12.0,playerid,617.4034, -1506.3966, 13.1628))
		{
			MoveObject(newsgate, 617.4034, -1506.3966, 9.1628, 1.0,0.0000, 0.0000, 90.0000);
			newsgatestatus = 1;
		}
	}
	else
	{
		if(PlayerToPoint(24.0,playerid,617.4034, -1506.3966, 13.1628))
		{
			MoveObject(newsgate, 617.4034, -1506.3966, 13.1628, 1.0,0.0000, 0.0000, 90.0000);
			newsgatestatus = 0;
		}
	}
	return 1;
}*/
CMD:barrier(playerid, params[]) return cmd_gates(playerid, params);
CMD:gates(playerid, params[])
{
	new gate = GetClosestGate(playerid);
	if(gate == -1) return 1;
	if(Gates[gate][gateFaction] != 0 && Gates[gate][gateFaction] != PlayerInfo[playerid][pFaction]) return 1;
	if(Gates[gate][gateOpened] == 1 && Gates[gate][gateOpening] == 0)
	{
		PlaySoundForAll(Gates[gate][gateSound], Gates[gate][gatePosX], Gates[gate][gatePosY], Gates[gate][gatePosZ]);
		SetTimerEx("StopGateSound", Gates[gate][gateSoundLength], false, "iifff", gate, Gates[gate][gateSound], Gates[gate][gatePosX], Gates[gate][gatePosY], Gates[gate][gatePosZ]);
		Gates[gate][gateOpened] = 0;
		Gates[gate][gateOpening] = 1;
		MoveDynamicObject(Gates[gate][gateObject], Gates[gate][gatePosX], Gates[gate][gatePosY], Gates[gate][gatePosZ], Gates[gate][gateOpenSpeed], Gates[gate][gatePosRX], Gates[gate][gatePosRY], Gates[gate][gatePosRZ]);
	}
	else if(Gates[gate][gateOpened] == 0 && Gates[gate][gateOpening] == 0)
	{
		PlaySoundForAll(Gates[gate][gateSound], Gates[gate][gatePosX], Gates[gate][gatePosY], Gates[gate][gatePosZ]);
		SetTimerEx("StopGateSound", Gates[gate][gateSoundLength], false, "iifff", gate, Gates[gate][gateSound], Gates[gate][gatePosX], Gates[gate][gatePosY], Gates[gate][gatePosZ]);
		Gates[gate][gateOpened] = 1;
		Gates[gate][gateOpening] = 1;
		MoveDynamicObject(Gates[gate][gateObject], Gates[gate][gatePosX]-Gates[gate][gateMoveX], Gates[gate][gatePosY]-Gates[gate][gateMoveY], Gates[gate][gatePosZ]-Gates[gate][gateMoveZ], Gates[gate][gateOpenSpeed], Gates[gate][gatePosRX]-Gates[gate][gateMoveRX], Gates[gate][gatePosRY]-Gates[gate][gateMoveRY], Gates[gate][gatePosRZ]-Gates[gate][gateMoveRZ]);
	}
	return 1;
}
//=======================================GOV CMDS====================================//
CMD:govcmds(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] != GOV) return SCM(playerid, COLOR_GREY, "You're not in this faction.");
	SCM(playerid,COLOR_GREEN,"____________________ Government Commands ____________________");
	SCM(playerid, COLOR_GRAD2, "[GOV] (/m)egaphone /frisk /heal /armoury (/gov)ernment /uniform");
	return 1;
}
//=======================================NEWS CMDS====================================//
CMD:newscmds(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] != NEWS) return SCM(playerid, COLOR_GREY, "You're not in this faction.");
  SCM(playerid,COLOR_GREEN,"____________________ CHEN 3 TV Commands ____________________");
  SCM(playerid, COLOR_GRAD2, "[CHEN] /uniform /duty /cameranews /news /live");
  return 1;
}
//=================================Police Commands=================================//
CMD:pcmds(playerid, params[]) return cmd_policecmds(playerid, params);
CMD:policecmds(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != LSPD) return SCM(playerid, COLOR_GREY, "You're not in this faction.");
	SCM(playerid,COLOR_GREEN,"____________________ Police Commands ____________________");
	SCM(playerid, COLOR_GRAD2, "[LSPD] /gates /barrier /handcuff /unhandcuff (/m)egaphone /tazer /frisk /mdc /door /gate /armoury (/gov)ernment /swatequip");
	SCM(playerid, COLOR_GRAD2, "[LSPD] /rb(1-10) /rrb(1-10) /cone /disband /arrest /revoke /createspike /apb /giveairlicense /revokeairlicense");
	SCM(playerid, COLOR_GRAD2, "[LSPD] /removespike /removeallspikes /cctv /exitcctv /ptow /impound /tolls /objectsoff /setspawnpd ");
	SCM(playerid, COLOR_GRAD2, "[LSPD] /authorizeswat /deauthorizeswat /siren /siren2 /checkplate /pticket /heal /tagcolor /startelm");
  SCM(playerid, COLOR_GRAD2, "[LSPD] /setkevlar /kevlaredit /fine /fines /vehiclefines /vehiclefine");
	return 1;
}

CMD:fdcmds(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != LSFD) return SCM(playerid, COLOR_GREY, "You're not in this faction.");
	SCM(playerid,COLOR_GREEN,"____________________ FD Commands ____________________");
	SCM(playerid, COLOR_WHITE,"[LSFD] /emsup /emsdown /duty /uniform /flist (/d)epartments (/f)action /showbadge (/r)adio /rlow /door");
	SCM(playerid, COLOR_WHITE,"[LSFD] /heal /putinambu /operation /hpc /siren (/m)egaphone (/gov)ernment /gate");
	return 1;
}

//=================================FD Commands=================================//
CMD:putinambu(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction], id, seat, vehicle = GetPlayerVehicleID(playerid);
	if(faction != LSFD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(sscanf(params,"ud",id,seat)) return SyntaxMSG(playerid, "/putinambu [playerid/PartOfName] [seat(1-3)]");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(seat > 3 || seat < 1) return SCM(playerid, COLOR_WHITE, "Seat ID must be 1-3.");
	if(id == playerid) return SCM(playerid, COLOR_WHITE, "You cannot put yourself.");
	if(!PlayerNearPlayer(10.0, playerid, id)) return NotNearPlayerMSG(playerid);
	if(!PlayerIsWounded(id)) return SCM(playerid, COLOR_GREY, "This player isn't wounded.");
	if(!PlayerInCar(playerid)) return SCM(playerid, COLOR_GREY, "You must be inside a vehicle.");
	StopPlayerAnims(id);
	ResetDamages(id);
  RemoveVar(id, "JustDied");
  RemoveVar(id, "LoggedInDead");
  PlayerInfo[id][pDied] = 0;
  TimerDeath1[id] = 0;
  KillTimer(Death[id]);
	PutPlayerInVehicle(id, vehicle, seat);
	SCMEx(playerid, COLOR_LIGHTRED, "You have placed %s into your vehicle.", GetNameEx(id));
	SCMEx(id, COLOR_LIGHTRED, "You have been taken into %s's vehicle.", GetNameEx(playerid));
	return 1;
}

CMD:operation(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction], id;
	if(faction != LSFD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/operation [playerid/PartOfName]");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(id == playerid) return SCM(playerid, COLOR_WHITE, "You cannot heal yourself.");
	if(!PlayerNearPlayer(10.0, playerid, id)) return NotNearPlayerMSG(playerid);
	if(!PlayerIsWounded(id)) return SCM(playerid, COLOR_GREY, "This player isn't wounded.");
	StopPlayerAnims(id);
	RemoveVar(id, "JustDied");
	RemoveVar(id, "LoggedInDead");
  TimerDeath1[id] = 0;
  KillTimer(Death[id]);
	PlayerInfo[id][pDied] = 0;
	UnFreezePlayer(id);
	SetPlayerHealth(id, 100.0);
	ResetDamages(id);
	SavePlayerPos(id);
	StopPlayerSpec(id);
	PutPlayer(id, PlayerInfo[id][pPosX],PlayerInfo[id][pPosY],PlayerInfo[id][pPosZ]);
	SCMEx(playerid, COLOR_LIGHTRED, "* You have healed %s.", GetNameEx(id));
	SCMEx(id, COLOR_LIGHTRED, "* %s %s healed you and take care on you.", GetRankName(playerid), GetNameEx(playerid));
	return 1;
}

CMD:hpc(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction], id, vehicle = GetPlayerVehicleID(playerid);
	if(faction != LSFD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/hpc [playerid/PartOfName]");
	if(!IsAFDCar(vehicle)) return SCM(playerid, COLOR_WHITE, "You must be inside an FD vehicle.");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);\
	SCM(playerid, COLOR_YELLOW3,"HPC- High Performance Computing of informations");
	SCM(playerid, COLOR_WHITE, "FD SYSTEM MDC - SEARCH RESULT");
	SCM(playerid, COLOR_WHITE, "");
	SCM(playerid, COLOR_WHITE, "NAME SEARCH RESULT");
	SCM(playerid, COLOR_WHITE, "");
	SCMEx(playerid, COLOR_WHITE, "* Information - %s", GetFullDate());
	SCMEx(playerid, COLOR_WHITE, "Full name: %s, Age: %d, Phone Number: %d.", GetNameEx(id), PlayerInfo[id][pAge], PlayerInfo[id][pNumber]);
	SCMEx(playerid, COLOR_WHITE, "Registered Address: %s", GetHouseLocation(id));
	return 1;
}

//=================================FD Commands=================================//
CMD:emsup(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if(faction != LSFD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(PlayerToPoint(10, playerid,1172.1512,-1323.0029,15.4022))
	{
 		SetPlayerPos(playerid, 1163.1089,-1312.0444,31.4915);
	}
	return 1;
}
CMD:emsdown(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
	if(faction != LSFD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(PlayerToPoint(10, playerid,1163.1089,-1312.0444,31.4915))
	{
 		SetPlayerPos(playerid, 1172.1512,-1323.0029,15.4022);
	}
	return 1;
}
CMD:heal(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD && faction != LSFD && faction != GOV) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(faction == LSPD)
	{
		if(!AbleToDuty(playerid)) return SCM(playerid, COLOR_WHITE, "You're not in armory.");
		SCM(playerid, COLOR_WHITE, "You've been healed to 100 percent and were supplied with some new body armour.");
		SetPlayerHealth(playerid, 100.0);
		SetPlayerArmour(playerid, 100.0);
	}
	if(faction == GOV)
	{
		if(!PlayerToPoint(30.0, playerid, 366.93619, 215.85332, 1007.94287)) return SCM(playerid, COLOR_WHITE, "You're not in armory.");
		SCM(playerid, COLOR_WHITE, "You've been healed to 100 percent and were supplied with some new body armour.");
		SetPlayerHealth(playerid, 100.0);
		SetPlayerArmour(playerid, 100.0);
	}
	if(faction == LSFD) //FD Heal
	{
		new id, Float:slx, Float:sly, Float:slz;
		if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/heal [playerid/PartOfName]");
		if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
		if(id == playerid) return SCM(playerid, COLOR_WHITE, "You cannot heal yourself.");
		if(!PlayerNearPlayer(5.0, playerid, id)) return NotNearPlayerMSG(playerid);
		if(GetIntVar(id, "JustDied") == 1 || PlayerInfo[id][pDied] == 1 || GetIntVar(id, "LoggedInDead") == 1)
		{
			SetPlayerHealth(id, 100.0);
			PlayerInfo[id][pDied] = 0;
			TimerDeath1[id] = 0;
			KillTimer(Death[id]);
			UnFreezePlayer(id);
			RemoveVar(id, "JustDied");
			RemoveVar(id, "LoggedInDead");
			RemoveVar(id, "JustAcceptedDeath");
			StopPlayerAnims(id);
			GetPlayerPos(id, slx, sly, slz);
			SetPlayerPos(id, slx, sly, slz+1);
			SCM(playerid, COLOR_YELLOWG, "INFO: The player has received 100 HP.");
			SavePlayerPos(id);
			StopPlayerSpec(id);
			PutPlayer(id, PlayerInfo[id][pPosX],PlayerInfo[id][pPosY],PlayerInfo[id][pPosZ]);
			ResetDamages(id);
			Delete3DTextLabel(DamageShot[id]);
		}
	}
	return 1;
}

CMD:gov(playerid, params[]) return cmd_government(playerid, params);
CMD:government(playerid, params[])
{
	if(isnull(params)) return SyntaxMSG(playerid, "(/gov)ernment [message]");
	new faction = PlayerInfo[playerid][pFaction];
	new rank = PlayerInfo[playerid][pRank];
	if(faction != LSPD && faction != SASD && faction != LSFD && faction != GOV) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(rank != Factions[faction][fLeaderRank] && rank != Factions[faction][fLeaderRank]-1) return SCM(playerid, COLOR_GREY, "Only those with the rank of leader can use this.");
	if(strlen(params) > MAXLEN)
	{
    	new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		format(msg, sizeof(msg), "[Government Annoucement] %.*s ...", pos, params);
		SCMALL(COLOR_GOVCHAT, msg);
		format(msg, sizeof(msg), "[Government Annoucement] ... %s", params[pos]);
		SCMALL(COLOR_GOVCHAT, msg);
	}
	else
	{
		format(msg, sizeof(msg), "[Government Annoucement] %s", params);
		SCMALL(COLOR_GOVCHAT, msg);
	}
	return 1;
}

CMD:tolls(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	new option[11];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(sscanf(params,"s[11]",option))
	{
		SCM(playerid, COLOR_YELLOW, "Control barriers San Andreas");
		SCM(playerid, COLOR_GREY, "lock/release - Block/Unblock all barriers.");
		SCM(playerid, COLOR_GREY, "flint - Block/Unblock barriers from Flint County.");
		SCM(playerid, COLOR_GREY, "richman - Block/Unblock barriers from Richman.");
		SCM(playerid, COLOR_GREY, "lv - Block/Unblock barriers from LS-LV.");
		SCM(playerid, COLOR_GREY, "blueberryr - Block/Unblock barriers from Blueberry(RIGHT).");
		SCM(playerid, COLOR_GREY, "blueberryl - Block/Unblock barriers from Blueberry(LEFT).");
		return 1;
	}
	if(!Toll_TimePassedCops(playerid))
		return 1;
	if(CompareStrings(option, "lock"))
	{
		aTolls[FlintToll][E_tLocked] = 1;
		aTolls[RichmanToll][E_tLocked] = 1;
		aTolls[LVToll][E_tLocked] = 1;
		aTolls[BlueberryTollR][E_tLocked] = 1;
		aTolls[BlueberryTollL][E_tLocked] = 1;

		Toll_CloseToll(FlintToll);
		Toll_CloseToll(RichmanToll);
		Toll_CloseToll(LVToll);
		Toll_CloseToll(BlueberryTollR);
		Toll_CloseToll(BlueberryTollL);

		format(msg, 256, "** HQ Announcement: %s %s blocked all barriers! **", GetRankName(playerid), GetNameEx(playerid));
		SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
	}
	if(CompareStrings(option, "release"))
	{
		aTolls[FlintToll][E_tLocked] = 0;
		aTolls[RichmanToll][E_tLocked] = 0;
		aTolls[LVToll][E_tLocked] = 0;
		aTolls[BlueberryTollR][E_tLocked] = 0;
		aTolls[BlueberryTollL][E_tLocked] = 0;
		format(msg, 256, "** HQ Announcement: %s %s unblocked all the barriers! **",GetRankName(playerid), GetNameEx(playerid));
		SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
	}
	if(CompareStrings(option, "flint"))
	{
		if(aTolls[FlintToll][E_tLocked] == 0)
		{
			aTolls[FlintToll][E_tLocked] = 1;
			Toll_CloseToll(FlintToll);
			format(msg, 256, "** HQ Announcement: Tool booths at Flint County were LOCKED by %s %s **",GetRankName(playerid), GetNameEx(playerid));
			SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
		}
		else
		{
			aTolls[FlintToll][E_tLocked] = 0;
			format(msg, 256, "** HQ Announcement: Tool booths at Flint County were UNLOCKED by %s %s **", GetRankName(playerid), GetNameEx(playerid));
			SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
		}
	}
	if(CompareStrings(option, "richman"))
	{
		if(aTolls[RichmanToll][E_tLocked] == 0)
		{
			aTolls[RichmanToll][E_tLocked] = 1;
			Toll_CloseToll(RichmanToll);
			format(msg, 256, "** HQ Announcement: Tool booths at Richman were LOCKED by %s %s **", GetRankName(playerid), GetNameEx(playerid));
			SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
		}
		else
		{
			aTolls[RichmanToll][E_tLocked] = 0;
			format(msg, 256, "** HQ Announcement: Tool booths at Richman were UNLOCKED by %s %s **", GetRankName(playerid), GetNameEx(playerid));
			SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
		}
	}
	if(CompareStrings(option, "lv"))
	{
		if(aTolls[LVToll][E_tLocked] == 0)
		{
			aTolls[LVToll][E_tLocked] = 1;
			Toll_CloseToll(LVToll);
			format(msg, 256, "** HQ Announcement: %s %s blocked all barriers from LS-LV! **", GetRankName(playerid), GetNameEx(playerid));
			SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
		}
		else
		{
			aTolls[LVToll][E_tLocked] = 0;
			format(msg, 256, "** HQ Announcement: %s %s unblocked all barriers from LS-LV! **", GetRankName(playerid), GetNameEx(playerid));
			SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
		}
	}
	if(CompareStrings(option, "blueberryr"))
	{
		if(aTolls[BlueberryTollR][E_tLocked] == 0)
		{
			aTolls[BlueberryTollR][E_tLocked] = 1;
			Toll_CloseToll(BlueberryTollR);
			format(msg, 256, "** HQ Announcement: %s %s blocked all barriers from Blueberry(RIGHT)! **", GetRankName(playerid), GetNameEx(playerid));
			SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
		}
		else
		{
			aTolls[BlueberryTollR][E_tLocked] = 0;
			format(msg, 256, "** HQ Announcement: %s %s unblocked all barriers from Blueberry(RIGHT)! **", GetRankName(playerid), GetNameEx(playerid));
			SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
		}
	}
	if(CompareStrings(option, "blueberryl"))
	{
		if(aTolls[BlueberryTollL][E_tLocked] == 0)//23914
		{
			aTolls[BlueberryTollL][E_tLocked] = 1;
			Toll_CloseToll(BlueberryTollL);
			format(msg, 256, "** HQ Announcement: %s %s blocked all barriers from Blueberry(LEFT)! **", GetRankName(playerid), GetNameEx(playerid));
			SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
		}
		else
		{
			aTolls[BlueberryTollL][E_tLocked] = 0;
			format(msg, 256, "** HQ Announcement: %s %s unblocked all barriers from Blueberry(LEFT)! **", GetRankName(playerid), GetNameEx(playerid));
			SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
		}
	}
	return 1;
}

CMD:apb(playerid, params[])
{
    new action[24], secoption[24];
  new faction = PlayerInfo[playerid][pFaction];
  if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
  if(sscanf(params,"s[24]S(NULL)[128]", action, secoption))
  {
    SCM(playerid, COLOR_WHITE, "__________________________________");
    SyntaxMSG(playerid, "/apb [action]");
    SCM(playerid, COLOR_LIGHTRED, "[SHOW] /apb show [page number]");
    SCM(playerid, COLOR_LIGHTRED, "[DETAILS] /apb details [number]");
    SCM(playerid, COLOR_LIGHTRED, "[CLEAR] /apb clear [number]");
    SCM(playerid, COLOR_LIGHTRED, "[MODIFY] /apb modify [number] [suspect|charges]");
    SCM(playerid, COLOR_LIGHTRED, "[CREATE] /apb create [suspect|charges]");
    SCM(playerid, COLOR_LIGHTRED, "Example: /apb create White Huntley|Evading");
    SCM(playerid, COLOR_WHITE, "__________________________________");
    return 1;
  }
  if(CompareStrings(action, "show"))
  {
    new page;
    if(sscanf(params,"{s[64]}d",page)) return SyntaxMSG(playerid, "/apb show [page number]");
    ShowAPB(playerid, page);
  }
  else if(CompareStrings(action, "details"))
  {
    new number;
    if(sscanf(params,"{s[64]}d",number)) return SyntaxMSG(playerid, "/apb details [number]");
    if(!ApbInfo[number][apbOn]) return SCM(playerid, COLOR_GREY, "No such APB.");
    SCMEx(playerid, COLOR_LIGHTRED, "_________All Points Bulletins Number %d_________", number);
    SCMEx(playerid, COLOR_LIGHTRED, "APB: %s", ApbInfo[number][apbSuspect]);
    SCMEx(playerid, COLOR_LIGHTRED, "CHARGES: %s", ApbInfo[number][apbCharge]);
    SCMEx(playerid, COLOR_LIGHTRED, "_______ISSUED BY: %s, LSPD._______", ApbInfo[number][apbOfficer]);
  }
  else if(CompareStrings(action, "clear"))
  {
    new number;
    if(sscanf(params,"{s[64]}d",number)) return SyntaxMSG(playerid, "/apb clear [number]");
    if(!ApbInfo[number][apbOn]) return SCM(playerid, COLOR_GREY, "No such APB.");
    SCMEx(playerid, COLOR_LIGHTRED, "You have just cleared APB number, %d.", number);
    format(ApbInfo[number][apbCharge], 128, "None");
    format(ApbInfo[number][apbSuspect], 128, "None");
    format(ApbInfo[number][apbOfficer], 128, "None");
    ApbInfo[number][apbPage] = -1;
    ApbInfo[number][apbOn] = 0;
    format(msg, sizeof(msg), "* HQ: %s %s has just cleared APB number %d.", GetRankName(playerid), GetNameEx(playerid), number);
    SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
    format(query, sizeof(query), "DELETE FROM `apbs` WHERE `id` = %d", ApbInfo[number][apbID]);
    mysql_function_query(dbHandle, query, false, "", "");
  }
  else if(CompareStrings(action, "modify"))
  {
    new number, info[256];
    if(sscanf(params,"{s[64]}ds[256]",number,info)) return SyntaxMSG(playerid, "/apb modify [number] [suspect|charges]");
    if(!ApbInfo[number][apbOn]) return SCM(playerid, COLOR_GREY, "No such APB.");
    SCMEx(playerid, COLOR_LIGHTRED, "You have just modified APB number, %d.", number);
    new tmp[2][256];
    explode(tmp, info, "|");
    format(ApbInfo[number][apbSuspect], 256, "%s", tmp[0]);
    format(ApbInfo[number][apbCharge], 256, "%s", tmp[1]);
    format(msg, sizeof(msg), "* HQ: %s %s has just modified APB number %d.", GetRankName(playerid), GetNameEx(playerid), number);
    SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
    format(query, sizeof(query), "UPDATE `apbs` SET `charge` = '%s', `suspect` = '%s' WHERE `id` = %d", tmp[1], tmp[0], ApbInfo[number][apbID]);
    mysql_function_query(dbHandle, query, false, "", "");
  }
  else if(CompareStrings(action, "create"))
  {
    new infoo[256], apbid;
    if(sscanf(params,"s[256]",infoo)) return SyntaxMSG(playerid, "/apb create [suspect|charges]");
    new tmpa[2][256];
    explode(tmpa, infoo, "|");
    apbid = GetNextApbID();
    format(msg, sizeof(msg), "* HQ: %s %s has just created APB number %d.", GetRankName(playerid), GetNameEx(playerid), GetNextApbID());
    SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
    SCMEx(playerid, COLOR_LIGHTRED, "You have just created APB number, %d.", GetNextApbID());
    format(query, sizeof(query), "INSERT INTO `apbs` (`charge`, `suspect`, `officer`) VALUES ('%s', '%s', '%s %s')", tmpa[1], tmpa[0], GetRankName(playerid), GetNameEx(playerid));
    mysql_function_query(dbHandle, query, false, "", "");
    ApbInfo[apbid][apbOn] = 1;
    format(ApbInfo[apbid][apbSuspect], 256, "%s", tmpa[0]);
    format(ApbInfo[apbid][apbCharge], 256, "%s", tmpa[1]);
    format(ApbInfo[apbid][apbOfficer], 145, "%s %s", GetRankName(playerid), GetNameEx(playerid));
  }
  return 1;
}

/*CMD:makehouse(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new houseid, level, price, houseinfo[256], Float:x, Float:y, Float:z;
	if(sscanf(params,"dds[256]", level, price, houseinfo)) return SyntaxMSG(playerid, "/makehouse [buylevel] [price] [info]");
	houseid = GetNextHouseID();
	GetPlayerPos(playerid, x, y, z);
	HouseInfo[houseid][hEntranceX] = x;
	HouseInfo[houseid][hEntranceY] = y;
	HouseInfo[houseid][hEntranceZ] = z;
	HouseInfo[houseid][hExitX] = 0.0;
	HouseInfo[houseid][hExitY] = 0.0;
	HouseInfo[houseid][hExitZ] = 0.0;
	HouseInfo[houseid][hCheckPosX] = 0.0000;
	HouseInfo[houseid][hCheckPosY] = 0.0000;
	HouseInfo[houseid][hCheckPosZ] = 0.0000;
	HouseInfo[houseid][hLevelbuy] = level;
	HouseInfo[houseid][hPrice] = price;
	HouseInfo[houseid][hOwned] = 0;
	HouseInfo[houseid][hLocked] = 1;
	HouseInfo[houseid][hRentprice] = 0;
	HouseInfo[houseid][hRentable] = 0;
	HouseInfo[houseid][hInterior] = 0;
	HouseInfo[houseid][hWorld] = 0;
	HouseInfo[houseid][hCash] = 0;
	HouseInfo[houseid][hRadio] = 0;
	format(HouseInfo[houseid][hInfo], 256, "%s", houseinfo);
	format(HouseInfo[houseid][hOwner], 256, "The State");
	HouseInfo[houseid][hHouseOn] = 1;

	format(msg, sizeof(msg), ""EMBED_YELLOW"["EMBED_WHITE"House ID %d"EMBED_YELLOW"]\n"EMBED_WHITE"%s\n"EMBED_GREEN"Price: $%d - "EMBED_WHITE"Level: %d", houseid, houseinfo, price, level);
	HouseInfo[houseid][hLabel] = CreateDynamic3DTextLabel(msg, -1, x, y, z, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	HouseInfo[houseid][hCheckPoint] = CreateDynamicCP(x, y, z, 1.0, -1, -1, -1, 2.0);
	AddHouseToFile(houseid, level, price, houseinfo, x, y, z);
	format(msg, sizeof(msg), "A new House was added, [Level: %d, Price: %d, House Info: %s]", level, price, houseinfo);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}*/

CMD:clearrecord(playerid, params[])
{
  new id;
  new faction = PlayerInfo[playerid][pFaction];
  if(faction != LSPD && faction != SASD && faction != LSFD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
  if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/clearrecord [playerid/PartOfName]");
  if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
  SCMEx(playerid, COLOR_WHITE,"Charges from %s was been deleted by you.", GetNameEx(id));
  format(query, sizeof(query), "DELETE FROM `criminalrecords` WHERE `userid` = %d", PlayerInfo[playerid][pDatabaseID]);
  mysql_function_query(dbHandle, query, true, "","");
  SavePlayerStats(id);
  return 1;
}

CMD:wanted(playerid, params[])
{
	new id, charge[64];
	new faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD && faction != LSFD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(sscanf(params,"us[64]",id,charge)) return SyntaxMSG(playerid, "/wanted [playerid/PartOfName] [crime discription]");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(AddCriminalRecord(id, charge, playerid))
	{
		format(msg, sizeof(msg), "[WANTED] Suspect: %s, Reporter: %s Crime: %s", GetNameEx(id), GetNameEx(playerid), charge);
		SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
	}
	else
	{
		SCM(playerid, COLOR_LIGHTRED, "Charges could not be added");
	}
	return 1;
}

CMD:respawnfactioncars(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD && faction != LSFD && faction != GOV) return SCM(playerid, COLOR_LIGHTRED, "You're not in a faction.");
	if(!isLeader(playerid)) return SCM(playerid, COLOR_GREY,"Only leader can use this.");
	if(faction == LSPD)
	{
		format(msg, sizeof(msg), "** %s %s spawned all faction cars. **", GetRankName(playerid), GetNameEx(playerid));
		SendFactionMessage(LSPD, COLOR_LSPD, msg);
		for(new i = 0; i < MAX_VEHICLES; i++)
		{
			if(IsACopCar(i))
			{
				if(VehicleEmpty(i))
				{
					RespawnVehicle(i);
				}
			}
		}
	}
	else if(faction == LSFD)
	{
		format(msg, sizeof(msg), "** %s %s spawned all faction cars. **", GetRankName(playerid), GetNameEx(playerid));
		SendFactionMessage(LSFD, LSFD_COLOR, msg);
		for(new i = 0; i < MAX_VEHICLES; i++)
		{
			if(IsAFDCar(i))
			{
				if(VehicleEmpty(i))
				{
					RespawnVehicle(i);
				}
			}
		}
	}
  else if(faction == GOV)
	{
		format(msg, sizeof(msg), "** %s %s spawned all faction cars. **", GetRankName(playerid), GetNameEx(playerid));
		SendFactionMessage(GOV, LSFD_COLOR, msg);
		for(new i = 0; i < MAX_VEHICLES; i++)
		{
			if(IsAGovCar(i))
			{
				if(VehicleEmpty(i))
				{
					RespawnVehicle(i);
				}
			}
		}
	}
	return 1;
}

CMD:checkplate(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SCM(playerid, COLOR_WHITE, "You must be on foot.");
	new counter = 0, result;
	for(new i; i != MAX_VEHICLES; i++)
	{
		new dist = CheckPlayerDistanceToVehicle(4.0, playerid, i);
		if(dist)
		{
			result = i;
			counter++;
		}
	}
	switch(counter)
	{
		case 0: SCM(playerid, COLOR_GREY, "There are no cars around..");
		case 1:
		{
			format(msg, sizeof(msg), "* Check plate...result: %s.", VehicleInfo[result][carPlate]);
			SCM(playerid, COLOR_GREEN, msg);
		}
		default: SCM(playerid, COLOR_GREY, "Found more then one car in range.");
	}
	return 1;
}

CMD:siren(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction], vehicle = GetPlayerVehicleID(playerid);
	new model = GetVehicleModel(vehicle);
	if(faction != LSPD && faction != SASD && faction != LSFD && faction != GOV) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
	if(faction == LSPD)
	{
		if(model != 560 && model != 541 && model != 525 && model != 426 && model != 579) return SCM(playerid, COLOR_GREY, "Siren is compatible only with Sultan/Bullet/Towtruck/Premier/Huntley.");
		if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "You must be the driver.");
		if(Siren[vehicle] == 0)
		{
			if(model == 560)
			{
				Siren[vehicle] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
				AttachDynamicObjectToVehicle(Siren[vehicle], vehicle, 0.225000,0.750000,0.449999, 0.000000, 0.000000, 0.000000);
			}
			if(model == 541)
			{
				Siren[vehicle] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
				AttachDynamicObjectToVehicle(Siren[vehicle], vehicle, 0.375000,0.524999,0.375000, 0.000000, 0.000000, 0.000000);
			}
			if(model == 426)
			{
				Siren[vehicle] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
				AttachDynamicObjectToVehicle(Siren[vehicle], vehicle, 0.524999,0.749999, 0.375000, 0.000000, 0.000000, 0.000000);
			}
			if(model == 525)
			{
				Siren[vehicle] = CreateDynamicObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
				AttachDynamicObjectToVehicle(Siren[vehicle], vehicle, 0.0, -0.485, 1.36, 0.000000, 0.000000, 180.0);
			}
			if(model == 579)
			{
				Siren[vehicle] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
				AttachDynamicObjectToVehicle(Siren[vehicle], vehicle,  0.679999, 0.479999, 0.734999, 0.000000, 0.000000, 0.000000);
			}
		}
		else
		{
			SCM(playerid, COLOR_LIGHTGREEN, "You detached siren.");
			DestroyDynamicObject(Siren[vehicle]);
			Siren[vehicle] = 0;
		}
	}
	if(faction == LSFD)
	{
		if(model != 489) return SCM(playerid, COLOR_GREY, "The siren is compatible only for Rancher FD.");
		if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "You must be the driver.");
		if(Siren[vehicle] == 0)
		{
			SCM(playerid, COLOR_LIGHTGREEN, "You detached siren.");
			Siren[vehicle] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(Siren[vehicle], vehicle,  0.654999, 1.149999, 0.594999, 0.000000, 0.000000, 0.000000);
		}
		else
		{
			SCM(playerid, COLOR_LIGHTGREEN, "You detached siren.");
			DestroyDynamicObject(Siren[vehicle]);
			Siren[vehicle] = 0;
		}
	}
    if(faction == GOV)
	{
		if(model != 560) return SCM(playerid, COLOR_GREY, "The siren is compatible only for Sultan.");
		if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "You must be the driver.");
		if(Siren[vehicle] == 0)
		{
			SCM(playerid, COLOR_LIGHTGREEN, "You detached siren.");
			Siren[vehicle] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(Siren[vehicle], vehicle,  0.654999, 1.149999, 0.594999, 0.000000, 0.000000, 0.000000);
		}
		else
		{
			SCM(playerid, COLOR_LIGHTGREEN, "You detached siren.");
			DestroyDynamicObject(Siren[vehicle]);
			Siren[vehicle] = 0;
		}
	}
	return 1;
}

CMD:siren2(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction], vehicle = GetPlayerVehicleID(playerid);
	new model = GetVehicleModel(vehicle);
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
	if(model != 560 && model != 426) return SCM(playerid, COLOR_GREY, "The siren is compatible only for Sultan/Premier.");
	if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "You must be the driver.");
	if(Siren2[vehicle] == 0)
	{
	    SCM(playerid, COLOR_LIGHTGREEN, "You detached siren.");
		if(model == 560)
		{
			Siren2[vehicle] = CreateDynamicObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(Siren2[vehicle], vehicle, 0.000000, -1.289999, 0.394999, 0.000000, 0.000000, 0.000000);
		}
		if(model == 426)
		{
			Siren2[vehicle] = CreateDynamicObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(Siren2[vehicle], vehicle, 0.000000, -1.669998, 0.349999, 0.000000, 0.000000, 0.000000);
		}
	}
	else
	{
		SCM(playerid, COLOR_LIGHTGREEN, "You detached siren.");
		DestroyDynamicObject(Siren2[vehicle]);
		Siren2[vehicle] = 0;
	}
	return 1;
}
CMD:swatequip(playerid, params[])
{
	if(PlayerInfo[playerid][pSwat] == 0) return SCM(playerid, COLOR_WHITE,"You don't have permission to SWAT Team.");
	if(!AbleToDuty(playerid)) return SCM(playerid, COLOR_WHITE, "You're not the place to take duty.");
	if(!SwatDuty{playerid})
	{
		SwatDuty{playerid} = true;
		SetPlayerArmour(playerid,200);
		SetPlayerHealth(playerid,200);
		GiveWeapon(playerid, 31, 500);
		GiveWeapon(playerid, 29, 300);
		GiveWeapon(playerid, 24, 55);
    GiveWeapon(playerid, 27, 400);
		SetPlayerSkin(playerid, 285);
		format(msg, sizeof(msg), "** HQ: %s %s is available as SWAT! **",GetRankName(playerid), GetNameEx(playerid));
		SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
	}
	else
	{
		SwatDuty{playerid} = false;
		SetPlayerArmour(playerid,100);
		SafeResetPlayerWeapons(playerid);
		SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		format(msg, sizeof(msg), "** HQ: %s %s no longer available as SWAT! **",GetRankName(playerid), GetNameEx(playerid));
		SendFactionMessage(LSPD, COLOR_LSPDNEW, msg);
	}
	return 1;
}
CMD:authorizeswat(playerid, params[])
{
	new iPlayerID;
	if(sscanf(params,"u",iPlayerID)) return SyntaxMSG(playerid, "/authorizeswat [playerid/PartOfName]");
	if(PlayerInfo[playerid][pFaction] != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(!PlayerIsOn(iPlayerID)) return NotConnectedMSG(playerid);
	if(isLeader(playerid))
	{
		if(PlayerInfo[iPlayerID][pFaction] == PlayerInfo[playerid][pFaction])
		{
			PlayerInfo[iPlayerID][pSwat] = 1;
			format(msg, sizeof(msg), "* %s %s gave you permission to SWAT equipment.", GetRankName(playerid), GetNameEx(playerid));
			SCM(iPlayerID, COLOR_LIGHTBLUE, msg);
			format(msg, sizeof(msg), "* You gave %s permission to SWAT equipment.", GetNameEx(iPlayerID));
			SCM(playerid, COLOR_LIGHTBLUE, msg);
		}
		else return SCM(playerid, COLOR_LIGHTRED, "This player is not in your faction.");
	}
	else return SCM(playerid, COLOR_LIGHTRED, "You are not the leader.");
	return 1;
}

CMD:deauthorizeswat(playerid, params[])
{
	new iPlayerID;
	if(sscanf(params,"u",iPlayerID)) return SyntaxMSG(playerid, "/deauthorizeswat [playerid/PartOfName]");
	if(PlayerInfo[playerid][pFaction] != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(!PlayerIsOn(iPlayerID)) return NotConnectedMSG(playerid);
	if(!PlayerNearPlayer(3.0, playerid, iPlayerID)) return NotNearPlayerMSG(playerid);
	if(isLeader(playerid))
	{
		if(PlayerInfo[iPlayerID][pFaction] == PlayerInfo[playerid][pFaction])
		{
			PlayerInfo[iPlayerID][pSwat] = 0;
			format(msg, sizeof(msg), "* %s %s take your permission to SWAT equipment.", GetRankName(playerid), GetNameEx(playerid));
			SCM(iPlayerID, COLOR_LIGHTBLUE, msg);
			format(msg, sizeof(msg), "*  You have take %s's permission to SWAT equipment.", GetNameEx(iPlayerID));
			SCM(playerid, COLOR_LIGHTBLUE, msg);
		}
		else return SCM(playerid, COLOR_LIGHTRED, "This player is not in your faction.");
	}
	else return SCM(playerid, COLOR_LIGHTRED, "You are not the leader.");
	return 1;
}

CMD:impound(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction], vehicle = GetPlayerVehicleID(playerid);
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty.");
	if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
	if(!IsATowTruck(vehicle) && !IsACopTowTruck(vehicle)) return SCM(playerid, COLOR_GREY, "You must be in a towtruck.");
	if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "You must be the driver.");
	if(!IsTrailerAttachedToVehicle(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "You are not towing a vehicle.");
	if(VehicleInfo[TowingCar[playerid]][carOwned] == 0) return SCM(playerid, COLOR_GREY, "You can only impound an owned vehicle.");
	if(!PlayerToPoint(20.0, playerid, -1209.9501,-1064.3761,128.2656)) return SCM(playerid, COLOR_LIGHTRED, "You are not in the impound lot.");
	new Float:vX, Float:vY, Float:vZ;
	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	GetVehiclePos(TowingCar[playerid], vX, vY, vZ);
	VehicleInfo[TowingCar[playerid]][carParkX] = vX;
	VehicleInfo[TowingCar[playerid]][carParkY] = vY;
	VehicleInfo[TowingCar[playerid]][carParkZ] = vZ;
	SCM(playerid, COLOR_LIGHTBLUE, "* You have successfully impounded this vehicle.");
	VehicleEngine(TowingCar[playerid], false);
	SaveVehicle(TowingCar[playerid]);
	foreach(Player, i)
	{
		if(PlayerInfo[i][pCarKey] == TowingCar[playerid])
		{
			format(msg, sizeof(msg), "* Your %s was impounded by %s %s.", VehicleNames[VehicleInfo[TowingCar[playerid]][carModel]-400], GetRankName(playerid), GetNameEx(playerid));
			SCM(i, COLOR_LIGHTBLUE, msg);
		}
	}
	TowingCar[playerid] = INVALID_VEHICLE_ID;
	return 1;
}

CMD:ptow(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction], vehicle = GetPlayerVehicleID(playerid);
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty.");
	if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
	if(!IsATowTruck(vehicle) && !IsACopTowTruck(vehicle)) return SCM(playerid, COLOR_GREY, "You must be in a towtruck.");
	if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "You must be the driver.");
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	new Float:vX, Float:vY, Float:vZ;
	new found = 0, vid = 0;
	while(vid < MAX_VEHICLES && found == 0)
	{
		vid++;
		GetVehiclePos(vid, vX, vY, vZ);
		if((floatabs(x-vX)<7.0) && (floatabs(y-vY)<7.0) && (floatabs(z-vZ)<7.0) && (vid!=GetPlayerVehicleID(playerid)))
		{
			found = 1;
			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			{
				TowingCar[playerid] = INVALID_VEHICLE_ID;
				DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
			}
			else
			{
				TowingCar[playerid] = vid;
				AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
			}
		}
	}
	if(found == 0) return SCM(playerid, COLOR_GREY, "There is no car in the range.");
	return 1;
}

CMD:cctv(playerid, params[])
{
	new id, faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(sscanf(params,"d",id))
	{
		SyntaxMSG(playerid, "/cctv [CameraID]");
		SCM(playerid, COLOR_LIGHTBLUE, "|_____________CCTV's Control_____________|");
		for(new i = 0; i < MAX_OBJECTS; i++)
		{
			if(CCTVInfo[i][tvObjectOn] && CCTVInfo[i][tvFaction] == faction)
			{
				format(msg, sizeof(msg), "(Camera %d) %s.", i, CCTVInfo[i][tvName]);
				SCM(playerid, COLOR_GREY, msg);
			}
		}
		return 1;
	}
	if(!AbleToCctv(playerid)) return SCM(playerid, COLOR_LIGHTRED, "You are not at the CCTV position.");
	if(OnCCTV{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You are already watching a CCTV Camera.");
	if(!CCTVInfo[id][tvObjectOn] && CCTVInfo[id][tvFaction] != faction) return SCM(playerid, COLOR_LIGHTRED, "The CCTV you've secrched does not exists.");
	OnCCTV{playerid} = true;
	SetPlayerPos(playerid, CCTVInfo[id][tvPosX],  CCTVInfo[id][tvPosY],  CCTVInfo[id][tvPosZ]);
	SetInterior(playerid, CCTVInfo[id][tvInterior]);
	GameTextForPlayer(playerid, "~r~Loading...", 1000, 1);
	SetTimerEx("SetToCamera", 1000, 0, "ii", playerid, id);
	SCM(playerid, COLOR_WHITE, "{FFFF00}HINT{FFFFFF}: Use the mouse to move the position of CCTV-Sitemap. (/exitcctv)");
	return 1;
}

CMD:exitcctv(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(!OnCCTV{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You aren't watching a CCTV Camera.");
	OnCCTV{playerid} = false;
	StopPlayerSpec(playerid);
	SetPlayerPos(playerid, 1570.4271,-1681.8495,1101.0859);
	SetInterior(playerid, 10);
	SetTimerEx("UnFreezePlayer", 500, 0, "i", playerid);
	return 1;
}

CMD:giveairlicense(playerid, params[])
{
  new faction = PlayerInfo[playerid][pFaction];
  if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
  if(!isLeader(playerid)) return SCM(playerid, COLOR_LIGHTRED, "You're not a leader.");
  new targetid;
  if(sscanf(params,"d",targetid)) return SyntaxMSG(playerid,"/giveairlicense [playerid]");
  if(!PlayerIsOn(targetid)) return NotConnectedMSG(playerid);
	format(msg,sizeof(msg),"%s gave you a flying license (ASD LICENSE).",GetNameWithMask(playerid));
	SCM(targetid, COLOR_YELLOWG, msg);
	format(msg,sizeof(msg),"You gave a flying lincense to %s (ASD LICENSE).",GetNameWithMask(targetid));
	SCM(playerid, COLOR_YELLOWG, msg);
 	PlayerInfo[targetid][pFlyLic] = 1;
	return 1;
}

CMD:revokeairlicense(playerid, params[])
{
  new faction = PlayerInfo[playerid][pFaction];
  if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
  if(!isLeader(playerid)) return SCM(playerid, COLOR_LIGHTRED, "You're not a leader.");
  new targetid;
  if(sscanf(params,"d",targetid)) return SyntaxMSG(playerid,"/revokeairlicense [playerid]");
	if(!PlayerIsOn(targetid)) return NotConnectedMSG(playerid);
	format(msg,sizeof(msg),"%s have take your flying license (ASD LICENSE).",GetNameWithMask(playerid));
	SCM(targetid, COLOR_YELLOWG, msg);
	format(msg,sizeof(msg),"You have take %s's flying license (ASD LICENSE).",GetNameWithMask(targetid));
	SCM(playerid, COLOR_YELLOWG, msg);
 	PlayerInfo[targetid][pFlyLic] = 0;
	return 1;
}

CMD:createspike(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty.");
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		new Float:x, Float:y, Float:z, Float:a;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);
		CreateStrip(x, y, z, a);
		new location[MAX_ZONE_NAME];
		GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
		format(msg, sizeof(msg), "* HQ Announcement: %s %s put spikestrip in %s.", GetRankName(playerid), GetNameEx(playerid), location);
		SendFactionMessage(LSPD, COLOR_LSPD, msg);
	}
	else
	{
		SCM(playerid, COLOR_LIGHTRED, "You must be on foot.");
	}
	return 1;
}

CMD:removespike(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty.");
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
        new Float:x, Float:y, Float:z, Float:a;
        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, a);
        CreateStrip(x, y, z, a);
        new location[MAX_ZONE_NAME];
        GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
		DeleteClosestStrip(playerid);
        format(msg, sizeof(msg), "* HQ Announcement: %s %s removed spikestrip in %s.", GetRankName(playerid), GetNameEx(playerid), location);
        SendFactionMessage(LSPD, COLOR_LSPD, msg);
	}
	else
	{
		SCM(playerid, COLOR_LIGHTRED, "You must be on foot.");
	}
	return 1;
}

CMD:removeallspikes(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty.");
	DeleteAllStrip();
	format(msg, sizeof(msg), "* HQ Announcement: All spikestrip have been removed by %s %s", GetRankName(playerid), GetNameEx(playerid));
	SendFactionMessage(LSPD, COLOR_LSPD, msg);
	return 1;
}

CMD:revoke(playerid, params[])
{
	new id, type[24], faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(sscanf(params,"us[24]", id, type)) return SyntaxMSG(playerid, "/revoke [playerid/PartOfName] [carlicense,weplicense,flylicense,weapons]");
	if(id == playerid) return SCM(playerid, COLOR_LIGHTRED, "You cannot revoke yourself.");
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty.");
	if(!PlayerNearPlayer(4.0, playerid, id)) return NotNearPlayerMSG(playerid);
	if(CompareStrings(type, "carlicense"))
	{
		format(msg, sizeof(msg), "has taken away %s's driving license.", GetNameWithMask(id));
		ActionMessage(playerid, 10.0, msg);
		format(msg, sizeof(msg), "Your driving license was revoked by %s.", GetNameWithMask(playerid));
		SCM(id, COLOR_WHITE, msg);
		PlayerInfo[id][pCarLic] = 0;
		return 1;
	}
	if(CompareStrings(type, "weplicense"))
	{
		format(msg, sizeof(msg), "has taken away %s's weapon license.", GetNameWithMask(id));
		ActionMessage(playerid, 10.0, msg);
		format(msg, sizeof(msg), "Your weapon license was revoked by %s.", GetNameWithMask(playerid));
		SCM(id, COLOR_WHITE, msg);
		PlayerInfo[id][pWepLic] = 0;
		return 1;
	}
	if(CompareStrings(type, "flylicense"))
	{
		format(msg, sizeof(msg), "has taken away %s's flying license.", GetNameWithMask(id));
		ActionMessage(playerid, 10.0, msg);
		format(msg, sizeof(msg), "Your flying license was revoked by %s.", GetNameWithMask(playerid));
		SCM(id, COLOR_WHITE, msg);
		PlayerInfo[id][pWepLic] = 0;
		return 1;
	}
	if(CompareStrings(type, "weapons"))
	{
		format(msg, sizeof(msg), "has taken away %s's weapons.", GetNameWithMask(id));
		ActionMessage(playerid, 10.0, msg);
		format(msg, sizeof(msg), "Your weapons was revoked by %s.", GetNameWithMask(playerid));
		SCM(id, COLOR_WHITE, msg);
		FullResetPlayerWeapons(id);
		return 1;
	}
	return 1;
}
/*
CMD:lockdoors(playerid, params[])
{
	new id, faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/lockdoors [playerid/PartOfName]");
	if(id == playerid) return SCM(playerid, COLOR_LIGHTRED, "Nu poti sa te inchizi singur.");
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii On-Duty...");
	if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(!PlayerNearPlayer(10.0, playerid, id)) return NotNearPlayerMSG(playerid);
	if(!IsACopCar(GetPlayerVehicleID(id))) return SCM(playerid, COLOR_INFO, "This player is not in a law enforcement vehicle");
	if(GetIntVar(id, "isFrozen") == 0)
	{
		format(msg, sizeof(msg), "inchide usile asa ca %s nu poate sa plece din masina.", GetNameWithMask(id));
		FreezePlayer(id);
	}
	ActionMessage(playerid, 15.0, msg);
	return 1;
}
CMD:unlockdoors(playerid, params[])
{
	new id, faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/unlockdoors [playerid/PartOfName]");
	if(id == playerid) return SCM(playerid, COLOR_LIGHTRED, "Nu poti sa te deschizi singur.");
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii On-Duty...");
	if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(!PlayerNearPlayer(10.0, playerid, id)) return NotNearPlayerMSG(playerid);
	if(!IsACopCar(GetPlayerVehicleID(id))) return SCM(playerid, COLOR_INFO, "This player is not in a law enforcement vehicle");
	if(GetIntVar(id, "isFrozen") == 1)
	{
		format(msg, sizeof(msg), "deschide usile asa ca %s poate pleca oriunde.", GetNameWithMask(id));
		UnFreezePlayer(id);
	}
	ActionMessage(playerid, 15.0, msg);
	return 1;
}*/
CMD:arrest(playerid, params[])
{
	new id, time, fine, faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(sscanf(params,"udd",id,time,fine)) return SyntaxMSG(playerid, "/arrest [playerid/PartOfName] [time(minutes)] [fine]");
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty.");
	if(!PlayerToPoint(10.0, playerid, 1586.3094,-1678.6624,1090.5859)) return SCM(playerid, COLOR_LIGHTRED, "You are not near any cells.");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
	if(fine < 0 || fine > 1000) return SCM(playerid, COLOR_GRAD2, "The fine cannot exceed $1,000 or go under $0.");
	if(time < 1 || time > 15) return SCM(playerid, COLOR_GRAD2, "The time cannot exceed 15 minutes or 1 minutes.");
	if(id == playerid) return SCM(playerid, COLOR_LIGHTRED, "You may not arrest yourself.");
	if(PlayerInfo[id][pJailed] == 2) return SCM(playerid, COLOR_LIGHTRED, "Player is already arrested.");
	GiveCash(id, -fine);
	FullResetPlayerWeapons(id);
	PlayerInfo[id][pJailTime2] = time * 60;
	PutPlayerInCell(id);
	PlayerInfo[id][pJailed] = 2;
	PlayerInfo[id][pArrested] += 1;
	format(msg, sizeof(msg), "[Arrest] %s %s has imprisoned %s for %d minutes.", GetRankName(playerid), GetNameEx(playerid), GetNameEx(id), time);
	SendFactionMessage(LSPD, COLOR_LIGHTRED, msg);
	format(msg, sizeof(msg), "You have been imprisoned for %d minute(s), Fines: %d$", time, fine);
	SCM(id, COLOR_LIGHTRED, msg);
	SetStringVar(playerid, "ArrestLocation", "Jail");
	SetLastArrest(playerid, id, time);
	return 1;
}

CMD:prison(playerid, params[])
{
	new id, time, fine, faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(sscanf(params,"udd",id,time,fine)) return SyntaxMSG(playerid, "/prison [playerid/PartOfName] [time(minutes)] [fine]");
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty.");
	if(!PlayerToPoint(30.0, playerid, 1769.7205,-1574.1882,1734.9430)) return SCM(playerid, COLOR_LIGHTRED, "You are not at the prison.");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
	if(fine < 0 || fine > 3000) return SCM(playerid, COLOR_GRAD2, "The fine cannot exceed $5,000 or go under $0.");
	if(time < 1 || time > 300) return SCM(playerid, COLOR_GRAD2, "The time cannot exceed 300 minutes or 1 minutes.");
	if(id == playerid) return SCM(playerid, COLOR_LIGHTRED, "You may not prison yourself.");
	if(PlayerInfo[id][pJailed] == 2) return SCM(playerid, COLOR_LIGHTRED, "Player is already arrested.");
	GiveCash(id, -fine);
	FullResetPlayerWeapons(id);
	PlayerInfo[id][pJailTime2] = time * 60;
	PutPlayerInPrisonCell(id);
	PlayerInfo[id][pJailed] = 3;
	PlayerInfo[id][pPrisoned] += 1;
	format(msg, sizeof(msg), "[Prison] %s %s has just imprisoned %s for %d minutes.", GetRankName(playerid), GetNameEx(playerid), GetNameEx(id), time);
	SendFactionMessage(LSPD, COLOR_LIGHTRED, msg);
	format(msg, sizeof(msg), "You have been imprisoned for %d minutes, Bani: %d$", time, fine);
	SCM(id, COLOR_LIGHTRED, msg);
	SetStringVar(playerid, "ArrestLocation", "Prison");
	SetLastArrest(playerid, id, time);
	return 1;
}

CMD:vehiclefine(playerid, params[])
{
	new amount, plate[64], vehicle, faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(sscanf(params,"s[64]d",plate, amount)) return SyntaxMSG(playerid, "/carticket [VehiclePlate] [TicketAmount($1,000-$4,000)]");
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty.");
	if(!FindVehicleByPlate(plate)) return SCM(playerid, COLOR_LIGHTRED, "Vehicle wasn't found.");
	if(amount < 1000 || amount > 4000) return SCM(playerid, COLOR_LIGHTRED, "The amount must be between $1,000 to $4,000");
	vehicle = FindVehicleByPlate(plate);
	if(CountVehicleTickets(vehicle) >= 10) return SCM(playerid, COLOR_LIGHTRED, "This vehicle has reached the maximum tickets (10).");
	format(msg, sizeof(msg), "* You have successfully wrote a ticket of $%d for this vehicle.", amount);
	SCM(playerid, COLOR_INFO, msg);
	format(msg, sizeof(msg), "writes a ticket of $%d.", amount);
	ActionMessage(playerid, 15.0, msg);
	PlaceVehicleTicket(vehicle, amount);
	return 1;
}

/*CMD:pticket(playerid, params[]) return cmd_playerticket(playerid, params);
CMD:playerticket(playerid, params[])
{
	new amount, id, faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(sscanf(params,"dd",id, amount)) return SyntaxMSG(playerid, "/playerticket [playerid/PartOfName] [TicketAmount($1,000-$3,000)]");
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fi On-Duty.");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
	if(amount < 1000 || amount > 3000) return SCM(playerid, COLOR_LIGHTRED, "The amount must be between $1,000 to $3,000");
	if(CountPlayerTickets(id) >= 10) return SCM(playerid, COLOR_LIGHTRED, "This player has reaches the maximum tickets, (10).");
	SCMEx(playerid, COLOR_INFO, "* You have successfully wrote a ticket of $%d for %s.", amount, GetNameEx(id));
	SCMEx(id, COLOR_INFO, "* %s %s has given you a ticket of $%d.", GetRankName(playerid), GetNameEx(playerid), amount);
	format(msg, sizeof(msg), "writes a ticket for $%d.", amount);
	ActionMessage(playerid, 15.0, msg);
	PlacePlayerTicket(id, amount);
	return 1;
}*/

CMD:cone(playerid, params[])
{
    new slot, faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(sscanf(params,"dd",slot))
	{
		SyntaxMSG(playerid, "/cone [slot(1-10)]");
		return 1;
	}
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty.");
	if(slot > 10 || slot < 1) return SCM(playerid, COLOR_INFO, "Invalid slot.");
	new Float:x, Float:y, Float:z, Float:a;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	if(RoadBlocks[playerid][slot] != INVALID_OBJECT_ID) return SCM(playerid, COLOR_LIGHTRED, "This cone slot is already taken.");
	RoadBlocks[playerid][slot] = CreateDynamicObject(1238, x, y, z, 0.0, 0.0, a+180);
	SetPlayerPos(playerid, x, y+2, z);
	EditDynamicObject(playerid, RoadBlocks[playerid][slot]);
	SetIntVar(playerid, "EditingRB", 1);
	SCM(playerid,COLOR_LIGHTRED,"{9C4C42}[ ! ]{FFFFFF} Traffic cone deployed.");
	return 1;
}

CMD:disband(playerid, params[])
{
    new slot, faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(sscanf(params,"d",slot)) return SyntaxMSG(playerid, "/disband [slot(1-10)]");
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty.");
	if(slot > 10 || slot < 1) return SCM(playerid, COLOR_INFO, "Invalid slot.");
	if(RoadBlocks[playerid][slot] == INVALID_OBJECT_ID) return SCM(playerid, COLOR_LIGHTRED, "This cone slot is not taken.");
	format(msg, sizeof(msg), "{9C4C42}[ ! ]{FFFFFF} Traffic %s cone disband.", slot);
	SCM(playerid, COLOR_LIGHTRED, msg);
	DestroyDynamicObject(RoadBlocks[playerid][slot]);
	RoadBlocks[playerid][slot] = INVALID_OBJECT_ID;
	return 1;
}

CMD:rb(playerid, params[])
{
	new slot, model, faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(sscanf(params,"dd",slot,model))
	{
		SyntaxMSG(playerid, "/rb [slot(1-10)] [model-id]");
		SCM(playerid, COLOR_INFO, "|_______________RoadBlocks types_______________|");
		SCM(playerid, COLOR_INFO, "973,978,979,1422,1423,1424,1425,1427,1434,1459,19834");
		return 1;
	}
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty.");
	if(slot > 10 || slot < 1) return SCM(playerid, COLOR_INFO, "Invalid slot.");
	if(model != 973 && model != 978 && model != 979 && model != 1422 && model != 1423 && model != 1424 && model != 1425 && model != 1427 && model != 1434 && model != 1459 && model != 19834)
		return SCM(playerid, COLOR_LIGHTRED, "Invalid model ID.");
	new Float:x, Float:y, Float:z, Float:a;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	if(RoadBlocks[playerid][slot] != INVALID_OBJECT_ID) return SCM(playerid, COLOR_LIGHTRED, "This roadblock slot is already taken.");
	format(msg, sizeof(msg), "Roadblock #%d Successfully deployed, please remember to remove it.", slot);
	SCM(playerid, COLOR_WHITE, msg);
	RoadBlocks[playerid][slot] = CreateDynamicObject(model, x, y, z, 0.0, 0.0, a+180);
	SetPlayerPos(playerid, x, y+2, z);
	EditDynamicObject(playerid, RoadBlocks[playerid][slot]);
	SetIntVar(playerid, "EditingRB", 1);
	SCM(playerid, COLOR_WHITE, "You may edit the roadblock position.");
	return 1;
}

CMD:rrb(playerid, params[])
{
	new slot, faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(sscanf(params,"d",slot)) return SyntaxMSG(playerid, "/rrb [slot(1-10)]");
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fi On-Duty.");
	if(slot > 10 || slot < 1) return SCM(playerid, COLOR_INFO, "Invalid slot.");
	if(RoadBlocks[playerid][slot] == INVALID_OBJECT_ID) return SCM(playerid, COLOR_LIGHTRED, "This roadblock slot is not taken.");
	format(msg, sizeof(msg), "Roadblock #%d Successfully removed.", slot);
	SCM(playerid, COLOR_WHITE, msg);
	DestroyDynamicObject(RoadBlocks[playerid][slot]);
	RoadBlocks[playerid][slot] = INVALID_OBJECT_ID;
	return 1;
}

CMD:savemypos(playerid, params[])
{
  GetPlayerPos(playerid, PlayerInfo[playerid][pLastX], PlayerInfo[playerid][pLastY], PlayerInfo[playerid][pLastZ]);
  GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pLastA]);
  format(query, sizeof(query), "UPDATE `users` SET `LastX` = %f, `LastY` = %f, `LastZ` = %f, `LastA` = %f, `LastInt` = %d, `LastVW` = %d WHERE `name` = '%s'",
  PlayerInfo[playerid][pLastX], PlayerInfo[playerid][pLastY], PlayerInfo[playerid][pLastZ],PlayerInfo[playerid][pLastA],GetInterior(playerid), GetWorld(playerid), GetName(playerid));
  mysql_function_query(dbHandle, query, false, "", "");
  return 1;
}

CMD:fine(playerid, params[])
{
  new id,price,reason[128],pName[MAX_PLAYER_NAME],iName[MAX_PLAYER_NAME],agency[128],faction = PlayerInfo[playerid][pFaction];
  if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
  if(sscanf(params,"dds[128]",id,price,reason)) return SyntaxMSG(playerid, "/fine [playerid/PartOfName] [amount] [reason]");
  if(PlayerInfo[id][pFines] == MAX_FINES) return SCMEx(playerid, COLOR_LIGHTRED, "Player already holds 10 fines.");
  if(faction == LSPD) {agency = "Los Santos Police Department";}
  else if(faction == SASD) {agency = "San Andreas Sheriff Department";}
  if(price < 1000 || price > 7000) return SCM(playerid, COLOR_LIGHTRED, "The amount must be between $1,000 to $7,000");
  GetPlayerName(playerid, pName, sizeof(pName));
  GetPlayerName(id, iName, sizeof(iName));
  PlayerInfo[id][pFines] += 1;
  format(msg, sizeof(msg), "writes a fine of $%d to %s for '%s'.",price,iName,reason);
  ActionMessage(playerid, 15.0, msg);
  SCMEx(id, COLOR_PURPLE, "[!] You were fined by %s for '%s'. See /myfine", pName, reason);
  format(query, sizeof(query), "INSERT INTO `fines`(`Name`, `Agency`, `Cop`, `Price`, `Reason`, `On`) VALUES ('%s', '%s', '%s', '%d', '%s', '%d')", iName, agency, pName, price, reason, 0);
  mysql_function_query(dbHandle, query, false, "", "");
  format(query, sizeof(query), "UPDATE `users` SET `fines` = %d WHERE `name` = '%s'",PlayerInfo[playerid][pFines], GetName(playerid));
  mysql_function_query(dbHandle, query, false, "", "");
  LoadPlayerFines(id);
  SavePlayerStats(id);
  return 1;
}

CMD:myfine(playerid, params[])
{
  if(PlayerInfo[playerid][pFines] == 0) return SCM(playerid, COLOR_LIGHTRED, "There is no fine!");
  new string[1024];
  new pName[MAX_PLAYER_NAME];
  GetPlayerName(playerid, pName, sizeof(pName));
  if(FineInfo[playerid][fineOn] == 0 || !strcmp(FineInfo[playerid][fineName],pName) || FineInfo[playerid][finePrice] != 0)
  {
    format(string, sizeof(string), "%s\n {FFFFFF}Fine #%d {7E98B6}[$%d] {FFFFFF} for '%s'" ,string, FineInfo[playerid][fineID], FineInfo[playerid][finePrice], FineInfo[playerid][fineReason]);
    ShowDialog(playerid,Show:<PlayerFines>,DIALOG_STYLE_LIST,"Fine List:",string,"Pay","Details");
  }
  return 1;
}

CMD:fines(playerid, params[])
{
  new vehicle = GetPlayerVehicleID(playerid), faction = PlayerInfo[playerid][pFaction];
  if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
  if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
  if(sscanf(params,"u",FinesID)) return SyntaxMSG(playerid, "/fines [playerid]");
  if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty.");
  if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
  if(!IsACopCar(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "You are not in a law enforcement vehicle.");
  if(!PlayerIsOn(FinesID)) return NotConnectedMSG(playerid);
  if(!PlayerNearPlayer(8.0, playerid, FinesID)) return NotNearPlayerMSG(playerid);
  new pName[MAX_PLAYER_NAME],string[255];
  GetPlayerName(FinesID, pName, sizeof(pName));
  if(FineInfo[FinesID][fineOn] == 0 || !strcmp(FineInfo[FinesID][fineName],pName) || FineInfo[FinesID][finePrice] != 0)
  {
    format(string, sizeof(string), "%s\n {FFFFFF}Fine #%d {7E98B6}[$%d] {FFFFFF} for '%s'" ,string, FineInfo[FinesID][fineID], FineInfo[FinesID][finePrice], FineInfo[FinesID][fineReason]);
    ShowDialog(playerid,Show:<CopFines>,DIALOG_STYLE_LIST,"Fine List:",string,"Details","Close");
  }
  return 1;
}

/*CMD:fines(playerid, params[])
{
    new vehicle = GetPlayerVehicleID(playerid), id, faction = PlayerInfo[playerid][pFaction];
	if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/fines [playerid]");
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fi On-Duty.");
  if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
  if(!IsACopCar(vehicle)) return SCM(playerid, COLOR_INFO, "You are not in a law enforcement vehicle.");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(!PlayerNearPlayer(8.0, playerid, id)) return NotNearPlayerMSG(playerid);
	SCMEx(playerid, COLOR_WHITE, "Amenzile lui %s", GetNameWithMask(playerid));
	for(new i = 0; i < MAX_PLAYER_TICKETS; i++)
	{
		if(PlayerInfo[id][pTickets][i] == 0)
			SCMEx(playerid, COLOR_GREY, "(Slot %d) Nu", i);
		else
			SCMEx(playerid, COLOR_GREY, "(Slot %d) $%d", i, PlayerInfo[id][pTickets][i]);
	}
	return 1;
}*/

CMD:vehiclefines(playerid, params[])
{
  new plate[64], vehicle,string[255], faction = PlayerInfo[playerid][pFaction],vehicle1 = GetPlayerVehicleID(playerid);
  if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
  if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
  if(sscanf(params, "s[64]", plate)) return SyntaxMSG(playerid, "/vehiclefines [plate]");
  vehicle = FindVehicleByPlate(plate);
  if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty.");
  if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
  if(!IsACopCar(vehicle1)) return SCM(playerid, COLOR_INFO, "You are not in a law enforcement vehicle.");
  for(new i = 0; i < MAX_CAR_TICKETS; i++)
  {
    if(VehicleInfo[vehicle][carTicket][i] != 0)
      format(string, sizeof(string), "%s\n(Ticket %d) Amount: $%d.", string, i, VehicleInfo[vehicle][carTicket][i]);
    else
      format(string, sizeof(string), "%s\nNone.", string, i, VehicleInfo[vehicle][carTicket][i]);
  }
  ShowDialog(playerid, Show:<CarTickets1>, DIALOG_STYLE_LIST, "Vehicle Tickets", string, "Ok", "Cancel");
  return 1;
}

CMD:handcuff(playerid, params[])
{
	new id, faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/handcuff [playerid/PartOfName]");
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty.");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
	if(id == playerid) return SCM(playerid, COLOR_LIGHTRED, "You can not handcuff yourself.");
	if(Cuffed{id}) return SCM(playerid, COLOR_LIGHTRED, "This player is already handcuffed.");
	GameTextForPlayer(id, "~r~Handcuffed", 2500, 3);
	SetPlayerCuffed(id, 1);
	Cuffed{id} = true;
	return 1;
}

CMD:unhandcuff(playerid, params[])
{
	new id, faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/unhandcuff [playerid/PartOfName]");
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty.");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
	if(id == playerid) return SCM(playerid, COLOR_LIGHTRED, "You can not unhandcuff yourself.");
	if(!Cuffed{id}) return SCM(playerid, COLOR_LIGHTRED, "This player is already unhandcuffed.");
	GameTextForPlayer(id, "~r~Unhandcuffed", 2500, 3);
	SetPlayerCuffed(id, 0);
	Cuffed{id} = false;
	return 1;
}

CMD:friskdrugs(playerid, params[])
{
    new id;
	if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/frisk [playerid/PartOfName]");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
	if(id == playerid) return SCM(playerid, COLOR_LIGHTRED, "You can not frisk yourself.");
    new name[MAX_PLAYER_NAME];
	new idname[MAX_PLAYER_NAME];
	GetPlayerName(playerid,name,MAX_PLAYER_NAME);
	GetPlayerName(id,idname,MAX_PLAYER_NAME);
	ShowPlayerDrugs(id, playerid);
	return 1;
}

CMD:frisk(playerid, params[])
{
	new id;
	if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/frisk [playerid/PartOfName]");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
	if(id == playerid) return SCM(playerid, COLOR_LIGHTRED, "You can not frisk yourself.");
	new name[MAX_PLAYER_NAME];
	new idname[MAX_PLAYER_NAME];
	GetPlayerName(playerid,name,MAX_PLAYER_NAME);
	GetPlayerName(id,idname,MAX_PLAYER_NAME);
	if(FriskApprove[playerid] == 0)
	{
	    format(msg, sizeof(msg), "You sent a frisk permission to %s", idname);
	    SCM(playerid, COLOR_YELLOWG,msg);
	    SCM(playerid,0xFF4444FF,"SERVER: This player must approve the frisk permision (/friskapprove)");
	    format(msg, sizeof(msg), "%s wants to frisk you (/friskapprove %d).", name, playerid);
	    SCM(id, COLOR_YELLOWG,msg);
	}
	else
	{
		SCM(playerid, COLOR_LIGHTBLUE, "|___________Frisk___________|");
		format(msg, sizeof(msg), "[Frisk] Now you searched on %s.", GetNameEx(id));
		SCM(playerid, COLOR_WHITE, msg);
		format(msg, sizeof(msg), "[Frisk] Cash in hand: $%d", PlayerInfo[id][pCash]);
		SCM(playerid, COLOR_WHITE, msg);
		new Player_Weapons[13], Player_Ammos[13];
		for(new i = 1;i <= 12;i++)
		{
			GetPlayerWeaponData(id,i,Player_Weapons[i],Player_Ammos[i]);
			if(Player_Weapons[i] != 0)
			{
				new weaponName[128];
				GetWeaponName(Player_Weapons[i],weaponName,255);
				format(msg,255,"[Frisk] Weapons found: %s Ammo: %d",weaponName, Player_Ammos[i]);
				SCM(playerid,COLOR_LIGHTRED,msg);
			}
		}
		FriskApprove[playerid] = 0;
		SCM(playerid, COLOR_LIGHTBLUE, "|__________________________|");
		ShowPlayerDrugs(id, playerid);
	}
	return 1;
}
CMD:friskapprove(playerid, params[])
{
    new id;
	if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/friskapprove [playerid/PartOfName]");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
	if(id == playerid) return SCM(playerid, COLOR_LIGHTRED, "You can not frisk yourself.");
	FriskApprove[id] = 1;
	format(msg, sizeof(msg), "SERVER: %s has given you permission to frisk, now you can use (/frisk)", GetNameEx(playerid));
    SCM(id,0xFF4444FF,msg);
    format(msg, sizeof(msg), "You gave %s permission to frisk you.", GetNameEx(id));
    SCM(playerid,COLOR_YELLOWG,msg);
    return 1;
}
CMD:m(playerid, params[]) return cmd_megaphone(playerid, params);
CMD:megaphone(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	new vehicle = GetPlayerVehicleID(playerid);
	if(isnull(params)) return SyntaxMSG(playerid, "(/m)egaphone [message]");
	if(faction != LSPD && faction != SASD && faction != LSFD && faction != GOV) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
	if(faction == LSPD)
	 if(!IsACopCar(vehicle)) return SCM(playerid, COLOR_INFO, "You are not in a law enforcement vehicle.");
	if(faction == LSFD)
		if(!IsAFDCar(vehicle)) return SCM(playerid, COLOR_INFO, "You are not in a your department vehicle.");
	format(msg, sizeof(msg), "[ %s:o< %s ]", GetNameWithMask(playerid), params);
	ProxDetector(40.0, playerid, msg, COLOR_YELLOWG);
	return 1;
}
CMD:objectsoff(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(CopDuty{playerid})
	{
		for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
		{
			if(IsPlayerAttachedObjectSlotUsed(playerid, i))
			{
				RemovePlayerAttachedObject(playerid, i);
				PoliceObjects[playerid][i] = INVALID_OBJECT_ID;
				SCM(playerid, COLOR_WHITE,"You have successfully removed the items from you.");
        return 1;
			}
		}
	}
	return 1;
}
CMD:startelm(playerid, params[])
{
  new vehi = GetPlayerVehicleID(playerid);
  new faction = PlayerInfo[playerid][pFaction];
  if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
  if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty..");
  if(!IsACopCar(GetPlayerVehicleID(playerid))) return SCM(playerid, COLOR_INFO, "You are not in a law enforcement vehicle.");
  if(!engineOn{vehi}) return SCM(playerid,COLOR_LIGHTRED,"The engine must be started.");
  if(PLights[playerid] == 0)
  {
  BlinkingLights(playerid);
  PLights[playerid] = 1;
  }
  else if(PLights[playerid] == 1)
  {
    ShutOffBlinkingLights(playerid);
    PLights[playerid] = 0;
  }
  return 1;
}
CMD:helicam(playerid, params[])
{
  new vehi = GetPlayerVehicleID(playerid);
  new faction = PlayerInfo[playerid][pFaction];
  if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty...");
	if(!IsACopCar(GetPlayerVehicleID(playerid))) return SCM(playerid, COLOR_INFO, "You are not in a law enforcement vehicle.");
  if(IsPlayerInAnyVehicle(playerid) ) // Checking if player is in any vehicle at all
  {
    if( GetVehicleModel( vehi ) == 497 ) // If player was in vehicle ,we now check if he is in police helicopter
    {
      if(GetPlayerVehicleSeat(playerid) == 1 ) // Checking if he is in passenger seat
      {
          if( GetPVarInt( playerid, "ThermalActive" ) == 0 ) // If player dosent have thermalactive
          {
              THERMALON( playerid, vehi ); // We now set the player in thermal mode.
          }
          else // IF he wasent in thermalmode
          {
              THERMALOFF( playerid ); // We now set the player back to normal
          }
      }
      else return SCM(playerid,COLOR_LIGHTRED,"There are no passenger seat." );
    }
    else return SCM(playerid, COLOR_LIGHTRED,"You're not in a LSPD Helicopter.");
  }
  else return SCM(playerid,COLOR_LIGHTRED,"You're not in any vehicle.");
  return 1;
}

CMD:taser(playerid, params[])
{
 new faction = PlayerInfo[playerid][pFaction];
 if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
 if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty...");
 if(TazerActive{playerid})
 {
  TazerActive{playerid} = false;
  GiveWeapon(playerid, 24, 25);
  ActionMessage(playerid, 15.0, "holsters their taser.");
 }
 else
 {
  TazerActive{playerid} = true;
  GiveWeapon(playerid, 23, 25);
  ActionMessage(playerid, 15.0, "unholsters their taser.");
 }
 return 1;
}
CMD:rubberbullets(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty..");
	if(BeanbagActive{playerid})
	{
		BeanbagActive{playerid} = false;
		GiveWeapon(playerid, 25, 100);
		if(PlayerInfo[playerid][pSex] == 1)
			ActionMessage(playerid, 15.0, "Remington's placed in racks in the back.");
		else
			ActionMessage(playerid, 15.0, "Remington's placed in racks in the back.");
	}
	else if(PlayerHoldingWeapon(playerid, 25))
	{
		BeanbagActive{playerid} = true;
		if(PlayerInfo[playerid][pSex] == 1)
			ActionMessage(playerid, 15.0, "grab the back of support from a Remington 870 loaded with rubber bullets.");
		else
			ActionMessage(playerid, 15.0, "grab the back of support from a Remington 870 loaded with rubber bullets.");
		SCM(playerid, COLOR_YELLOWG,"SERVER: You've changed to LESS LETHAL AMMO / RUBBER BULLETS.");
	}
	else return SCM(playerid, COLOR_GREY, "You must have a Remington 187 in hand to get a beanbag.");
	return 1;
}
CMD:mdc(playerid, params[])
{
	new vehicle = GetPlayerVehicleID(playerid);
	if(PlayerInfo[playerid][pFaction] != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction");
	if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
	if(!IsACopCar(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "You can only use the MDC in a vehicle with the required equipment or inside a station.");
	format(msg, sizeof(msg), "Police MDC System - Logged in as: %s", GetNameEx(playerid));
	ShowDialog(playerid, Show:<MDC>, DIALOG_STYLE_LIST, msg, "Search for name\nAdd taxes\nAdd a warning license\nSearch plate ((ID))\nSearch plate (PLATE)\nRecent calss - 911\nLatest arrests", "Enter", "Quit");
	return 1;
}
//=================================Police Commands=================================//
/*CMD:tickets(playerid, params[])
{
	new option[7], secoption;
	if(sscanf(params,"s[7]D(-1)", option, secoption)) return SyntaxMSG(playerid, "/tickets [show/pay]");
	if(CompareStrings(option, "show"))
	{
		SCM(playerid, COLOR_GREEN, "Amenzile tale:");
		for(new i = 0; i < MAX_PLAYER_TICKETS; i++)
		{
			if(PlayerInfo[playerid][pTickets][i] == 0)
				SCMEx(playerid, COLOR_GREY, "(Slot %d) Nu", i);
			else
				SCMEx(playerid, COLOR_GREY, "(Slot %d) $%d", i, PlayerInfo[playerid][pTickets][i]);
		}
	}
	if(CompareStrings(option, "pay"))
	{
		new slot;
		if(sscanf(params,"{s[7]}d",slot)) return SyntaxMSG(playerid, "/tickets pay [slot]");
		if(!PlayerToPoint(10.0, playerid, 362.2117,173.5344,1008.3828)) return SCM(playerid, COLOR_GREY, "Nu esti la primarie.");
		if(PlayerInfo[playerid][pTickets][slot] == 0) return SCM(playerid, COLOR_GREY, "Nu ai nici o amenda, pe acest slot.");
		if(GetCash(playerid) < PlayerInfo[playerid][pTickets][slot]) return NoCashMSG(playerid);
		SCMEx(playerid, COLOR_YELLOWG, "[!] Ti-ai platit ticket-ul, suma platita: $%d.", PlayerInfo[playerid][pTickets][slot]);
		GiveCash(playerid, -PlayerInfo[playerid][pTickets][slot]);
		PlayerInfo[playerid][pTickets][slot] = 0;
	}
	return 1;
}*/
CMD:meal(playerid, params[])
{
	new option[7], secoption;
	if(sscanf(params,"s[7]D(-1)", option, secoption)) return SyntaxMSG(playerid, "/meal [buy/place/eat/destroy]");
	if(PlayerToPoint(4.0, playerid, 375.71048, -119.12972, 1001.24841))
	{
		if(CompareStrings(option, "buy"))
		{
		    if(Mealeat[playerid] == 0)
			{
				SCM(playerid,COLOR_WHITE,"You have successfully bought a menu, use /eat to eat meal.");
				SetPlayerAttachedObject(playerid, 0, 2218, 1,0.20,0.36,0.0,0.0,90.0, 0.0, 0.4, 0.3, 0.6);
				ApplyAnimation(playerid,"CARRY","crry_prtial",4.0,1,0,0,1,1,1);
	        	GivePlayerMoney(playerid, -25);
	        	Mealeat[playerid] = 1;
			}
		}
		if(CompareStrings(option, "place"))
		{
		    if(Mealeat[playerid] == 1)
			{
				SCM(playerid,COLOR_LIGHTBLUE,"A waitress will come in 5 minutes and you will pick up the tray.");
				EditAttachedObject(playerid, 0);
				Mealeat[playerid] = 0;
				StopPlayerAnims(playerid);
			}
		}
		if(CompareStrings(option, "eat"))
		{
		    if(Mealeat[playerid] == 1)
			{
				SCM(playerid,COLOR_GREY,"You ate a {ED2D26}'Great Menu'{808080} and you got '50 HP'.");
				GivePlayerHealth(playerid, 50);
				//SCM(playerid,COLOR_LIGHTBLUE,"Meniul tau a fost ridicat de o chelnerita");
				RemovePlayerAttachedObject(playerid, 0);
				Mealeat[playerid] = 0;
				StopPlayerAnims(playerid);
			}
			else
			{
			    SCM(playerid,COLOR_WHITE,"You have already eaten.");
			}
		}
		if(CompareStrings(option, "destroy"))
		{
		    if(Mealeat[playerid] == 1)
			{
				SCM(playerid,COLOR_LIGHTBLUE,"You threw the menu.");
				RemovePlayerAttachedObject(playerid, 0);
				StopPlayerAnims(playerid);
			}
		}
	}
	return 1;
}
CMD:drugjob(playerid, params[])
{
	if(PlayerToPoint(4.0, playerid, 2520.3499,-1486.5232,23.9993)) //Black Market, Drug Smuggler Job.
	{
		if(PlayerInfo[playerid][pFaction] == 0) return SCM(playerid, COLOR_LIGHTRED, "You have to be a part of an official faction to have this job.");
		if(Factions[PlayerInfo[playerid][pFaction]][fType] != FACTION_ILLEGAL) return SCM(playerid, COLOR_LIGHTRED, "You have to be a part of an official faction to have this job.");
		if(PlayerInfo[playerid][pJob] != JOBLESS) return SCM(playerid, COLOR_WHITE, "* You already have a job, use /quitjob to resign.");
		PlayerInfo[playerid][pJob] = DRUGDEALER;
		JobMessage(playerid, "~y~NOW YOU'RE DRUG DEALER.", 8);
	}
	else return SCM(playerid, COLOR_LIGHTRED, "You are not at the black market.");
	return 1;
}

CMD:takejob(playerid, params[])
{
	for(new i = 0; i < MAX_JOBS; i++)
	{
		if(PlayerToPoint(4.0, playerid, JobsInfo[i][jobX], JobsInfo[i][jobY], JobsInfo[i][jobZ]))
		{
			if(JobsInfo[i][jobSideJob] == 1)
			{
				if(PlayerInfo[playerid][pSideJob] != JOBLESS) return SCM(playerid, COLOR_WHITE, "* You already have a side job, /quitsidejob first.");
				PlayerInfo[playerid][pSideJob] = i;
				if(i == MECHANIC)
				{
					JobMessage(playerid, "~y~YOU JOINED DRIVERS, IT IS A ~r~SIDEJOB~n~~y~WHICH MEANS THAT YOU CAN STILL WORK AT THE MAIN JOB.~n~USE ~w~/JOBHELP ~y~FOR MORE INFORMATION", 8);
				}
				else if(i == TAXI)
				{
					JobMessage(playerid, "~y~YOU JOINED THE JOB OF TAXI DRIVER, THIS IS A ~r~SIDEJOB~n~~y~WHICH MEANS THAT YOU CAN STILL WORK AT THE MAIN JOB.~n~USE ~w~/JOBHELP ~y~FOR MORE INFORMATION", 8);
				}
			}
			else
			{
				if(PlayerInfo[playerid][pJob] != JOBLESS) return SCM(playerid, COLOR_WHITE, "* You already have a side job, /quitsidejob first.");
				if(JobsInfo[i][jobRanks] > 0)
				{
					PlayerInfo[playerid][pJobRank] = 1;
				}
				if(i == TRUCKER)
				{
					format(msg, sizeof(msg), "~y~YOU JOINED THE JOB OF TRUCKER, YOUR RANK IS ~g~%s.~n~~y~AND YOUR CURRENTLY PAYCHECK IS ~g~$%d.~n~~w~USE ~y~/JOBHELP ~w~FOR MORE INFORMATION", GetJobRank(playerid), GetMaxPayCheck(playerid));
					JobMessage(playerid, msg, 8);
					PlayerInfo[playerid][pJob] = 1;
				}
				if(i == SWEEPER)
				{
				    JobMessage(playerid, "~y~YOU JOINED THE JOB OF SWEEPER~n~~w~USE ~y~/JOBHELP ~w~FOR MORE INFORMATION", 8);
				    //SCM(playerid,COLOR_WHITE,"Ai devenit un Spalator de strazi");
				    PlayerInfo[playerid][pJob] = 4;
				}
			}
			return 1;
		}
	}
	return 1;
}

CMD:quitjob(playerid, params[])
{
	new job = PlayerInfo[playerid][pJob];
	if(job == JOBLESS) return SCM(playerid, COLOR_WHITE, "* You do not have a job from which you can resign.");
	if(job == DRUGDEALER)
	{
		SCM(playerid, COLOR_WHITE, "You're no longer a drug dealer.");
		PlayerInfo[playerid][pJob] = JOBLESS;
	}
	else
	{
		SCMEx(playerid, COLOR_YELLOWG, "You left the job of %s, and the rank was reset.", JobsInfo[job][jobName]);
		PlayerInfo[playerid][pJob] = JOBLESS;
		//SweepTura[playerid] = 1;
		if(JobsInfo[job][jobRanks] > 0)
		{
			PlayerInfo[playerid][pJobRank] = 0;
		}
	}
	return 1;
}

CMD:quitsidejob(playerid, params[])
{
	new job = PlayerInfo[playerid][pSideJob];
	if(job != JOBLESS) return SCM(playerid, COLOR_WHITE, "* You do not have a side job from which you can resign.");
	SCMEx(playerid, COLOR_LIGHTRED, "You left of side job: %s.", JobsInfo[job][jobName]);
	PlayerInfo[playerid][pSideJob] = JOBLESS;
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	if(LoadingTruck{playerid} > 0 && Trucking{playerid} && GetTruckStage(playerid) == 2 && GetIntVar(playerid, "PlayerCP") == 26)
	{
		TextDrawSetString(TruckerDraw[playerid], "~y~GO BACK TO THE CHECKPOINT TO CONTINUE.");
	}
	if(DroppingOff{playerid} && Trucking{playerid} && GetTruckStage(playerid) == 4 && GetIntVar(playerid, "PlayerCP") == 27)
	{
		TextDrawSetString(TruckerDraw[playerid], "~y~GO BACK TO THE CHECKPOINT TO CONTINUE.");
	}
	return 1;
}
CMD:sweep(playerid, params[])
{
    new vehicle = GetPlayerVehicleID(playerid);
	if(PlayerInfo[playerid][pJob] != SWEEPER) return SCM(playerid, COLOR_WHITE, "You don't have Sweeper Job.");
	if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "You must be inside a vehicle as a driver.");
	new modelcar = GetVehicleModel(vehicle);
	if(modelcar == 574)
	{
		if(Sweep[playerid] == 0)
		{
      if(PlayerInfo[playerid][pCanJob] == 0)
      {
				DisablePlayerCheckpoint(playerid);
				SendClientMessage(playerid,COLOR_WHITE,"You started shift Sweep.");
				Sweep[playerid] = 1;
				CPSweep[playerid] = 1;
				VehicleEngine(vehicle, true);
				SetPlayerCheckpoint(playerid, 2300.6365,-2355.5398,13.1155, 3.0);
				JobMessage(playerid, "~r~NEXT~n~~y~CHECKPOINT ON THE MAP TO MAKE YOUR RIDE", 8);
      }
      else
      {
          SCM(playerid,COLOR_WHITE,"Wait till the next payday to make a new trip");
      }
    }
		else SendClientMessage(playerid,COLOR_WHITE,"Already doing shift sweep.");
	}
	else
	{
		SCM(playerid,COLOR_WHITE,"You're not in a sweeper machine.");
	}
	return 1;
}
CMD:truckerrank(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] != TRUCKER) return SCM(playerid, COLOR_WHITE, "You don't have Trucker Job.");
    SCMEx(playerid, COLOR_FADE1, "Your rank for trucker job is: %s", GetJobRank(playerid));
    return 1;
}
CMD:truck(playerid, params[])
{
	new vehicle = GetPlayerVehicleID(playerid);
	if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "You must be inside a vehicle as a driver.");
  if(PlayerInfo[playerid][pCanJob] != 0) return SCM(playerid, COLOR_WHITE, "Wait till the next payday to make a new trip.");
	if(PlayerInfo[playerid][pJob] != TRUCKER) return SCM(playerid, COLOR_WHITE, "You don't have Trucker Job.");
	if(!TruckCompatible(playerid, vehicle))
	{
		SCMEx(playerid, COLOR_GREY, "This type of truck is only for degree %s.", GetJobRankName(PlayerInfo[playerid][pJob], GetTruckRank(vehicle)));
		PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid));
		RemovePlayerFromVehicle(playerid);
	}
	else
	{
		if(PlayerInfo[playerid][pJob] != TRUCKER) return SCM(playerid, COLOR_WHITE, "You don't have Trucker Job.");
		if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "You must be inside a vehicle as a driver.");
		if(VehicleInfo[vehicle][carOwned] == 0 && !IsATruckJob(vehicle)) return SCM(playerid, COLOR_WHITE, "You must be inside an owned/government truck.");
		if(Trucking{playerid}) return SCM(playerid, COLOR_WHITE, "You're already on a mission.");
		if(PlayerInfo[playerid][pPayCheckMade] >= GetMaxPayCheck(playerid)) return SCM(playerid, COLOR_LIGHTRED, "You are at your maximum paycheck.");
		if(TruckTaken(vehicle)) return SCM(playerid, COLOR_WHITE, "This truck is taken by someone else.");
		Trucking{playerid} = true;
		LoadingTruck{playerid} = 0;
		DroppingOff{playerid} = false;
		TruckVehicle[playerid] = vehicle;
		SetRandomDestination(playerid);
		TruckComps[vehicle] = 0;
		TruckingMoney[playerid] = 0;
		VehicleEngine(vehicle, true);
		ShowTruckText(playerid);
		}
	return 1;
}

CMD:leavemission(playerid, params[])
{
	new vehicle = TruckVehicle[playerid];
	if(!Trucking{playerid}) return SCM(playerid, COLOR_WHITE, "You're not on a mission.");
	if(TruckComps[vehicle] > 0)
	{
		format(msg, sizeof(msg), "~w~YOU HAVE FAILED YOUR MISSION BY LEAVING THE MISSION~n~YOU HAVE GOT A FINE OF ~g~$%d.", (TruckComps[vehicle] * 5) / 10);
		JobMessage(playerid, msg, 6);
		PlacePlayerTicket(playerid, (TruckComps[vehicle] * 5) / 10);
	}
	else HideTruckText(playerid);
	Trucking{playerid} = false;
	DroppingOff{playerid} = false;
	LoadingTruck{playerid} = 0;
	RemoveCheckPoint(playerid);
	TruckComps[vehicle] = 0;
	TruckingMoney[playerid] = 0;
	if(TruckTrailer[playerid] != INVALID_VEHICLE_ID)
	{
		DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
		RespawnVehicle(TruckTrailer[playerid]);
		TruckTrailer[playerid] = INVALID_VEHICLE_ID;
	}
	if(!VehicleInfo[TruckVehicle[playerid]][carOwned])
	{
		RespawnVehicle(TruckVehicle[playerid]);
	}
	TruckVehicle[playerid] = INVALID_VEHICLE_ID;
	return 1;
}

CMD:dropoff(playerid, params[])
{
	new vehicle = GetPlayerVehicleID(playerid);
	if(!Trucking{playerid}) return SCM(playerid, COLOR_WHITE, "You're not on a mission.");
	if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "You must be inside a vehicle as a driver.");
	if(VehicleInfo[vehicle][carOwned] == 0 && !IsATruckJob(vehicle)) return SCM(playerid, COLOR_WHITE, "You must be inside an owned/government truck.");
	if(TruckComps[vehicle] == 0) return SCM(playerid, COLOR_GREY, "There's no component that you can use /dropoff.");
	SetTruckStage(playerid, 3);
	LoadingTruck{playerid} = false;
	SetCheckPoint(playerid, TRUCKDROP, DropOffX[playerid], DropOffY[playerid], DropOffZ[playerid], 9.0);
	return 1;
}


CMD:updatemission(playerid, params[])
{
	if(!Trucking{playerid}) return SCM(playerid, COLOR_WHITE, "You're not on a mission.");
	RemoveCheckPoint(playerid);
	if(GetTruckStage(playerid) == 1 || GetTruckStage(playerid) == 2)
	{
		SetCheckPoint(playerid, TRUCKLOAD, GatherX[playerid], GatherY[playerid], GatherZ[playerid], 9.0);
	}
	if(GetTruckStage(playerid) == 3 || GetTruckStage(playerid) == 4)
	{
		SetCheckPoint(playerid, TRUCKDROP, DropOffX[playerid], DropOffY[playerid], DropOffZ[playerid], 9.0);
	}
	if(GetTruckStage(playerid) == 5)
	{
		SetCheckPoint(playerid, TRUCKRETURN, CityVehicles[TruckVehicle[playerid]][vPosX], CityVehicles[TruckVehicle[playerid]][vPosY], CityVehicles[TruckVehicle[playerid]][vPosZ], 9.0);
	}
	return 1;
}
CMD:joblist(playerid, params[])
{
	ShowDialog(playerid, Show:<JobList>, DIALOG_STYLE_LIST, "Job location sites","Trucker\nMecanic\nSweeper\nTaxi Driver", "Show", "Cancel");
	return 1;
}
CMD:jobhelp(playerid, params[])
{
	new job = PlayerInfo[playerid][pJob];
	new sidejob = PlayerInfo[playerid][pSideJob];
	if(job == JOBLESS && sidejob == JOBLESS) return SCM(playerid, COLOR_GREY, "You don't have any job.");
	if(sidejob == MECHANIC)
	{
		SCM(playerid, COLOR_FADE1, "Secondary job of yours is MECHANIC.");
		SCM(playerid, COLOR_FADE1, "Available commands: /refillcar, /repaircar, /paintcar, /buycomp, /attach /complist");
	}
	if(sidejob == TAXI)
	{
		SCM(playerid, COLOR_FADE1, "Secondary job of yours is the TAXI DRIVER.");
		SCM(playerid, COLOR_FADE1, "Available commands: /taxi");
	}
	if(job == SWEEPER)
	{
	    SCMEx(playerid, COLOR_WHITE, "Your current job is: %s", GetJobName(job));
	    SCM(playerid, COLOR_FADE2, "Available commands:");
	    SCM(playerid, COLOR_FADE3, "/sweep - Start your tour of sweep.");
	}
	if(job == DRUGDEALER)
	{
		SCMEx(playerid, COLOR_WHITE, "Your current job is: %s", GetJobName(job));
		SCM(playerid, COLOR_FADE2, "Available commands:");
		SCM(playerid, COLOR_FADE3, "/buydrug - Buy drugs from drug farms.");
		SCM(playerid, COLOR_FADE3, "/selldrug - Sell someone drugs (/mydrugs).");
		SCM(playerid, COLOR_FADE3, "/buyseeds - Buy seeds of drugs.");
	}
	if(job == TRUCKER)
	{
		SCMEx(playerid, COLOR_FADE1, "Your current job is: %s", GetJobName(job));
		SCM(playerid, COLOR_FADE2, "Available commands:");
		SCM(playerid, COLOR_FADE3, "/truck - You can start work.");
		SCM(playerid, COLOR_FADE3, "/dropoff - You can complete missions faster.");
		SCM(playerid, COLOR_FADE3, "/updatemission - To update your mission.");
		SCM(playerid, COLOR_FADE3, "/leavemission - To leave on a mission.");
		SCM(playerid, COLOR_FADE3, "/truckerrank - To see your rank.");
		SCMEx(playerid, COLOR_WHITE, "%d - Hours in your career.", PlayerInfo[playerid][pCareer]);
	}
	return 1;
}

CMD:checkcomponents(playerid, params[])
{
	if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "You need to be inside a car to check components.");
	SCMEx(playerid, COLOR_YELLOWG, "In this vehicle you own %d components/materials.", VehicleInfo[GetPlayerVehicleID(playerid)][carComps]);
	return 1;
}

CMD:paintcar(playerid, params[])
{
	new id, color1, color2;
	new playerVeh = GetPlayerVehicleID(playerid);
	if(PlayerInfo[playerid][pSideJob] != MECHANIC) return SCM(playerid, COLOR_WHITE, "You are not a mechanic.");
	if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "You must be inside a Tow Truck as a driver.");
	if(!IsATowTruck(playerVeh)) return SCM(playerid, COLOR_LIGHTRED, "You must be inside a Tow Truck.");
	if(sscanf(params,"udd",id,color1,color2)) return SyntaxMSG(playerid, "/paintcar [playerid/PartOfName] [color 1] [color 2]");
	if(color1 > 255 || color2 > 255 || color1 < 0 || color2 < 0) return SCM(playerid, COLOR_LIGHTRED, "Car color ID's: 0-255");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "You may not offer it to yourself.");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(!PlayerNearPlayer(6.0, playerid, id)) return NotNearPlayerMSG(playerid);
	if(!IsDriver(id)) return SCM(playerid, COLOR_GREY, "This player isn't in a vehicle as a driver.");
	new vehicle = GetPlayerVehicleID(id);
	if(VehicleInfo[vehicle][carOwned] == 0) return SCM(playerid, COLOR_GREY, "This vehicle is a government vehicle.");
	if(VehicleInfo[playerVeh][carComps] < 45) return SCM(playerid, COLOR_LIGHTRED, "You need at least 45 components to repaint the vehicle.");
	format(msg, sizeof(msg), "have offered %s to paint their %s.", GetNameWithMask(id), VehicleNames[GetVehicleModel(vehicle)-400]);
	ActionMessage(playerid, 10.0, msg);
	format(msg, sizeof(msg), "* %s you offered to paint car, /accept repair to accept. (( Change the color ))", GetNameWithMask(playerid));
	SCM(id, COLOR_INFO, msg);
	SetIntVar(playerid, "color1", color1);
	SetIntVar(playerid, "color2", color2);
	SetIntVar(id, "RepairFrom", playerid);
	SetIntVar(id, "RepairType", 5);
	GettingRepair{id} = true;
	return 1;
}

CMD:attach(playerid, params[])
{
	new id;
	new playerVeh = GetPlayerVehicleID(playerid);
	if(PlayerInfo[playerid][pSideJob] != MECHANIC) return SCM(playerid, COLOR_WHITE, "You're not a mechanic.");
	if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "You have to be inside a Tow Truck as driver.");
	if(!IsATowTruck(playerVeh)) return SCM(playerid, COLOR_LIGHTRED, "You have to be inside a Tow Truck.");
	if(IsTrailerAttachedToVehicle(playerVeh))
	{
		DetachTrailerFromVehicle(playerVeh);
		SCM(playerid, COLOR_INFO, "As you had a vehicle attached to your vehicle it has been detached.");
		return 1;
	}
	if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/attach [playerid/PartOfName]");
	if(id == playerid) return SCM(playerid, COLOR_GREY, "You may not offer it to yourself.");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(!PlayerNearPlayer(8.0, playerid, id)) return NotNearPlayerMSG(playerid);
	if(!IsDriver(id)) return SCM(playerid, COLOR_GREY, "This player isn't in a vehicle as a driver.");
	new vehicle = GetPlayerVehicleID(id);
	if(VehicleInfo[vehicle][carOwned] == 0) return SCM(playerid, COLOR_GREY, "This vehicle is a government vehicle.");
	format(msg, sizeof(msg), "has offered to tow %s's %s.", GetNameWithMask(id), VehicleNames[GetVehicleModel(vehicle)-400]);
	ActionMessage(playerid, 10.0, msg);
	format(msg, sizeof(msg), "* %s has offered you a tow, /accept tow to accept. (( Attaches Your Vehicle ))", GetNameWithMask(playerid));
	SCM(id, COLOR_INFO, msg);
	SetIntVar(id, "RepairFrom", playerid);
	GettingRepair{id} = true;
	return 1;
}

CMD:repaircar(playerid, params[])
{
	new id, type, secoption;
	new playerVeh = GetPlayerVehicleID(playerid);
	if(PlayerInfo[playerid][pSideJob] != MECHANIC) return SCM(playerid, COLOR_WHITE, "You are not a mechanic.");
	if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "You must be inside a Tow Truck as a driver.");
	if(!IsATowTruck(playerVeh)) return SCM(playerid, COLOR_LIGHTRED, "You must be inside a Tow Truck.");
	if(sscanf(params,"udD(-1)",id,type,secoption))
	{
		SyntaxMSG(playerid, "/repaircar [playerid/PartOfName] [type]");
		SCM(playerid, -1, "{C0C0C0}Type 1: {FFFFFF}Repair the engine");
		SCM(playerid, -1, "{C0C0C0}Type 2: {FFFFFF}Repair the bodywork");
		SCM(playerid, -1, "{C0C0C0}Type 3: {FFFFFF}Remove destroyes)");
		SCM(playerid, -1, "{C0C0C0}Type 4: {FFFFFF}Restore vehicle");
		return 1;
	}
	if(id == playerid) return SCM(playerid, COLOR_GREY, "You may not offer it to yourself.");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(!PlayerNearPlayer(6.0, playerid, id)) return NotNearPlayerMSG(playerid);
	if(!IsDriver(id)) return SCM(playerid, COLOR_GREY, "This player isn't in a vehicle as a driver.");
	new vehicle = GetPlayerVehicleID(id);
	if(VehicleInfo[vehicle][carOwned] == 0) return SCM(playerid, COLOR_GREY, "This vehicle is a government vehicle.");
	if(type == 1)
	{
		if(VehicleInfo[playerVeh][carComps] < 75) return SCM(playerid, COLOR_LIGHTRED, "You need at least 75 components to fix the engine.");
		format(msg, sizeof(msg), "has offered to repair the engine of %s's %s.", GetNameWithMask(id), VehicleNames[GetVehicleModel(vehicle)-400]);
		ActionMessage(playerid, 10.0, msg);
		format(msg, sizeof(msg), "* %s has offered you an engine repair, /accept repair to accept. (( Healing The Engine ))", GetNameWithMask(playerid));
		SCM(id, COLOR_INFO, msg);
		SetIntVar(id, "RepairFrom", playerid);
		SetIntVar(id, "RepairType", 1);
		GettingRepair{id} = true;
	}
	else if(type == 2)
	{
		if(VehicleInfo[playerVeh][carComps] < 75) return SCM(playerid, COLOR_LIGHTRED, "You need at least 75 components to fix the visual damage.");
		format(msg, sizeof(msg), "has offered to repair the bodywork of %s's %s.", GetNameWithMask(id), VehicleNames[GetVehicleModel(vehicle)-400]);
		ActionMessage(playerid, 10.0, msg);
		format(msg, sizeof(msg), "* %s has offered you a bodywork repair, /accept repair to accept. (( Visual Work ))", GetNameWithMask(playerid));
		SCM(id, COLOR_INFO, msg);
		SetIntVar(id, "RepairFrom", playerid);
		SetIntVar(id, "RepairType", 2);
		GettingRepair{id} = true;
	}
	else if(type == 3)
	{
		new amount;
		if(sscanf(params,"{dd}d",amount))
		{
			SCM(playerid, COLOR_LIGHTRED, "Please enter how many destroys you want to remove.");
			SCM(playerid, COLOR_GREY, "Each destroy costs 30 products.");
			return 1;
		}
		if(VehicleInfo[playerVeh][carComps] < amount * 30) return SCMEx(playerid, COLOR_LIGHTRED, "You don't have enough products, %d", amount * 30);
		if(VehicleInfo[vehicle][carDestroyed] == 0) return SCM(playerid, COLOR_WHITE, "This vehicle doesn't have any destroys to remove.");
		format(msg, sizeof(msg), "has offered to remove the (%d)destroyes from %s's %s.", amount, GetNameWithMask(id), VehicleNames[GetVehicleModel(vehicle)-400]);
		ActionMessage(playerid, 10.0, msg);
		format(msg, sizeof(msg), "* %s has offered you a destroys repair (%d), /accept repair to accept. (( Dents ))", GetNameWithMask(playerid), amount);
		SCM(id, COLOR_INFO, msg);
		SetIntVar(id, "RepairFrom", playerid);
		SetIntVar(id, "DentsAmount", amount);
		SetIntVar(id, "RepairType", 4);
		GettingRepair{id} = true;
	}
	else if(type == 4)
	{
		if(VehicleInfo[playerVeh][carComps] < 75) return SCM(playerid, COLOR_LIGHTRED, "You need at least 75 components to fix the dead engine.");
		if(VehicleInfo[vehicle][carBroken] == 0) return SCM(playerid, COLOR_WHITE, "This vehicle engine is not dead.");
		format(msg, sizeof(msg), "has offered to restore the engine of %s's %s.", GetNameWithMask(id), VehicleNames[GetVehicleModel(vehicle)-400]);
		ActionMessage(playerid, 10.0, msg);
		format(msg, sizeof(msg), "* %s has offered you a dead engine repair, /accept repair to accept. (( Dead Engine ))", GetNameWithMask(playerid));
		SCM(id, COLOR_INFO, msg);
		SetIntVar(id, "RepairFrom", playerid);
		SetIntVar(id, "RepairType", 3);
		GettingRepair{id} = true;
	}
	return 1;
}

CMD:complist(playerid, params[])
{
    if(PlayerInfo[playerid][pSideJob] != MECHANIC) return SCM(playerid, COLOR_WHITE, "You are not a mechanic.");
    SCM(playerid, COLOR_YELLOWG, "The use of Mechanic components for the job are as follows:");
    SCM(playerid, COLOR_WHITE, "-/repaircar = 75 COMPONENTS");
    SCM(playerid, COLOR_WHITE, "-/paintcar = 45 COMPONENTS");
	return 1;
}

CMD:buycomp(playerid, params[])
{
	new amount;
	if(PlayerInfo[playerid][pSideJob] != MECHANIC) return SCM(playerid, COLOR_WHITE, "You are not a mechanic.");
	if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "You must be inside a Tow Truck as a driver.");
	if(!IsATowTruck(GetPlayerVehicleID(playerid))) return SCM(playerid, COLOR_LIGHTRED, "You must be inside a Tow Truck.");
	if(!PlayerToPoint(6.0, playerid, 2430.4412,-2454.9304,13.6250))
	{
		SCM(playerid, COLOR_LIGHTRED, "Head to the vehicle component shop for towtruck components.");
		SetCheckPoint(playerid, COMPSPOT, 2430.4412,-2454.9304,13.6250, 8.0);
	}
	else
	{
		if(sscanf(params,"d",amount))
		{
			SyntaxMSG(playerid, "/buycomp [amount]");
			SCM(playerid, COLOR_LIGHTRED, "You have a limit 1-25.");
			SCM(playerid, COLOR_WHITE, "Each component is multiplied by 25 for your truck.");
			return 1;
		}
		if(amount < 1 || amount > 25) return SCM(playerid, COLOR_LIGHTRED, "You have a limit 1-15.");
		if(GetCash(playerid) < amount * 15) return SCMEx(playerid, COLOR_LIGHTRED, "You don't have enough money, $%d.", amount * 15);
		GiveCash(playerid, -amount * 10);
    format(msg, sizeof(msg), "~w~YOU'VE BOUGHT %s PRODUCTS FOR YOUR TRUCK.", amount);
    JobMessage(playerid, msg, 6);
		VehicleInfo[GetPlayerVehicleID(playerid)][carComps] += amount;
	}
	return 1;
}

CMD:refillcar(playerid, params[])
{
	new id, price;
	if(PlayerInfo[playerid][pSideJob] != MECHANIC) return SCM(playerid, COLOR_WHITE, "You are not a mechanic.");
	if(sscanf(params,"ud",id,price)) return SyntaxMSG(playerid, "/refillcar [playerid/PartOfName] [price]");
	if(id == playerid) return SCM(playerid, COLOR_WHITE, "You may not offer a refill to yourself.");
	if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "You must be inside a Tow Truck as a driver.");
	if(!IsATowTruck(GetPlayerVehicleID(playerid))) return SCM(playerid, COLOR_LIGHTRED, "You must be inside a Tow Truck.");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(!PlayerNearPlayer(6.0, playerid, id)) return NotNearPlayerMSG(playerid);
	if(!IsDriver(id)) return SCM(playerid, COLOR_GREY, "This player isn't in a vehicle as a driver.");
	new vehicle = GetPlayerVehicleID(id);
	if(VehicleInfo[vehicle][carOwned] == 0) return SCM(playerid, COLOR_GREY, "This vehicle is a government vehicle.");
	if(Gas{vehicle} >= 100) return SCM(playerid, COLOR_WHITE, "The gas tank is full.");
	RefillPrice[id] = price;
	RefillOffer[id] = playerid;
	format(msg, sizeof(msg), "gives a blank refilling %s's car gas tank for $%d.", GetNameWithMask(id), price);
	ActionMessage(playerid, 10.0, msg);
	format(msg, sizeof(msg), "* %s has offered you a car refill for $%d, /accept reffil to accept.", GetNameWithMask(playerid), price);
	SCM(id, COLOR_INFO, msg);
	return 1;
}

CMD:taxi(playerid, params[])
{
	new option[11], secoption, vehicle = GetPlayerVehicleID(playerid);
	if(PlayerInfo[playerid][pSideJob] != TAXI) return SCM(playerid, COLOR_WHITE, "You're not in a cabbie.");
    if(PlayerInfo[playerid][pTaxiLic] == 0) return SCM(playerid, COLOR_WHITE,"You don't have a taxi license");
	if(sscanf(params,"s[11]D(-1)", option, secoption))
	{
		SyntaxMSG(playerid, "/taxi [option]");
		SCM(playerid, COLOR_GREY, "Optiuni: | duty | fare | accept |");
		return 1;
	}
	if(CompareStrings(option, "duty"))
	{
		if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "You have to be the driver of the car.");
		if(!IsATaxi(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "You have to be inside a Taxi.");
		if(TaxiDuty{playerid})
		{
			SCM(playerid, COLOR_YELLOWG, "[TAXI]: You are now off-duty.");
			SetNormalColor(playerid);
			TaxiDuty{playerid} = false;
			TaxiMade[playerid] = 0;
		}
		else
		{
			SCM(playerid, COLOR_YELLOWG, "[TAXI]: You are now on duty.");
			SetPlayerColor(playerid, TAXI_DUTY);
			TaxiDuty{playerid} = true;
			TaxiMade[playerid] = 0;
		}
	}
	/*if(CompareStrings(option, "start"))
	{
		if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "Trebuie sa fi soferul masinii.");
		if(!IsATaxi(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fi inauntrul unui taxi.");
		if(!TaxiDuty{playerid}) return SCM(playerid, COLOR_GREY, "Nu esti On-Duty.");
		if(TaxiFare{playerid} == 0) return SCM(playerid, COLOR_GREY, "Nu ai un Taxi Fare setat");
		if(TaxiStart{playerid}) return SCM(playerid, COLOR_GREY, "Taxi fare-ul tau a inceput.");
		SCM(playerid, COLOR_YELLOWG, "[TAXI]: Taxi fare-ul tau a inceput si va interactiona cu toti oamenii din masina ta.");
		TaxiStart{playerid} = true;
	}*/
	if(CompareStrings(option, "fare"))
	{
		new fare;
		if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "You must be inside a Taxi/Cabbie as a driver.");
		if(!IsATaxi(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "You must be inside a Taxi/Cabbie.");
		if(sscanf(params,"{s[11]}d",fare)) return SyntaxMSG(playerid, "/taxi fare [amount]");
		if(!TaxiDuty{playerid}) return SCM(playerid, COLOR_GREY, "You are not on duty.");
		if(fare < 0.5 || fare > 2) return SCM(playerid, COLOR_YELLOWG, "There is a limit for taxi fare, ($0.5-$2).");
		format(msg, sizeof(msg), "[TAXI]: You have changed your taxi fare to $%d.", fare);
		SCM(playerid, COLOR_YELLOWG, msg);
		TaxiFare{playerid} = fare;
	}
	if(CompareStrings(option, "accept"))
	{
		new id;
		if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "You must be inside a Taxi/Cabbie as a driver.");
		if(!IsATaxi(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "You must be inside a Taxi/Cabbie.");
		if(sscanf(params,"{s[11]}d",id)) return SyntaxMSG(playerid, "/taxi accept [playerid]");
		if(!TaxiDuty{playerid}) return SCM(playerid, COLOR_GREY, "You are not on duty.");
		if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
		if(GetIntVar(id, "NeedTaxi") == 0) return SCM(playerid, COLOR_LIGHTRED, "This player hasn't requested any taxi.");
		format(msg, sizeof(msg), "* %s has accepted your call, he charges $%d per second!", GetNameEx(playerid), TaxiFare{playerid});
		SCM(id, COLOR_YELLOWG, msg);
		format(msg, sizeof(msg), "* You have accepted %s taxi call.", GetNameEx(id));
		SCM(playerid, COLOR_YELLOWG, msg);
	}
	/*if(CompareStrings(option, "stop"))
	{
		if(!IsDriver(playerid)) return SCM(playerid, COLOR_GREY, "You must be inside a Taxi/Cabbie as a driver.");
		if(!IsATaxi(vehicle)) return SCM(playerid, COLOR_LIGHTRED, "You must be inside a Taxi/Cabbie.");
		if(!TaxiDuty{playerid}) return SCM(playerid, COLOR_GREY, "You are not on duty.");
		if(!TaxiStart{playerid}) return SCM(playerid, COLOR_GREY, "Your taxi fare is not started.");
		SCM(playerid, COLOR_YELLOWG, "[TAXI]: Your taxi fare has stopped and charges all people inside.");
		format(msg, sizeof(msg), "[TAXI]: The final fare of your taxi has reached to, $%d.", TaxiMade[playerid]);
		SCM(playerid, COLOR_YELLOWG, msg);
		foreach(Player, i)
		{
			if(PlayerInCar(i) && GetPlayerState(i) != PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
			{
				ChargePerson(i);
			}
		}
		TaxiStart{playerid} = false;
		TaxiMade[playerid] = 0;
	}*/
	return 1;
}

CMD:setspawnpd(playerid, params[])
{
	new faction, type;
	faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
        if(PlayerInfo[playerid][pSpawnType] != 2) return SCM(playerid, COLOR_LIGHTRED, "You do not have /setspawn 2.");
	if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/setspawnpd [0-54Th/1-Santa Maria/2-Pershing]");
	if(type == 0 && PlayerInfo[playerid][pSpawnType] == 2)
	{
  	SCM(playerid, COLOR_YELLOWG, "You have changed your spawn: (54Th East Bureau)");
  	PlayerInfo[playerid][pSpawnLSPD] = 0;
	}
	if(type == 1 && PlayerInfo[playerid][pSpawnType] == 2)
	{
	SCM(playerid, COLOR_YELLOWG, "You have changed your spawn: (Santa Maria Bureau).");
	PlayerInfo[playerid][pSpawnLSPD] = 1;
	}
	if(type == 2 && PlayerInfo[playerid][pSpawnType] == 2)
	{
  	SCM(playerid, COLOR_YELLOWG, "You have changed your spawn: (Pershing Square).");
  	PlayerInfo[playerid][pSpawnLSPD] = 2;
	}
  SaveSpawnType(playerid);
	return 1;
}

CMD:setspawn(playerid, params[])
{
  new type;
  if(sscanf(params,"d",type)) return SyntaxMSG(playerid, "/setspawn [0-Normal/1-House/2-Faction]");
  if(type > 2 || type < 0) return SyntaxMSG(playerid, "/setspawn [0-Normal/1-House/2-Faction]");
  if(type == 0)
  {
    SCM(playerid, COLOR_YELLOWG, "You have changed your spawn: normal(Gara)");
    PlayerInfo[playerid][pSpawnType] = 0;
  }
  if(type == 1)
  {
    if(PlayerInfo[playerid][pHouseKey] == -1) return SCM(playerid, COLOR_GREY, "You don't have a house to spawn at.");
    SCM(playerid, COLOR_YELLOWG, "You have changed your spawn: mediu(Casa).");
    PlayerInfo[playerid][pSpawnType] = 1;
  }
  if(type == 2)
  {
    if(PlayerInfo[playerid][pFaction] == 0) return SCM(playerid, COLOR_GREY, "You are not in a faction to spawn at.");
    SCM(playerid, COLOR_YELLOWG, "You have changed your spawn: mare(Factiune).");
    PlayerInfo[playerid][pSpawnType] = 2;
  }
  SaveSpawnType(playerid);
  return 1;
}

CMD:opentoll(playerid, params[])
{
 	new L_i_TollID;
	if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, 623.9500, -1183.9774, 19.2260) || IsPlayerInRangeOfPoint(playerid, 10.0, 607.9684, -1194.2866, 19.0043)) // Richman tolls
	{
		L_i_TollID = RichmanToll;
	}
	else if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, 39.7039, -1522.9891, 5.1995) || IsPlayerInRangeOfPoint(playerid, 10.0, 62.7378, -1539.9891, 5.0639)) // Flint tolls
	{
		L_i_TollID = FlintToll;
	}
	else if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, 1795.9447, 704.2550, 15.0006) || IsPlayerInRangeOfPoint(playerid, 10.0, 1778.9886, 702.6728, 15.2574)) // LV tolls
	{
		L_i_TollID = LVToll;
	}
	else if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, 612.53070, 346.59592, 17.92614) || IsPlayerInRangeOfPoint(playerid, 10.0, 604.37152, 346.88141, 17.92614)) // LV tolls
	{
		L_i_TollID = BlueberryTollR;
	}
	else if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, -195.2768,252.2416,12.0781) || IsPlayerInRangeOfPoint(playerid, 10.0, -199.5153,260.3405,12.0781)) // LV tolls
	{
		L_i_TollID = BlueberryTollL;
	}
	else
	{
		SCM(playerid, COLOR_LIGHTRED, "You are not close enough to a toll booth.");
		return 1;
	}
	if(!Toll_TimePassedCivil(L_i_TollID, playerid))
		return 1;

	new L_sz_MessageString[156];
    if(!CopDuty{playerid})
	{
		if(aTolls[L_i_TollID][E_tLocked]) // If it's locked
		{
			ProxDetectorP(20.0, playerid, L_sz_TollStringLocked, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		}
		if(GetCash(playerid) < TollCost)
		{
			SCM(playerid, COLOR_RED, L_sz_TollStringNoMoney);
			return 1;
		}
		format(L_sz_MessageString, 156, "%s paid %d$ to the toll guard.", GetNameWithMask(playerid), TollCost);
		GiveCash(playerid, -TollCost);
		ProxDetectorP(20.0, playerid, L_sz_MessageString, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	ProxDetectorP(20.0, playerid, L_sz_TollStringBye, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	SCM(playerid, COLOR_LIGHTRED, L_sz_TollStringHurryUp);
	Toll_OpenToll(L_i_TollID);
	return 1;
}

//===========================Drugs===========================//
CMD:mydrugs(playerid, params[])
{
	ShowPlayerDrugs(playerid, playerid);
	return 1;
}

CMD:vehdrugs(playerid, params[])
{
	new vehicle = GetPlayerVehicleID(playerid);
	if(VehicleInfo[vehicle][carOwned] == 0) return SCM(playerid, COLOR_LIGHTRED, "This command may be only performed inside private vehicles.");
	if(PlayerNearVehicle(3.0, playerid, PlayerInfo[playerid][pCarKey]))
	{
	    if(VehicleInfo[vehicle][carTrunkLock] == 0)
		{
 			ShowVehicleDrugs(playerid, vehicle);
 			return 1;
		}
		else
		{
		    SCM(playerid, COLOR_WHITE,"You don't get the trunk open.");
		}
	}
	else
	{
	    SCM(playerid, COLOR_WHITE,"You're not next to the trunk.");
	}
	return 1;
}

CMD:pd(playerid, params[]) return cmd_putdrugveh(playerid, params);
CMD:putdrugveh(playerid, params[])
{
	new slot, amount;
	if(sscanf(params,"dd",slot,amount)) return SyntaxMSG(playerid, "/putdrug [slot] [amount]");
	if(PlayerInCar(playerid))
	{
		new vehicle = GetPlayerVehicleID(playerid);
		if(VehicleInfo[vehicle][carOwned] == 0) return SCM(playerid, COLOR_LIGHTRED, "This command may be only performed inside private vehicles.");
		if(PlayerInfo[playerid][pDrug][slot] == 0) return SCM(playerid, COLOR_GREY, "You have no drug at this slot.");
		if(GetFreeVehicleDrugSlot(vehicle) == 0) return SCM(playerid, COLOR_GREY, "This vehicle has no free drug slots.");
		if(PlayerInfo[playerid][pDrugAmount][slot] < amount) return SCM(playerid, COLOR_GREY, "Incorrect amount.");
		SetPlayerBubble(playerid, "puts something in the vehicle.");
		GiveVehicleDrug(vehicle, PlayerInfo[playerid][pDrug][slot], amount);
		PlayerInfo[playerid][pDrugAmount][slot] -= amount;
		SCMEx(playerid, COLOR_YELLOW3, "* You put the %s in the car (/vehdrugs).", GetDrugName(PlayerInfo[playerid][pDrug][slot]));
		if(PlayerInfo[playerid][pDrugAmount][slot] == 0)
		PlayerInfo[playerid][pDrug][slot] = 0;
	}
	else
	{
	    SCM(playerid, COLOR_RED,"You're not in a car.");
	}
	return 1;
}

CMD:td(playerid, params[]) return cmd_takedrugveh(playerid, params);
CMD:takedrugveh(playerid, params[])
{
	new slot, amount;
	if(sscanf(params,"dd",slot,amount)) return SyntaxMSG(playerid, "/takedrug [slot] [amount]");
	if(PlayerInCar(playerid))
	{
		new vehicle = GetPlayerVehicleID(playerid);
		if(VehicleInfo[vehicle][carOwned] == 0) return SCM(playerid, COLOR_LIGHTRED, "This command may be only performed inside private vehicles.");
		if(VehicleInfo[vehicle][carDrug][slot] == 0) return SCM(playerid, COLOR_GREY, "There's no drug at this slot.");
		if(GetFreeDrugSlot(playerid) == 0) return SCM(playerid, COLOR_GREY, "You don't have a free drug slot.");
		if(VehicleInfo[vehicle][carDrugAmount][slot] < amount) return SCM(playerid, COLOR_GREY, "Incorrect amount.");
		SetPlayerBubble(playerid, "takes something from the vehicle.");
		VehicleInfo[vehicle][carDrugAmount][slot] -= amount;
		GivePlayerDrug(playerid, VehicleInfo[vehicle][carDrug][slot], amount);
		SCMEx(playerid, COLOR_YELLOW3, "* You gets %s from the car.", GetDrugName(VehicleInfo[vehicle][carDrug][slot]));
		if(VehicleInfo[vehicle][carDrugAmount][slot] == 0)
		VehicleInfo[vehicle][carDrug][slot] = 0;
	}
	else
	{
	    SCM(playerid, COLOR_RED,"You're not in a car.");
	}
	return 1;
}

CMD:givedrug(playerid, params[])
{
	new id, slot, amount, emote[128];
	if(sscanf(params,"udds[128]",id,slot,amount,emote)) return SyntaxMSG(playerid, "/givedrug [playerid/PartOfName] [slot] [amount] [action/me]");
	if(playerid == id) return SCM(playerid, COLOR_GREY, "You can't transfer drugs to yourself.");
	if(PlayerInfo[playerid][pDrug][slot] == 0) return SCM(playerid, COLOR_GREY, "You have no drug at this slot.");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
	if(PlayerInfo[playerid][pDrugAmount][slot] < amount) return SCM(playerid, COLOR_GREY, "Incorrect amount.");
	if(GetFreeDrugSlot(id) == 0) return SCM(playerid, COLOR_GREY, "This player has no free drug slots.");
	ActionMessage(playerid, 15.0, emote);
	format(msg, sizeof(msg), "* You've transferred %s to %s.", GetDrugName(PlayerInfo[playerid][pDrug][slot]), GetNameWithMask(id));
	SCM(playerid, COLOR_YELLOWG, msg);
	format(msg, sizeof(msg), "* %s gave you %s.", GetNameWithMask(playerid), GetDrugName(PlayerInfo[playerid][pDrug][slot]));
	SCM(id, COLOR_YELLOWG, msg);
	GiveDrugFromPlayer(playerid, slot, PlayerInfo[playerid][pDrug][slot], amount, id);
	return 1;
}

CMD:testdrug(playerid, params[])
{
	new slot, emote[128];
    new Float:Health;
    GetPlayerHealth(playerid, Health);
    SetPlayerHealth(playerid, Health+15);
	if(sscanf(params,"ds[128]",slot,emote)) return SyntaxMSG(playerid, "/testdrug [slot] [emote]");
	if(PlayerInfo[playerid][pDrug][slot] == 0) return SCM(playerid, COLOR_GREY, "You have no drug at this slot.");
	ActionMessage(playerid, 15.0, emote);
	format(msg, sizeof(msg), "* You have tested the strength of %s from slot %d.", GetDrugName(PlayerInfo[playerid][pDrug][slot]), slot);
	SCM(playerid, COLOR_YELLOWG, msg);
	format(msg, sizeof(msg), "- Test Drug - : %s(15+hp - 100str)", GetDrugName(PlayerInfo[playerid][pDrug][slot]), slot);
	SCM(playerid, COLOR_YELLOWG, msg);
	return 1;
}

CMD:usedrug(playerid, params[])
{
	new slot, emote[128];
    new Float:Health;
    GetPlayerHealth(playerid, Health);
    SetPlayerHealth(playerid, Health+15);
	if(sscanf(params,"ds[128]",slot,emote)) return SyntaxMSG(playerid, "/usedrug [slot] [emote]");
	if(PlayerInfo[playerid][pDrug][slot] == 0) return SCM(playerid, COLOR_GREY, "You have no drug at this slot.");
	ActionMessage(playerid, 15.0, emote);
	format(msg, sizeof(msg), "* You have used some %s from slot %d.", GetDrugName(PlayerInfo[playerid][pDrug][slot]), slot);
	SCM(playerid, COLOR_YELLOWG, msg);
	RemovePlayerDrug(playerid, slot);
  SetPlayerDrunkLevel (playerid, 3000);
	return 1;
}


CMD:dropdrug(playerid, params[])
{
	new slot, emote[128];
	if(sscanf(params,"ds[128]",slot,emote)) return SyntaxMSG(playerid, "/dropdrug [slot] [emote]");
	if(PlayerInfo[playerid][pDrug][slot] == 0) return SCM(playerid, COLOR_GREY, "You have no drug at this slot.");
	ActionMessage(playerid, 15.0, emote);
	format(msg, sizeof(msg), "* You just threw %s on the slot %d.", GetDrugName(PlayerInfo[playerid][pDrug][slot]), slot);
	SCM(playerid, COLOR_YELLOWG, msg);
	RemovePlayerDrug(playerid, slot);
	return 1;
}

CMD:drughelp(playerid, params[])
{
  SCM(playerid, COLOR_GREEN, "______________________Drug Dealing Help______________________");
  SCM(playerid, COLOR_WHITE, "/mydrugs - Look how many your drugs.");
  SCM(playerid, COLOR_WHITE, "/givedrug - You're giving someone some drugs.");
  SCM(playerid, COLOR_WHITE, "/vehdrugs - It shows how many drugs you have in the car.");
  SCM(playerid, COLOR_WHITE, "/putdrugveh - You put in the car amount of drugs.");
  SCM(playerid, COLOR_WHITE, "/takedrugveh - Take an amount of drug from the car.");
  SCM(playerid, COLOR_WHITE, "/plantseed - You can plant seeds (to do drugs).");
  SCM(playerid, COLOR_WHITE, "/pickplant - You can get the seeds planted.");
  SCM(playerid, COLOR_WHITE, "/giveseeds - You can give someone a sum of seeds.");
  return 1;
}

CMD:asetdrug(playerid, params[])
{
	new id, slot, drug, amount;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_4)) return NotAuthMSG(playerid);
	if(sscanf(params,"uddd",id,slot,drug,amount))
	{
		SyntaxMSG(playerid, "/asetdrug [playerid/PartOfName] [slot] [drugID] [amount]");
		SCM(playerid, COLOR_WHITE, "Drugs: 1-Crack/2-Cocaine/3-Marijuana/4-Heroin");
		return 1;
	}
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(slot > 20 || slot < 1) return SCM(playerid, COLOR_WHITE, "Slot is, 1-20.");
	SCMEx(playerid, COLOR_WHITE, "You have set %s drug slot %d to %s, amount: %d.", GetNameEx(id), slot, GetDrugName(drug), amount);
	SCMEx(id, COLOR_WHITE, "Admin %s has set your drug slot %d to %s, amount: %d.", GetNameEx(playerid), slot, GetDrugName(drug), amount);
	PlayerInfo[id][pDrug][slot] = drug;
	PlayerInfo[id][pDrugAmount][slot] = amount;
	return 1;
}
//===========================Drugs===========================//

//===========================Drug Dealer===========================//

CMD:buyseeds(playerid, params[])
{
	new amount;
	if(PlayerInfo[playerid][pJob] != DRUGDEALER) return SCM(playerid, COLOR_LIGHTRED, "You are not a drug dealer.");
	if(!PlayerToPoint(5.0, playerid, -392.1880,-1439.1407,26.3389))
  {
    SCM(playerid, COLOR_GREY, "You are not at the drug farm.");
    SetCheckPoint(playerid, COMPSPOT, -392.1880, -1439.1407, 26.3389, 8.0);
  }
	if(sscanf(params,"d",amount)) return SyntaxMSG(playerid, "/buyseeds [amount] (Each seed costs $200)");
	if(amount < 1) return SCM(playerid, COLOR_GREY, "Invalid amount.");
	new price = amount * 200;
	if(GetCash(playerid) < price) return SCMEx(playerid, COLOR_GREY, "[ERROR]: %d seeds price is %d.", amount, price);
	SCMEx(playerid, COLOR_FADE2, "{C0C0C0}You have successfully bought {FFFFFF}%d {C0C0C0}seeds, you may plant these seeds.", amount);
	SCM(playerid, COLOR_LIGHTRED, "[ATTENTION]: Planting these seeds in public places will get you banned.");
	GiveCash(playerid, -price);
	PlayerInfo[playerid][pSeeds] += amount;
	return 1;
}

CMD:giveseeds(playerid, params[])
{
	new id, amount;
	if(sscanf(params,"ud",id,amount)) return SyntaxMSG(playerid, "/giveseeds [playerid/PartOfName] [amount]");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(!PlayerNearPlayer(3.0, playerid, id)) return NotNearPlayerMSG(playerid);
	if(amount < 1 || amount > PlayerInfo[playerid][pSeeds]) return SCM(playerid, COLOR_GREY, "Invalid amount.");
	PlayerInfo[playerid][pSeeds] -= amount;
	PlayerInfo[id][pSeeds] += amount;
	SCMEx(playerid, COLOR_YELLOWG, "You have given %s %d seed(s).", GetNameWithMask(id), amount);
	SCMEx(id, COLOR_YELLOWG, "%s has given you %d seed(s).", GetNameWithMask(playerid), amount);
	return 1;
}

CMD:plantseed(playerid, params[])
{
	if(PlayerInfo[playerid][pSeeds] < 5) return SCM(playerid, COLOR_GREEN, "You need at least 5 seeds to plant a crop.");
	if(PlayerInCropArea(playerid)) return SCM(playerid, COLOR_GREY, "You are standing too close to another plant.");
	if(PlantingTime{playerid} > 0) return SCM(playerid, COLOR_LIGHTRED, "You are already planting a plant.");
	PlantingTime{playerid} = 60;
	FreezePlayer(playerid);
	OnPlayAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,0,0);
	SCM(playerid, COLOR_YELLOW2, "You have started to plant seeds, in case you would like to stop use /stop.");
	return 1;
}

CMD:pickplant(playerid, params[])
{
	new plant = GetClosestPlantID(playerid);
	if(plant == -1) return SCM(playerid, COLOR_GREY, "You are not standing on any plant.");
	if(CropsInfo[plant][pMade] == 0) return SCM(playerid, COLOR_GREY, "This plant has nothing to supply.");
	if(PickingTime{playerid} > 0) return SCM(playerid, COLOR_LIGHTRED, "You are already picking up a plant.");
	SetIntVar(playerid, "PlantPicking", plant);
	PickingTime{playerid} = 60;
	FreezePlayer(playerid);
	OnPlayAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,0,0);
	SCM(playerid, COLOR_YELLOW2, "You have started to pick the plant, in case you would like to stop use /stop.");
	return 1;
}
//===========================Drug Dealer===========================//

CMD:servertime(playerid, params[])
{
	SCMEx(playerid, COLOR_YELLOWG, "At the moment we are in: %s", GetFullDate(), GetNameEx(playerid));
	return 1;
}
/* =================== PlayerCommands =================== */

/* =================== HelperCommands =================== */
CMD:tduty(playerid, params[])
{
	if(!isTester(playerid)) return NotAuthMSG(playerid);
	if(GetIntVar(playerid, "TesterDuty") == 1)
	{
		RemoveVar(playerid, "TesterDuty");
		//SCM(playerid, COLOR_YELLOW, "Acum esti Tester Off Duty si nu vei mai primii cere de ajutor din parte playerlior(/helpme).");
		format(msg, sizeof(msg), "[TESTER]: {FFFFFF}%s is now Off-Duty!", GetNameEx(playerid));
		StaffMSG(HELPER_DUTY, msg);
		if(CopDuty{playerid})
		{
			SetPlayerColor(playerid, 0x8c8cfeff);
		}
		else
		{
			SetNormalColor(playerid);
		}
	}
	else
	{
		SetIntVar(playerid, "TesterDuty", 1);
		//SCM(playerid, COLOR_YELLOW, "Acum esti Tester On Duty, vei primi cereri de ajutor din partea playerilor(/helpme).");
		format(msg, sizeof(msg), "[TESTER]: {FFFFFF}%s is now On-Duty!", GetNameEx(playerid));
		StaffMSG(HELPER_DUTY, msg);
		SetPlayerColor(playerid, HELPER_DUTY);
	}
	return 1;
}


CMD:helplist(playerid, params[])
{
	new string[500];
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1) && PlayerInfo[playerid][pHelper] == 0) return SCM(playerid, COLOR_LIGHTRED, "You are not a tester.");
	foreach(Player, i)
	{
		if(GetIntVar(i, "JustHelped") == 1)
		{
			format(string, sizeof(string), "%s\n%s - [ID:%d]", string, GetNameEx(i), i);
		}
	}
	ShowDialog(playerid, Show:<HelpList>, DIALOG_STYLE_LIST, "List of aid (/checkhelp)", string, "Accept", "Refuse");
	return 1;
}


CMD:checkhelp(playerid, params[])
{
	new pid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1) && PlayerInfo[playerid][pHelper] == 0) return NotAuthMSG(playerid);
	if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/checkhelp [playerid/PartOfName]");
	if(GetIntVar(pid, "JustHelped") == 0) return SCM(playerid, COLOR_INFO, "This player hasn't request for any kind of help.");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	SetIntVar(playerid, "TookHelpFrom", pid);
	format(msg, sizeof(msg), "%s[ID:%d] asked the next thing:\n{FFFF00}%s", GetNameEx(pid), pid, GetStringVar(pid, "HelpText"));
	ShowDialog(playerid, Show:<HelpCheck>, DIALOG_STYLE_MSGBOX, "Help Check", msg, "Accept", "Close");
	return 1;
}

CMD:togtchat(playerid, params[])
{
	if(PlayerInfo[playerid][pHelper] == 0 && !CheckAdmin(playerid, 1)) return NotAuthMSG(playerid);
	if(TesterChat{playerid})
	{
		SCM(playerid, COLOR_INFO, "You stopped the testers chat (/t).");
		TesterChat{playerid} = false;
	}
	else if(!TesterChat{playerid})
	{
		SCM(playerid, COLOR_INFO, "You started the testers chat (/t).");
		TesterChat{playerid} = true;
	}
	return 1;
}

/* =================== HelperCommands =================== */

/* =================== AdminCommands =================== */
CMD:atmhelp(playerid, params[])
{
	SCM(playerid,COLOR_WHITE,"[ATMHELP] /atm");
}
CMD:doorcmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/makedoor /doorenter /doorexit /whatdoor /editdoor /removedoor /serverdoors /gotodoor /showdoors");
	return 1;
}
CMD:labelcmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/addlabel /whatlabel /renamelabel /removelabel /serverlabels /gotolabel");
	return 1;
}
CMD:telecmds(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_WHITE, "[SENIOR ADMIN]: {C3C3C3}/teles /maketele /removetele /serverteles");
	return 1;
}
CMD:vehiclecmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/makevehicle /removevehicle /whatvehicle /showvehicles");
	SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/avehiclepark /editvehicle /areparkvehicle /servervehicles /vehtypes");
	return 1;
}
CMD:atmcmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/makeatm /removeatm /editatm /showatms /serveratms");
	return 1;
}
CMD:objectcmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/removeobject /serverobjects /editobject /makeobject /whatobject /showobjects /gotoobject");
	return 1;
}
CMD:movedoorcmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/makemovedoor /removemovedoor /editmovedoor /whatmovedoor /showmovedoors");
	return 1;
}
CMD:cctvcmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/makecctv /removecctv /editcctv /cctvfaction /cctvinfo /showcctvs /whatcctv");
	return 1;
}
CMD:gatecmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/makegate /removegate /editgate /gatesound /gatesoundlength /whatgate /showgates");
	return 1;
}
CMD:gstationcmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/makegstation /removegstation /editgstation /showstations /servergstations");
	return 1;
}
CMD:housecmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/makehouse /removehouse /edithouse /houseenter /houseexit /asellhouse /gotohouse /serverhouses");
	return 1;
}
CMD:foodstallcmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/makefoodstall /removefoodstall /editfoodstall /serverfoodstalls /showstalls");
	return 1;
}
CMD:bankcmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/makebank /removebank /serverbanks /whatbank /showbanks /renamebank");
	return 1;
}
CMD:infocmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/makeinfo /removeinfo /whatinfo /serverinfos /editinfo /showinfos");
	return 1;
}
CMD:dealercmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/makeds /removeds /showdealers");
	return 1;
}
CMD:businesscmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/makebusiness /removebusiness /editbusiness /businessenter /gotobusiness /serverbusinesses /asellbusiness");
	SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/businessint /businessexit /biztypes /whatbusiness /showbusinesses");
	return 1;
}
CMD:factioncmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/makefaction /factionspawn /factioncolor /factionname /factionrankamount /factiontype");
	SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/factionjoinrank /factionrankname /factionleaderrank /factionuniform /makeleader /factions");
	return 1;
}
CMD:factiondoorcmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/makefactiondoor /factiondoorexit /factiondoorenter /whatfactiondoor /editfactiondoor /removefactiondoor");
	SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/serverfactiondoors /gotofactiondoor /showfactiondoors /factiondoorenterangle /factiondoorexitangle");
	return 1;
}
CMD:parkmetercmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/makeparkmeter /editparkmeter /removeparkmeter /dupparkmeter /showmeters");
	return 1;
}
CMD:jobcmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/makejob /removejob /jobname /jobrankname /jobrankamount /jobhighrank /movejob");
	return 1;
}
CMD:tcmds(playerid, params[])
{
    if(PlayerInfo[playerid][pHelper] > 0)
    {
        SCM(playerid, COLOR_GREEN, "___________________________TESTER COMMANDS___________________________");
   		SCM(playerid, COLOR_WHITE, "[TESTER] /helplist /checkhelp /tchat /tduty /togtchat /freeze /unfreeze /setinterior /setworld ");
    }
	else
	{
		SCM(playerid,COLOR_LIGHTRED,"You are not a helper.");
	}
	return 1;
}
CMD:acmds(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);

	if(CheckAdmin(playerid, ADMIN_LEVEL_1))
	{
        SCM(playerid, COLOR_GREEN, "___________________________ADMINISTRATOR COMMANDS____________________________");
		SCM(playerid, COLOR_WHITE, "[TRIAL ADMIN]: {C3C3C3}/aduty /aooc /announce /noooc /skinmenu /setinterior /setworld /adminchat /kick /banip /unbanip /backup /masked /sethp");
		SCM(playerid, COLOR_WHITE, "[TRIAL ADMIN]: {C3C3C3}/gotols /setskin /ajail /telemenu /clearchat /gethere /goto /freeze /unfreeze /slap /getip /mute /getstats /ban /unban");
		SCM(playerid, COLOR_WHITE, "[TRIAL ADMIN]: {C3C3C3}/unmute /reportlist /checkreport /whatcar /destroycar /gotocar /getcar /spec /specoff /adminwarn /admindewarn /checkhackers /showplants");
		SCM(playerid, COLOR_WHITE, "[TRIAL ADMIN]: {C3C3C3}/plantinfo /aremoveplant /togtchat /fixveh /healplayer");
 	}
	if(CheckAdmin(playerid, ADMIN_LEVEL_2))
	{
		SCM(playerid, COLOR_WHITE, "[BASIC ADMIN]: {C3C3C3}/showpm /showpmoff /togpms /up /down /showpms /nopms /getincar /policer");
	}
	if(CheckAdmin(playerid, ADMIN_LEVEL_3))
	{	    
		SCM(playerid, COLOR_WHITE, "[SENIOR ADMIN]: {C3C3C3}/telecmds /aveh /mark /gotomark /adminset /tod /weather /weatherall");
	}
	if(CheckAdmin(playerid, ADMIN_LEVEL_4))
	{
		SCM(playerid, COLOR_WHITE, "[LEAD ADMIN]: {C3C3C3}/gopos /x /y /z /asetdrug");
	}
	if(CheckAdmin(playerid, ADMIN_LEVEL_5))
	{
		SCM(playerid, COLOR_WHITE, "[MANAGEMENT]: {C3C3C3}/givemoney /setmoney /parkmetercmds /givegun /changename");
	}
	if(CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
	{
		SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/makeadmin /makedonator /maketester /removetester /vehiclecmds /getgun /changefight /dealercmds");
		SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/objectcmds /gstationcmds /housecmds /foodstallcmds /bankcmds /infocmds /doorcmds /labelcmds /atmcmds /disarm");
		SCM(playerid, COLOR_WHITE, "[DEVELOPER]: {C3C3C3}/businesscmds /factioncmds /factiondoorcmds /movedoorcmds /cctvcmds /gatecmds /jobcmds");
	}
	return 1;
}

CMD:aduty(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(!isAdminDuty(playerid))
	{
		format(msg,sizeof(msg),"{FFA500}[ADMIN]{CCCC7A} %s is now available as Administrator!", GetNameEx(playerid));
		AMSG(0x008080FF, msg);
		SetIntVar(playerid, "AdminDuty", 1);
		SetPlayerHealth(playerid, 999);
		SetPlayerColor(playerid,TEAM_ADMIN_COLOR);
		return 1;
	}
	else if(isAdminDuty(playerid))
	{
		format(msg,sizeof(msg),"{FFA500}[ADMIN]{CCCC7A} %s is now unavailable as Administrator!", GetNameEx(playerid));
		AMSG(0x008080FF, msg);
		RemoveVar(playerid, "AdminDuty");
		SetPlayerHealth(playerid, 100);
		if(CopDuty{playerid})
		{
			SetPlayerColor(playerid, 0x8c8cfeff);
		}
		else
		{
			SetNormalColor(playerid);
		}
		return 1;
	}
	return 1;
}

CMD:gotodutypd(playerid)
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	PutPlayer(playerid, 1564.7664,-1694.2834,1101.0859);
	SetInterior(playerid, 0);
	SetWorld(playerid, 0);
	SCM(playerid, COLOR_GRAD1, "You have successfully teleported to DUTYPD");
	return 1;
}

CMD:gotols(playerid)
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	PutPlayer(playerid, 1529.6,-1691.2,13.3);
	SetInterior(playerid, 0);
	SetWorld(playerid, 0);
	SCM(playerid, COLOR_GRAD1, "You have successfully teleported to Los Santos!");
	return 1;
}
CMD:gotosf(playerid)
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	PutPlayer(playerid, -1973.3322,138.0420,27.6875);
	SetInterior(playerid, 0);
	SetWorld(playerid, 0);
	SCM(playerid, COLOR_GRAD1, "You have successfully teleported to San Fierro!");
	return 1;
}
CMD:gotodealer(playerid)
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	PutPlayer(playerid,971.32,-1366.81,13.4808);
	SetInterior(playerid, 0);
	SCM(playerid, COLOR_GRAD1, "You have successfully teleported to Dealership!");
	return 1;
}
CMD:clearchat(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
	for(new i = 0; i <= 50; i++)
	{
		SCMALL(COLOR_WHITE, " ");
	}
	return 1;
}

CMD:down(playerid, params[])
{
	new amount, Float:x, Float:y, Float:z;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",amount)) return SyntaxMSG(playerid, "/down [block-uri]");
	GetPlayerPos(playerid, x, y ,z);
	SetPlayerPos(playerid, x, y, z-amount);
	return 1;
}

CMD:up(playerid, params[])
{
	new amount, Float:x, Float:y, Float:z;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",amount)) return SyntaxMSG(playerid, "/up [block-uri]");
	GetPlayerPos(playerid, x, y ,z);
	SetPlayerPos(playerid, x, y, z+amount);
	return 1;
}

CMD:aveh(playerid, params[])
{
   	if(!CheckAdmin(playerid, ADMIN_LEVEL_3)) return NotAuthMSG(playerid);
    new type,color,color2,Float:cPos[4];
    if(sscanf(params, "iii", type,color,color2)) return  SyntaxMSG(playerid, "/aveh [model] [color] [color]");
	if(spawnVehicle[playerid] != 0) return SCM(playerid, -1, "You have a spawned vehicle, '/destroymycar'");
    if(type < 400 || type > 611) return SCM(playerid,COLOR_RED, "vehicle IDs between 400 - 611!");
    if(color> 255 || color< 0) return SCM(playerid, 0xFFFFFF, "Car color ID's: 0-255");
    if(color2> 255 || color2< 0) return SCM(playerid, 0xFFFFFF, "Car color ID's: 0-255");
    GetPlayerPos(playerid, cPos[0], cPos[1], cPos[2]);
    GetPlayerFacingAngle(playerid, cPos[3]);
    new veh = CreateVehicle(type, cPos[0], cPos[1]-3, cPos[2], cPos[3], color, color2, -1);
	adminVeh{veh} = true;
	spawnVehicle[playerid] = veh;
    return 1;
}

CMD:destroymycar(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	format(msg, sizeof(msg), "You've destroyed your vehicle ID: %d.", spawnVehicle[playerid]);
	SCM(playerid, -1, msg);
	adminVeh{spawnVehicle[playerid]} = false;
	DestoryCar(spawnVehicle[playerid]);
	spawnVehicle[playerid] = 0;
	return 1;
}

CMD:whatcar(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
	format(msg, sizeof(msg), "This car has ID number %d.", GetPlayerVehicleID(playerid));
	SCM(playerid, COLOR_GRAD4, msg);
	return 1;
}

CMD:destroycar(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
	format(msg, sizeof(msg), "You have destroyed the car with ID %d on the server.", GetPlayerVehicleID(playerid));
	SCM(playerid, COLOR_GRAD4, msg);
	DestoryCar(GetPlayerVehicleID(playerid));
	return 1;
}

CMD:getincar(playerid, params[])
{
	new vehicle;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",vehicle)) return SyntaxMSG(playerid, "/getincar [vehicleid]");
	if(!IsValidVehicle(vehicle)) return SCM(playerid, -1, "There is no car.");
	PutPlayerInVehicle(playerid, vehicle, 0);
	return 1;
}

/*CMD:sendplayer(playerid, params[])
{
	new id, option[128];
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
   	if(sscanf(params,"s[128]",id, option)) return SyntaxMSG(playerid, "/sendplayer [PlayerID] [Location]");
    SCM(playerid,COLOR_WHITE,"Locatii disponibile: Unity, LS, LV, SF");
    if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
    if(CompareStrings(option, "Spawn"))
	{
	    SCM(playerid,COLOR_WHITE,"Player-ul a fost teleportat cu succes la Unity Station");
	    SCM(id,COLOR_WHITE,"Ai fost teleportat cu succes la Unity Station");
	    SetPlayerInterior(id,0);
		SetPlayerVirtualWorld(id,0);
		SetPlayerPos(id, -1973.3322,138.0420,27.6875);
		return 1;
	}
    if(CompareStrings(option, "LS"))
	{
	    SCM(playerid,COLOR_WHITE,"Player-ul a fost teleportat cu succes in Los Santos");
	    SCM(id,COLOR_WHITE,"Ai fost teleportat cu succes in Los Santos");
	    SetPlayerInterior(id,0);
		SetPlayerVirtualWorld(id,0);
		SetPlayerPos(id, 1541.8461,-1675.5284,13.5533);
		return 1;
	}
    if(CompareStrings(option, "LV"))
	{
	    SCM(playerid,COLOR_WHITE,"Player-ul a fost teleportat cu succes in Las Venturas");
	    SCM(id,COLOR_WHITE,"Ai fost teleportat cu succes in Los Santos");
	    SetPlayerInterior(id,0);
		SetPlayerVirtualWorld(id,0);
		SetPlayerPos(id, 1699.2,1435.1, 10.7);
		return 1;
	}
	if(CompareStrings(option, "SF"))
	{
	    SCM(playerid,COLOR_WHITE,"Player-ul a fost teleportat cu succes in San Fierro");
	    SCM(id,COLOR_WHITE,"Ai fost teleportat cu succes in San Fierro");
	    SetPlayerInterior(id,0);
		SetPlayerVirtualWorld(id,0);
		SetPlayerPos(id, -1973.3322,138.0420,27.6875);
		return 1;
	}
	return 1;
}*/

CMD:getcar(playerid, params[])
{
	new vehicle, Float:x, Float:y, Float:z;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",vehicle)) return SyntaxMSG(playerid, "/getcar [vehicleid]");
	if(!IsValidVehicle(vehicle)) return SCM(playerid, -1, "There is no such car.");
	GetPlayerPos(playerid, x, y, z);
	SetVehiclePos(vehicle, x, y+4, z);
	SetVehicleVirtualWorld(vehicle, GetWorld(playerid));
	LinkVehicleToInterior(vehicle, GetInterior(playerid));
	return 1;
}
CMD:respawncar(playerid, params[])
{
	new vehicle;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",vehicle)) return SyntaxMSG(playerid, "/respawncar [vehicleid]");
	if(!IsValidVehicle(vehicle)) return SCM(playerid, -1, "There is no such car.");
    RespawnVehicle(vehicle);
    return 1;
}

CMD:rtc(playerid, params[])
{
  new vehicle;
  vehicle = GetPlayerVehicleID(playerid);
  if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
  if(!IsValidVehicle(vehicle)) return SCM(playerid, -1, "There is no such car.");
    RespawnVehicle(vehicle);
    return 1;
}

CMD:adestroyonecar(playerid, params[])
{
	new vehicle;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"dd",vehicle)) return SyntaxMSG(playerid, "/adestroyonecar [vehicleid]");
	if(!IsValidVehicle(vehicle)) return SCM(playerid, -1, "There is no such car.");
    DestroyVehicle(vehicle);
    return 1;
}
CMD:gotocar(playerid, params[])
{
	new vehicle, Float:x, Float:y, Float:z;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",vehicle)) return SyntaxMSG(playerid, "/gotocar [vehicleid]");
	if(!IsValidVehicle(vehicle)) return SCM(playerid, -1, "There is no such car.");
	GetVehiclePos(vehicle, x, y, z);
	PutPlayer(playerid, x+1, y+1, z);
	return 1;
}

CMD:gethere(playerid, params[])
{
	new pid, Float:x, Float:y, Float:z;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/gethere [playerid/PartOfNames]");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	GetPlayerPos(playerid, x, y, z);
	PutPlayer(pid, x+1, y+1, z);
	SetInterior(pid,GetInterior(playerid));
	SetWorld(pid,GetWorld(playerid));
	new pName[MAX_PLAYER_NAME];
	GetPlayerName(playerid, pName, sizeof(pName));
	format(msg,sizeof(msg),"You were successfully teleported to the administrator %s", pName);
 	SCM(pid, COLOR_WHITE, msg);
	return 1;
}

CMD:goto(playerid, params[])
{
	new pid, Float:x, Float:y, Float:z;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/goto [playerid/PartOfNames]");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	GetPlayerPos(pid, x, y, z);
	PutPlayer(playerid, x+1, y+1, z);
	SetInterior(playerid,GetInterior(pid));
	SetWorld(playerid,GetWorld(pid));
	new pName[MAX_PLAYER_NAME];
	GetPlayerName(pid, pName, sizeof(pName));
	format(msg,sizeof(msg),"You were successfully teleported to %s", pName);
 	SCM(playerid, COLOR_WHITE, msg);
	return 1;
}

CMD:freeze(playerid, params[])
{
	new pid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1) && PlayerInfo[playerid][pHelper] == 0) return NotAuthMSG(playerid);
	if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/freeze [playerid/PartOfNames]");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	if(isFrozen(pid)) return SCM(playerid, -1, "Playerid is already frozen.");
	GameTextForPlayer(pid, "~w~Now you are freeze.", 2000, 3);
	FreezePlayer(pid);
	format(msg, sizeof(msg), "AdmCmd: %s has been freeze by the Administrator %s.", GetNameEx(pid), GetNameEx(playerid));
	AMSG(COLOR_RED, msg);
	return 1;
}

CMD:unfreeze(playerid, params[])
{
	new pid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1) && PlayerInfo[playerid][pHelper] == 0) return NotAuthMSG(playerid);
	if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/unfreeze [playerid/PartOfNames]");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	GameTextForPlayer(pid, "~w~Now you are unfreeze.", 2000, 3);
	UnFreezePlayer(pid);
	format(msg, sizeof(msg), "AdmCmd: %s has been unfreeze by the Administrator %s.", GetNameEx(pid), GetNameEx(playerid));
	AMSG(COLOR_LIGHTRED, msg);
	return 1;
}

CMD:slap(playerid, params[])
{
	new targetid,Float:slx, Float:sly, Float:slz;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(sscanf(params,"u",targetid)) return SyntaxMSG(playerid, "/slap [playerid/PartOfNames]");
	if(!PlayerIsOn(targetid)) return NotConnectedMSG(playerid);
	GetPlayerPos(targetid, slx, sly, slz);
	SetPlayerPos(targetid, slx, sly, slz+5);
	PlayerPlaySound(targetid, 1130, slx, sly, slz+5);
	return 1;
}

CMD:telemenu(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	new telestring[1550], part[40];
	format(telestring, sizeof(telestring), "{FFFFFF}%s", OrTeleports[0]);
	for(new OrT = 1; OrT < sizeof(OrTeleports); OrT++)
	{
		format(part, sizeof(part), "\n%s", OrTeleports[OrT]);
		strcat(telestring, part, sizeof(telestring));
	}
	ShowDialog(playerid, Show:<Teles>, DIALOG_STYLE_LIST, "Select a teleport location", telestring, "Teleport", "Cancel");
	return 1;
}

CMD:ajail(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	new targetid, time, reason[128];
	if(sscanf(params,"uds[128]",targetid,time,reason)) return SyntaxMSG(playerid,"/ajail [playerid/PartOfNames] [TimeInMins] [reason]");
	if(!PlayerIsOn(targetid)) return NotConnectedMSG(playerid);
	if(time <= 0) return SCM(playerid, COLOR_GREY, "Time must be more than 0!");
	format(query, sizeof(query), "INSERT INTO `ajails` (player, victim, minutes, reason, data, ip) VALUES ('%s', '%s', %d, '%s', '%s')", GetName(playerid), GetName(targetid), time, reason, GetFullDate(), GetPlayerIP(targetid));
	mysql_function_query(dbHandle, query, false, "", "");
	PlayerInfo[targetid][pJailed] = 1;
	PlayerInfo[targetid][pJailTime] = time*60;
	SCM(targetid, COLOR_YELLOWG, "You've been locked up in the Admin Jail because you did not follow the rules!");
	PutPlayer(targetid, 2576.7861,2712.2004,22.9507);
	SetSpawnInfo(targetid, 0, PlayerInfo[targetid][pSkin], 2576.7861,2712.2004,22.9507, 1.0, -1, -1, -1, -1, -1, -1);
	format(msg, sizeof(msg), "AdmCmd: %s was jailed in admin-jail by the administrator %s for %d minute, reason: %s", GetNameEx(targetid), GetNameEx(playerid), time, reason);
	SCMALL(COLOR_LIGHTRED, msg);
	return 1;
}

CMD:aunjail(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	new targetid;
	if(sscanf(params,"u",targetid)) return SyntaxMSG(playerid,"/aunjail [playerid/PartOfNames]");
	if(!PlayerIsOn(targetid)) return NotConnectedMSG(playerid);
	PlayerInfo[targetid][pJailed] = 0;
	PlayerInfo[targetid][pJailTime] = 0;
	PlayerInfo[targetid][pJailTime2] = 0;
	format(msg, sizeof(msg), "AdmCmd: %s was taken out of jail/prison by the administrator %s.", GetNameEx(targetid), GetNameEx(playerid));
	SCM(targetid, COLOR_YELLOWG, "You have been released from Admin Jail!");
	AMSG(COLOR_LIGHTRED, msg);
	HideTextDraw(targetid,jail_timeleft[targetid]);
	SetPlayerSpawn(targetid);
	return 1;
}

CMD:a(playerid, params[]) return cmd_adminchat(playerid, params);
CMD:adminchat(playerid, params[])
{
	new str1[128], str2[128], bool:splitted = false;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(isnull(params)) return SyntaxMSG(playerid, "/adminchat [text]");
	if(strlen(params) > MAXLEN)
	{
    	new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		format(str1, sizeof(str1), "[Admin %d] %s: %.*s ...", PlayerInfo[playerid][pAdmin], GetNameEx(playerid), pos, params);
		format(str2, sizeof(str2), "[Admin %d] %s: ... %s", PlayerInfo[playerid][pAdmin], GetNameEx(playerid), params[pos]);
		splitted = true;
	}
	else
	{
		format(str1, sizeof(str1), "[Admin %d] %s: %s", PlayerInfo[playerid][pAdmin], GetNameEx(playerid), params);
	}
	foreach(Player, i)
	{
		if(CheckAdmin(i, 1))
		{
			if(splitted == true)
			{
				SCM(i, 0xF97804FF, str1);
				SCM(i, 0xF97804FF, str2);
			}
			else
			{
				SCM(i, 0xF97804FF, str1);
			}
		}
	}
	return 1;
}
CMD:t(playerid, params[]) return cmd_tchat(playerid, params);
CMD:tchat(playerid, params[])
{
	new str1[128], str2[128], bool:splitted = false;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1) && PlayerInfo[playerid][pHelper] == 0) return NotAuthMSG(playerid);
	if(isnull(params)) return SyntaxMSG(playerid, "/t(chat) [text]");
	new prefix[128];
	if(CheckAdmin(playerid, 1))
		prefix = "Admin";
	if(PlayerInfo[playerid][pHelper] > 0)
		prefix = "Tester";
	if(strlen(params) > MAXLEN)
	{
    	new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		format(str1, sizeof(str1), "[TESTER] %s %s: %.*s ...", prefix, GetNameEx(playerid), pos, params);
		format(str2, sizeof(str2), "[TESTER] %s %s: ... %s", prefix, GetNameEx(playerid), params[pos]);
		splitted = true;
	}
	else
	{
		format(str1, sizeof(str1), "[TESTER] %s %s: %s", prefix, GetNameEx(playerid), params);
	}
	foreach(Player, i)
	{
		if(CheckAdmin(i, 1) || PlayerInfo[i][pHelper] > 0)
		{
			if(splitted == true)
			{
				SCM(i, COLOR_GREEN, str1);
				SCM(i, COLOR_GREEN, str2);
			}
			else
			{
				SCM(i, COLOR_GREEN, str1);
			}
		}
	}
	return 1;
}
CMD:kick(playerid, params[])
{
	new pid, reason[256];
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(sscanf(params,"us[256]",pid,reason)) return SyntaxMSG(playerid, "/kick [playerid/PartOfNames] [reason]");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	format(query, sizeof(query), "INSERT INTO `kicks` (player, victim, reason, data, ip) VALUES ('%s', '%s', '%s', '%s', '%d')", GetName(playerid), GetName(pid), reason, GetFullDate(), GetPlayerIP(pid));
	mysql_function_query(dbHandle, query, false, "", "");
	format(msg, sizeof(msg), "AdmCmd: %s was kicked out of the server by administrator %s, reason: %s", GetNameEx(pid), GetNameEx(playerid), reason);
	SCMALL(COLOR_RED, msg);
	KickEx2(pid, msg);
	return 1;
}

CMD:falsekick(playerid, params[])
{
	new pid, reason[256];
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(sscanf(params,"us[256]",pid,reason)) return SyntaxMSG(playerid, "/falsekick [playerid/PartOfNames] [reason]");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	format(query, sizeof(query), "INSERT INTO `kicks` (player, victim, reason, data) VALUES ('%s', '%s', '%s', '%s')", GetName(playerid), GetName(pid), reason, GetFullDate());
	mysql_function_query(dbHandle, query, false, "", "");
	format(msg, sizeof(msg), "AdmCmd: %s was kicked out of the server by "ServerNick" BOT, reason: %s", GetNameEx(pid), reason);
	SCMALL(COLOR_LIGHTRED, msg);
	KickEx2(pid, msg);
	return 1;
}

CMD:setskin(playerid, params[])
{
	new targetid, skinid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(sscanf(params,"ui", targetid, skinid)) return SyntaxMSG(playerid, "/setskin [playerid/PartOfNames] [SkinModel]");
	if(!PlayerIsOn(targetid)) return NotConnectedMSG(playerid);
	if(skinid > 311) return SCM(playerid, COLOR_GREY, "SkinID must be 0-311");
	SetSkin(targetid, skinid);
	format(msg, 256, "AdmCmd: %s skin's has change to %d by the administrator %s.", GetNameEx(targetid), skinid, GetNameEx(playerid));
	AMSG(COLOR_LIGHTRED,msg);
	return 1;
}

CMD:givemoney(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5)) return NotAuthMSG(playerid);
	new id, amount;
	if(sscanf(params,"ud",id,amount)) return SyntaxMSG(playerid, "/givemoney [playerid/PartOfNames] [amount]");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	format(msg,sizeof(msg),"AdmCmd: %s gave %s some money $%d.", GetNameEx(playerid), GetNameEx(id), amount);
	AMSG(COLOR_LIGHTRED, msg);
	GiveCash(id, amount);
	return 1;
}

CMD:setmoney(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5)) return NotAuthMSG(playerid);
	new id, amount;
	if(sscanf(params,"ud",id,amount)) return SyntaxMSG(playerid, "/setmoney [playerid/PartOfNames] [amount]");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	format(msg,sizeof(msg),"AdmCmd: %s has set %s money to, $%d cash.", GetNameEx(playerid), GetNameEx(id), amount);
	AMSG(COLOR_LIGHTRED, msg);
	SetCash(id, amount);
	return 1;
}

CMD:addlabel(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new color, info[256], lid, virworld, gametext, Float:X, Float:Y, Float:Z;
	if(sscanf(params,"ds[256]d",color,info,gametext)) return SyntaxMSG(playerid, "/addlabel [color] [description] [gametext(1/0)] (1-white|2-red|3-yellow|4-green|5-blue|6-black|7-orange)");
	lid = GetNextLabelID();
	virworld = GetWorld(playerid);
	switch(color)
	{
		case 1:
			color = 0xFFFFFFFF;
		case 2:
			color = 0xFF0000FF;
		case 3:
			color = 0xFFFF00FF;
		case 4:
			color = 0x808000FF;
		case 5:
			color = 0x0000FFFF;
		case 6:
			color = 0x000000FF;
		case 7:
			color = 0xFF8000FF;
		default:
			color = 0xFFFFFFFF;
	}
	GetPlayerPos(playerid, X, Y, Z);
	AddLabelToFile(lid, info, virworld, color, gametext, X, Y, Z);
	LabelsInfo[lid][tLabelX] = X;
	LabelsInfo[lid][tLabelY] = Y;
	LabelsInfo[lid][tLabelZ] = Z;
	LabelsInfo[lid][tColor] = color;
	LabelsInfo[lid][tLabelOn] = 1;
	LabelsInfo[lid][tVirtualWorld] = virworld;
	LabelsInfo[lid][tGameText] = gametext;
	format(LabelsInfo[lid][tInfo],256,"%s",info);
	if(gametext == 0)
	{
		LabelsInfo[lid][tLabel] = CreateDynamic3DTextLabel(info, color, X, Y, Z, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, virworld, -1, -1, 100.0);
	}
	LabelsInfo[lid][tPickUp] = CreateDynamicPickup(1239, 1, X, Y, Z, -1, -1, -1, 100.0);
	format(msg, sizeof(msg), "A new 3D Text Label Has Been dynamically added. Description: \"%s\". color %d",info,color);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:serverlabels(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	format(query, sizeof(query), "SELECT * FROM `labels`");
	mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Labels");
	return 1;
}

CMD:removelabel(playerid,params[])
{
	new LabelID;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	LabelID = GetClosestLabelID(playerid);
	DestroyDynamic3DTextLabel(Text3D:LabelsInfo[LabelID][tLabel]);
	DestroyDynamicPickup(LabelsInfo[LabelID][tPickUp]);
	format(query, sizeof(query), "DELETE FROM `labels` WHERE `id` = %d",LabelsInfo[LabelID][tID]);
	mysql_function_query(dbHandle, query, true, "OnLabelRemove", "i", LabelID);
	format(msg,sizeof(msg),"You've destroyed 3DLabel id: %d!",LabelID);
	SCM(playerid, COLOR_YELLOWG, msg);
	return 1;
}

CMD:whatlabel(playerid, params[])
{
	new tt[256];
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);

	for(new i = 0; i < sizeof(LabelsInfo); i++)
	{
		if (PlayerToPoint(3, playerid, LabelsInfo[i][tLabelX], LabelsInfo[i][tLabelY], LabelsInfo[i][tLabelZ]))
		{
			format(tt, sizeof(tt), "You're standing near label: [Normal ID: %d] [MySQL ID: %d].", i,LabelsInfo[i][tID]);
			SCM(playerid, -1, tt);
			return 1;
		}
	}
	return 1;
}

CMD:editlabel(playerid, params[])
{
	new type, text[256];
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"ds[128]",type,text)) return SyntaxMSG(playerid, "/editlabel [(1-Text,2-VirWorld,3-GameText)] [new text]");
	new input = strval(text);

	if(type == 1)
	{
		for(new i = 0; i < sizeof(LabelsInfo); i++)
		{
			if (PlayerToPoint(3, playerid,LabelsInfo[i][tLabelX], LabelsInfo[i][tLabelY], LabelsInfo[i][tLabelZ]))
			{
				format(query, sizeof(query), "UPDATE `labels` SET `labeltext` = '%s' WHERE `id` = %d", text, LabelsInfo[i][tID]);
				mysql_function_query(dbHandle, query, true, "OnLabelRenamed", "is", i,text);
				return 1;
			}
		}
	}
	if(type == 2)
	{
		for(new i = 0; i < sizeof(LabelsInfo); i++)
		{
			if (PlayerToPoint(3, playerid,LabelsInfo[i][tLabelX], LabelsInfo[i][tLabelY], LabelsInfo[i][tLabelZ]))
			{
				format(query, sizeof(query), "UPDATE `labels` SET `virworld` = %d WHERE `id` = %d", input, LabelsInfo[i][tID]);
				mysql_function_query(dbHandle, query, false, "", "");
				LabelsInfo[i][tVirtualWorld] = input;
				DestroyDynamic3DTextLabel(Text3D:LabelsInfo[i][tLabel]);
				LabelsInfo[i][tLabel] = CreateDynamic3DTextLabel(LabelsInfo[i][tInfo], LabelsInfo[i][tColor], LabelsInfo[i][tLabelX], LabelsInfo[i][tLabelY], LabelsInfo[i][tLabelZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, input, -1, -1, 100.0);
				return 1;
			}
		}
	}
	if(type == 3)
	{
		for(new i = 0; i < sizeof(LabelsInfo); i++)
		{
			if (PlayerToPoint(3, playerid,LabelsInfo[i][tLabelX], LabelsInfo[i][tLabelY], LabelsInfo[i][tLabelZ]))
			{
				format(query, sizeof(query), "UPDATE `labels` SET `gametext` = %d WHERE `id` = %d", input, LabelsInfo[i][tID]);
				mysql_function_query(dbHandle, query, false, "", "");
				LabelsInfo[i][tGameText] = input;
				if(input == 0)
				{
					DestroyDynamic3DTextLabel(Text3D:LabelsInfo[i][tLabel]);
					LabelsInfo[i][tLabel] = CreateDynamic3DTextLabel(LabelsInfo[i][tInfo], LabelsInfo[i][tColor], LabelsInfo[i][tLabelX], LabelsInfo[i][tLabelY], LabelsInfo[i][tLabelZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, LabelsInfo[i][tVirtualWorld], -1, -1, 100.0);
				}
				else
				{
					DestroyDynamic3DTextLabel(Text3D:LabelsInfo[i][tLabel]);
				}
				return 1;
			}
		}
	}
	return 1;
}

CMD:gotolabel(playerid, params[])
{
	new id;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",id)) return SyntaxMSG(playerid, "/gotolabel [Label-ID]");
	if(!LabelsInfo[id][tLabelOn]) return SCM(playerid, -1, "Invalid label id.");
	PutPlayer(playerid, LabelsInfo[id][tLabelX], LabelsInfo[id][tLabelY], LabelsInfo[id][tLabelZ]);
	SetWorld(playerid, LabelsInfo[id][tVirtualWorld]);
	return 1;
}

CMD:gotodoor(playerid, params[])
{
	new id;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",id)) return SyntaxMSG(playerid, "/gotodoor [Door-ID]");
	if(!DoorInfo[id][dDoorOn]) return SCM(playerid, -1, "Invalid doorid.");
	SetInterior(playerid, DoorInfo[id][dEnterInterior]);
	PutPlayer(playerid, DoorInfo[id][dEnterX], DoorInfo[id][dEnterY], DoorInfo[id][dEnterZ]);
	return 1;
}

CMD:removedoor(playerid,params[])
{
	new DoorID;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",DoorID)) return SyntaxMSG(playerid, "/removedoor [Door-ID]");
	if(!DoorInfo[DoorID][dDoorOn]) return SCM(playerid, -1,"ERROR: Door Does Not Exist!");
	DestroyDynamic3DTextLabel(Text3D:DoorInfo[DoorID][dExitLabel]);
	DestroyDynamicPickup(DoorInfo[DoorID][dPickUp]);
	format(query, sizeof(query), "DELETE FROM `doors` WHERE `id` = %d",DoorInfo[DoorID][dID]);
	mysql_function_query(dbHandle, query, true, "OnDoorRemove", "i", DoorID);
	format(msg,sizeof(msg),"You've destroyed Door id: %d!",DoorID);
	SCM(playerid, COLOR_YELLOWG, msg);
	return 1;
}

CMD:serverdoors(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	format(query, sizeof(query), "SELECT * FROM `doors`");
	mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Doors");
	return 1;
}

CMD:editdoor(playerid, params[])
{
	new text[256], type, exitstr[256];
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"ds[256]",type,text)) return SyntaxMSG(playerid, "/editdoor [type(1-Info,2-VirWorld)] [new text]");
	new virworld = strval(text);

	if(type == 1)
	{
		for(new i = 0; i < sizeof(DoorInfo); i++)
		{
			if (PlayerToPoint(3, playerid,DoorInfo[i][dEnterX], DoorInfo[i][dEnterY], DoorInfo[i][dEnterZ]))
			{
				format(query, sizeof(query), "UPDATE `doors` SET `info` = '%s' WHERE `id` = %d", text, DoorInfo[i][dID]);
				mysql_function_query(dbHandle, query, false, "", "");
				format(DoorInfo[i][dInfo],256,"%s",text);
				return 1;
			}
		}
	}
	if(type == 2)
	{
		for(new i = 0; i < sizeof(DoorInfo); i++)
		{
			if (PlayerToPoint(3, playerid,DoorInfo[i][dEnterX], DoorInfo[i][dEnterY], DoorInfo[i][dEnterZ]))
			{
				format(query, sizeof(query), "UPDATE `doors` SET `virtualworld` = %d WHERE `id` = %d", virworld, DoorInfo[i][dID]);
				mysql_function_query(dbHandle, query, false, "", "");
				DoorInfo[i][dVirtualWorld] = virworld;
				DestroyDynamic3DTextLabel(Text3D:DoorInfo[i][dExitLabel]);
				format(exitstr, sizeof(exitstr), ""EMBED_WHITE"["EMBED_YELLOW"Door %d"EMBED_WHITE"]\n/exit", i);
				DoorInfo[i][dExitLabel] = CreateDynamic3DTextLabel(exitstr, -1, DoorInfo[i][dExitX], DoorInfo[i][dExitY], DoorInfo[i][dExitZ], 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, virworld, -1, -1, 100.0);
				return 1;
			}
		}
	}
	return 1;
}

CMD:whatdoor(playerid, params[])
{
	new tt[256];
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);

	for(new i = 0; i < sizeof(DoorInfo); i++)
	{
		if (PlayerToPoint(3, playerid,DoorInfo[i][dEnterX], DoorInfo[i][dEnterY], DoorInfo[i][dEnterZ]))
		{
			format(tt, sizeof(tt), "You're standing near door: [Normal ID: %d] [MySQL ID: %d].", i,DoorInfo[i][dID]);
			SCM(playerid, -1, tt);
			return 1;
		}
	}
	return 1;
}

CMD:makedoor(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new info[256], interior, doorid, virworld, Float:X, Float:Y, Float:Z;
	if(sscanf(params,"ds[128]",virworld,info)) return SyntaxMSG(playerid, "/makedoor [exit-virtual-world] [info]");
	doorid = GetNextDynamicDoorID();
	GetPlayerPos(playerid, X, Y, Z);
	interior = GetInterior(playerid);
	AddDoorToFile(doorid, info, virworld, interior, X, Y, Z);
	DoorInfo[doorid][dEnterX] = X;
	DoorInfo[doorid][dEnterY] = Y;
	DoorInfo[doorid][dEnterZ] = Z;
	DoorInfo[doorid][dExitX] = 0.0000;
	DoorInfo[doorid][dExitY] = 0.0000;
	DoorInfo[doorid][dExitZ] = 0.0000;
	DoorInfo[doorid][dEnterInterior] = interior;
	DoorInfo[doorid][dVirtualWorld] = virworld;
	format(DoorInfo[doorid][dInfo],256,"%s",info);
	DoorInfo[doorid][dDoorOn] = 1;
	DoorInfo[doorid][dPickUp] = CreateDynamicPickup(1239, 1, X, Y, Z, -1, -1, -1, 100.0);
	format(msg, sizeof(msg), "A new door was added, [doortext: %s, Position: %f, %f, %f]",info,X, Y, Z);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:doorexit(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new interior, doorid, Float:X, Float:Y, Float:Z, exitstr[256];
	if(sscanf(params,"d",doorid)) return SyntaxMSG(playerid, "/doorexit [doorid]");
	if(!DoorInfo[doorid][dDoorOn]) return SCM(playerid, -1,"ERROR: Door Does Not Exist!");
	DestroyDynamic3DTextLabel(Text3D:DoorInfo[doorid][dExitLabel]);
	GetPlayerPos(playerid, X, Y, Z);
	interior = GetInterior(playerid);
	AddDoorExit(doorid, interior, X, Y, Z);
	DoorInfo[doorid][dExitX] = X;
	DoorInfo[doorid][dExitY] = Y;
	DoorInfo[doorid][dExitZ] = Z;
	DoorInfo[doorid][dExitInterior] = interior;
	format(exitstr, sizeof(exitstr), ""EMBED_WHITE"["EMBED_YELLOW"Door %d"EMBED_WHITE"]\n/exit", doorid);
	DoorInfo[doorid][dExitLabel] = CreateDynamic3DTextLabel(exitstr, -1, X, Y, Z, 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, DoorInfo[doorid][dVirtualWorld], -1, -1, 100.0);
	format(msg, sizeof(msg), "Door exit was changed, %f, %f, %f",X,Y,Z);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:doorenter(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new interior, doorid, Float:X, Float:Y, Float:Z;
	if(sscanf(params,"d",doorid)) return SyntaxMSG(playerid, "/doorenter [doorid]");
	if(!DoorInfo[doorid][dDoorOn]) return SCM(playerid, -1,"ERROR: Door Does Not Exist!");
	GetPlayerPos(playerid, X, Y, Z);
	interior = GetInterior(playerid);
	AddDoorEnter(doorid, interior, X, Y, Z);
	DoorInfo[doorid][dEnterX] = X;
	DoorInfo[doorid][dEnterY] = Y;
	DoorInfo[doorid][dEnterZ] = Z;
	DoorInfo[doorid][dExitInterior] = interior;
	DestroyDynamicPickup(DoorInfo[doorid][dPickUp]);
	DoorInfo[doorid][dPickUp] = CreateDynamicPickup(1239, 1, DoorInfo[doorid][dEnterX], DoorInfo[doorid][dEnterY], DoorInfo[doorid][dEnterZ], -1, -1, -1, 100.0);
	format(msg, sizeof(msg), "Door enter was changed, %f, %f, %f",X,Y,Z);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:showcomplex(playerid, params[])
{
  if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
  new string[1024];
  for(new i = 0; i < sizeof(ComplexInfo); i++)
  {
    if(ComplexInfo[i][cxOn])
    {
      format(string, sizeof(string), "%s\n<%d>{66FF66}%s" ,string, i, ComplexInfo[i][cxInfo]);
    }
  }
  ShowDialog(playerid,Show:<AdminComplex>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Complex:"EMBED_RED"",string,"Teleport","Cancel");
  return 1;
}

CMD:showdoors(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new string[1024];
	for(new i = 0; i < sizeof(DoorInfo); i++)
	{
		if(DoorInfo[i][dDoorOn])
		{
			format(string, sizeof(string), "%s\n<%d>{66FF66}%s" ,string, i, DoorInfo[i][dInfo]);
		}
	}
	ShowDialog(playerid,Show:<AdminDoors>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Doors:"EMBED_RED"",string,"Teleport","Cancel");
	return 1;
}

CMD:noooc(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if (!noooc)
	{
		noooc = true;
		SCMALL(COLOR_GRAD2, "OOC chat (/o) was closed by the administrators!");
	}
	else
	{
		noooc = false;
		SCMALL(COLOR_GRAD2, "OOC chat (/o) was opened by the administrators!");
	}
	return 1;
}

CMD:ao(playerid, params[]) return cmd_aooc(playerid, params);
CMD:aooc(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(isnull(params)) return SyntaxMSG(playerid, "/aooc [admin ooc chat]");
	if(strlen(params) > MAXLEN)
	{
    	new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		format(msg, sizeof(msg), "[AOOC] %s: %.*s ...", GetNameEx(playerid), pos, params);
		SCMALL(0xF97804FF,msg);
		format(msg, sizeof(msg), "[AOOC] %s: ... %s", GetNameEx(playerid), params[pos]);
		SCMALL(0xF97804FF,msg);
	}
	else
	{
		format(msg, sizeof(msg), "[AOOC] %s: %s", GetNameEx(playerid), params);
		SCMALL(0xF97804FF,msg);
	}
	return 1;
}

CMD:announce(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(isnull(params)) return SyntaxMSG(playerid, "/announce [announcement]");
	format(msg, sizeof(msg), "~y~%s: ~w~%s", GetNameEx(playerid), params);
	GameTextForAll(msg, 5000, 4);
	return 1;
}

CMD:setinterior(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1) && PlayerInfo[playerid][pHelper] == 0) return NotAuthMSG(playerid);
	new pid, int;
	if(sscanf(params,"ud",pid,int)) return SyntaxMSG(playerid, "/setinterior [playerid/PartOfNames] [interior]");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	format(msg, sizeof(msg), "You've changed %s's interior to %d.", GetNameEx(pid), int);
	SCM(playerid, COLOR_YELLOWG, msg);
	SetInterior(pid, int);
	return 1;
}

CMD:setworld(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1) && PlayerInfo[playerid][pHelper] == 0) return NotAuthMSG(playerid);
	new pid, wid;
	if(sscanf(params,"ud",pid,wid)) return SyntaxMSG(playerid, "/setworld [playerid/PartOfNames] [worldid]");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	format(msg, sizeof(msg), "You've changed %s's virtual world to %d.", GetNameEx(pid), wid);
	SCM(playerid, COLOR_YELLOWG, msg);
	SetWorld(pid, wid);
	return 1;
}

CMD:setcarworld(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	new carid, wid;
	if(sscanf(params,"dd",carid,wid)) return SyntaxMSG(playerid, "/setworld [carid] [worldid]");
	if(!IsValidVehicle(carid)) return SCM(playerid, COLOR_RED, "There is no such car.");
	format(msg, sizeof(msg), "You've changed virtual world car to %d.", wid);
	SCM(playerid, COLOR_YELLOWG, msg);
	SetVehicleVirtualWorld(carid, wid);
	return 1;
}

CMD:skinmenu(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	ShowSkinMenu(playerid);
	return 1;
}

CMD:weaponmenu(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	ShowWeaponsMenu(playerid);
	return 1;
}

CMD:teles(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3)) return NotAuthMSG(playerid);
	new string[1200];
	for(new i = 0; i < sizeof(HouseInteriors); i++)
	{
		if(HouseInteriors[i][aTeleOn])
		{
			format(string, sizeof(string), "%s\n<%d>{66FF66}%s" ,string, i, HouseInteriors[i][aMapName]);
		}
	}
	ShowDialog(playerid,Show:<AdminTeles>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Teleports:"EMBED_RED"",string,"Teleport","Cancel");
	return 1;
}

CMD:maketele(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3)) return NotAuthMSG(playerid);
	new mapname[256], interior, teleid, Float:X, Float:Y, Float:Z;
	if(sscanf(params,"ds[128]",teleid,mapname)) return SyntaxMSG(playerid, "/maketele [What-ID] [MapName]");
	if(HouseInteriors[teleid][aTeleOn]) return SCM(playerid, -1, "This teleport is already being used.");
	GetPlayerPos(playerid, X, Y, Z);
	interior = GetInterior(playerid);
	AddTeleToFile(teleid, mapname,interior, X, Y, Z);
	HouseInteriors[teleid][aPosX] = X;
	HouseInteriors[teleid][aPosY] = Y;
	HouseInteriors[teleid][aPosZ] = Z;
	HouseInteriors[teleid][aInterior] = interior;
	format(HouseInteriors[teleid][aMapName],256,"%s",mapname);
	HouseInteriors[teleid][aTeleOn] = 1;
	format(msg, sizeof(msg), "A new teleport was added, [mapname: %s, Position: %f, %f, %f]",mapname,X, Y, Z);
	return SCM(playerid, COLOR_GREEN, msg);
}

CMD:removetele(playerid,params[])
{
	new teleid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",teleid)) return SyntaxMSG(playerid, "/removetele [Tele-ID]");
	if(HouseInteriors[teleid][aTeleOn])
	{
		format(query, sizeof(query), "DELETE FROM `ateles` WHERE `id` = %d",HouseInteriors[teleid][aID]);
		mysql_function_query(dbHandle, query, true, "OnTeleportRemove", "i", teleid);
		format(msg,sizeof(msg),"You've destroyed teleport id: %d!",teleid);
		SCM(playerid, COLOR_YELLOWG, msg);
	}
	else
	{
		SCM(playerid, -1,"ERROR: Teleport Does Not Exist!");
	}
	return 1;
}

CMD:serverteles(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3)) return NotAuthMSG(playerid);
	format(query, sizeof(query), "SELECT * FROM `ateles`");
	mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Admin teles");
	return 1;
}

CMD:editobject(playerid,params[])
{
	new objectid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",objectid)) return SyntaxMSG(playerid, "/editobject [Object-ID]");
	if(GetIntVar(playerid, "EditingObject") == 1) return SCM(playerid, COLOR_FADE1, "You are already editing.");
	if(ObjectsInfo[objectid][oObjectOn] && IsValidDynamicObject(ObjectsInfo[objectid][oObject]))
	{
		SetIntVar(playerid, "EditingObject", 1);
		SetIntVar(playerid, "ObjectEditing", objectid);
		EditDynamicObject(playerid, ObjectsInfo[objectid][oObject]);
	}
	else
	{
		SCM(playerid, -1,"ERROR: Dynamic Object does not exist!");
	}
	return 1;
}

CMD:removeobject(playerid,params[])
{
	new objectid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",objectid)) return SyntaxMSG(playerid, "/removeobject [Object-ID]");
	if(ObjectsInfo[objectid][oObjectOn])
	{
		format(query, sizeof(query), "DELETE FROM `objects` WHERE `id` = %d",ObjectsInfo[objectid][oID]);
		mysql_function_query(dbHandle, query, true, "OnObjectRemove", "i", objectid);
		format(msg,sizeof(msg),"You've destroyed dynamic object id: %d!",objectid);
		SCM(playerid, COLOR_YELLOWG, msg);
	}
	else
	{
		SCM(playerid, -1,"ERROR: Dynamic Object does not exist!");
	}
	return 1;
}

CMD:whatobject(playerid, params[])
{
	new tt[128];
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new Float:x, Float:y, Float:z;
	for(new i = 0; i < MAX_OBJECTS; i++)
	{
		GetDynamicObjectPos(i, x, y, z);
		if (PlayerToPoint(5, playerid, x, y, z))
		{
			format(tt, sizeof(tt), "You're standing near dynamic object: [Normal ID: %d] [MySQL ID: %d].", i,ObjectsInfo[i][oID]);
			SCM(playerid, -1, tt);
			return 1;
		}
	}
	return 1;
}

CMD:gotoobject(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new id, Float:x, Float:y, Float:z;
	if(sscanf(params,"d",id)) return SyntaxMSG(playerid, "/gotoobject [objectid]");
	if(!IsValidDynamicObject(id)) return SCM(playerid, COLOR_LIGHTRED, "Invalid object id.");
	GetDynamicObjectPos(id, x, y, z);
	PutPlayer(playerid, x, y, z);
	SCM(playerid, COLOR_WHITE, "Teleported.");
	return 1;
}

CMD:showobjects(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new string[4000];
	for(new i = 0; i < sizeof(ObjectsInfo); i++)
	{
		if(ObjectsInfo[i][oObjectOn])
		{
			format(string, sizeof(string), "%s\n%d)%s" ,string, i, ObjectsInfo[i][oName]);
		}
	}
	ShowDialog(playerid,Show:<ShowObjects>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Objects:"EMBED_RED"",string,"O","K");
	return 1;
}

CMD:makeobject(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new objectid, modelid, interior, name[256], Float:X, Float:Y, Float:Z;
	if(sscanf(params,"ds[256]",modelid,name)) return SyntaxMSG(playerid, "/makeobject [Object-ID] [Description]");
	GetPlayerPos(playerid, X, Y, Z);
	interior = GetInterior(playerid);
	objectid = CreateDynamicObject(modelid, X, Y, Z, 0.0, 0.0, 0.0, GetWorld(playerid), -1, -1, 200.0);
	ObjectsInfo[objectid][oModel] = modelid;
	ObjectsInfo[objectid][oPosX] = X;
	ObjectsInfo[objectid][oPosY] = Y;
	ObjectsInfo[objectid][oPosZ] = Z;
	ObjectsInfo[objectid][oPosRX] = 0.0;
	ObjectsInfo[objectid][oPosRY] = 0.0;
	ObjectsInfo[objectid][oPosRZ] = 0.0;
	ObjectsInfo[objectid][oObjectOn] = 1;
	ObjectsInfo[objectid][oInterior] = interior;
	ObjectsInfo[objectid][oVirtualWorld] = GetWorld(playerid);
	format(ObjectsInfo[objectid][oName], 256, "%s", name);
	ObjectsInfo[objectid][oObject] = objectid;
	AddObjectToFile(objectid, modelid, interior, GetWorld(playerid), X, Y, Z, name);
	format(msg, sizeof(msg), "A new dynamic object was added, [ModelID: %d, Description: %s]",modelid, ObjectsInfo[objectid][oName]);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:dupobject(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new objectid, objectid2, modelid, name[256];
	if(sscanf(params,"dds[256]",objectid2,modelid,name)) return SyntaxMSG(playerid, "/dupobject [What-ID] [Object-ID] [Description]");
	objectid = CreateDynamicObject(modelid, ObjectsInfo[objectid2][oPosX], ObjectsInfo[objectid2][oPosY], ObjectsInfo[objectid2][oPosZ], ObjectsInfo[objectid2][oPosRX], ObjectsInfo[objectid2][oPosRY], ObjectsInfo[objectid2][oPosRZ], ObjectsInfo[objectid2][oVirtualWorld], -1, -1, 200.0);
	ObjectsInfo[objectid][oModel] = modelid;
	ObjectsInfo[objectid][oPosX] = ObjectsInfo[objectid2][oPosX];
	ObjectsInfo[objectid][oPosY] = ObjectsInfo[objectid2][oPosY];
	ObjectsInfo[objectid][oPosZ] = ObjectsInfo[objectid2][oPosZ];
	ObjectsInfo[objectid][oPosRX] = ObjectsInfo[objectid2][oPosRX];
	ObjectsInfo[objectid][oPosRY] = ObjectsInfo[objectid2][oPosRY];
	ObjectsInfo[objectid][oPosRZ] = ObjectsInfo[objectid2][oPosRZ];
	ObjectsInfo[objectid][oObjectOn] = 1;
	ObjectsInfo[objectid][oInterior] = ObjectsInfo[objectid2][oInterior];
	ObjectsInfo[objectid][oVirtualWorld] = ObjectsInfo[objectid2][oVirtualWorld];
	format(ObjectsInfo[objectid][oName], 256, "%s", name);
	ObjectsInfo[objectid][oObject] = objectid;
	AddObjectToFile(objectid, modelid, ObjectsInfo[objectid2][oInterior], ObjectsInfo[objectid2][oVirtualWorld], ObjectsInfo[objectid2][oPosX], ObjectsInfo[objectid2][oPosY], ObjectsInfo[objectid2][oPosZ], name);
	format(msg, sizeof(msg), "A new dynamic object was duplicated, [OtherID: %d, New ID: %d, Model: %d, Description: %s]",objectid2, objectid, modelid, name);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:serverobjects(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	format(query, sizeof(query), "SELECT * FROM `objects`");
	mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Dynamic objects");
	return 1;
}

CMD:makeadmin(playerid, params[])
{
	new pid, level;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"ud",pid, level)) return SyntaxMSG(playerid, "/makeadmin [playerid/PartOfNames] [level]");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	PlayerInfo[pid][pAdmin] = level;
	format(msg, sizeof(msg), "AdmCmd: %s has promoted %s admin level to %d.", GetNameEx(playerid), GetNameEx(pid), level);
	AMSG(COLOR_LIGHTRED, msg);
	format(msg, sizeof(msg), "Admin %s has set your Admin Level to %d.", GetNameEx(playerid), level);
	SCM(pid, COLOR_GRAD3, msg);
	return 1;
}

CMD:maketester(playerid, params[])
{
	new pid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/maketester [playerid/PartOfNames]");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	PlayerInfo[pid][pHelper] = 1;
	format(msg, sizeof(msg), "AdmCmd: %s has promoted %s to be a tester.", GetNameEx(playerid), GetNameEx(pid));
	AMSG(COLOR_LIGHTRED, msg);
	format(msg, sizeof(msg), "Admin %s added to the group of testers.", GetNameEx(playerid));
	SCM(pid, COLOR_GRAD3, msg);
	return 1;
}

CMD:removetester(playerid, params[])
{
	new pid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/removetester [playerid/PartOfNames]");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	PlayerInfo[pid][pHelper] = 0;
	format(msg, sizeof(msg), "AdmCmd: %s has removed from the group of testers %s.", GetNameEx(playerid), GetNameEx(pid));
	AMSG(COLOR_LIGHTRED, msg);
	format(msg, sizeof(msg), "Admin %s removed to the group of testers.", GetNameEx(playerid));
	SCM(pid, COLOR_WHITE, msg);
	return 1;
}

CMD:getip(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	new ip[128],pid;
	if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/getip [playerid/PartOfNames]");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	GetPlayerIp(pid, ip, sizeof(ip));
	format(msg, sizeof(msg), "%s's IP address: %s", GetNameEx(pid), ip);
	SCM(playerid, COLOR_GRAD6, msg);
	return 1;
}

CMD:ban(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	new id, reason[128];
	if(sscanf(params,"us[128]",id,reason)) return SyntaxMSG(playerid, "/ban [playerid/PartOfName] [reason]");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	format(msg, sizeof(msg), "AdmCmd: %s has been banned by the administrator %s, reason: %s.", GetNameEx(id), GetNameEx(playerid), reason);
	SCMALL(0xFF4444FF,msg);
	format(query, sizeof(query), "INSERT INTO `bans` (name, reason, playerIP) VALUES ('%s', '%s', '%s')", GetName(id),reason,GetPlayerIP(id));
	mysql_function_query(dbHandle, query, true, "BanWithMSGEx", "iss", id, msg, reason);
	return 1;
}

CMD:saveall(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
	//-------------------------------------------------
	foreach(Player, i)
	{
		SavePlayerStats(i);
		SavePlayerPos(i);
	}
	//-------------------------------------------------
	for(new i = 0; i < MAX_PARK_METERS; i++)
	{
		if(ParkMeters[i][parkOn])
		{
			SaveParkMeter(i);
		}
	}
	//-------------------------------------------------
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		if(VehicleInfo[i][carOwned] == 1)
		{
			SaveVehicle(i);
		}
	}
	//-------------------------------------------------
	for(new i = 0; i < MAX_HOUSES; i++)
	{
		if(HouseInfo[i][hHouseOn] == 1 && HouseInfo[i][hOwned] == 1)
		{
			UpdateHouseInfo(i);
		}
	}
	//-------------------------------------------------
	for(new i = 0; i < MAX_BIZ; i++)
	{
		if(BizInfo[i][bizOn] == 1)
		{
			UpdateBizInfo(i);
		}
	}
	//-------------------------------------------------
	for(new i = 0; i < MAX_FACTIONS; i++)
	{
		if(Factions[i][fON] == 1)
		{
			SaveFaction(i);
		}
	}
	//-------------------------------------------------
	SavePlants();
	SCM(playerid,COLOR_YELLOWG,"You have successfully saved all the data server.");
	return 1;
}

CMD:unban(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
	new name[MAX_PLAYER_NAME];
	if(sscanf(params,"s[128]",name)) return SyntaxMSG(playerid, "/unban [Firstname_Lastname]");
	format(msg, sizeof(msg), "AdmCmd: %s was unbanned by the administrator %s.", name, GetNameEx(playerid));
	AMSG(COLOR_LIGHTRED, msg);
	format(msg, sizeof(msg), "unban %s", name);
	SendRconCommand(msg);
	SendRconCommand("reloadbans");
	format(query, sizeof(query), "DELETE FROM `bans` WHERE `name` = '%s'", name);
	mysql_function_query(dbHandle, query, false, "", "");
	format(query, sizeof(query), "UPDATE `users` SET `banned` = %d WHERE `name` = '%s'", 0, name);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

CMD:banip(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	new ip[128],pIP[128];
	if(sscanf(params,"s[128]",ip)) return SyntaxMSG(playerid, "/banip [IP]");
	format(msg, sizeof(msg), "AdmCmd: %s has been banned the IP %s.", GetNameEx(playerid), ip);
	AMSG(COLOR_LIGHTRED, msg);
	foreach(Player, i)
	{
		GetPlayerIp(i, pIP, sizeof(pIP));
		if(CompareStrings(ip, pIP))
		{
			format(query, sizeof(query), "INSERT INTO `bans` (name, reason, playerIP) VALUES ('%s', '%s', '%s')", GetName(i), "BanIP", pIP);
			mysql_function_query(dbHandle, query, false, "", "");
			format(msg, sizeof(msg), "SERVER: Your IP %s, has been banned from the server.", pIP);
			KickEx2(i, msg);
			return 1;
		}
	}
	format(query, sizeof(query), "INSERT INTO `bans` (name, reason, playerIP) VALUES ('%s', '%s', '%s')", "BanIP", "BanIP", pIP);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

CMD:unbanip(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	new ip[128];
	if(sscanf(params,"s[128]",ip)) return SyntaxMSG(playerid, "/unbanip [IP]");
	format(msg, sizeof(msg), "AdmCmd: %s was unbanned the IP %s.", GetNameEx(playerid), ip);
	AMSG(0xFF4444FF, msg);
	format(msg, sizeof(msg), "unbanip %s", ip);
	SendRconCommand(msg);
	SendRconCommand("reloadbans");
	format(query, sizeof(query), "DELETE FROM `bans` WHERE `register_ip` = '%s'", ip);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

CMD:mute(playerid, params[])
{
	new pid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/mute [playerid/PartOfNames]");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	SetIntVar(pid, "Muted", 1);
	format(msg, sizeof(msg), "AdmCmd: %s has been muted by %s.", GetNameEx(pid), GetNameEx(playerid));
	SCMALL(COLOR_LIGHTRED, msg);
	return 1;
}

CMD:unmute(playerid, params[])
{
	new pid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/unmute [playerid/PartOfNames]");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	SetIntVar(pid, "Muted", 0);
	format(msg, sizeof(msg), "AdmCmd: %s was unmute by %s.", GetNameEx(pid), GetNameEx(playerid));
	SCMALL(COLOR_LIGHTRED, msg);
	return 1;
}

CMD:reportlist(playerid, params[])
{
	new string[500];
	if(!CheckAdmin(playerid, 1)) return NotAuthMSG(playerid);
	foreach(Player, i)
	{
		if(GetIntVar(i, "JustReported") == 1)
		{
			format(string, sizeof(string), "%s\n%s - [ID:%d]", string, GetNameEx(i), i);
		}
	}
	ShowDialog(playerid, Show:<ReportList>, DIALOG_STYLE_LIST, "REPORT LIST (/checkreport)", string, "Ok", "Cancel");
	return 1;
}

CMD:checkreport(playerid, params[])
{
	new pid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/checkreport [playerid/PartOfName]");
	if(GetIntVar(pid, "JustReported") == 0) return SCM(playerid, -1, "This player hasn't reported.");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	SetIntVar(playerid, "TookReportFrom", pid);
	format(msg, sizeof(msg), "%s[ID:%d] report:\n{FFFF00}%s", GetNameEx(pid), pid, GetStringVar(pid, "ReportText"));
	ShowDialog(playerid, Show:<ReportCheck>, DIALOG_STYLE_MSGBOX, "Check the report", msg, "Accept", "Delete");
	return 1;
}

CMD:spec(playerid, params[])
{
	new pid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/spec [playerid/PartOfNames]");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	SetIntVar(playerid, "Spectating", 1);
	StartPlayerSpec(playerid, pid);
	return 1;
}

CMD:specoff(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(GetIntVar(playerid, "Spectating") == 0) return ServerMSG(playerid, "You're not SPEC.");
	RemoveVar(playerid, "Spectating");
	StopPlayerSpec(playerid);
	SetWorld(playerid, 0);
	return 1;
}

CMD:admindewarn(playerid, params[])
{
    new pid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(sscanf(params,"us[125]",pid)) return SyntaxMSG(playerid, "/admindewarn [playerid/PartOfNames]");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	if(PlayerInfo[pid][pWarns] == 0) return SCM(playerid, COLOR_YELLOWG,"Player has 0 warns");
	PlayerInfo[pid][pWarns] -= 1;
    format(msg,sizeof(msg),"You got DEWARN from the administrator %s, warns: (%d/3).",GetNameEx(playerid),PlayerInfo[pid][pWarns]);
	SCM(pid,COLOR_GREEN,msg);
	return 1;
}

CMD:adminwarn(playerid, params[])
{
	new pid,reason[128];
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(sscanf(params,"us[125]",pid,reason)) return SyntaxMSG(playerid, "/adminwarn [playerid/PartOfNames] [reason]");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	PlayerInfo[pid][pWarns] += 1;
	if(PlayerInfo[pid][pWarns] >= 3)
	{
		format(msg,sizeof(msg),"%s has been warned from %s (BAN), reason: %s (Max Warnings-(3))", GetNameEx(pid),GetNameEx(playerid),reason,PlayerInfo[pid][pWarns]);
		BanWithMSG(pid, msg);
		return 1;
	}
	else
	{
		format(msg,sizeof(msg),"You received a WARN from the administrator %s, warns: (%d/3).",GetNameEx(playerid),PlayerInfo[pid][pWarns]);
		SCM(pid,COLOR_GREEN,msg);
		format(msg,sizeof(msg),"AdmCmd: %s has been warned by the administrator %s, reason: %s (%d/3)", GetNameEx(pid),GetNameEx(playerid),reason,PlayerInfo[pid][pWarns]);
		AMSG(COLOR_LIGHTRED, msg);
	}
	return 1;
}

CMD:mark(playerid, params[])
{
	new Float:x, Float:y, Float:z, interior, world;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3)) return NotAuthMSG(playerid);
	interior = GetInterior(playerid);
	world = GetWorld(playerid);
	GetPlayerPos(playerid, x, y, z);
	SetIntVar(playerid, "MarkedSpot", 1);
	SetFloatVar(playerid, "MarkX", x);
	SetFloatVar(playerid, "MarkY", y);
	SetFloatVar(playerid, "MarkZ", z);
	SetIntVar(playerid, "MarkInterior", interior);
	SetIntVar(playerid, "MarkWorld", world);
	SCM(playerid, -1, "You marked this place. You can use /gotomark");
	return 1;
}

CMD:gotomark(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3)) return NotAuthMSG(playerid);
	if(GetIntVar(playerid, "MarkedSpot") == 0) return SCM(playerid, -1, "You haven't marked any spot yet. '/mark'");
	PutPlayer(playerid, GetFloatVar(playerid, "MarkX"), GetFloatVar(playerid, "MarkY"), GetFloatVar(playerid, "MarkZ"));
	SetWorld(playerid, GetIntVar(playerid, "MarkWorld"));
	SetInterior(playerid, GetIntVar(playerid, "MarkInterior"));
	SCM(playerid, -1, "You have been teleported to the last /mark.");
	return 1;
}

CMD:showpm(playerid, params[])
{
	new pid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
	if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/showpm [playerid/PartOfNames]");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	format(msg, sizeof(msg), "[PM Check] Now you spy %s's PMs, '/showpmoff' to turn it off.", GetNameEx(pid));
	SCM(playerid, COLOR_YELLOW, msg);
	SetIntVar(playerid, "PmSpy", pid);
	SetIntVar(playerid, "IsSpying", 1);
	return 1;
}

CMD:showpms(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_YELLOW, "[PM Check] Now you're listening to all the PMs on the server, '/nopms' to turn it off.");
	SetIntVar(playerid, "IsSpyingAll", 1);
	return 1;
}

CMD:nopms(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
	if(GetIntVar(playerid, "IsSpyingAll") == 0) return SCM(playerid, -1, "You are not spying everyone's PM.");
	SCM(playerid, COLOR_YELLOW, "[PM Check] You have stopped spying all players PM's.");
	RemoveVar(playerid, "IsSpyingAll");
	return 1;
}

CMD:showpmoff(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
	if(GetIntVar(playerid, "IsSpying") == 0) return SCM(playerid, -1, "You are not spying anyone's PM.");
	format(msg, sizeof(msg), "[PM Check] You have stopped spying %s's PM's.", GetNameEx(GetIntVar(playerid, "PmSpy")));
	SCM(playerid, COLOR_YELLOW, msg);
	RemoveVar(playerid, "PmSpy");
	RemoveVar(playerid, "IsSpying");
	return 1;
}

CMD:adminset(playerid, params[])
{
	new pid, statcode, amount;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3)) return NotAuthMSG(playerid);
	if(sscanf(params, "udd", pid, statcode, amount))
	{
		SCM(playerid, COLOR_WHITE, "USAGE: /adminset [playerid/PartOfNames] [statcode] [amount]");
		SCM(playerid, COLOR_GRAD4, "|1 Level |2 Skin |3 RespectPoints |4 Age |5 Sex |6 Bank");
		SCM(playerid, COLOR_GRAD4, "|7 Hours |8 Warns |9 Cash |10 Donate |11 CarLic |12 WepLic");
		SCM(playerid, COLOR_GRAD4, "|13 FlyLic |14 Pen |15 PayCheck |16 Upgrade |17 Cellphone");
		SCM(playerid, COLOR_GRAD4, "|18 Number |19 Savings |20 RentCar |21 House Key |22 BoomBox");
		SCM(playerid, COLOR_GRAD4, "|23 Dice |24 Radio |25 Channel |26 OwnedChannel |27 Mask |28 BMX");
		SCM(playerid, COLOR_GRAD4, "|29 VehKey |30 ToolKit |31 Lighter |32 Cigarettes |33 BizKey");
		SCM(playerid, COLOR_GRAD4, "|34 WorkOn |35 WalkStyle |36 Faction |37 Rank |38 Job |39 JobRank");
		SCM(playerid, COLOR_GRAD4, "|40 Career |41 SideJob");
		return 1;
	}
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	switch (statcode)
	{
		case 1:
		{
			PlayerInfo[pid][pLevel] = amount;
			format(msg, sizeof(msg), "   %s's Level has been set to %d.", GetNameEx(pid), amount);
			ScoreUpdate(pid);
		}
		case 2:
		{
			format(msg, sizeof(msg), "   %s's Skin has been set to %d.", GetNameEx(pid), amount);
			SetSkin(pid, amount);
		}
		case 3:
		{
			PlayerInfo[pid][pExp] = amount;
			format(msg, sizeof(msg), "   %s's Exp has been set to %d.", GetNameEx(pid), amount);
		}
		case 4:
		{
			PlayerInfo[pid][pAge] = amount;
			format(msg, sizeof(msg), "   %s's Age has been set to %d.", GetNameEx(pid), amount);
		}
		case 5:
		{
			PlayerInfo[pid][pSex] = amount;
			format(msg, sizeof(msg), "   %s's Sex has been set to %d.", GetNameEx(pid), amount);
		}
		case 6:
		{
			format(msg, sizeof(msg), "   %s's Bank has been set to %d.", GetNameEx(pid), amount);
			SetBankCash(pid, amount);
		}
		case 7:
		{
			PlayerInfo[pid][pHours] = amount;
			format(msg, sizeof(msg), "   %s's Hours has been set to %d.", GetNameEx(pid), amount);
		}
		case 8:
		{
			PlayerInfo[pid][pWarns] = amount;
			format(msg, sizeof(msg), "   %s's Warns has been set to %d.", GetNameEx(pid), amount);
		}
		case 9:
		{
			format(msg, sizeof(msg), "   %s's Warns has been set to %d.", GetNameEx(pid), amount);
			SetCash(pid, amount);
		}
		case 10:
		{
			format(msg, sizeof(msg), "   %s's DonateRank has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pDonateRank] = amount;
		}
		case 11:
		{
			format(msg, sizeof(msg), "   %s's Car License has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pCarLic] = amount;
		}
		case 12:
		{
			format(msg, sizeof(msg), "   %s's Weapon License has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pWepLic] = amount;
		}
		case 13:
		{
			format(msg, sizeof(msg), "   %s's Flying License has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pFlyLic] = amount;
		}
		case 14:
		{
			format(msg, sizeof(msg), "   %s's Pen has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pPen] = amount;
		}
		case 15:
		{
			format(msg, sizeof(msg), "   %s's PayCheck Made has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pPayCheckMade] = amount;
		}
		case 16:
		{
			format(msg, sizeof(msg), "   %s's Upgrade Points has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pUpgrade] = amount;
		}
		case 17:
		{
			format(msg, sizeof(msg), "   %s's Cellphone has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pCellPhone] = amount;
		}
		case 18:
		{
			format(msg, sizeof(msg), "   %s's Number has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pNumber] = amount;
		}
		case 19:
		{
			format(msg, sizeof(msg), "   %s's Savings has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pSavings] = amount;
		}
		case 20:
		{
			format(msg, sizeof(msg), "   %s's Rent Car ID has been set to %d.", GetNameEx(pid), amount);
			SetIntVar(pid, "RentedCar", amount);
		}
		case 21:
		{
			format(msg, sizeof(msg), "   %s's House Key has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pHouseKey] = amount;
		}
		case 22:
		{
			format(msg, sizeof(msg), "   %s's BoomBox has been set to %d.", GetNameEx(pid), amount);
			SetIntVar(pid, "BoomBox", amount);
		}
		case 23:
		{
			format(msg, sizeof(msg), "   %s's Dice has been set to %d.", GetNameEx(pid), amount);
			SetIntVar(pid, "Dice", amount);
		}
		case 24:
		{
			format(msg, sizeof(msg), "   %s's Radio has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pRadio] = amount;
		}
		case 25:
		{
			format(msg, sizeof(msg), "   %s's Channel has been set to %d.", GetNameEx(pid), amount);
			SetRadioChannel(pid, amount);
		}
		case 26:
		{
			format(msg, sizeof(msg), "   %s's Owned Channel has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pOwnedChannel] = amount;
		}
		case 27:
		{
			format(msg, sizeof(msg), "   %s's Mask has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pMask] = amount;
		}
		case 28:
		{
			format(msg, sizeof(msg), "   %s's BMX has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pBMX] = amount;
		}
		case 29:
		{
			format(msg, sizeof(msg), "   %s's Vehicle Key has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pCarKey] = amount;
		}
		case 30:
		{
			format(msg, sizeof(msg), "   %s's ToolKit has been set to %d.", GetNameEx(pid), amount);
			if(amount == 1)
				ToolKit{pid} = true;
			else
				ToolKit{pid} = false;
		}
		case 31:
		{
			format(msg, sizeof(msg), "   %s's Lighter has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pLighter] = amount;
		}
		case 32:
		{
			format(msg, sizeof(msg), "   %s's Cigarettes has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pCigars] = amount;
		}
		case 33:
		{
			format(msg, sizeof(msg), "   %s's BizKey has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pBizKey] = amount;
		}
		case 34:
		{
			format(msg, sizeof(msg), "   %s's WorkOn key has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pWorkOn] = amount;
		}
		case 35:
		{
			format(msg, sizeof(msg), "   %s's Walking Style has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pWalk] = amount;
		}
		case 36:
		{
			format(msg, sizeof(msg), "   %s's Faction has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pFaction] = amount;
		}
		case 37:
		{
			format(msg, sizeof(msg), "   %s's Rank has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pRank] = amount;
		}
		case 38:
		{
			format(msg, sizeof(msg), "   %s's Job has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pJob] = amount;
		}
		case 39:
		{
			format(msg, sizeof(msg), "   %s's Job Rank has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pJobRank] = amount;
		}
		case 40:
		{
			format(msg, sizeof(msg), "   %s's Career Hours has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pCareer] = amount;
		}
		case 41:
		{
			format(msg, sizeof(msg), "   %s's SideJob has been set to %d.", GetNameEx(pid), amount);
			PlayerInfo[pid][pSideJob] = amount;
		}
		default:
		{
			format(msg, sizeof(msg), "   Invalid stat code.", amount);
		}
	}
	SCM(playerid, COLOR_GRAD1, msg);
	return 1;
}

CMD:tod(playerid, params[])
{
	new time;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
	if(sscanf(params, "d", time)) return SyntaxMSG(playerid, "/tod [time] (0-23)");
	SetWorldTime(time);
	format(msg, sizeof(msg), "Time has been changed to %d:00.", time);
	SCMALL(COLOR_GRAD1, msg);
	return 1;
}

CMD:weather(playerid, params[])
{
	new weather;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3)) return NotAuthMSG(playerid);
	if(sscanf(params, "d", weather)) return SyntaxMSG(playerid, "/weather [weatherid]");
	if(weather < 0||weather > 45) { SCM(playerid, COLOR_GREY, "   Weather ID can't be below 0 or above 45!"); return 1; }
	SetPlayerWeather(playerid, weather);
	SCM(playerid, COLOR_GREY, "Weather Set!");
	return 1;
}

CMD:weatherall(playerid, params[])
{
	new weather;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3)) return NotAuthMSG(playerid);
	if(sscanf(params, "d", weather)) return SyntaxMSG(playerid, "/weather [weatherid]");
	if(weather < 0||weather > 45) { SCM(playerid, COLOR_GREY, "   Weather ID can't be below 0 or above 45!"); return 1; }
	SetWeather(weather);
	SCM(playerid, COLOR_GREY, "Weather set to everyone!");
	return 1;
}

CMD:makedonator(playerid, params[])
{
	new pid, rank;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"ud",pid, rank)) return SyntaxMSG(playerid, "/makedonator [playerid/PartOfNames] [rank(1-Silver/2-Bronze/3-Gold)]");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	if(rank > 3 || rank < 1) return SyntaxMSG(playerid, "/makedonator [playerid/PartOfNames] [rank(1-Silver/2-Bronze/3-Gold)]");
	PlayerInfo[pid][pDonateRank] = rank;
	format(msg, sizeof(msg), "AdmCmd: %s has just given %s donate rank %d.", GetNameEx(playerid), GetNameEx(pid), rank);
	AMSG(COLOR_LIGHTRED, msg);
	format(msg, sizeof(msg), "Administrator %s has given you %d in donator group.", GetNameEx(playerid), rank);
	SCM(pid, COLOR_GRAD3, msg);
	return 1;
}
CMD:removedonator(playerid, params[])
{
	new pid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/removedonator [playerid/PartOfNames]");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	PlayerInfo[pid][pDonateRank] = 0;
	format(msg, sizeof(msg), "AdmCmd: %s has been removed you from donator group %s.", GetNameEx(playerid), GetNameEx(pid));
	AMSG(COLOR_WHITE, msg);
	format(msg, sizeof(msg), "Administrator %s has removed you from donator group.", GetNameEx(playerid));
	SCM(pid, COLOR_WHITE, msg);
	return 1;
}

CMD:fixveh(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
	if(!PlayerInCar(playerid)) return NotInCarMSG(playerid);
	FixVehicle(GetPlayerVehicleID(playerid));
	SCM(playerid, COLOR_GREY, "You have successfully repaired the car!");
	return 1;
}

CMD:healplayer(playerid, params[])
{
	new id, Float:slx, Float:sly, Float:slz;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/healplayer [playerid/PartOfNames] (Only if he's wounded)");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(GetIntVar(id, "JustDied") == 1 || PlayerInfo[id][pDied] == 1 || GetIntVar(id, "LoggedInDead") == 1)
	{
		SetPlayerHealth(id, 100.0);
		PlayerInfo[id][pDied] = 0;
		TimerDeath1[id] = 0;
		KillTimer(Death[id]);
		UnFreezePlayer(id);
		RemoveVar(id, "JustDied");
		RemoveVar(id, "LoggedInDead");
		RemoveVar(id, "JustAcceptedDeath");
		StopPlayerAnims(id);
		GetPlayerPos(id, slx, sly, slz);
		SetPlayerPos(id, slx, sly, slz+1);
		SCM(playerid, -1, "INFO: The player has received 100 HP.");
		SavePlayerPos(id);
		StopPlayerSpec(id);
		PutPlayer(id, PlayerInfo[id][pPosX],PlayerInfo[id][pPosY],PlayerInfo[id][pPosZ]);
		ResetDamages(id);
		Delete3DTextLabel(DamageShot[id]);
	}
	else
	{
		SCM(playerid, COLOR_RED, "This player isn't wounded");
	}
	return 1;
}

CMD:debugdead(playerid, params[])
{
	new id;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",id)) return SyntaxMSG(playerid, "/debugdead [id/partofname]");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	TimerDeath1[id] = 0;
	RemoveVar(id, "JustDied");
	RemoveVar(id, "LoggedInDead");
	RemoveVar(id, "JustAcceptedDeath");
	KillTimer(Death[id]);
	ResetDamages(id);
	return 1;
}

CMD:debuginjured(playerid, params[])
{
  new id;
  if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
  if(sscanf(params,"d",id)) return SyntaxMSG(playerid, "/debuginjured [id/partofname]");
  if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
  RemoveVar(id, "Injured");
  Delete3DTextLabel(Injured[id]);
  KillTimer(InjuredTimer[id]);
  StopPlayerAnims(id);
  UnFreezePlayer(id);
  ResetDamages(id);
  InjuredMSG[id] = 0;
  return 1;
}

CMD:changefightdonator(playerid, params[])
{
  if(PlayerInfo[playerid][pDonateRank] == 0) return SCM(playerid, COLOR_YELLOWG, "Only donators can use this feature.");
  SetIntVar(playerid, "ChangeFightTo", playerid);
  ShowDialog(playerid,Show:<ChangeFight>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Switch your fightstyle:"EMBED_RED"","Normal\nBoxing\nKungFu\nKneeHead\nGrabKick\nElbow","Change","Cancel");
  return 1;
}

CMD:changefight(playerid, params[])
{
	new pid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"u",pid)) return SyntaxMSG(playerid, "/changefight [playerid/PartOfNames]");
	if(!PlayerIsOn(pid)) return NotConnectedMSG(playerid);
	SetIntVar(pid, "ChangeFightTo", pid);
	ShowDialog(pid,Show:<ChangeFight>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Switch your fightstyle:"EMBED_RED"","Normal\nBoxing\nKungFu\nKneeHead\nGrabKick\nElbow","Change","Cancel");
	return 1;
}

CMD:makeinfo(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new infoid, virworld, labeltext[256], labeltext2[256], otherinfo[256], Float:x, Float:y, Float:z;
	if(sscanf(params,"dds[256]s[256]s[256]",infoid,virworld,labeltext,labeltext2,otherinfo)) return SyntaxMSG(playerid, "/makeinfo [What-ID] [Vir-World] [LabelText-Line1] [LabelText-Line2] [Other-Info]");
	if(CPTInfo[infoid][cInfoOn]) return SCM(playerid, -1, "This info is already being used.");
	GetPlayerPos(playerid, x, y, z);
	CPTInfo[infoid][cPosX] = x;
	CPTInfo[infoid][cPosY] = y;
	CPTInfo[infoid][cPosZ] = z;
	CPTInfo[infoid][cInfoOn] = 1;
	CPTInfo[infoid][cVirtualWorld] = virworld;
	format(CPTInfo[infoid][cLabelText1], 256, "%s", labeltext);
	format(CPTInfo[infoid][cLabelText2], 256, "%s", labeltext2);
	format(CPTInfo[infoid][cOtherInfo], 256, "%s", otherinfo);
	format(msg, sizeof(msg), ""EMBED_GREEN"["EMBED_RED"Info"EMBED_GREEN"]\n"EMBED_WHITE"%s.\n"EMBED_YELLOW"%s.\n"EMBED_LIGHTBLUE"Commands: /info.", labeltext, labeltext2);
	CPTInfo[infoid][cLabel] = CreateDynamic3DTextLabel(msg, -1, x, y, z, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, virworld, -1, -1, 100.0);
	CPTInfo[infoid][cPickUp] = CreateDynamicPickup(1239, 1, x, y, z, virworld, -1, -1, 100.0);
	CPTInfo[infoid][cCheckPoint] = CreateDynamicCP(x, y, z, 1.0, virworld, -1, -1, 100.0);
	AddInfoToFile(infoid, virworld, labeltext, labeltext2, otherinfo, x, y, z);
	format(msg, sizeof(msg), "A new info was added, [LabelText1: %s, labeltext2: %s, OtherInfo: %s]", labeltext, labeltext2, otherinfo);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:removeinfo(playerid,params[])
{
	new infoid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",infoid)) return SyntaxMSG(playerid, "/removeinfo [Info-ID]");
	if(CPTInfo[infoid][cInfoOn])
	{
		format(query, sizeof(query), "DELETE FROM `infos` WHERE `id` = %d",CPTInfo[infoid][cID]);
		mysql_function_query(dbHandle, query, true, "OnInfoRemove", "i", infoid);
		format(msg,sizeof(msg),"You've destroyed dynamic info id: %d!",infoid);
		SCM(playerid, COLOR_YELLOWG, msg);
	}
	else
	{
		SCM(playerid, -1,"ERROR: Dynamic Info doesn't exist!");
	}
	return 1;
}

CMD:whatinfo(playerid, params[])
{
	new tt[256];
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	for(new i = 0; i < sizeof(CPTInfo); i++)
	{
		if (PlayerToPoint(3, playerid,CPTInfo[i][cPosX], CPTInfo[i][cPosY], CPTInfo[i][cPosZ]))
		{
			format(tt, sizeof(tt), "You're standing near dynamic info: [Normal ID: %d] [MySQL ID: %d].", i,CPTInfo[i][cID]);
			SCM(playerid, -1, tt);
			return 1;
		}
	}
	return 1;
}

CMD:serverinfos(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	format(query, sizeof(query), "SELECT * FROM `infos`");
	mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Dynamic infos");
	return 1;
}

CMD:editinfo(playerid, params[])
{
	new text[256], type;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"ds[256]",type,text)) return SyntaxMSG(playerid, "/editinfo [type(1-LabelText,2-LabelText2,3-OtherInfo,4-VirtualWorld)] [new text]");
	new virworld = strval(text);

	if(type == 1)
	{
		for(new i = 0; i < sizeof(CPTInfo); i++)
		{
			if (PlayerToPoint(3, playerid,CPTInfo[i][cPosX], CPTInfo[i][cPosY], CPTInfo[i][cPosZ]))
			{
				format(query, sizeof(query), "UPDATE `infos` SET `labeltext` = '%s' WHERE `id` = %d", text, CPTInfo[i][cID]);
				mysql_function_query(dbHandle, query, false, "", "");
				format(CPTInfo[i][cLabelText1],256,"%s",text);
				format(msg, sizeof(msg), ""EMBED_GREEN"["EMBED_RED"Info"EMBED_GREEN"]\n"EMBED_WHITE"%s.\n"EMBED_YELLOW"%s.\n"EMBED_LIGHTBLUE"Commands: /info.", text, CPTInfo[i][cLabelText2]);
				UpdateDynamic3DTextLabelText(Text3D:CPTInfo[i][cLabel], -1, msg);
				return 1;
			}
		}
	}
	if(type == 2)
	{
		for(new i = 0; i < sizeof(CPTInfo); i++)
		{
			if (PlayerToPoint(3, playerid,CPTInfo[i][cPosX], CPTInfo[i][cPosY], CPTInfo[i][cPosZ]))
			{
				format(query, sizeof(query), "UPDATE `infos` SET `labeltext2` = '%s' WHERE `id` = %d", text, CPTInfo[i][cID]);
				mysql_function_query(dbHandle, query, false, "", "");
				format(CPTInfo[i][cLabelText2],256,"%s",text);
				format(msg, sizeof(msg), ""EMBED_GREEN"["EMBED_RED"Info"EMBED_GREEN"]\n"EMBED_WHITE"%s.\n"EMBED_YELLOW"%s.\n"EMBED_LIGHTBLUE"Commands: /info.", CPTInfo[i][cLabelText1], text);
				UpdateDynamic3DTextLabelText(Text3D:CPTInfo[i][cLabel], -1, msg);
				return 1;
			}
		}
	}
	if(type == 3)
	{
		for(new i = 0; i < sizeof(CPTInfo); i++)
		{
			if (PlayerToPoint(3, playerid,CPTInfo[i][cPosX], CPTInfo[i][cPosY], CPTInfo[i][cPosZ]))
			{
				format(query, sizeof(query), "UPDATE `infos` SET `otherinfo` = '%s' WHERE `id` = %d", text, CPTInfo[i][cID]);
				mysql_function_query(dbHandle, query, false, "", "");
				format(CPTInfo[i][cOtherInfo],256,"%s",text);
				return 1;
			}
		}
	}
	if(type == 4)
	{
		for(new i = 0; i < sizeof(CPTInfo); i++)
		{
			if (PlayerToPoint(3, playerid,CPTInfo[i][cPosX], CPTInfo[i][cPosY], CPTInfo[i][cPosZ]))
			{
				format(query, sizeof(query), "UPDATE `infos` SET `virworld` = %d WHERE `id` = %d", virworld, CPTInfo[i][cID]);
				mysql_function_query(dbHandle, query, false, "", "");
				CPTInfo[i][cVirtualWorld] = virworld;
				DestroyDynamicCP(CPTInfo[i][cCheckPoint]);
				DestroyDynamic3DTextLabel(Text3D:CPTInfo[i][cLabel]);
				DestroyDynamicPickup(CPTInfo[i][cPickUp]);
				format(msg, sizeof(msg), ""EMBED_GREEN"["EMBED_RED"Info"EMBED_GREEN"]\n"EMBED_WHITE"%s.\n"EMBED_YELLOW"%s.\n"EMBED_LIGHTBLUE"Commands: /info.", CPTInfo[i][cLabelText1], CPTInfo[i][cLabelText2]);
				CPTInfo[i][cLabel] = CreateDynamic3DTextLabel(msg, -1, CPTInfo[i][cPosX], CPTInfo[i][cPosY], CPTInfo[i][cPosZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, virworld, -1, -1, 100.0);
				CPTInfo[i][cPickUp] = CreateDynamicPickup(1239, 1, CPTInfo[i][cPosX], CPTInfo[i][cPosY], CPTInfo[i][cPosZ], virworld, -1, -1, 100.0);
				CPTInfo[i][cCheckPoint] = CreateDynamicCP(CPTInfo[i][cPosX], CPTInfo[i][cPosY], CPTInfo[i][cPosZ], 1.0, virworld, -1, -1, 100.0);
				return 1;
			}
		}
	}
	return 1;
}

CMD:showinfos(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new string[1024];
	for(new i = 0; i < sizeof(CPTInfo); i++)
	{
		if(CPTInfo[i][cInfoOn])
		{
			format(string, sizeof(string), "%s\n<%d>{66FF66}%s, {008040}%s" ,string, i, CPTInfo[i][cLabelText1], CPTInfo[i][cLabelText2]);
		}
	}
	ShowDialog(playerid,Show:<ShowInfos>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Infos:"EMBED_RED"",string,"Teleport","Cancel");
	return 1;
}

CMD:makebank(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new bankid, info[256], interior, Float:x, Float:y, Float:z;
	if(sscanf(params,"ds[256]",bankid,info)) return SyntaxMSG(playerid, "/makebank [What-ID] [Bank-Info]");
	if(BankInfo[bankid][bBankOn]) return SCM(playerid, -1, "This bank is already being used.");
	GetPlayerPos(playerid, x, y, z);
	interior = GetInterior(playerid);
	BankInfo[bankid][bPosX] = x;
	BankInfo[bankid][bPosY] = y;
	BankInfo[bankid][bPosZ] = z;
	BankInfo[bankid][bInterior] = interior;
	format(BankInfo[bankid][bInfo], 256, "%s", info);
	BankInfo[bankid][bBankOn] = 1;
	AddBankToFile(bankid, interior, info, x, y, z);
	format(msg, sizeof(msg), "A new bank was added, [Position: %f, %f, %f]", x, y, z);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:removebank(playerid,params[])
{
	new bankid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",bankid)) return SyntaxMSG(playerid, "/removebank [Bank-ID]");
	if(BankInfo[bankid][bBankOn])
	{
		format(query, sizeof(query), "DELETE FROM `banks` WHERE `id` = %d",BankInfo[bankid][bID]);
		mysql_function_query(dbHandle, query, true, "OnBankRemove", "i", bankid);
		format(msg,sizeof(msg),"You've destroyed dynamic bank id: %d!",bankid);
		SCM(playerid, COLOR_YELLOWG, msg);
	}
	else
	{
		SCM(playerid, -1,"ERROR: Dynamic Bank doesn't exist!");
	}
	return 1;
}

CMD:serverbanks(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	format(query, sizeof(query), "SELECT * FROM `banks`");
	mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Dynamic banks");
	return 1;
}

CMD:showbanks(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new string[1024];
	for(new i = 0; i < sizeof(BankInfo); i++)
	{
		if(BankInfo[i][bBankOn])
		{
			format(string, sizeof(string), "%s\n<%d>{66FF66}%s" ,string, i, BankInfo[i][bInfo]);
		}
	}
	ShowDialog(playerid,Show:<ShowBanks>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Banks:"EMBED_RED"",string,"Teleport","Cancel");
	return 1;
}

CMD:renamebank(playerid, params[])
{
	new text[256];
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"s[128]",text)) return SyntaxMSG(playerid, "/renamebank [new text]");
	for(new i = 0; i < sizeof(BankInfo); i++)
	{
		if (PlayerToPoint(3, playerid, BankInfo[i][bPosX], BankInfo[i][bPosY], BankInfo[i][bPosZ]))
		{
			format(query, sizeof(query), "UPDATE `banks` SET `info` = '%s' WHERE `id` = %d", text, BankInfo[i][bID]);
			mysql_function_query(dbHandle, query, true, "OnBankRenamed", "is", i,text);
			return 1;
		}
	}
	return 1;
}

CMD:whatbank(playerid, params[])
{
	new tt[256];
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	for(new i = 0; i < sizeof(BankInfo); i++)
	{
		if (PlayerToPoint(3, playerid,BankInfo[i][bPosX], BankInfo[i][bPosY], BankInfo[i][bPosZ]))
		{
			format(tt, sizeof(tt), "You're standing near dynamic bank: [Normal ID: %d] [MySQL ID: %d].", i,BankInfo[i][bID]);
			SCM(playerid, -1, tt);
			return 1;
		}
	}
	return 1;
}

CMD:jetpack(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	return 1;
}

CMD:vehtypes(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_YELLOWG, "1 - Renting Vehicle, 2 - DMV Vehicle, 3 - Renting Bike, 4 - DMV Helicopter, 5 - Police Car");
	SCM(playerid, COLOR_YELLOWG, "6 - Police TowTruck 7 - EMS Car 8 - Trucking Career");
	return 1;
}

CMD:makevehicle(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new model, vehid, type, faction, plate[256], info[256], color1, color2, Float:x, Float:y, Float:z, Float:a;
	if(sscanf(params,"dds[256]s[256]ddd", model, type, plate, info, color1, color2, faction)) return SyntaxMSG(playerid, "/makevehicle [Model-ID] [Type(/vehtypes)] [Plate] [Info] [color1] [color2] [faction]");
	GetPlayerPos(playerid, x, y ,z);
	GetPlayerFacingAngle(playerid, a);
	vehid = CreateVehicle(model, x, y, z, a, color1, color2, -1);
	CityVehicles[vehid][vModel] = model;
	CityVehicles[vehid][vPosX] = x;
	CityVehicles[vehid][vPosY] = y;
	CityVehicles[vehid][vPosZ] = z;
	CityVehicles[vehid][vPosA] = a;
	CityVehicles[vehid][vColor1] = color1;
	CityVehicles[vehid][vColor2] = color2;
	CityVehicles[vehid][vType] = type;
	CityVehicles[vehid][vFaction] = faction;
	format(CityVehicles[vehid][vInfo], 256, "%s", info);
	format(CityVehicles[vehid][vPlate], 256, "%s", plate);
	CityVehicles[vehid][vCarOn] = 1;
	CityVehicles[vehid][vVehicle] = vehid;
	SetVehicleNumberPlate(CityVehicles[vehid][vVehicle], plate);
	PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+2);
	AddVehicleToFile(vehid, type, faction, model, x, y, z, a, color1, color2, info, plate);
	format(msg, sizeof(msg), "A new vehicle was added, [Model: %d, Info: %s, Plate: %s, Type: %d, Faction: %d]", model, info, plate, type, faction);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:editvehicle(playerid, params[])
{
	new text[256], type, vehid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"dds[256]",vehid,type,text)) return SyntaxMSG(playerid, "/editvehicle [Vehicle-ID] [type(1-Plate,2-Info,3-Type,4-Color1,5-Color2,6-Model,7-Faction)] [input]");
	new vehselect = strval(text);

	if(type == 1)
	{
		if(CityVehicles[vehid][vCarOn])
		{
			format(query, sizeof(query), "UPDATE `vehicles` SET `plate` = '%s' WHERE `id` = %d", text, CityVehicles[vehid][vID]);
			mysql_function_query(dbHandle, query, false, "", "");
			format(CityVehicles[vehid][vPlate],256,"%s",text);
			SetVehicleNumberPlate(CityVehicles[vehid][vVehicle], text);
			RespawnVehicle(CityVehicles[vehid][vVehicle]);
			SCM(playerid, COLOR_INFO, "Done.");
		}
		else return SCM(playerid, -1,"ERROR: Dynamic Vehicle doesn't exist!");
	}
	if(type == 2)
	{
		if(CityVehicles[vehid][vCarOn])
		{
			format(query, sizeof(query), "UPDATE `vehicles` SET `info` = '%s' WHERE `id` = %d", text, CityVehicles[vehid][vID]);
			mysql_function_query(dbHandle, query, false, "", "");
			format(CityVehicles[vehid][vInfo],256,"%s",text);
			SCM(playerid, COLOR_INFO, "Done.");
		}
		else return SCM(playerid, -1,"ERROR: Dynamic Vehicle doesn't exist!");
	}
	if(type == 3)
	{
		if(CityVehicles[vehid][vCarOn])
		{
			format(query, sizeof(query), "UPDATE `vehicles` SET `type` = %d WHERE `id` = %d", vehselect, CityVehicles[vehid][vID]);
			mysql_function_query(dbHandle, query, false, "", "");
			CityVehicles[vehid][vType] = vehselect;
			SCM(playerid, COLOR_INFO, "Done.");
		}
		else return SCM(playerid, -1,"ERROR: Dynamic Vehicle doesn't exist!");
	}
	if(type == 4)
	{
		if(CityVehicles[vehid][vCarOn])
		{
			format(query, sizeof(query), "UPDATE `vehicles` SET `color1` = %d WHERE `id` = %d", vehselect, CityVehicles[vehid][vID]);
			mysql_function_query(dbHandle, query, false, "", "");
			CityVehicles[vehid][vColor1] = vehselect;
			ChangeVehicleColor(CityVehicles[vehid][vVehicle], vehselect, CityVehicles[vehid][vColor2]);
			SCM(playerid, COLOR_INFO, "Done.");
		}
		else return SCM(playerid, -1,"ERROR: Dynamic Vehicle doesn't exist!");
	}
	if(type == 5)
	{
		if(CityVehicles[vehid][vCarOn])
		{
			format(query, sizeof(query), "UPDATE `vehicles` SET `color2` = %d WHERE `id` = %d", vehselect, CityVehicles[vehid][vID]);
			mysql_function_query(dbHandle, query, false, "", "");
			CityVehicles[vehid][vColor2] = vehselect;
			ChangeVehicleColor(CityVehicles[vehid][vVehicle], CityVehicles[vehid][vColor1], vehselect);
			SCM(playerid, COLOR_INFO, "Done.");
		}
		else return SCM(playerid, -1,"ERROR: Dynamic Vehicle doesn't exist!");
	}
	if(type == 6)
	{
		if(CityVehicles[vehid][vCarOn])
		{
			format(query, sizeof(query), "UPDATE `vehicles` SET `model` = %d WHERE `id` = %d", vehselect, CityVehicles[vehid][vID]);
			mysql_function_query(dbHandle, query, false, "", "");
			CityVehicles[vehid][vModel] = vehselect;
			DestoryCar(CityVehicles[vehid][vVehicle]);
			CityVehicles[vehid][vVehicle] = CreateVehicle(vehselect, CityVehicles[vehid][vPosX], CityVehicles[vehid][vPosY], CityVehicles[vehid][vPosZ], CityVehicles[vehid][vPosA], CityVehicles[vehid][vColor1], CityVehicles[vehid][vColor2], -1);
			SetVehicleNumberPlate(CityVehicles[vehid][vVehicle], CityVehicles[vehid][vPlate]);
			SCM(playerid, COLOR_INFO, "Done.");
		}
		else return SCM(playerid, -1,"ERROR: Dynamic Vehicle doesn't exist!");
	}
	if(type == 7)
	{
		if(CityVehicles[vehid][vCarOn])
		{
			format(query, sizeof(query), "UPDATE `vehicles` SET `faction` = %d WHERE `id` = %d", vehselect, CityVehicles[vehid][vID]);
			mysql_function_query(dbHandle, query, false, "", "");
			CityVehicles[vehid][vFaction] = vehselect;
			SCM(playerid, COLOR_INFO, "Done.");
		}
		else return SCM(playerid, -1,"ERROR: Dynamic Vehicle doesn't exist!");
	}

	return 1;
}

CMD:avehiclepark(playerid, params[])
{
	new vehid, Float:x, Float:y, Float:z, Float:a;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",vehid)) return SyntaxMSG(playerid, "/avehiclepark [Vehicle-ID]");
	if(CityVehicles[vehid][vCarOn])
	{
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);
		format(query, sizeof(query), "UPDATE `vehicles` SET `posx` = %f, `posy` = %f, `posz` = %f, `posa` = %f WHERE `id` = %d", x, y, z, a, CityVehicles[vehid][vID]);
		mysql_function_query(dbHandle, query, false, "", "");
		CityVehicles[vehid][vPosX] = x;
		CityVehicles[vehid][vPosY] = y;
		CityVehicles[vehid][vPosZ] = z;
		CityVehicles[vehid][vPosA] = a;
		DestoryCar(CityVehicles[vehid][vVehicle]);
		CityVehicles[vehid][vVehicle] = CreateVehicle(CityVehicles[vehid][vModel], CityVehicles[vehid][vPosX], CityVehicles[vehid][vPosY], CityVehicles[vehid][vPosZ], CityVehicles[vehid][vPosA], CityVehicles[vehid][vColor1], CityVehicles[vehid][vColor2], -1);
		SetVehicleNumberPlate(CityVehicles[vehid][vVehicle], CityVehicles[vehid][vPlate]);
		PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+5);
	}
	else return SCM(playerid, -1,"ERROR: Dynamic Vehicle doesn't exist!");
	return 1;
}

CMD:areparkvehicle(playerid, params[])
{
	new vehid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",vehid)) return SyntaxMSG(playerid, "/avehiclepark [Vehicle-ID]");
	if(CityVehicles[vehid][vCarOn])
	{
		RespawnVehicle(CityVehicles[vehid][vVehicle]);
	}
	else return SCM(playerid, -1,"ERROR: Dynamic Vehicle doesn't exist!");
	return 1;
}

CMD:whatvehicle(playerid, params[])
{
	new tt[256];
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	for(new i = 0; i < sizeof(CityVehicles); i++)
	{
		if(PlayerInCar(playerid) && CityVehicles[i][vCarOn] && GetPlayerVehicleID(playerid) == CityVehicles[i][vVehicle])
		{
			format(tt, sizeof(tt), "You're driving in vehicle: [Normal ID: %d] [MySQL ID: %d].", i,CityVehicles[i][vID]);
			SCM(playerid, -1, tt);
			return 1;
		}
	}
	return 1;
}

CMD:servervehicles(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	format(query, sizeof(query), "SELECT * FROM `vehicles`");
	mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Dynamic vehicles");
	return 1;
}

CMD:showvehicles(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new string[1500];
	for(new i = 1; i < MAX_VEHICLES; i++)
	{
		if(CityVehicles[i][vCarOn])
		{
			format(string, sizeof(string), "%s\n<%d>%s, Plate: %s, Type: %d, Faction: %d" ,string, i, CityVehicles[i][vInfo], CityVehicles[i][vPlate], CityVehicles[i][vType], CityVehicles[i][vFaction]);
		}
	}
	ShowDialog(playerid,Show:<ShowVehicles>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Vehicles:"EMBED_RED"",string,"Teleport","Cancel");
	return 1;
}
CMD:tracephone(playerid,params[])
{
  new faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(CopDuty{playerid})
    {
        new number;
        if(sscanf(params,"u",number)) return SyntaxMSG(playerid, "/tracephone [playerid/PartOfName]");
        if(number < 1 || number > 9999999999) { SendClientMessage(playerid,COLOR_LIGHTRED,"Numar invalid."); return 1; }
        for(new i = 0; i <= MAX_PLAYERS; i++)
        {
            if(IsPlayerConnected(i))
            {
				if(PlayerInfo[i][pNumber] == number)
				{
				    if(GetPlayerInterior(i) == 0)
				    {
				    	new Float:X, Float:Y, Float:Z;
						GetPlayerPos(i,X,Y,Z);
						SetPlayerCheckpoint(playerid,X,Y,Z,5.0);
						SCM(playerid,COLOR_WHITE,"Location of the phone number has been marked on the map.");
						return 1;
				    }
				    else
				    {
				        SCM(playerid,COLOR_LIGHTRED,"The connection could not be established.");
				        return 1;

				    }
				}
	        }
	    }
	}
	else
	{
		SCM(playerid,COLOR_WHITE,"Nu esti OnDuty");
	}
	return 1;
}
CMD:ram(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You need to be On-Duty...");
	for(new i = 0; i < sizeof(HouseInfo); i++)
	{
		if(PlayerToPoint(5, playerid,HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
		{
			SetPlayerPos(playerid,HouseInfo[i][hExitX],HouseInfo[i][hExitY],HouseInfo[i][hExitZ]);
			SetInterior(playerid,HouseInfo[i][hInterior]);
			SetWorld(playerid,HouseInfo[i][hWorld]);
			HouseEntered[playerid] = i;
			FreezePlayer(playerid);
			GameTextForPlayer(playerid, "~r~You ram the door...", 2000, 4);
			SetTimerEx("UnFreezePlayer", 1200, 0, "i", playerid);
			if(HouseInfo[i][hRadioOn] == 1)
			{
				PlayAudioStreamForPlayer(playerid, HouseInfo[i][hRadioURL]);
			}
			return 1;
		}
		if (PlayerToPoint(5, playerid,HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && HouseInfo[i][hWorld] == GetWorld(playerid))
		{
			if(HouseEntered[playerid] == i)
			{
				SetCameraBehindPlayer(playerid);
				SetPlayerPos(playerid,HouseInfo[i][hEntranceX],HouseInfo[i][hEntranceY],HouseInfo[i][hEntranceZ]);
				SetWorld(playerid,0);
				SetInterior(playerid,0);
				HouseEntered[playerid] = 0;
				StopAudioStreamForPlayer(playerid);
				if(HouseInfo[i][hRadioOn])
				{
					StopAudioStreamForPlayer(playerid);
				}
				return 1;
			}
		}
	}
    for(new i = 0; i < sizeof(BizInfo); i++)
	{
		if (PlayerToPoint(3, playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]))
		{
			SetPlayerPos(playerid,BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]);
			SetInterior(playerid,BizInfo[i][bizInterior]);
			SetWorld(playerid,BizInfo[i][bizWorld]);
			SCM(playerid, COLOR_WHITE, BizInfo[i][bizEnterMSG]);
			BizEntered[playerid] = i;
			FreezePlayer(playerid);
			GameTextForPlayer(playerid, "~r~Broken door...", 2000, 4);
			SetTimerEx("UnFreezePlayer", 1200, 0, "i", playerid);
			if(BizInfo[i][bizRadioOn] == 1)
			{
				PlayAudioStreamForPlayer(playerid, BizInfo[i][bizRadioURL]);
			}
			return 1;
		}
		if (PlayerToPoint(5, playerid,BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]) && GetWorld(playerid) == i)
		{
			SetPlayerPos(playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]);
			SetInterior(playerid,0);
			SetWorld(playerid,0);
			BizEntered[playerid] = -1;
			FreezePlayer(playerid);
			SetTimerEx("UnFreezePlayer", 1000, 0, "i", playerid);
			if(BizInfo[i][bizRadioOn])
			{
				StopAudioStreamForPlayer(playerid);
			}
			return 1;
		}
	}
	return 1;
}
CMD:radar(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty...");
	new vehicle = GetPlayerVehicleID(playerid);
	if(IsACopCar(vehicle))
	{
		if(radar[playerid] == 0)
		{
			radar[playerid] = 1;
			SCM(playerid,COLOR_LIGHTGREEN,"You started the radar, use /radaroff to stop it");
		}
		else
		{
		    SCM(playerid,COLOR_LIGHTGREEN,"Use /radaroff");
		}
	}
	return 1;
}
CMD:radaroff(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
	if(!CopDuty{playerid}) return SCM(playerid, COLOR_LIGHTRED, "You must be On-Duty...");
	new vehicle = GetPlayerVehicleID(playerid);
    if(IsACopCar(vehicle))
	{
		if(radar[playerid] == 1)
		{
			radar[playerid] = 0;
			SCM(playerid,COLOR_LIGHTGREEN,"You stopped the rada, use /radar to start it");
		}
		else
		{
		    SCM(playerid,COLOR_LIGHTGREEN,"Use /radar to start it");
		}
	}
	return 1;
}
CMD:backup(playerid, params[])
{
	new option[11];
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"s[11]",option)) return SyntaxMSG(playerid, "/backup [(players,houses,businesses,vehicles)], Do NOT spam 'houses' nor 'businesses'.");
	if(CompareStrings(option, "players"))
	{
		format(msg, sizeof(msg), "AdmCmd: %s has backed up the players' stats.", GetNameEx(playerid));
		foreach(Player, i)
		{
			SavePlayerStats(i);
		}
	}
	if(CompareStrings(option, "vehicles"))
	{
		format(msg, sizeof(msg), "AdmCmd: %s has backed up the players' vehicles.", GetNameEx(playerid));
		for(new i = 0; i < MAX_VEHICLES; i++)
		{
			if(VehicleInfo[i][carOwned] == 1)
			{
				SaveVehicle(i);
			}
		}
	}
	if(CompareStrings(option, "houses"))
	{
		format(msg, sizeof(msg), "AdmCmd: %s has backed up the players' houses.", GetNameEx(playerid));
		for(new i = 0; i < MAX_HOUSES; i++)
		{
			if(HouseInfo[i][hOwned] == 1)
			{
				UpdateHouseInfo(i);
			}
		}
	}
	if(CompareStrings(option, "businesses"))
	{
		format(msg, sizeof(msg), "AdmCmd: %s has backed up the players' businesses.", GetNameEx(playerid));
		for(new i = 0; i < MAX_BIZ; i++)
		{
			if(BizInfo[i][bizOn] == 1)
			{
				UpdateBizInfo(i);
			}
		}
	}
	AMSG(COLOR_LIGHTRED, msg);
	return 1;
}

CMD:makeatm(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new atmid, atminfo[256], interior, Float:x, Float:y, Float:z;
	if(sscanf(params,"s[256]", atminfo)) return SyntaxMSG(playerid, "/makeatm [Info]");
	atmid = GetNextATMID();
	GetPlayerPos(playerid, x, y, z);
	interior = GetInterior(playerid);
	ATMInfo[atmid][atmPosX] = x;
	ATMInfo[atmid][atmPosY] = y;
	ATMInfo[atmid][atmPosZ] = z;
	ATMInfo[atmid][atmAtmOn] = 1;
	ATMInfo[atmid][atmInterior] = interior;
	format(ATMInfo[atmid][atmInfo], 256, "%s", atminfo);
	format(msg, sizeof(msg), ""EMBED_ORANGE"["EMBED_YELLOW"ATM-%d"EMBED_ORANGE"]\n"EMBED_WHITE"%s.\n"EMBED_LIGHTBLUE"/withdraw /balance", atmid, atminfo);
	ATMInfo[atmid][atmLabel] = CreateDynamic3DTextLabel(msg, -1, x, y, z, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 100.0);
	ATMInfo[atmid][atmPickUp] = CreateDynamicPickup(1274, 1, x, y, z, 0, -1, -1, 100.0);
	AddATMToFile(atmid, atminfo, interior, x, y, z);
	format(msg, sizeof(msg), "A new ATM was added, [Info: %s, ID: %d]", atminfo, atmid);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:removeatm(playerid,params[])
{
	new AtmID;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	AtmID = GetClosestATMID(playerid);
	DestroyDynamic3DTextLabel(Text3D:ATMInfo[AtmID][atmLabel]);
	DestroyDynamicPickup(ATMInfo[AtmID][atmPickUp]);
	format(query, sizeof(query), "DELETE FROM `atms` WHERE `id` = %d",ATMInfo[AtmID][atmID]);
	mysql_function_query(dbHandle, query, true, "OnATMRemove", "i", AtmID);
	format(msg,sizeof(msg),"You've destroyed ATM id: %d!",AtmID);
	SCM(playerid, COLOR_YELLOWG, msg);
	return 1;
}

CMD:editatm(playerid, params[])
{
	new info[256], atmid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"s[256]",info)) return SyntaxMSG(playerid, "/editatm [Text]");
	atmid = GetClosestATMID(playerid);
	if(ATMInfo[atmid][atmAtmOn])
	{
		format(query, sizeof(query), "UPDATE `atms` SET `info` = '%s' WHERE `id` = %d", info, ATMInfo[atmid][atmID]);
		mysql_function_query(dbHandle, query, false, "", "");
		format(msg, sizeof(msg), ""EMBED_ORANGE"["EMBED_YELLOW"ATM-%d"EMBED_ORANGE"]\n"EMBED_WHITE"%s.\n"EMBED_LIGHTBLUE"/withdraw /balance", atmid, info);
		format(ATMInfo[atmid][atmInfo],256,"%s",info);
		UpdateDynamic3DTextLabelText(Text3D:ATMInfo[atmid][atmLabel], -1, msg);
	}
	else return SCM(playerid, -1,"ERROR: Dynamic ATM doesn't exist!");
	return 1;
}

CMD:showatms(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new string[1024];
	for(new i = 0; i < sizeof(ATMInfo); i++)
	{
		if(ATMInfo[i][atmAtmOn])
		{
			format(string, sizeof(string), "%s\n<%d>{66FF66}Info: %s" ,string, i, ATMInfo[i][atmInfo]);
		}
	}
	ShowDialog(playerid,Show:<ShowATMS>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin ATM's:"EMBED_RED"",string,"Teleport","Cancel");
	return 1;
}

CMD:serveratms(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	format(query, sizeof(query), "SELECT * FROM `atms`");
	mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Dynamic ATM's");
	return 1;
}


CMD:makegstation(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new stationid, price, stationinfo[256], Float:x, Float:y, Float:z;
	if(sscanf(params,"ds[256]", price, stationinfo)) return SyntaxMSG(playerid, "/makegasstation [price for refill] [info]");
	stationid = GetNextStationID();
	GetPlayerPos(playerid, x, y, z);
	GasStation[stationid][gPosX] = x;
	GasStation[stationid][gPosY] = y;
	GasStation[stationid][gPosZ] = z;
	GasStation[stationid][gPrice] = price;
	GasStation[stationid][gStationOn] = 1;
	format(GasStation[stationid][ggInfo], 256, "%s", stationinfo);
	format(msg, sizeof(msg), ""EMBED_WHITE"["EMBED_GREEN"Gas Station-%d"EMBED_WHITE"]\n"EMBED_YELLOW"%s.\n"EMBED_GREEN"/refill price - $%d.", stationid, stationinfo, price);
	GasStation[stationid][gLabel] = CreateDynamic3DTextLabel(msg, -1, x, y, z, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	GasStation[stationid][gPickUp] = CreateDynamicPickup(1239, 1, x, y, z, -1, -1, -1, 100.0);
	AddStationToFile(stationid, stationinfo, price, x, y, z);
	format(msg, sizeof(msg), "A new Gas Station was added, [Info: %s, Price: %d, ID: %d]", stationinfo, price, stationid);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:editgstation(playerid, params[])
{
	new info[256], price, stationid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"ds[256]",price,info)) return SyntaxMSG(playerid, "/editgstation [price] [info]");
	stationid = GetClosestStationID(playerid);
	format(query, sizeof(query), "UPDATE `atms` SET `info` = '%s', `price` = %d WHERE `id` = %d", info, price, GasStation[stationid][gID]);
	mysql_function_query(dbHandle, query, false, "", "");
	format(msg, sizeof(msg), ""EMBED_WHITE"["EMBED_GREEN"Gas Station-%d"EMBED_WHITE"]\n"EMBED_YELLOW"%s.\n"EMBED_GREEN"/refill price - $%d.", stationid, info, price);
	format(GasStation[stationid][ggInfo],256,"%s",info);
	UpdateDynamic3DTextLabelText(Text3D:GasStation[stationid][gLabel], -1, msg);
	GasStation[stationid][gPrice] = price;
	return 1;
}

CMD:removegstation(playerid,params[])
{
	new stationid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	stationid = GetClosestStationID(playerid);
	DestroyDynamic3DTextLabel(Text3D:GasStation[stationid][gLabel]);
	DestroyDynamicPickup(GasStation[stationid][gPickUp]);
	format(query, sizeof(query), "DELETE FROM `gstations` WHERE `id` = %d",GasStation[stationid][gID]);
	mysql_function_query(dbHandle, query, true, "OnStationRemove", "i", stationid);
	format(msg,sizeof(msg),"You've destroyed Gas Station id: %d!",stationid);
	SCM(playerid, COLOR_YELLOWG, msg);
	return 1;
}

CMD:showstations(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new string[1024];
	for(new i = 0; i < sizeof(GasStation); i++)
	{
		if(GasStation[i][gStationOn])
		{
			format(string, sizeof(string), "%s\n<%d>{66FF66}Info: %s" ,string, i, GasStation[i][ggInfo]);
		}
	}
	ShowDialog(playerid,Show:<ShowStations>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Gas Station's:"EMBED_RED"",string,"Teleport","Cancel");
	return 1;
}

CMD:servergstations(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	format(query, sizeof(query), "SELECT * FROM `gstations`");
	mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Dynamic Gas Station's");
	return 1;
}

CMD:getstats(playerid, params[])
{
	new id;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/getstats [playerid/PartOfNames]");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	ShowStats(playerid, id);
	return 1;
}

CMD:makehouse(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new houseid, price, houseinfo[256], Float:x, Float:y, Float:z;
	if(sscanf(params,"dds[256]", price, houseinfo)) return SyntaxMSG(playerid, "/makehouse [buylevel] [price] [info]");
	houseid = GetNextHouseID();
	GetPlayerPos(playerid, x, y, z);
	HouseInfo[houseid][hEntranceX] = x;
	HouseInfo[houseid][hEntranceY] = y;
	HouseInfo[houseid][hEntranceZ] = z;
	HouseInfo[houseid][hExitX] = 0.0;
	HouseInfo[houseid][hExitY] = 0.0;
	HouseInfo[houseid][hExitZ] = 0.0;
	HouseInfo[houseid][hCheckPosX] = 0.0000;
	HouseInfo[houseid][hCheckPosY] = 0.0000;
	HouseInfo[houseid][hCheckPosZ] = 0.0000;
	HouseInfo[houseid][hPrice] = price;
	HouseInfo[houseid][hOwned] = 0;
	HouseInfo[houseid][hLocked] = 1;
	HouseInfo[houseid][hRentprice] = 0;
	HouseInfo[houseid][hRentable] = 0;
	HouseInfo[houseid][hInterior] = 0;
	HouseInfo[houseid][hWorld] = 0;
	HouseInfo[houseid][hCash] = 0;
	HouseInfo[houseid][hRadio] = 0;
	format(HouseInfo[houseid][hInfo], 256, "%s", houseinfo);
	format(HouseInfo[houseid][hOwner], 256, "The State");
	HouseInfo[houseid][hHouseOn] = 1;

	format(msg, sizeof(msg), ""EMBED_YELLOW"["EMBED_WHITE"House ID %d"EMBED_YELLOW"]\n"EMBED_WHITE"%s\n"EMBED_GREEN"Price: $%d", houseid, houseinfo, price);
	HouseInfo[houseid][hLabel] = CreateDynamic3DTextLabel(msg, -1, x, y, z, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	HouseInfo[houseid][hCheckPoint] = CreateDynamicCP(x, y, z, 1.0, -1, -1, -1, 2.0);
	AddHouseToFile(houseid, price, houseinfo, x, y, z);
	format(msg, sizeof(msg), "A new House was added, [Price: %d, House Info: %s]", price, houseinfo);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:removehouse(playerid,params[])
{
	new houseid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	houseid = GetClosestHouseID(playerid);
	DestroyDynamic3DTextLabel(Text3D:HouseInfo[houseid][hLabel]);
	DestroyDynamicCP(HouseInfo[houseid][hCheckPoint]);
	format(query, sizeof(query), "DELETE FROM `houses` WHERE `id` = %d",HouseInfo[houseid][hID]);
	mysql_function_query(dbHandle, query, true, "OnHouseRemove", "i", houseid);
	format(msg,sizeof(msg),"You've destroyed dynamic house id: %d!",houseid);
	SCM(playerid, COLOR_YELLOWG, msg);
	return 1;
}

CMD:asellhouse(playerid, params[])
{
	new houseid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",houseid)) return SyntaxMSG(playerid, "/asellhouse [houseid]");
	if(!HouseInfo[houseid][hHouseOn]) return SCM(playerid, -1, "Invalid house ID.");
	if(!HouseInfo[houseid][hOwned]) return SCM(playerid, -1, "No one bought this house.");
	if(PlayerIsOn(GetIDByName(HouseInfo[houseid][hOwner])))
	{
		PlayerInfo[GetIDByName(HouseInfo[houseid][hOwner])][pHouseKey] = -1;
		format(msg, sizeof(msg), "Admin %s has just sold your house to the market, you are now homeless.", GetNameEx(playerid));
		HouseMSG(GetIDByName(HouseInfo[houseid][hOwner]), msg);
	}
	format(query, sizeof(query), "UPDATE `users` SET `housekey` = %d WHERE `name` = '%s'", -1, HouseInfo[houseid][hOwner]);
	mysql_function_query(dbHandle, query, false, "", "");
	format(query, sizeof(query), "UPDATE `houses` SET `owner` = '%s', `owned` = %d, `locked` = %d, `rentprice` = %d, `rentable` = %d, `cash` = %d, `checkx` = %f, `checky` = %f, `checkz` = %f WHERE `id` = %d", "The State", 0, 1, 0, 0, 0, 0.0, 0.0, 0.0, HouseInfo[houseid][hID]);
	mysql_function_query(dbHandle, query, true, "OnAdminSellHouse", "i", houseid);
	return 1;
}

CMD:houseenter(playerid,params[])
{
	new houseid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",houseid)) return SyntaxMSG(playerid, "/houseenter [House-ID]");
	if(!HouseInfo[houseid][hHouseOn]) return SCM(playerid, -1, "Invalid house id.");
	DestroyDynamic3DTextLabel(Text3D:HouseInfo[houseid][hLabel]);
	DestroyDynamicCP(HouseInfo[houseid][hCheckPoint]);
	if(HouseInfo[houseid][hOwned] == 0)
	{
		format(msg, sizeof(msg), ""EMBED_YELLOW"["EMBED_WHITE"House ID %d"EMBED_YELLOW"]\n"EMBED_WHITE"%s\n"EMBED_GREEN"Price: $%d", houseid, HouseInfo[houseid][hInfo], HouseInfo[houseid][hPrice]);
	}
	else
	{
		format(msg, sizeof(msg), ""EMBED_YELLOW"["EMBED_WHITE"House ID %d"EMBED_YELLOW"]\n"EMBED_WHITE"%s", houseid, HouseInfo[houseid][hInfo]);
	}
	HouseInfo[houseid][hLabel] = CreateDynamic3DTextLabel(msg, -1, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid), 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	HouseInfo[houseid][hCheckPoint] = CreateDynamicCP(PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid), 1.0, -1, -1, -1, 2.0);
	format(query, sizeof(query), "UPDATE `houses` SET `posx` = %f, `posy` = %f, `posz` = %f WHERE `id` = %d", PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid), HouseInfo[houseid][hID]);
	mysql_function_query(dbHandle, query, true, "OnHouseMoved", "ifff", houseid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid));
	return 1;
}

CMD:houseexit(playerid,params[])
{
	new houseid, interior, world;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",houseid)) return SyntaxMSG(playerid, "/houseexit [House-ID]");
	if(!HouseInfo[houseid][hHouseOn]) return SCM(playerid, -1, "Invalid house id.");
	interior = GetInterior(playerid);
	world = houseid;
	format(query, sizeof(query), "UPDATE `houses` SET `exitx` = %f, `exity` = %f, `exitz` = %f, `interior` = %d, `world` = %d WHERE `id` = %d", PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid), interior, world, HouseInfo[houseid][hID]);
	mysql_function_query(dbHandle, query, true, "OnHouseExitMoved", "iiifff", houseid, interior, world, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid));
	SCM(playerid, -1, "Done");
	return 1;
}

CMD:edithouse(playerid, params[])
{
	new text[128], type, houseid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"ds[256]",type,text)) return SyntaxMSG(playerid, "/edithouse [(1-Price,2-Level,3-Info,4-World)] [input]");
	houseid = GetClosestHouseID(playerid);
	new input = strval(text);

	if(type == 1)
	{
		format(query, sizeof(query), "UPDATE `houses` SET `price` = %d WHERE `id` = %d", input, HouseInfo[houseid][hID]);
		mysql_function_query(dbHandle, query, false, "", "");
		HouseInfo[houseid][hPrice] = input;
		if(HouseInfo[houseid][hOwned] == 0)
		{
			UpdateHouseText(houseid);
		}
	}
	if(type == 2)
	{
		format(query, sizeof(query), "UPDATE `houses` SET `levelbuy` = %d WHERE `id` = %d", input, HouseInfo[houseid][hID]);
		mysql_function_query(dbHandle, query, false, "", "");
		HouseInfo[houseid][hLevelbuy] = input;
		if(HouseInfo[houseid][hOwned] == 0)
		{
			UpdateHouseText(houseid);
		}
	}
	if(type == 3)
	{
		format(query, sizeof(query), "UPDATE `houses` SET `info` = '%s' WHERE `id` = %d", text, HouseInfo[houseid][hID]);
		mysql_function_query(dbHandle, query, false, "", "");
		format(HouseInfo[houseid][hInfo], 128, "%s", text);
		if(HouseInfo[houseid][hOwned] == 0)
		{
			UpdateHouseText(houseid);
		}
	}
	if(type == 4)
	{
		format(query, sizeof(query), "UPDATE `houses` SET `world` = %d WHERE `id` = %d", input, HouseInfo[houseid][hID]);
		mysql_function_query(dbHandle, query, false, "", "");
		HouseInfo[houseid][hWorld] = input;
	}

	return 1;
}

CMD:setkevlar(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
    if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
    if (Kevlar[playerid] == 0)
    {
        SetPlayerAttachedObject(playerid, 1, 19142, 1, 0.098, 0.039);
        Kevlar[playerid] = 1;
        SendClientMessage(playerid, -1, "You just got yourself with the kevlar vest.");
    }
    else
    {
        SCM(playerid, COLOR_YELLOWG,"Use /kevlaroff to be able to get off.");
    }
    return 1;
}

CMD:kevlaroff(playerid, params[])
{
  new faction = PlayerInfo[playerid][pFaction];
  if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
  if (Kevlar[playerid] == 1)
  {
    RemovePlayerAttachedObject(playerid, 1);
    Kevlar[playerid] = 0;
    SendClientMessage(playerid, -1, "You just drop the kevlar vest.");
  }
  else
  {
    SCM(playerid, COLOR_YELLOWG,"You don't have a bullet proof vest.");
  }
  return 1;
}

CMD:kevlaredit(playerid, params[])
{
  new faction = PlayerInfo[playerid][pFaction];
  if(faction != LSPD && faction != SASD) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction.");
      if(Kevlar[playerid] == 0) return SCM(playerid, COLOR_LIGHTRED, "You do not have a kevlar vest.");
  EditAttachedObject(playerid, 1);
  return 1;
}

CMD:gotohouse(playerid, params[])
{
	new houseid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",houseid)) return SyntaxMSG(playerid, "/gotohouse [House-ID]");
	if(!HouseInfo[houseid][hHouseOn]) return SCM(playerid, -1, "Invalid house id.");
	PutPlayer(playerid, HouseInfo[houseid][hEntranceX], HouseInfo[houseid][hEntranceY], HouseInfo[houseid][hEntranceZ]);
	return 1;
}

CMD:serverhouses(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	format(query, sizeof(query), "SELECT * FROM `houses`");
	mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Dynamic Houses");
	return 1;
}

CMD:makefoodstand(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new standid, standinfo[256], Float:x, Float:y, Float:z;
	if(sscanf(params,"s[256]", standinfo)) return SyntaxMSG(playerid, "/makefoodstand [info]");
	standid = GetNextFoodStandID();
	GetPlayerPos(playerid, x, y, z);
	FoodStand[standid][fPosX] = x;
	FoodStand[standid][fPosY] = y;
	FoodStand[standid][fPosZ] = z;
	FoodStand[standid][fPosRX] = 0.0;
	FoodStand[standid][fPosRY] = 0.0;
	FoodStand[standid][fPosRZ] = 0.0;
	format(FoodStand[standid][fInfo], 256, "%s", standinfo);
	FoodStand[standid][fStandOn] = 1;
	FoodStand[standid][fObject] = CreateDynamicObject(1340, FoodStand[standid][fPosX], FoodStand[standid][fPosY], FoodStand[standid][fPosZ], FoodStand[standid][fPosRX], FoodStand[standid][fPosRY], FoodStand[standid][fPosRZ], -1, -1, -1, 200.0);
	FoodStand[standid][fPosX] += 1.5;
	format(msg, sizeof(msg), ""EMBED_RED"["EMBED_WHITE"Food Stall - %d"EMBED_RED"]\n"EMBED_CYAN"%s\n/buyfood.", standid, FoodStand[standid][fInfo]);
	FoodStand[standid][fLabel] = CreateDynamic3DTextLabel(msg, -1, FoodStand[standid][fPosX], FoodStand[standid][fPosY], FoodStand[standid][fPosZ], 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	FoodStand[standid][fPickUp] = CreateDynamicPickup(1239, 1, FoodStand[standid][fPosX], FoodStand[standid][fPosY], FoodStand[standid][fPosZ], -1, -1, -1, 100.0);
	AddFoodStandToFile(standid, standinfo, x, y, z);
	format(msg, sizeof(msg), "A new Food Stnad was added you may /editfoodstand, [Info: %s]", standinfo);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:removefoodstand(playerid,params[])
{
	new standid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	standid = GetClosestFoodStandID(playerid);
	DestroyDynamicObject(FoodStand[standid][fObject]);
	DestroyDynamic3DTextLabel(Text3D:FoodStand[standid][fLabel]);
	DestroyDynamicPickup(FoodStand[standid][fPickUp]);
	format(query, sizeof(query), "DELETE FROM `foodstands` WHERE `id` = %d",FoodStand[standid][fID]);
	mysql_function_query(dbHandle, query, true, "OnFoodStandRemove", "i", standid);
	format(msg,sizeof(msg),"You've destroyed dynamic food stand id: %d!",standid);
	SCM(playerid, COLOR_YELLOWG, msg);
	return 1;
}

CMD:editfoodstand(playerid, params[])
{
	new text[128], type, standid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"ds[256]",type,text)) return SyntaxMSG(playerid, "/editfoodstand [(1-Info,2-Object)] [input]");
	standid = GetClosestFoodStandID(playerid);
	if(type == 1)
	{
		format(query, sizeof(query), "UPDATE `foodstands` SET `info` = '%s' WHERE `id` = %d", text, FoodStand[standid][fID]);
		mysql_function_query(dbHandle, query, false, "", "");
		format(FoodStand[standid][fInfo], 128, "%s", text);
		format(msg, sizeof(msg), ""EMBED_RED"["EMBED_WHITE"Food Stall - %d"EMBED_RED"]\n"EMBED_CYAN"%s\n/buyfood.", standid, text);
		UpdateDynamic3DTextLabelText(Text3D:FoodStand[standid][fLabel], -1, msg);
	}
	if(type == 2)
	{
		SetIntVar(playerid, "EditingFoodStand", 1);
		SetIntVar(playerid, "FoodStandEditing", standid);
		EditDynamicObject(playerid, FoodStand[standid][fObject]);
	}
	return 1;
}

CMD:serverfoodstalls(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	format(query, sizeof(query), "SELECT * FROM `foodstands`");
	mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Dynamic Food Stalls");
	return 1;
}

CMD:showstalls(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new string[1024];
	for(new i = 0; i < sizeof(FoodStand); i++)
	{
		if(FoodStand[i][fStandOn])
		{
			format(string, sizeof(string), "%s\n<%d>{66FF66}%s" ,string, i, FoodStand[i][fInfo]);
		}
	}
	ShowDialog(playerid,Show:<ShowFoodStalls>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Stalls's:"EMBED_RED"",string,"Teleport","Cancel");
	return 1;
}

CMD:checkhackers(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	foreach(Player, i)
	{
		new money = GetPlayerMoney(i);
		if(money > PlayerInfo[i][pCash])
		{
			format(msg, sizeof(msg), "WARNING: [ID:%d]%s uses a hack for Money.", i, GetNameEx(i));
			SCM(playerid, COLOR_LIGHTRED, msg);
		}
		if (GetPlayerWeapon(i) != 0 && !Weapons[i][GetPlayerWeapon(i)] && GetPlayerWeapon(i) != 46)
		{
			format(msg, sizeof(msg), "WARNING: [ID:%d]%s uses a hack for Weapons.", i, GetNameEx(i));
			SCM(playerid, COLOR_LIGHTRED, msg);
		}
	}
	return 1;
}
CMD:rollwindow(playerid,params[])
{
    if(!IsDriver(playerid)) return NotInCarMSG(playerid);
    if(sscanf(params, "d", params[0]))
    {
        SyntaxMSG(playerid, "/rollwindow [ID WINDOW]");
        SendClientMessage(playerid,-1,"1 - Window next to the driver (left) | 2 - Window next to the passenger (right) | 3 - Rear window (left) | 4 - Rear window (right)");
        return 1;
    }
    if(params[0] > 4 || params[0] < 1) return SendClientMessage(playerid,-1,"1 - Window next to the driver (left) | 2 - Window next to the passenger (right) | 3 - Rear window (left) | 4 - Rear window (right)");
    new driver, passenger, backleft, backright;
    GetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), driver, passenger, backleft, backright);
    switch(params[0])
    {
        case 1: driver = !driver ? (1) : (0);
        case 2: passenger = !passenger ? (1) : (0);
        case 3: backleft = !backleft ? (1) : (0);
        case 4: backright = !backright ? (1) : (0);
    }
    SetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), driver, passenger, backleft, backright);
    return 1;
}

CMD:unlockcar(playerid, params[])
{
	new vehicle = GetPlayerVehicleID(playerid);
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
    if(sscanf(params, "i", vehicle)) return SyntaxMSG(playerid, "/unlockcar [Car Id]");
    VehicleInfo[vehicle][carLock] = 0;
    SetVehicleParamsForPlayer(vehicle, playerid, 0, 0);
    SendClientMessage(playerid,COLOR_YELLOW,"Car id has been unblocked.");
	return 1;
}

CMD:givegun(playerid, params[])
{
	new id, slot, wepid, ammo, wepname[128];
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5)) return NotAuthMSG(playerid);
	if(sscanf(params,"uddd", id, slot, wepid, ammo)) return SyntaxMSG(playerid, "/givegun [playerid/PartOfNames] [WepSlot (1-Melee,2-Primary,3-Secondary)] [WepID] [Ammo]");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(wepid >= 36 && wepid <= 40 || wepid >= 42 && wepid <= 46) return SCM(playerid, -1, "[ERROR]: You may not give him these weapons.");
	if(slot == 1 && !IsMeleeWeapon(wepid)) return SCM(playerid, -1, "[ERROR]: Invalid melee weapon, (1-15).");
	if(slot == 2 && !IsPrimaryWeapon(wepid)) return SCM(playerid, -1, "[ERROR]: Invalid primary weapon, (22-24).");
	if(slot == 3 && !IsSecondaryWeapon(wepid)) return SCM(playerid, -1, "[ERROR]: Invalid secondary weapon, (25/28-35).");
	GetWeaponName(wepid, wepname, sizeof(wepname));
	if(slot == 1)
	{
		GiveMeleeWeapon(id, wepid);
	}
	else if(slot == 2)
	{
		GivePermWeapon(id, 2, wepid, ammo);
	}
	else if(slot == 3)
	{
		GivePermWeapon(id, 3, wepid, ammo);
	}
	format(msg, sizeof(msg), "Admin %s gave you a perm weapon, Weapon: %s, Ammo: %d. [You will now spawn with it].", GetNameEx(playerid), wepname, ammo);
	SCM(id, COLOR_YELLOWG, msg);
	format(msg, sizeof(msg), "AdmCmd: %s has just given %s a perm weapon. (%s, Ammo: %d)", GetNameEx(playerid), GetNameEx(id), wepname, ammo);
	AMSG(COLOR_LIGHTRED, msg);
	return 1;
}


CMD:showdealers(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5)) return NotAuthMSG(playerid);
	new string[1024];
	for(new i = 0; i < sizeof(DealersInfo); i++)
	{
		if(DealersInfo[i][dealerOn])
		{
			format(string, sizeof(string), "%s\n<%d>{66FF66}%s" ,string, i, DealersInfo[i][dealerInfo]);
		}
	}
	ShowDialog(playerid,Show:<ShowDealerships>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Dealerships:"EMBED_RED"",string,"Teleport","Cancel");
	return 1;
}

CMD:masked(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_GREY, "All players who wear mask:");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(PlayerIsOn(i))
		{
			if(maskOn{i})
			{
				format(msg, 256, "(ID:%d)%s - Mask ID: %d", i, GetNameEx(i), GetMaskID(i));
				SCM(playerid, COLOR_GREY, msg);
			}
		}
	}
	return 1;
}

CMD:disarm(playerid, params[])
{
	new id;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/disarm [playerid/PartOfName]");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	format(msg, sizeof(msg), "Administrator %s has took your guns.", GetNameEx(playerid));
	SCM(id, COLOR_INFO, msg);
	format(msg, sizeof(msg), "You took %s's guns.", GetNameEx(id));
	SCM(playerid, COLOR_INFO, msg);
	FullResetPlayerWeapons(id);
	return 1;
}

/*CMD:sethunger(playerid, params[])
{
	new Float:value, id;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_4)) return NotAuthMSG(playerid);
	if(sscanf(params,"uf",id,value)) return SyntaxMSG(playerid, "/sethunger [playerid] [value(1-100)]");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	if(value < 0.0 || value > 100.0) return SyntaxMSG(playerid, "/sethunger [value(1-100)]");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	//SetHunger(id, value);
	return 1;
}*/

CMD:makeparkmeter(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5)) return NotAuthMSG(playerid);
	new parkid, parkinfo[256], Float:x, Float:y, Float:z;
	if(sscanf(params,"s[256]", parkinfo)) return SyntaxMSG(playerid, "/makeparkmeter [info]");
	parkid = GetNextParkMeterID();
	GetPlayerPos(playerid, x, y, z);
	ParkMeters[parkid][parkPosX] = x;
	ParkMeters[parkid][parkPosY] = y;
	ParkMeters[parkid][parkPosZ] = z;
	ParkMeters[parkid][parkPosRX] = 0.0;
	ParkMeters[parkid][parkPosRY] = 0.0;
	ParkMeters[parkid][parkPosRZ] = 0.0;
	format(ParkMeters[parkid][parkName], 256, "%s", parkinfo);
	ParkMeters[parkid][parkOn] = 1;
	ParkMeters[parkid][parkObject] = CreateDynamicObject(1270, ParkMeters[parkid][parkPosX], ParkMeters[parkid][parkPosY], ParkMeters[parkid][parkPosZ], 0.0, 0.0, 0.0, -1, -1, -1, 200.0);
	format(msg, sizeof(msg), ""EMBED_CYAN"minutes %d", 0);
	ParkMeters[parkid][parkArea] = CreateDynamicSphere(ParkMeters[parkid][parkPosX], ParkMeters[parkid][parkPosY], ParkMeters[parkid][parkPosZ], 1.5, -1, -1, -1);
	ParkMeters[parkid][parkLabel] = CreateDynamic3DTextLabel(msg, -1, ParkMeters[parkid][parkPosX], ParkMeters[parkid][parkPosY], ParkMeters[parkid][parkPosZ]+0.5, 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	AddParkMeterToFile(parkid, parkinfo, x, y, z);
	format(msg, sizeof(msg), "A new Park Meter was added you may /editparkmeter, [Info: %s]", parkinfo);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:dupparkmeter(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5)) return NotAuthMSG(playerid);
	new parkid, oldid, parkinfo[256], Float:x, Float:y, Float:z;
	if(sscanf(params,"ds[256]", oldid, parkinfo)) return SyntaxMSG(playerid, "/dupparkmeter [What-ID] [info]");
	if(!ParkMeters[oldid][parkOn]) return SCM(playerid, -1, "Invalid Park Meter ID.");
	parkid = GetNextParkMeterID();
	GetPlayerPos(playerid, x, y, z);
	ParkMeters[parkid][parkPosX] = ParkMeters[oldid][parkPosX]+2;
	ParkMeters[parkid][parkPosY] = ParkMeters[oldid][parkPosY];
	ParkMeters[parkid][parkPosZ] = ParkMeters[oldid][parkPosZ];
	ParkMeters[parkid][parkPosRX] = ParkMeters[oldid][parkPosRX];
	ParkMeters[parkid][parkPosRY] = ParkMeters[oldid][parkPosRY];
	ParkMeters[parkid][parkPosRZ] = ParkMeters[oldid][parkPosRZ];
	format(ParkMeters[parkid][parkName], 256, "%s", parkinfo);
	ParkMeters[parkid][parkOn] = 1;
	ParkMeters[parkid][parkObject] = CreateDynamicObject(1270, ParkMeters[oldid][parkPosX]+2, ParkMeters[oldid][parkPosY], ParkMeters[oldid][parkPosZ], ParkMeters[oldid][parkPosRX], ParkMeters[oldid][parkPosRY], ParkMeters[oldid][parkPosRZ], -1, -1, -1, 200.0);
	format(msg, sizeof(msg), ""EMBED_CYAN"minutes %d", 0);
	ParkMeters[parkid][parkArea] = CreateDynamicSphere(ParkMeters[oldid][parkPosX]+2, ParkMeters[oldid][parkPosY], ParkMeters[oldid][parkPosZ], 1.5, -1, -1, -1);
	ParkMeters[parkid][parkLabel] = CreateDynamic3DTextLabel(msg, -1, ParkMeters[oldid][parkPosX]+2, ParkMeters[oldid][parkPosY], ParkMeters[oldid][parkPosZ]+0.5, 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	AddParkMeterToFile(parkid, parkinfo, ParkMeters[oldid][parkPosX]+2, ParkMeters[oldid][parkPosY], ParkMeters[oldid][parkPosZ]);
	format(msg, sizeof(msg), "A new Park Meter was added you may /editparkmeter, [Info: %s]", parkinfo);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:showmeters(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5)) return NotAuthMSG(playerid);
	new string[1024];
	for(new i = 0; i < MAX_PARK_METERS; i++)
	{
		if(ParkMeters[i][parkOn])
		{
			format(string, sizeof(string), "%s\n<%d>{66FF66}%s" ,string, i, ParkMeters[i][parkName]);
		}
	}
	ShowDialog(playerid,Show:<ShowParkMeters>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Park Meter's:"EMBED_RED"",string,"Teleport","Cancel");
	return 1;
}

CMD:editparkmeter(playerid, params[])
{
	new text[128], type, parkid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5)) return NotAuthMSG(playerid);
	if(sscanf(params,"ds[256]",type,text)) return SyntaxMSG(playerid, "/editparkmeter [(1-Info,2-Object)] [input]");
	parkid = GetClosestParkMeter(playerid);
	if(type == 1)
	{
		format(query, sizeof(query), "UPDATE `parkmeters` SET `name` = '%s' WHERE `id` = %d", text, ParkMeters[parkid][parkID]);
		mysql_function_query(dbHandle, query, false, "", "");
		format(ParkMeters[parkid][parkName], 128, "%s", text);
	}
	if(type == 2)
	{
		SetIntVar(playerid, "EditingParkMeter", 1);
		SetIntVar(playerid, "ParkMeterEditing", parkid);
		EditDynamicObject(playerid, ParkMeters[parkid][parkObject]);
	}
	return 1;
}

CMD:whatparkmeter(playerid, params[])
{
	new tt[256];
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5)) return NotAuthMSG(playerid);

	for(new i = 0; i < MAX_PARK_METERS; i++)
	{
		if (PlayerToPoint(3, playerid,ParkMeters[i][parkPosX], ParkMeters[i][parkPosY], ParkMeters[i][parkPosZ]))
		{
			format(tt, sizeof(tt), "You're standing near park meter: [Normal ID: %d] [MySQL ID: %d].", i,ParkMeters[i][parkID]);
			SCM(playerid, -1, tt);
			return 1;
		}
	}
	return 1;
}

CMD:removeparkmeter(playerid,params[])
{
	new parkid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5)) return NotAuthMSG(playerid);
	parkid = GetClosestParkMeter(playerid);
	DestroyDynamicObject(ParkMeters[parkid][parkObject]);
	DestroyDynamic3DTextLabel(Text3D:ParkMeters[parkid][parkLabel]);
	format(query, sizeof(query), "DELETE FROM `parkmeters` WHERE `id` = %d",ParkMeters[parkid][parkID]);
	mysql_function_query(dbHandle, query, true, "OnParkMeterRemove", "i", parkid);
	format(msg,sizeof(msg),"You've destroyed dynamic park meter id: %d!",parkid);
	SCM(playerid, COLOR_YELLOWG, msg);
	return 1;
}

CMD:biztypes(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_INFO, "1: Restaurant 2: Casino 3: 24/7 4: Ammunation 5: Clothes Store 6: Bar/Club 7: Sex Shop");
	SCM(playerid, COLOR_INFO, "8: Boxing Club 9: Electronic Store 10: Tattoo 11: Disco 12: Betting Place 13: Barber Shop 14: Farmacy");
	return 1;
}

CMD:showbusinesses(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new string[1024];
	for(new i = 0; i < sizeof(BizInfo); i++)
	{
		if(BizInfo[i][bizOn])
		{
			format(string, sizeof(string), "%s\n<%d>{66FF66}%s" ,string, i, BizInfo[i][bizInfo]);
		}
	}
	ShowDialog(playerid,Show:<AdminBusinesses>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Business(s):"EMBED_RED"",string,"Teleport","Cancel");
	return 1;
}

CMD:whatbusiness(playerid, params[])
{
	new tt[256];
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);

	for(new i = 0; i < MAX_BIZ; i++)
	{
		if (PlayerToPoint(3, playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]))
		{
			format(tt, sizeof(tt), "You're standing near business: [Normal ID: %d] [MySQL ID: %d].", i,BizInfo[i][bizID]);
			SCM(playerid, -1, tt);
			return 1;
		}
	}
	return 1;
}


CMD:makebusiness(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new bizid, level, price, type, Float:x, Float:y, Float:z;
	if(sscanf(params,"ddd", level, price, type)) return SyntaxMSG(playerid, "/makebusiness [buylevel] [price] [type(/biztypes)]");
	if(type > 13 || type < 1) return SCM(playerid, COLOR_INFO, "Types, 1-13.");
	bizid = GetNextBizID();
	GetPlayerPos(playerid, x, y, z);
	BizInfo[bizid][bizPosX] = x;
	BizInfo[bizid][bizPosY] = y;
	BizInfo[bizid][bizPosZ] = z;
	BizInfo[bizid][bizExitX] = 0.0;
	BizInfo[bizid][bizExitY] = 0.0;
	BizInfo[bizid][bizExitZ] = 0.0;
	BizInfo[bizid][bizLevelbuy] = level;
	BizInfo[bizid][bizPrice] = price;
	BizInfo[bizid][bizOwned] = 0;
	BizInfo[bizid][bizLocked] = 0;
	BizInfo[bizid][bizInterior] = 0;
	BizInfo[bizid][bizWorld] = bizid;
	BizInfo[bizid][bizCash] = 0;
	BizInfo[bizid][bizEntrance] = 0;
	BizInfo[bizid][bizRadioOn] = 0;
	BizInfo[bizid][bizRadio] = 0;
	format(BizInfo[bizid][bizOwner], 256, "The State");
	format(BizInfo[bizid][bizName], 256, "Business");
	SetBizType(bizid, type);
	BizInfo[bizid][bizOn] = 1;
	BizInfo[bizid][bizPickUp] = CreateDynamicPickup(1239, 1, x, y, z, -1, -1, -1, 100.0);
	AddBizToFile(bizid, price, type, BizInfo[bizid][bizOwner], BizInfo[bizid][bizName], BizInfo[bizid][bizEnterMSG], BizInfo[bizid][bizInfo], x, y, z);
	format(msg, sizeof(msg), "A new Business was added, [Level: %d, Price: %d, Type: %s]", level, price, BizInfo[bizid][bizInfo]);
	SCM(playerid, COLOR_GREEN, msg);
	format(msg, sizeof(msg), "Enter Message: %s", BizInfo[bizid][bizEnterMSG]);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:removebusiness(playerid,params[])
{
	new bizid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	bizid = GetClosestBizID(playerid);
	DestroyDynamicPickup(BizInfo[bizid][bizPickUp]);
	if(PlayerIsOn(GetIDByName(BizInfo[bizid][bizOwner])))
	{
		PlayerInfo[GetIDByName(BizInfo[bizid][bizOwner])][pBizKey] = -1;
		format(msg, sizeof(msg), "Admin %s has just sold your business to the market.", GetNameEx(playerid));
		SCM(GetIDByName(BizInfo[bizid][bizOwner]), COLOR_INFO, msg);
		if(BizInfo[bizid][bizCash] > 0)
		{
			format(msg, sizeof(msg), "As you had money in your cashbox you got it back, $%d.", BizInfo[bizid][bizCash]);
			SCM(GetIDByName(BizInfo[bizid][bizOwner]), COLOR_INFO, msg);
			GiveCash(GetIDByName(BizInfo[bizid][bizOwner]), BizInfo[bizid][bizCash]);
		}
	}
	else
	{
		format(query, sizeof(query), "UPDATE `users` SET `bizkey` = %d WHERE `name` = '%s'", -1, BizInfo[bizid][bizOwner]);
		mysql_function_query(dbHandle, query, false, "", "");
		if(BizInfo[bizid][bizCash] > 0)
		{
			format(query, sizeof(query), "SELECT * FROM `users` WHERE `name` = '%s'", BizInfo[bizid][bizOwner]);
			mysql_function_query(dbHandle, query, true, "GivePlayerBizMoney", "ii", BizInfo[bizid][bizCash], bizid);
		}
	}
	format(query, sizeof(query), "DELETE FROM `business` WHERE `id` = %d",BizInfo[bizid][bizID]);
	mysql_function_query(dbHandle, query, true, "OnBizRemove", "i", bizid);
	format(msg,sizeof(msg),"You've destroyed dynamic business id: %d!",bizid);
	SCM(playerid, COLOR_YELLOWG, msg);
	return 1;
}

CMD:asellbusiness(playerid, params[])
{
	new bizid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",bizid)) return SyntaxMSG(playerid, "/asellbusiness [bizid]");
	if(!BizInfo[bizid][bizOn]) return SCM(playerid, -1, "Invalid business ID.");
	if(!BizInfo[bizid][bizOwned]) return SCM(playerid, -1, "No one bought this business.");
	if(PlayerIsOn(GetIDByName(BizInfo[bizid][bizOwner])))
	{
		PlayerInfo[GetIDByName(BizInfo[bizid][bizOwner])][pBizKey] = -1;
		format(msg, sizeof(msg), "Admin %s has just sold your business to the market.", GetNameEx(playerid));
		SCM(GetIDByName(BizInfo[bizid][bizOwner]), COLOR_INFO, msg);
		if(BizInfo[bizid][bizCash] > 0)
		{
			format(msg, sizeof(msg), "As you had money in your cashbox you got it back, $%d.", BizInfo[bizid][bizCash]);
			SCM(GetIDByName(BizInfo[bizid][bizOwner]), COLOR_INFO, msg);
			GiveCash(GetIDByName(BizInfo[bizid][bizOwner]), BizInfo[bizid][bizCash]);
		}
	}
	else
	{
		format(query, sizeof(query), "UPDATE `users` SET `bizkey` = %d WHERE `name` = '%s'", -1, BizInfo[bizid][bizOwner]);
		mysql_function_query(dbHandle, query, false, "", "");
		if(BizInfo[bizid][bizCash] > 0)
		{
			format(query, sizeof(query), "SELECT `cash` FROM `users` WHERE `name` = '%s'", BizInfo[bizid][bizOwner]);
			mysql_function_query(dbHandle, query, true, "GivePlayerBizMoney", "ii", BizInfo[bizid][bizCash], bizid);
		}
	}
	format(query, sizeof(query), "UPDATE `business` SET `owner` = '%s', `owned` = %d, `locked` = %d, `cash` = %d, `entrance` = %d WHERE `id` = %d", "The State", 0, 1, 0, 0, BizInfo[bizid][bizID]);
	mysql_function_query(dbHandle, query, true, "OnAdminSellBusiness", "i", bizid);
	return 1;
}

CMD:serverbusinesses(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	format(query, sizeof(query), "SELECT * FROM `business`");
	mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Dynamic Businesses");
	return 1;
}

CMD:businessenter(playerid,params[])
{
	new bizid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",bizid)) return SyntaxMSG(playerid, "/businessenter [Biz-ID]");
	if(!BizInfo[bizid][bizOn]) return SCM(playerid, -1, "Invalid business id.");
	DestroyDynamicPickup(BizInfo[bizid][bizPickUp]);
	BizInfo[bizid][bizPickUp] = CreateDynamicPickup(1239, 1, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid), -1, -1, -1, 100.0);
	format(query, sizeof(query), "UPDATE `business` SET `posx` = %f, `posy` = %f, `posz` = %f WHERE `id` = %d", PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid), BizInfo[bizid][bizID]);
	mysql_function_query(dbHandle, query, false, "", "");
	BizInfo[bizid][bizPosX] = PlayerPosX(playerid);
	BizInfo[bizid][bizPosY] = PlayerPosY(playerid);
	BizInfo[bizid][bizPosZ] = PlayerPosZ(playerid);
	SCM(playerid, COLOR_INFO, "Done.");
	return 1;
}

CMD:businessexit(playerid,params[])
{
	new bizid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",bizid)) return SyntaxMSG(playerid, "/businessexit [Biz-ID]");
	if(!BizInfo[bizid][bizOn]) return SCM(playerid, -1, "Invalid business id.");
	format(query, sizeof(query), "UPDATE `business` SET `exitx` = %f, `exity` = %f, `exitz` = %f, `interior` = %d WHERE `id` = %d", PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid), GetInterior(playerid), BizInfo[bizid][bizID]);
	mysql_function_query(dbHandle, query, false, "", "");
	BizInfo[bizid][bizExitX] = PlayerPosX(playerid);
	BizInfo[bizid][bizExitY] = PlayerPosY(playerid);
	BizInfo[bizid][bizExitZ] = PlayerPosZ(playerid);
	BizInfo[bizid][bizInterior] = GetInterior(playerid);
	SCM(playerid, COLOR_INFO, "Done.");
	return 1;
}

CMD:gotobusiness(playerid, params[])
{
	new bizid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",bizid)) return SyntaxMSG(playerid, "/gotobusiness [Biz-ID]");
	if(!BizInfo[bizid][bizOn]) return SCM(playerid, -1, "Invalid business id.");
	PutPlayer(playerid, BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ]);
	return 1;
}

CMD:editbusiness(playerid, params[])
{
	new text[128], type, bizid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"ds[256]",type,text)) return SyntaxMSG(playerid, "/editbusiness [(1-Price,2-Level,3-Type,4-Name,5-Entrance,6-Cash,7-Lock/Unlock)] [input]");
	bizid = GetClosestBizID(playerid);
	if(bizid == -1) return SCM(playerid, COLOR_LIGHTRED, "Not near any business.");
	new input = strval(text);
	if(type == 1)
	{
		format(query, sizeof(query), "UPDATE `business` SET `price` = %d WHERE `id` = %d", input, BizInfo[bizid][bizID]);
		mysql_function_query(dbHandle, query, false, "", "");
		BizInfo[bizid][bizPrice] = input;
	}
	else if(type == 2)
	{
		format(query, sizeof(query), "UPDATE `business` SET `levelbuy` = %d WHERE `id` = %d", input, BizInfo[bizid][bizID]);
		mysql_function_query(dbHandle, query, false, "", "");
		BizInfo[bizid][bizLevelbuy] = input;
	}
	else if(type == 3)
	{
		SetBizType(bizid, input);
		format(query, sizeof(query), "UPDATE `business` SET `type` = %d, `info` = '%s', `entermsg` = '%s' WHERE `id` = %d", input, BizInfo[bizid][bizInfo],BizInfo[bizid][bizEnterMSG],  BizInfo[bizid][bizID]);
		mysql_function_query(dbHandle, query, false, "", "");
	}
	else if(type == 4)
	{
		format(query, sizeof(query), "UPDATE `business` SET `name` = '%s' WHERE `id` = %d", text, BizInfo[bizid][bizID]);
		mysql_function_query(dbHandle, query, false, "", "");
		format(BizInfo[bizid][bizName], 128, "%s", text);
	}
	else if(type == 5)
	{
		format(query, sizeof(query), "UPDATE `business` SET `entrance` = %d WHERE `id` = %d", input, BizInfo[bizid][bizID]);
		mysql_function_query(dbHandle, query, false, "", "");
		BizInfo[bizid][bizEntrance] = input;
	}
	else if(type == 6)
	{
		format(query, sizeof(query), "UPDATE `business` SET `cash` = %d WHERE `id` = %d", input, BizInfo[bizid][bizID]);
		mysql_function_query(dbHandle, query, false, "", "");
		BizInfo[bizid][bizCash] = input;
	}
	else if(type ==7)
	{
		if(BizInfo[bizid][bizLocked] == 1)
			{
				BizInfo[bizid][bizLocked] = 0;
				//GameTextForPlayer(playerid, "~b~Bussiness ~w~Deschis", 5000, 6);
				SCM(playerid, -1, "Business deschis");
				PlaySound(playerid, 1145);
				return 1;
			}
		if(BizInfo[bizid][bizLocked] == 0)
			{
				BizInfo[bizid][bizLocked] = 1;
				//GameTextForPlayer(playerid, "~b~Bussiness ~w~Inchis", 5000, 6);
				SCM(playerid, -1, "Business inchis");
				PlaySound(playerid, 1145);
				return 1;
			}
	}
	else
	{
		SCM(playerid, -1, "Wrong type, 1-7.");
		return 1;
	}
	SCM(playerid, COLOR_INFO, "Done.");
	return 1;
}
CMD:businessint(playerid, params[])
{
	new bizid, int;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",int))
	{
		SyntaxMSG(playerid, "/businessint [id (1-48)]");
		SCM(playerid, COLOR_WHITE, "1: Marcos Bistro (Eat) - 2: Big Spread Ranch (Bar) - 3: Burger Shot (Eat) - 4: Cluckin Bell (Eat)");
		SCM(playerid, COLOR_WHITE, "5: Well Stacked Pizza (Eat) - 6: Rusty Browns Dohnuts (Eat) - 7: Jays Diner (Eat) - 8: Pump Truck Stop Diner (Eat)");
		SCM(playerid, COLOR_WHITE, "9: Alhambra (Drink) - 10: Mistys (Drink) - 11: Lil' Probe Inn (Drink) - 12: Exclusive (Clothes) - 13: Binco (Clothes)");
		SCM(playerid, COLOR_WHITE, "14: ProLaps (Clothes) - 15: SubUrban (Clothes) - 16: Victim (Clothes) - 17: Zip (Clothes) - 18: Redsands Casino");
		SCM(playerid, COLOR_WHITE, "19: Off Track Betting - 20: Sex Shop - 21: Zeros RC Shop - 22-25: Ammunations (Gun) - 26: Jizzy's (Drink)");
		SCM(playerid, COLOR_WHITE, "27-32: 24-7's (Buy) - 33: Advertising/Phone Network - 34: Bothel - 35: Four Dragons Casino 36: Bikers Garage 37: Ganton gym");
		SCM(playerid, COLOR_WHITE, "38: Tattoo 1 39: Tatto 2 40: Tatto 3 41: Crack Den 42: Zero RC shop 43: Record Studio 44: LS Court Room 45: Meat Factory 46: Betting Place");
		SCM(playerid, COLOR_WHITE, "47: Barber Shop 48: Pleasure Domes");
		return 1;
	}
	bizid = GetClosestBizID(playerid);
	if(int < 1 || int > 48) return SCM(playerid, COLOR_GREY, "ERROR: Interior ID's 1-48");
	SetBusinessInterior(playerid, bizid, int);
	return 1;
}

/*CMD:houseint(playerid, params[])
{
	new houseid, int;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",int))
	{
		SyntaxMSG(playerid, "/houseint [id (1-48)]");
		return 1;
	}
	houseid = GetClosestHouseID(playerid);
	if(int < 1 || int > 48) return SCM(playerid, COLOR_GREY, "ERROR: Interior ID's 1-48");
	SetHouseInterior(playerid, houseid, int);
	return 1;
}*/

CMD:makefaction(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new factionid, name[64], color, type, rankamount, chaton;
	if(sscanf(params,"ds[64]dddd", factionid, name, color, type, rankamount, chaton)) return SyntaxMSG(playerid, "/makefaction [factionid] [name] [color] [type] [rankamount] [chaton(1/0)]");
	format(Factions[factionid][fName], 128, "%s", name);
	Factions[factionid][fType] = type;
	Factions[factionid][fRankAmount] = rankamount;
	Factions[factionid][fChatON] = chaton;
	Factions[factionid][fON] = 1;
	format(msg, sizeof(msg), "A new faction was added, [FactionID: %d, Name: %s, Type: %d, Rankamount: %d, Chaton: %d]", factionid, name, type, rankamount, chaton);
	SCM(playerid, COLOR_GREEN, msg);
	SCM(playerid, COLOR_GREEN, "You can /factioncmds for more help.");
	AddFactionToFile(factionid, name, color, type, rankamount, chaton);
	return 1;
}

CMD:factionspawn(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new factionid, Float:x, Float:y, Float:z;
	if(sscanf(params,"d", factionid)) return SyntaxMSG(playerid, "/factionspawn [factionid]");
	if(!Factions[factionid][fON]) return SCM(playerid, -1, "Invalid faction.");
	GetPlayerPos(playerid, x, y, z);
	new interior = GetInterior(playerid);
	Factions[factionid][fX] = x;
	Factions[factionid][fY] = y;
	Factions[factionid][fZ] = z;
	Factions[factionid][fSpawnInt] = interior;
	format(msg, sizeof(msg), "You have changed faction %d spawn to your position.", factionid);
	SCM(playerid, COLOR_GREEN, msg);
	format(query, sizeof(query), "UPDATE `factions` SET `spawnx` = %f, `spawny` = %f, `spawnz` = %f, `spawnint` = %d WHERE `id` = %d", x, y , z, interior, Factions[factionid][fID]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

CMD:factionuniform(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new factionid, Float:x, Float:y, Float:z;
	if(sscanf(params,"d", factionid)) return SyntaxMSG(playerid, "/factionuniform [factionid] (Changed the uniform position to yours)");
	if(!Factions[factionid][fON]) return SCM(playerid, -1, "Invalid faction.");
	GetPlayerPos(playerid, x, y, z);
	Factions[factionid][fUniformX] = x;
	Factions[factionid][fUniformY] = y;
	Factions[factionid][fUniformZ] = z;
	format(msg, sizeof(msg), "You have changed faction %d uniform to your position.", factionid);
	SCM(playerid, COLOR_GREEN, msg);
	DestroyDynamicPickup(Factions[factionid][fPickUp]);
	Factions[factionid][fPickUp] = CreateDynamicPickup(1239, 1, x, y, z, -1, -1, -1, 100.0);
	format(query, sizeof(query), "UPDATE `factions` SET `uniformx` = %f, `uniformy` = %f, `uniformz` = %f WHERE `id` = %d", x, y , z, Factions[factionid][fID]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

CMD:factioncolor(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new factionid, color;
	if(sscanf(params,"dd", factionid, color)) return SyntaxMSG(playerid, "/factioncolor [factionid] [color]");
	if(!Factions[factionid][fON]) return SCM(playerid, -1, "Invalid faction.");
	Factions[factionid][fColor] = color;
	format(msg, sizeof(msg), "You have changed faction %d color to %d.", factionid, color);
	SCM(playerid, COLOR_GREEN, msg);
	format(query, sizeof(query), "UPDATE `factions` SET `color` = %d WHERE `id` = %d", color, Factions[factionid][fID]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

CMD:factionname(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new factionid, name[64];
	if(sscanf(params,"ds[64]", factionid, name)) return SyntaxMSG(playerid, "/factioname [factionid] [name]");
	if(!Factions[factionid][fON]) return SCM(playerid, -1, "Invalid faction.");
	format(Factions[factionid][fName], 128, "%s", name);
	format(msg, sizeof(msg), "You have changed faction %d name to %s.", factionid, name);
	SCM(playerid, COLOR_GREEN, msg);
	format(query, sizeof(query), "UPDATE `factions` SET `name` = '%s' WHERE `id` = %d", name, Factions[factionid][fID]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

CMD:factionrankamount(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new factionid, amount;
	if(sscanf(params,"dd", factionid, amount)) return SyntaxMSG(playerid, "/factionrankamount [factionid] [amount]");
	if(!Factions[factionid][fON]) return SCM(playerid, -1, "Invalid faction.");
	Factions[factionid][fRankAmount] = amount;
	format(msg, sizeof(msg), "You have changed faction %d rank amount to %d.", factionid, amount);
	SCM(playerid, COLOR_GREEN, msg);
	format(query, sizeof(query), "UPDATE `factions` SET `rankamount` = %d WHERE `id` = %d", amount, Factions[factionid][fID]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

CMD:factiontype(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new factionid, type;
	if(sscanf(params,"dd", factionid, type)) return SyntaxMSG(playerid, "/factiontype [factionid] [type]");
	if(!Factions[factionid][fON]) return SCM(playerid, -1, "Invalid faction.");
	Factions[factionid][fType] = type;
	format(msg, sizeof(msg), "You have changed faction %d type to %d.", factionid, type);
	SCM(playerid, COLOR_GREEN, msg);
	format(query, sizeof(query), "UPDATE `factions` SET `type` = %d WHERE `id` = %d", type, Factions[factionid][fID]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

CMD:factionjoinrank(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new factionid, rank;
	if(sscanf(params,"dd", factionid, rank)) return SyntaxMSG(playerid, "/factionjoinrank [factionid] [rank]");
	if(!Factions[factionid][fON]) return SCM(playerid, -1, "Invalid faction.");
	Factions[factionid][fJoinRank] = rank;
	format(msg, sizeof(msg), "You have changed faction %d join rank to %d.", factionid, rank);
	SCM(playerid, COLOR_GREEN, msg);
	format(query, sizeof(query), "UPDATE `factions` SET `joinrank` = %d WHERE `id` = %d", rank, Factions[factionid][fID]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

CMD:factionleaderrank(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new factionid, rank;
	if(sscanf(params,"dd", factionid, rank)) return SyntaxMSG(playerid, "/factionleaderrank [factionid] [rank]");
	if(!Factions[factionid][fON]) return SCM(playerid, -1, "Invalid faction.");
	Factions[factionid][fLeaderRank] = rank;
	format(msg, sizeof(msg), "You have changed faction %d leader rank to %d.", factionid, rank);
	SCM(playerid, COLOR_GREEN, msg);
	format(query, sizeof(query), "UPDATE `factions` SET `leaderrank` = %d WHERE `id` = %d", rank, Factions[factionid][fID]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

CMD:factions(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	SCM(playerid, COLOR_GREY, "_____________Factions on the server_____________");
	SCM(playerid, COLOR_GREEN, "CIVIL 0 | LSPD 1 | EMS/FD 2 | SASD(NEFACUT) 3 | DOCS(NEFACUT) 4 | GOV 5 | NEWS 6");
	return 1;
}

CMD:makeleader(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new id, faction;
	if(sscanf(params,"ud",id,faction)) return SyntaxMSG(playerid, "/makeleader [playerid/PartOfNames] [factionid(/factions)]");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	format(msg, sizeof(msg), "AdmCmd: %s has just given %s leader rank in faction %s.", GetNameEx(playerid), GetNameEx(id), GetShortFactionName(faction));
	AMSG(COLOR_LIGHTRED, msg);
	format(msg, sizeof(msg), "Admin %s has just given you leader rank in faction %s.", GetNameEx(playerid), GetShortFactionName(faction));
	SCM(id, COLOR_YELLOWG, msg);
	PlayerInfo[id][pRank] = Factions[faction][fLeaderRank];
	PlayerInfo[id][pFaction] = faction;
	PlayerInfo[id][pBadgeNumber] = randomEx(23465, 99999);
  SetRadioChannel(id, 0);
  SetRadioSlot(id, 0);
	return 1;
}


CMD:factionrankname(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new factionid, rank, name[64];
	if(sscanf(params,"dds[64]", factionid, rank, name)) return SyntaxMSG(playerid, "/factionrankname [factionid] [rank(1-20)] [name]");
	if(!Factions[factionid][fON]) return SCM(playerid, -1, "Invalid faction.");
	format(msg, sizeof(msg), "You have set faction ID: %d's Rank: %d's name to: %s", factionid, rank, name);
	SCM(playerid, COLOR_GREEN, msg);
	if(rank == 1)
	{
		format(Factions[factionid][fRank1], 128, "%s", name);
	}
	else if(rank == 2)
	{
		format(Factions[factionid][fRank2], 128, "%s", name);
	}
	else if(rank == 3)
	{
		format(Factions[factionid][fRank3], 128, "%s", name);
	}
	else if(rank == 4)
	{
		format(Factions[factionid][fRank4], 128, "%s", name);
	}
	else if(rank == 5)
	{
		format(Factions[factionid][fRank5], 128, "%s", name);
	}
	else if(rank == 6)
	{
		format(Factions[factionid][fRank6], 128, "%s", name);
	}
	else if(rank == 7)
	{
		format(Factions[factionid][fRank7], 128, "%s", name);
	}
	else if(rank == 8)
	{
		format(Factions[factionid][fRank8], 128, "%s", name);
	}
	else if(rank == 9)
	{
		format(Factions[factionid][fRank9], 128, "%s", name);
	}
	else if(rank == 10)
	{
		format(Factions[factionid][fRank10], 128, "%s", name);
	}
	else if(rank == 11)
	{
		format(Factions[factionid][fRank11], 128, "%s", name);
	}
	else if(rank == 12)
	{
		format(Factions[factionid][fRank12], 128, "%s", name);
	}
	else if(rank == 13)
	{
		format(Factions[factionid][fRank13], 128, "%s", name);
	}
	else if(rank == 14)
	{
		format(Factions[factionid][fRank14], 128, "%s", name);
	}
	else if(rank == 15)
	{
		format(Factions[factionid][fRank15], 128, "%s", name);
	}
	else if(rank == 16)
	{
		format(Factions[factionid][fRank16], 128, "%s", name);
	}
	else if(rank == 17)
	{
		format(Factions[factionid][fRank17], 128, "%s", name);
	}
	else if(rank == 18)
	{
		format(Factions[factionid][fRank18], 128, "%s", name);
	}
	else if(rank == 19)
	{
		format(Factions[factionid][fRank19], 128, "%s", name);
	}
	else if(rank == 20)
	{
		format(Factions[factionid][fRank20], 128, "%s", name);
	}
	SaveFaction(factionid);
	return 1;
}

CMD:makefactiondoor(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new info[256], faction, doorid, vehicle, Float:X, Float:Y, Float:Z;
	if(sscanf(params,"ds[128]d", faction, info, vehicle)) return SyntaxMSG(playerid, "/makefactiondoor [factionid(/factions)] [info] [withvehicle(1/0)]");
	doorid = GetNextFactionDoorID();
	GetPlayerPos(playerid, X, Y, Z);
	new interior = GetInterior(playerid);
	FactionDoors[doorid][dEnterX] = X;
	FactionDoors[doorid][dEnterY] = Y;
	FactionDoors[doorid][dEnterZ] = Z;
	FactionDoors[doorid][dExitX] = 0.0000;
	FactionDoors[doorid][dExitY] = 0.0000;
	FactionDoors[doorid][dExitZ] = 0.0000;
	FactionDoors[doorid][dEnterInterior] = interior;
	FactionDoors[doorid][dFaction] = faction;
	FactionDoors[doorid][dWithVehicle] = vehicle;
	format(FactionDoors[doorid][dInfo],256,"%s",info);
	FactionDoors[doorid][dDoorOn] = 1;
	FactionDoors[doorid][dLocked] = 1;
	FactionDoors[doorid][dPickUp] = CreateDynamicPickup(1239, 2, X, Y, Z, -1, -1, -1, 100.0);
	AddFactionDoorToFile(doorid, vehicle, interior, faction, info, X, Y, Z);
	format(msg, sizeof(msg), "A new faction door was added, [info: %s, Faction: %d]",info, faction);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:factiondoorexitangle(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new doorid, Float:a;
	if(sscanf(params,"d",doorid)) return SyntaxMSG(playerid, "/factiondoorexitangle [doorid]");
	if(!FactionDoors[doorid][dDoorOn]) return SCM(playerid, -1,"ERROR: Door Does Not Exist!");
	GetPlayerFacingAngle(playerid, a);
	FactionDoors[doorid][dExitAngle] = a;
	format(query, sizeof(query), "UPDATE `factiondoors` SET `exitangle` = %f WHERE `id` = %d", a, FactionDoors[doorid][dID]);
	mysql_function_query(dbHandle, query, false, "", "");
	format(msg, sizeof(msg), "Faction Door vehicle angle was changed, %f",a);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:factiondoorenterangle(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new doorid, Float:a;
	if(sscanf(params,"d",doorid)) return SyntaxMSG(playerid, "/factiondoorenterangle [doorid]");
	if(!FactionDoors[doorid][dDoorOn]) return SCM(playerid, -1,"ERROR: Door doesn't exist!");
	GetPlayerFacingAngle(playerid, a);
	FactionDoors[doorid][dEnterAngle] = a;
	format(query, sizeof(query), "UPDATE `factiondoors` SET `enterangle` = %f WHERE `id` = %d", a, FactionDoors[doorid][dID]);
	mysql_function_query(dbHandle, query, false, "", "");
	format(msg, sizeof(msg), "Faction Door vehicle angle was changed, %f",a);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:factiondoorenter(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new interior, doorid, Float:X, Float:Y, Float:Z;
	if(sscanf(params,"d",doorid)) return SyntaxMSG(playerid, "/factiondoorenter [doorid]");
	if(!FactionDoors[doorid][dDoorOn]) return SCM(playerid, -1,"ERROR: Door doesn't exist!");
	GetPlayerPos(playerid, X, Y, Z);
	interior = GetInterior(playerid);
	AddFactionDoorEnter(doorid, interior, X, Y, Z);
	FactionDoors[doorid][dEnterX] = X;
	FactionDoors[doorid][dEnterY] = Y;
	FactionDoors[doorid][dEnterZ] = Z;
	FactionDoors[doorid][dEnterInterior] = interior;
	DestroyDynamicPickup(FactionDoors[doorid][dPickUp]);
	FactionDoors[doorid][dPickUp] = CreateDynamicPickup(1239, 2, X, Y, Z, -1, -1, -1, 100.0);
	format(msg, sizeof(msg), "Faction Door enter was changed, %f, %f, %f",X,Y,Z);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:factiondoorexit(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new interior, doorid, Float:X, Float:Y, Float:Z;
	if(sscanf(params,"d",doorid)) return SyntaxMSG(playerid, "/factiondoorexit [doorid]");
	if(!FactionDoors[doorid][dDoorOn]) return SCM(playerid, -1,"ERROR: Door doesn't exist!");
	GetPlayerPos(playerid, X, Y, Z);
	interior = GetInterior(playerid);
	AddFactionDoorExit(doorid, interior, X, Y, Z);
	FactionDoors[doorid][dExitX] = X;
	FactionDoors[doorid][dExitY] = Y;
	FactionDoors[doorid][dExitZ] = Z;
	FactionDoors[doorid][dExitInterior] = interior;
	format(msg, sizeof(msg), "Faction Door exit was changed, %f, %f, %f",X,Y,Z);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:removefactiondoor(playerid,params[])
{
	new DoorID;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",DoorID)) return SyntaxMSG(playerid, "/removefactiondoor [Door-ID]");
	if(!FactionDoors[DoorID][dDoorOn]) return SCM(playerid, -1,"ERROR: Door doesn't exist!");
	DestroyDynamicPickup(FactionDoors[DoorID][dPickUp]);
	format(query, sizeof(query), "DELETE FROM `factiondoors` WHERE `id` = %d",FactionDoors[DoorID][dID]);
	mysql_function_query(dbHandle, query, true, "OnFactionDoorRemove", "i", DoorID);
	format(msg,sizeof(msg),"You've destroyed Faction Door id: %d!",DoorID);
	SCM(playerid, COLOR_YELLOWG, msg);
	return 1;
}

CMD:editfactiondoor(playerid, params[])
{
	new text[256], type;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"ds[256]",type,text)) return SyntaxMSG(playerid, "/editfactiondoor [type(1-Info,2-VirWorld,3-Faction)] [new text]");
	new doorid = GetClosestFactionDoorID(playerid);
	if(doorid == -1) return SCM(playerid, COLOR_LIGHTRED, "Not near any faction doors.");
	new input = strval(text);
	if(type == 1)
	{
		format(query, sizeof(query), "UPDATE `factiondoors` SET `info` = '%s' WHERE `id` = %d", text, FactionDoors[doorid][dID]);
		mysql_function_query(dbHandle, query, false, "", "");
		format(FactionDoors[doorid][dInfo],256,"%s",text);
	}
	else if(type == 2)
	{
		format(query, sizeof(query), "UPDATE `factiondoors` SET `world` = %d WHERE `id` = %d", input, FactionDoors[doorid][dID]);
		mysql_function_query(dbHandle, query, false, "", "");
		FactionDoors[doorid][dVirtualWorld] = input;
	}
	else if(type == 3)
	{
		format(query, sizeof(query), "UPDATE `factiondoors` SET `faction` = %d WHERE `id` = %d", input, FactionDoors[doorid][dID]);
		mysql_function_query(dbHandle, query, false, "", "");
		FactionDoors[doorid][dFaction] = input;
	}
	SCM(playerid, COLOR_INFO, "Done.");
	return 1;
}

CMD:whatfactiondoor(playerid, params[])
{
	new tt[256];
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);

	for(new i = 0; i < MAX_FACTION_DOORS; i++)
	{
		if (PlayerToPoint(3, playerid,FactionDoors[i][dEnterX], FactionDoors[i][dEnterY], FactionDoors[i][dEnterZ]))
		{
			format(tt, sizeof(tt), "You're standing near faction door: [Normal ID: %d] [MySQL ID: %d].", i,FactionDoors[i][dID]);
			SCM(playerid, -1, tt);
			return 1;
		}
	}
	return 1;
}

CMD:showfactiondoors(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new string[1024];
	for(new i = 0; i < sizeof(FactionDoors); i++)
	{
		if(FactionDoors[i][dDoorOn])
		{
			format(string, sizeof(string), "%s\n<%d>{66FF66}%s" ,string, i, FactionDoors[i][dInfo]);
		}
	}
	ShowDialog(playerid,Show:<AdminFactionDoors>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Faction Doors:"EMBED_RED"",string,"Teleport","Cancel");
	return 1;
}

CMD:serverfactiondoors(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	format(query, sizeof(query), "SELECT * FROM `factiondoors`");
	mysql_function_query(dbHandle, query, true, "ShowAmount", "is[128]", playerid, "Faction doors");
	return 1;
}

CMD:gotofactiondoor(playerid, params[])
{
	new id;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",id)) return SyntaxMSG(playerid, "/gotofactiondoor [Door-ID]");
	if(!FactionDoors[id][dDoorOn]) return SCM(playerid, -1, "Invalid faction door.");
	SetInterior(playerid, FactionDoors[id][dEnterInterior]);
	PutPlayer(playerid, FactionDoors[id][dEnterX], FactionDoors[id][dEnterY], FactionDoors[id][dEnterZ]);
	return 1;
}

CMD:makemovedoor(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new objectid, modelid, faction, interior, name[256], Float:X, Float:Y, Float:Z;
	if(sscanf(params,"dds[256]",modelid,faction,name)) return SyntaxMSG(playerid, "/makemovedoor [Model-ID] [Faction(/factions)] [Description]");
	GetPlayerPos(playerid, X, Y, Z);
	interior = GetInterior(playerid);
	objectid = CreateDynamicObject(modelid, X, Y, Z, 0.0, 0.0, 0.0, GetWorld(playerid), -1, -1, 200.0);
	Doors[objectid][doorModel] = modelid;
	Doors[objectid][doorPosX] = X;
	Doors[objectid][doorPosY] = Y;
	Doors[objectid][doorPosZ] = Z;
	Doors[objectid][doorPosRX] = 0.0;
	Doors[objectid][doorPosRY] = 0.0;
	Doors[objectid][doorPosRZ] = 0.0;
	Doors[objectid][doorObjectOn] = 1;
	Doors[objectid][doorInterior] = interior;
	Doors[objectid][doorFaction] = faction;
	Doors[objectid][doorOpened] = 0;
	Doors[objectid][doorVirtualWorld] = GetWorld(playerid);
	format(Doors[objectid][doorName], 256, "%s", name);
	Doors[objectid][doorObject] = objectid;
	AddMoveDoorToFile(objectid, modelid, faction, interior, GetWorld(playerid), X, Y, Z, name);
	format(msg, sizeof(msg), "A new dynamic movable door was added, [ObjectID: %d, ModelID: %d, Description: %s]",objectid,modelid, Doors[objectid][doorName]);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:dupmovedoor(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new objectid, doorid, modelid, faction, interior, name[256];
	if(sscanf(params,"ddds[256]",doorid,modelid,faction,name)) return SyntaxMSG(playerid, "/dupmovedoor [Door-ID] [Model-ID] [Faction(/factions)] [Description]");
	if(!Doors[doorid][doorObjectOn]) return SCM(playerid, COLOR_WHITE, "ERROR: Dynamic Movable Door doesn't exist!");
	interior = GetInterior(playerid);
	objectid = CreateDynamicObject(modelid, Doors[doorid][doorPosX], Doors[doorid][doorPosY], Doors[doorid][doorPosZ], Doors[doorid][doorPosRX], Doors[doorid][doorPosRY], Doors[doorid][doorPosRZ], Doors[doorid][doorVirtualWorld], -1, -1, 200.0);
	Doors[objectid][doorModel] = modelid;
	Doors[objectid][doorPosX] = Doors[doorid][doorPosX];
	Doors[objectid][doorPosY] = Doors[doorid][doorPosY];
	Doors[objectid][doorPosZ] = Doors[doorid][doorPosZ];
	Doors[objectid][doorPosRX] = Doors[doorid][doorPosRX];
	Doors[objectid][doorPosRY] = Doors[doorid][doorPosRY];
	Doors[objectid][doorPosRZ] = Doors[doorid][doorPosRZ];
	Doors[objectid][doorObjectOn] = 1;
	Doors[objectid][doorInterior] = interior;
	Doors[objectid][doorFaction] = faction;
	Doors[objectid][doorOpened] = 0;
	Doors[objectid][doorVirtualWorld] = Doors[doorid][doorVirtualWorld];
	format(Doors[objectid][doorName], 256, "%s", name);
	Doors[objectid][doorObject] = objectid;
	AddMoveDoorToFile(objectid, modelid, faction, interior, Doors[doorid][doorVirtualWorld], Doors[doorid][doorPosX], Doors[doorid][doorPosY], Doors[doorid][doorPosZ], name);
	format(msg, sizeof(msg), "A new dynamic movable door was duplicated, [ObjectID: %d, ModelID: %d, Description: %s]",objectid, modelid, Doors[objectid][doorName]);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:removemovedoor(playerid,params[])
{
	new objectid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",objectid)) return SyntaxMSG(playerid, "/removemovedoor [Object-ID]");
	if(Doors[objectid][doorObjectOn])
	{
		format(query, sizeof(query), "DELETE FROM `movedoors` WHERE `id` = %d",Doors[objectid][doorID]);
		mysql_function_query(dbHandle, query, true, "OnMoveDoorRemove", "i", objectid);
		format(msg,sizeof(msg),"You've destroyed dynamic movable door id: %d!",objectid);
		SCM(playerid, COLOR_YELLOWG, msg);
	}
	else
	{
		SCM(playerid, -1,"ERROR: Dynamic Movable Door doesn't exist!");
	}
	return 1;
}

CMD:editmovedoor(playerid,params[])
{
	new objectid, type, Float:input;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"ddf",objectid, type, input)) return SyntaxMSG(playerid, "/editmovedoor [Object-ID] [type(1-Object,2-OpenSpeed,3-MoveX,4-MoveY,5-MoveZ] [input]");
	if(!Doors[objectid][doorObjectOn] && !IsValidDynamicObject(Doors[objectid][doorObject])) return SCM(playerid, -1,"ERROR: Dynamic Movable Door Does Not Exist!");
	if(type == 1)
	{
		if(GetIntVar(playerid, "EditingMoveDoor") == 1) return SCM(playerid, COLOR_FADE1, "You are already editing.");
		SetIntVar(playerid, "EditingMoveDoor", 1);
		SetIntVar(playerid, "ObjectEditing", objectid);
		EditDynamicObject(playerid, Doors[objectid][doorObject]);
	}
	else if(type == 2)
	{
		Doors[objectid][doorOpenSpeed] = input;
		format(query, sizeof(query), "UPDATE `movedoors` SET `openspeed` = %f WHERE `id` = %d", input, Doors[objectid][doorID]);
		mysql_function_query(dbHandle, query, false, "", "");
	}
	else if(type == 3)
	{
		Doors[objectid][doorMoveX] = input;
		format(query, sizeof(query), "UPDATE `movedoors` SET `movex` = %f WHERE `id` = %d", input, Doors[objectid][doorID]);
		mysql_function_query(dbHandle, query, false, "", "");
	}
	else if(type == 4)
	{
		Doors[objectid][doorMoveY] = input;
		format(query, sizeof(query), "UPDATE `movedoors` SET `movey` = %f WHERE `id` = %d", input, Doors[objectid][doorID]);
		mysql_function_query(dbHandle, query, false, "", "");
	}
	else if(type == 5)
	{
		Doors[objectid][doorMoveZ] = input;
		format(query, sizeof(query), "UPDATE `movedoors` SET `movez` = %f WHERE `id` = %d", input, Doors[objectid][doorID]);
		mysql_function_query(dbHandle, query, false, "", "");
	}
	SCM(playerid, COLOR_INFO, "Done.");
	return 1;
}

CMD:whatmovedoor(playerid, params[])
{
	new tt[128];
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);

	for(new i = 0; i < sizeof(Doors); i++)
	{
		if (PlayerToPoint(3, playerid,Doors[i][doorPosX], Doors[i][doorPosY], Doors[i][doorPosZ]))
		{
			format(tt, sizeof(tt), "You're standing near dynamic movable door: [Normal ID: %d] [MySQL ID: %d].", i,Doors[i][doorID]);
			SCM(playerid, -1, tt);
			return 1;
		}
	}
	return 1;
}

CMD:showmovedoors(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new string[4000];
	for(new i = 0; i < sizeof(Doors); i++)
	{
		if(Doors[i][doorObjectOn])
		{
			format(string, sizeof(string), "%s\n%d)%s" ,string, i, Doors[i][doorName]);
		}
	}
	ShowDialog(playerid,Show:<ShowMoveDoors>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Move Objects:"EMBED_RED"",string,"O","K");
	return 1;
}

//==============================================
CMD:makegate(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new modelid, faction, name[256], Float:X, Float:Y, Float:Z, Float:speed, Float:movex, Float:movey, Float:movez;
	if(sscanf(params,"ddffffs[256]",modelid,faction,speed,movex,movey,movez,name)) return SyntaxMSG(playerid, "/makegate [Model-ID] [Faction(/factions)] [OpenSpeed] [Move-X] [Move-Y] [Move-Z] [Description]");
	GetPlayerPos(playerid, X, Y, Z);
	new interior = GetInterior(playerid);
	new objectid = CreateDynamicObject(modelid, X, Y, Z, 0.0, 0.0, 0.0, GetWorld(playerid), -1, -1, 200.0);
	Gates[objectid][gateModel] = modelid;
	Gates[objectid][gatePosX] = X;
	Gates[objectid][gatePosY] = Y;
	Gates[objectid][gatePosZ] = Z;
	Gates[objectid][gateOpenSpeed] = speed;
	Gates[objectid][gateMoveX] = movex;
	Gates[objectid][gateMoveY] = movey;
	Gates[objectid][gateMoveZ] = movez;
	Gates[objectid][gateMoveRX] = 0.0;
	Gates[objectid][gateMoveRY] = 0.0;
	Gates[objectid][gateMoveRZ] = 0.0;
	Gates[objectid][gatePosRX] = 0.0;
	Gates[objectid][gatePosRY] = 0.0;
	Gates[objectid][gatePosRZ] = 0.0;
	Gates[objectid][gateSound] = 0;
	Gates[objectid][gateSoundLength] = 0;
	Gates[objectid][gateObjectOn] = 1;
	Gates[objectid][gateInterior] = interior;
	Gates[objectid][gateFaction] = faction;
	Gates[objectid][gateOpened] = 0;
	Gates[objectid][gateVirtualWorld] = GetWorld(playerid);
	format(Gates[objectid][gateName], 256, "%s", name);
	Gates[objectid][gateObject] = objectid;
	AddGateToFile(objectid, modelid, faction, interior, GetWorld(playerid), X, Y, Z, speed, movex, movey, name);
	format(msg, sizeof(msg), "A new dynamic gate was added, [ModelID: %d, Description: %s]",modelid, name);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:editgate(playerid,params[])
{
	new objectid, type, Float:input;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"ddf",objectid, type, input)) return SyntaxMSG(playerid, "/editgate [Object-ID] [type(1-Object,2-OpenSpeed,3-MoveX,4-MoveY,5-MoveZ,6-MoveRX,7-MoveRY,8-MoveRZ)] [input]");
	if(!Gates[objectid][gateObjectOn] && !IsValidDynamicObject(Gates[objectid][gateObject])) return SCM(playerid, -1,"ERROR: Dynamic Gate Does Not Exist!");
	if(type == 1)
	{
		if(GetIntVar(playerid, "EditingGate") == 1) return SCM(playerid, COLOR_FADE1, "You are already editing.");
		SetIntVar(playerid, "EditingGate", 1);
		SetIntVar(playerid, "ObjectEditing", objectid);
		EditDynamicObject(playerid, Gates[objectid][gateObject]);
	}
	else if(type == 2)
	{
		Gates[objectid][gateOpenSpeed] = input;
		format(query, sizeof(query), "UPDATE `gates` SET `openspeed` = %f WHERE `id` = %d", input, Gates[objectid][gateID]);
		mysql_function_query(dbHandle, query, false, "", "");
	}
	else if(type == 3)
	{
		Gates[objectid][gateMoveX] = input;
		format(query, sizeof(query), "UPDATE `gates` SET `movex` = %f WHERE `id` = %d", input, Gates[objectid][gateID]);
		mysql_function_query(dbHandle, query, false, "", "");
	}
	else if(type == 4)
	{
		Gates[objectid][gateMoveY] = input;
		format(query, sizeof(query), "UPDATE `gates` SET `movey` = %f WHERE `id` = %d", input, Gates[objectid][gateID]);
		mysql_function_query(dbHandle, query, false, "", "");
	}
	else if(type == 5)
	{
		Gates[objectid][gateMoveZ] = input;
		format(query, sizeof(query), "UPDATE `gates` SET `movez` = %f WHERE `id` = %d", input, Gates[objectid][gateID]);
		mysql_function_query(dbHandle, query, false, "", "");
	}
	else if(type == 6)
	{
		Gates[objectid][gateMoveRX] = input;
		format(query, sizeof(query), "UPDATE `gates` SET `moverx` = %f WHERE `id` = %d", input, Gates[objectid][gateID]);
		mysql_function_query(dbHandle, query, false, "", "");
	}
	else if(type == 7)
	{
		Gates[objectid][gateMoveRY] = input;
		format(query, sizeof(query), "UPDATE `gates` SET `movery` = %f WHERE `id` = %d", input, Gates[objectid][gateID]);
		mysql_function_query(dbHandle, query, false, "", "");
	}
	else if(type == 8)
	{
		Gates[objectid][gateMoveRZ] = input;
		format(query, sizeof(query), "UPDATE `gates` SET `moverz` = %f WHERE `id` = %d", input, Gates[objectid][gateID]);
		mysql_function_query(dbHandle, query, false, "", "");
	}
	SCM(playerid, COLOR_INFO, "Done.");
	return 1;
}

CMD:gatesound(playerid, params[])
{
	new objectid, sound;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"dd",objectid, sound)) return SyntaxMSG(playerid, "/gatesound [Object-ID] [sound-id]");
	if(!Gates[objectid][gateObjectOn] && !IsValidDynamicObject(Gates[objectid][gateObject])) return SCM(playerid, -1,"ERROR: Dynamic Gate Does Not Exist!");
	Gates[objectid][gateSound] = sound;
	format(query, sizeof(query), "UPDATE `gates` SET `sound` = %d WHERE `id` = %d", sound, Gates[objectid][gateID]);
	mysql_function_query(dbHandle, query, false, "", "");
	SCM(playerid, COLOR_INFO, "Done.");
	return 1;
}

CMD:gatesoundlength(playerid, params[])
{
	new objectid, length;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"dd",objectid, length)) return SyntaxMSG(playerid, "/gatesoundlength [Object-ID] [length]");
	if(!Gates[objectid][gateObjectOn] && !IsValidDynamicObject(Gates[objectid][gateObject])) return SCM(playerid, -1,"ERROR: Dynamic Gate Does Not Exist!");
	Gates[objectid][gateSoundLength] = length;
	format(query, sizeof(query), "UPDATE `gates` SET `soundlength` = %d WHERE `id` = %d", length, Gates[objectid][gateID]);
	mysql_function_query(dbHandle, query, false, "", "");
	SCM(playerid, COLOR_INFO, "Done.");
	return 1;
}

CMD:whatgate(playerid, params[])
{
	new tt[128];
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new Float:x, Float:y, Float:z;
	for(new i = 0; i < MAX_OBJECTS; i++)
	{
		if(Gates[i][gateObjectOn])
		{
			GetDynamicObjectPos(i, x, y, z);
			if (PlayerToPoint(4.0, playerid, x, y, z))
			{
				format(tt, sizeof(tt), "You're standing near dynamic gate: [Normal ID: %d] [MySQL ID: %d].", i, Gates[i][gateID]);
				SCM(playerid, -1, tt);
				return 1;
			}
		}
	}
	return 1;
}

CMD:removegate(playerid,params[])
{
	new objectid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",objectid)) return SyntaxMSG(playerid, "/removegate [Object-ID]");
	if(Gates[objectid][gateObjectOn])
	{
		format(query, sizeof(query), "DELETE FROM `gates` WHERE `id` = %d",Gates[objectid][gateID]);
		mysql_function_query(dbHandle, query, true, "OnGateRemove", "i", objectid);
		format(msg,sizeof(msg),"You've destroyed dynamic gate id: %d!",objectid);
		SCM(playerid, COLOR_YELLOWG, msg);
	}
	else
	{
		SCM(playerid, -1,"ERROR: Dynamic Gate doesn't exist!");
	}
	return 1;
}

CMD:showgates(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new string[4000];
	for(new i = 0; i < sizeof(Gates); i++)
	{
		if(Gates[i][gateObjectOn])
		{
			format(string, sizeof(string), "%s\n%d)%s" ,string, i, Gates[i][gateName]);
		}
	}
	ShowDialog(playerid,Show:<ShowGates>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Dynamic Gates:"EMBED_RED"",string,"O","K");
	return 1;
}

CMD:makecctv(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new objectid, faction, interior, name[256], Float:X, Float:Y, Float:Z;
	if(sscanf(params,"ds[256]",faction,name)) return SyntaxMSG(playerid, "/makecctv [faction(/factions)] [Description]");
	GetPlayerPos(playerid, X, Y, Z);
	interior = GetInterior(playerid);
	objectid = CreateDynamicObject(1886, X, Y, Z, 0.0, 0.0, 0.0, -1, -1, -1, 200.0);
	CCTVInfo[objectid][tvFaction] = faction;
	CCTVInfo[objectid][tvPosX] = X;
	CCTVInfo[objectid][tvPosY] = Y;
	CCTVInfo[objectid][tvPosZ] = Z;
	CCTVInfo[objectid][tvPosRX] = 0.0;
	CCTVInfo[objectid][tvPosRY] = 0.0;
	CCTVInfo[objectid][tvPosRZ] = 0.0;
	CCTVInfo[objectid][tvObjectOn] = 1;
	CCTVInfo[objectid][tvInterior] = interior;
	CCTVInfo[objectid][tvVirtualWorld] = GetWorld(playerid);
	format(CCTVInfo[objectid][tvName], 256, "%s", name);
	CCTVInfo[objectid][tvObject] = objectid;
	AddCameraToFile(objectid, faction, interior, GetWorld(playerid), X, Y, Z, name);
	format(msg, sizeof(msg), "A new dynamic CCTV was added, [FactionID: %d, Description: %s]",faction, CCTVInfo[objectid][tvName]);
	SCM(playerid, COLOR_GREEN, msg);
	return 1;
}

CMD:editcctv(playerid,params[])
{
	new objectid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",objectid)) return SyntaxMSG(playerid, "/editcctv [Object-ID]");
	if(GetIntVar(playerid, "EditingCCTV") == 1) return SCM(playerid, COLOR_FADE1, "You are already editing.");
	if(CCTVInfo[objectid][tvObjectOn] && IsValidDynamicObject(CCTVInfo[objectid][tvObject]))
	{
		SetIntVar(playerid, "EditingCCTV", 1);
		SetIntVar(playerid, "ObjectEditing", objectid);
		EditDynamicObject(playerid, CCTVInfo[objectid][tvObject]);
	}
	else
	{
		SCM(playerid, -1,"ERROR: Dynamic CCTV doesn't exist!");
	}
	return 1;
}

CMD:showcctvs(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new string[4000];
	for(new i = 0; i < MAX_OBJECTS; i++)
	{
		if(CCTVInfo[i][tvObjectOn])
		{
			format(string, sizeof(string), "%s\n%d)%s" ,string, i, CCTVInfo[i][tvName]);
		}
	}
	ShowDialog(playerid,Show:<ShowCCTVs>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin CCTV's:"EMBED_RED"",string,"O","K");
	return 1;
}

CMD:cctvfaction(playerid,params[])
{
	new objectid, faction;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"dd",objectid, faction)) return SyntaxMSG(playerid, "/cctvfaction [Object-ID] [FactionID(/faction)]");
	if(CCTVInfo[objectid][tvObjectOn] && IsValidDynamicObject(CCTVInfo[objectid][tvObject]))
	{
		CCTVInfo[objectid][tvFaction] = faction;
		format(query, sizeof(query), "UPDATE `cctvs` SET `faction` = %d WHERE `id` = %d", faction, CCTVInfo[objectid][tvID]);
		mysql_function_query(dbHandle, query, false, "", "");
		SCM(playerid, COLOR_INFO, "Done.");
	}
	else
	{
		SCM(playerid, -1,"ERROR: Dynamic CCTV doesn't exist!");
	}
	return 1;
}


CMD:removecctv(playerid,params[])
{
	new objectid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",objectid)) return SyntaxMSG(playerid, "/removecctv [Object-ID]");
	if(CCTVInfo[objectid][tvObjectOn])
	{
		format(query, sizeof(query), "DELETE FROM `cctvs` WHERE `id` = %d", CCTVInfo[objectid][tvID]);
		mysql_function_query(dbHandle, query, true, "OnCameraRemove", "i", objectid);
		format(msg,sizeof(msg),"You've destroyed dynamic CCTV id: %d!",objectid);
		SCM(playerid, COLOR_YELLOWG, msg);
	}
	else
	{
		SCM(playerid, -1,"ERROR: Dynamic CCTV doesn't exist!");
	}
	return 1;
}

CMD:whatcctv(playerid, params[])
{
	new tt[128];
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);

	for(new i = 0; i < sizeof(CCTVInfo); i++)
	{
		if (PlayerToPoint(3, playerid,CCTVInfo[i][tvPosX], CCTVInfo[i][tvPosY], CCTVInfo[i][tvPosZ]))
		{
			format(tt, sizeof(tt), "You're standing near dynamic CCTV: [Normal ID: %d] [MySQL ID: %d].", i,CCTVInfo[i][tvID]);
			SCM(playerid, -1, tt);
			return 1;
		}
	}
	return 1;
}

CMD:cctvinfo(playerid,params[])
{
	new objectid, text[64];
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"ds[64]",objectid,text)) return SyntaxMSG(playerid, "/cctvinfo [Object-ID] [New Text]");
	if(CCTVInfo[objectid][tvObjectOn] && IsValidDynamicObject(CCTVInfo[objectid][tvObject]))
	{
		format(CCTVInfo[objectid][tvName], 128, "%s", text);
		format(query, sizeof(query), "UPDATE `cctvs` SET `info` = '%s' WHERE `id` = %d", text, CCTVInfo[objectid][tvID]);
		mysql_function_query(dbHandle, query, false, "", "");
		SCM(playerid, COLOR_INFO, "Done.");
	}
	else
	{
		SCM(playerid, -1,"ERROR: Dynamic CCTV doesn't exist!");
	}
	return 1;
}

CMD:policer(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return NotAuthMSG(playerid);
	SCM(playerid,COLOR_LIGHTBLUE, "<< You despawned all of the LSPD faction cars >>");
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		if(IsACopCar(i))
		{
			if(VehicleEmpty(i))
			{
				RespawnVehicle(i);
			}
		}
	}
	return 1;
}
CMD:respawnallcars(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_3)) return NotAuthMSG(playerid);
    new pName[MAX_PLAYER_NAME];
	GetPlayerName(playerid, pName, sizeof(pName));
	SCMEx(playerid,COLOR_LIGHTRED, "AdmCmd: Administrator %s has respawned all cars", pName);
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		if(VehicleEmpty(i))
		{
			RespawnVehicle(i);
		}
	}
	return 1;
}
CMD:makejob(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new jobid, name[64], rankamount, sidejob, highrank, Float:x, Float:y, Float:z;
	if(sscanf(params,"ds[64]ddd", jobid, name, sidejob, rankamount, highrank)) return SyntaxMSG(playerid, "/makejob [jobid] [name] [sidejob(1/0)] [rankamount] [highrank]");
	x = PlayerPosX(playerid); y = PlayerPosY(playerid); z = PlayerPosZ(playerid);
	format(JobsInfo[jobid][jobName], 128, "%s", name);
	JobsInfo[jobid][jobRanks] = rankamount;
	JobsInfo[jobid][jobHighRank] = highrank;
	JobsInfo[jobid][jobX] = x;
	JobsInfo[jobid][jobY] = y;
	JobsInfo[jobid][jobZ] = z;
	JobsInfo[jobid][jobSideJob] = sidejob;
	JobsInfo[jobid][jobOn] = 1;
	JobsInfo[jobid][jobPickUp] = CreateDynamicPickup(1314, 1, x, y, z, -1, -1, -1, 100.0);
	if(JobsInfo[jobid][jobSideJob] == 1)
		format(msg, sizeof(msg), ""EMBED_GREEN"["EMBED_RED"SIDE JOB"EMBED_GREEN"]");
	else
		format(msg, sizeof(msg), ""EMBED_GREEN"["EMBED_RED"JOB"EMBED_GREEN"]");
	JobsInfo[jobid][jobLabel] = CreateDynamic3DTextLabel(msg, -1, x, y, z+0.4, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	format(msg, sizeof(msg), "A new job was added, [JobID: %d, Name: %s, Rankamount: %d, HighRank: %d]", jobid, name, rankamount, highrank);
	SCM(playerid, COLOR_GREEN, msg);
	AddJobToFile(jobid, name, sidejob, rankamount, highrank, x, y, z);
	return 1;
}

CMD:movejob(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new jobid, Float:x, Float:y, Float:z;
	if(sscanf(params,"d", jobid)) return SyntaxMSG(playerid, "/movejob [jobid] (Changes the /takejob position)");
	if(!JobsInfo[jobid][jobOn]) return SCM(playerid, -1, "Invalid job.");
	GetPlayerPos(playerid, x, y, z);
	JobsInfo[jobid][jobX] = x;
	JobsInfo[jobid][jobY] = y;
	JobsInfo[jobid][jobZ] = z;
	format(msg, sizeof(msg), "You have changed job %d position.", jobid);
	SCM(playerid, COLOR_GREEN, msg);
	DestroyDynamicPickup(JobsInfo[jobid][jobPickUp]);
	DestroyDynamic3DTextLabel(Text3D:JobsInfo[jobid][jobLabel]);
	JobsInfo[jobid][jobPickUp] = CreateDynamicPickup(1314, 1, x, y, z, -1, -1, -1, 100.0);
	JobsInfo[jobid][jobLabel] = CreateDynamic3DTextLabel(""EMBED_GREEN"["EMBED_RED"JOB"EMBED_GREEN"]", -1, x, y, z+0.4, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	format(query, sizeof(query), "UPDATE `jobs` SET `posx` = %f, `posy` = %f, `posz` = %f WHERE `id` = %d", x, y , z, JobsInfo[jobid][jobID]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

CMD:jobrankname(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new jobid, rank, name[64];
	if(sscanf(params,"dds[64]", jobid, rank, name)) return SyntaxMSG(playerid, "/jobrankname [jobid] [rank(1-10)] [name]");
	if(!JobsInfo[jobid][jobOn]) return SCM(playerid, -1, "Invalid job.");
	format(msg, sizeof(msg), "You have set job ID: %d's Rank: %d's name to: %s", jobid, rank, name);
	SCM(playerid, COLOR_GREEN, msg);
	if(rank == 1)
	{
		format(JobsInfo[jobid][jobRank1], 128, "%s", name);
	}
	else if(rank == 2)
	{
		format(JobsInfo[jobid][jobRank2], 128, "%s", name);
	}
	else if(rank == 3)
	{
		format(JobsInfo[jobid][jobRank3], 128, "%s", name);
	}
	else if(rank == 4)
	{
		format(JobsInfo[jobid][jobRank4], 128, "%s", name);
	}
	else if(rank == 5)
	{
		format(JobsInfo[jobid][jobRank5], 128, "%s", name);
	}
	else if(rank == 6)
	{
		format(JobsInfo[jobid][jobRank6], 128, "%s", name);
	}
	else if(rank == 7)
	{
		format(JobsInfo[jobid][jobRank7], 128, "%s", name);
	}
	else if(rank == 8)
	{
		format(JobsInfo[jobid][jobRank8], 128, "%s", name);
	}
	else if(rank == 9)
	{
		format(JobsInfo[jobid][jobRank9], 128, "%s", name);
	}
	else if(rank == 10)
	{
		format(JobsInfo[jobid][jobRank10], 128, "%s", name);
	}
	SaveJob(jobid);
	return 1;
}

CMD:jobrankamount(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new jobid, amount;
	if(sscanf(params,"dd", jobid, amount)) return SyntaxMSG(playerid, "/jobrankamount [jobid] [amount]");
	if(!JobsInfo[jobid][jobOn]) return SCM(playerid, -1, "Invalid job.");
	JobsInfo[jobid][jobRanks] = amount;
	format(msg, sizeof(msg), "You have changed faction %d ranks amount to %d.", jobid, amount);
	SCM(playerid, COLOR_GREEN, msg);
	format(query, sizeof(query), "UPDATE `jobs` SET `ranks` = %d WHERE `id` = %d", amount, JobsInfo[jobid][jobID]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

CMD:jobhighrank(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new jobid, rank;
	if(sscanf(params,"dd", jobid, rank)) return SyntaxMSG(playerid, "/jobhighrank [jobid] [rank]");
	if(!JobsInfo[jobid][jobOn]) return SCM(playerid, -1, "Invalid job.");
	JobsInfo[jobid][jobHighRank] = rank;
	format(msg, sizeof(msg), "You have changed faction %d high rank to %d.", jobid, rank);
	SCM(playerid, COLOR_GREEN, msg);
	format(query, sizeof(query), "UPDATE `jobs` SET `highrank` = %d WHERE `id` = %d", rank, JobsInfo[jobid][jobID]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

CMD:removejob(playerid,params[])
{
	new JobID;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",JobID)) return SyntaxMSG(playerid, "/removejob [Job-ID]");
	if(!JobsInfo[JobID][jobOn]) return SCM(playerid, -1,"ERROR: Job Does Not Exist!");
	DestroyDynamicPickup(JobsInfo[JobID][jobPickUp]);
	DestroyDynamic3DTextLabel(Text3D:JobsInfo[JobID][jobLabel]);
	format(query, sizeof(query), "DELETE FROM `jobs` WHERE `id` = %d",JobsInfo[JobID][jobID]);
	mysql_function_query(dbHandle, query, true, "OnJobRemove", "i", JobID);
	format(msg,sizeof(msg),"You've destroyed Dynamic Job id: %d!",JobID);
	SCM(playerid, COLOR_YELLOWG, msg);
	return 1;
}

CMD:jobname(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
	new jobid, name[64];
	if(sscanf(params,"ds[64]", jobid, name)) return SyntaxMSG(playerid, "/jobname [jobid] [name]");
	if(!JobsInfo[jobid][jobOn]) return SCM(playerid, -1, "Invalid job.");
	format(JobsInfo[jobid][jobName], 128, "%s", name);
	format(msg, sizeof(msg), "You have changed job %d name to %s.", jobid, name);
	SCM(playerid, COLOR_GREEN, msg);
	format(query, sizeof(query), "UPDATE `jobs` SET `name` = '%s' WHERE `id` = %d", name, JobsInfo[jobid][jobID]);
	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}

CMD:sethp(playerid, params[])
{
	new id,hp;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(sscanf(params,"ud",id,hp)) return SyntaxMSG(playerid, "/sethp [playerid/PartOfName] [hp(1-100)]");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	format(msg, sizeof(msg), "* Admin %s has set your HP to %d.", GetNameEx(playerid), hp);
	SCM(id, COLOR_WHITE, msg);
	format(msg, sizeof(msg), "* You have set %s HP to %d", GetNameEx(id), hp);
	SCM(playerid, COLOR_WHITE, msg);
	SetPlayerHealth(id, hp);
	return 1;
}

CMD:aremoveplant(playerid, params[])
{
	new id;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(sscanf(params,"d",id)) return SyntaxMSG(playerid, "/aremoveplant [plantID]");
	if(!CropsInfo[id][pPlanted]) return SCM(playerid, COLOR_WHITE, "Plant doesn't exists.");
	SCMEx(playerid, COLOR_LIGHTRED, "You have deleted crop ID: %d", id);
	DestroyCrop(id);
	return 1;
}

CMD:plantinfo(playerid, params[])
{
	new plant = GetClosestPlantID(playerid);
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(plant == -1) return SCM(playerid, COLOR_WHITE, "You are not standing near any plant.");
	SCMEx(playerid, COLOR_LIGHTBLUE, "Plant ID: %d, Planter: %s.", plant, CropsInfo[plant][pPlanter]);
	return 1;
}

CMD:showplants(playerid, params[])
{
	new zone[MAX_ZONE_NAME];
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	new string[500];
	for(new i = 0; i < MAX_PLANTS; i++)
	{
		if(CropsInfo[i][pPlanted])
		{
			GetCoords2DZone(CropsInfo[i][pX], CropsInfo[i][pY], zone, MAX_ZONE_NAME);
			format(string, sizeof(string), "%s\n<%d>%s" ,string, i, zone);
		}
	}
	ShowDialog(playerid,Show:<ShowPlants>,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Plants:"EMBED_RED"",string,"Teleport","Cancel");
	return 1;
}

forward OnCheckCriminal(playerid);
public OnCheckCriminal(playerid)
{
  new rows, fields, total = 0;
  cache_get_data(rows, fields);
  if(rows)
  {
    while(total < rows)
    {
      cache_get_row(total, 2, CriminalRecord[playerid][total][mCharge], dbHandle, 128);
      total++;
    }
  }
  return 1;
}


CMD:changename(playerid, params[])
{
	new id,name[MAX_PLAYER_NAME];
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5)) return NotAuthMSG(playerid);
	if(sscanf(params,"us[64]",id,name)) return SyntaxMSG(playerid, "/changename [playerid/PartOfName] [new name]");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	//-------------------------------------------------------------------------------------------------------------
	format(query, sizeof(query), "UPDATE `users` SET `name` = '%s' WHERE `name` = '%s'", name, GetName(id));
	mysql_function_query(dbHandle, query, false, "", "");
	//-------------------------------------------------------------------------------------------------------------
	if(PlayerInfo[id][pHouseKey] != -1 && strcmp(GetName(id), HouseInfo[PlayerInfo[id][pHouseKey]][hOwner], true) == 0)
	{
		format(query, sizeof(query), "UPDATE `houses` SET `owner` = '%s' WHERE `owner` = '%s'", name, GetName(id));
		mysql_function_query(dbHandle, query, false, "", "");
		format(HouseInfo[PlayerInfo[id][pHouseKey]][hOwner], MAX_PLAYER_NAME, "%s", GetName(id));
	}
	if(PlayerInfo[id][pCarKey] != -1 && strcmp(GetName(id), VehicleInfo[PlayerInfo[id][pCarKey]][carOwner], true) == 0)
	{
		format(query, sizeof(query), "UPDATE `ownedvehicles` SET `owner` = '%s' WHERE `owner` = '%s'", name, GetName(id));
		mysql_function_query(dbHandle, query, false, "", "");
		format(VehicleInfo[PlayerInfo[id][pCarKey]][carOwner], MAX_PLAYER_NAME, "%s", GetName(id));
	}
	//-------------------------------------------------------------------------------------------------------------
	if(PlayerInfo[id][pBizKey] != -1)
	{
		format(query, sizeof(query), "UPDATE `business` SET `owner` = '%s' WHERE `owner` = '%s'", name, GetName(id));
		mysql_function_query(dbHandle, query, false, "", "");
		format(BizInfo[PlayerInfo[id][pBizKey]][bizOwner], MAX_PLAYER_NAME, "%s", GetName(id));
	}
	//-------------------------------------------------------------------------------------------------------------
	if(!CompareStrings(PlayerVehicle[id][pVeh1], "None"))
	{
		format(query, sizeof(query), "UPDATE `ownedvehicles` SET `owner` = '%s' WHERE `owner` = '%s' AND slot = %d", name, GetName(id), 1);
		mysql_function_query(dbHandle, query, false, "", "");
	}
	//-------------------------------------------------------------------------------------------------------------
	if(!CompareStrings(PlayerVehicle[id][pVeh2], "None"))
	{
		format(query, sizeof(query), "UPDATE `ownedvehicles` SET `owner` = '%s' WHERE `owner` = '%s' AND slot = %d", name, GetName(id), 2);
		mysql_function_query(dbHandle, query, false, "", "");
	}
	//-------------------------------------------------------------------------------------------------------------
	if(!CompareStrings(PlayerVehicle[id][pVeh3], "None"))
	{
		format(query, sizeof(query), "UPDATE `ownedvehicles` SET `owner` = '%s' WHERE `owner` = '%s' AND slot = %d", name, GetName(id), 3);
		mysql_function_query(dbHandle, query, false, "", "");
	}
	//-------------------------------------------------------------------------------------------------------------
	format(query, sizeof(query), "UPDATE `playertoys` SET `owner` = '%s' WHERE `owner` = '%s'", name, GetName(id));
	mysql_function_query(dbHandle, query, false, "", "");
	//-------------------------------------------------------------------------------------------------------------
	if(PlayerOwnChannel(id))
	{
		format(query, sizeof(query), "UPDATE `radios` SET `owner` = '%s' WHERE `owner` = '%s'", name, GetName(id));
		mysql_function_query(dbHandle, query, false, "", "");
	}
	//-------------------------------------------------------------------------------------------------------------
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		if(CompareStrings(VehicleInfo[i][carOwner], GetName(id)))
		{
			format(VehicleInfo[i][carOwner], MAX_PLAYER_NAME, "%s", GetName(id));
		}
	}
	//-------------------------------------------------------------------------------------------------------------
	for(new i = 0; i < MAX_RADIOS; i++)
	{
		if(CompareStrings(RadiosInfo[i][radioOwner], GetName(id)))
		{
			format(RadiosInfo[i][radioOwner], MAX_PLAYER_NAME, "%s", GetName(id));
		}
	}
	//-------------------------------------------------------------------------------------------------------------
	format(msg, sizeof(msg), "AdmCmd: Numele %s a fost schimbat in %s de catre administratorul %s.", GetNameEx(id), name, GetNameEx(playerid));
	AMSG(COLOR_LIGHTRED, msg);
	SCMEx(id, COLOR_LIGHTBLUE, "Numele tau a fost schimbat din %s in %s de catre administratorul %s.", GetNameEx(id), name, GetNameEx(playerid));
	SetPlayerName(id, name);
	return 1;
}

CMD:getworld(playerid, params[])
{
	new id;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return NotAuthMSG(playerid);
	if(sscanf(params,"u",id)) return SyntaxMSG(playerid, "/getworld [playerid/PartOfNames]");
	if(!PlayerIsOn(id)) return NotConnectedMSG(playerid);
	SCMEx(playerid, COLOR_WHITE, "The player is in %d Virtual World.", GetWorld(id));
	return 1;
}

CMD:aengine(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3)) return NotAuthMSG(playerid);
	new vehicleid = GetPlayerVehicleID(playerid);
	ToggleVehicleEngine(vehicleid, playerid);
	SCM(playerid, COLOR_GREEN,"You have successfully started the engine of the car.");
	return 1;
}

CMD:gopos(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_4)) return NotAuthMSG(playerid);
	new Float:x, Float:y, Float:z;
	if(sscanf(params,"fff", x, y ,z)) return SyntaxMSG(playerid, "/gopos [Pos X] [Pos Y] [Pos Z]");
	PutPlayer(playerid, x, y ,z);
	return 1;
}

CMD:x(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_4)) return NotAuthMSG(playerid);
	new Float:x;
	if(sscanf(params,"f", x)) return SyntaxMSG(playerid, "/x [Pos X]");
	PutPlayer(playerid, PlayerPosX(playerid)+x, PlayerPosY(playerid), PlayerPosZ(playerid));
	return 1;
}

CMD:y(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_4)) return NotAuthMSG(playerid);
	new Float:y;
	if(sscanf(params,"f", y)) return SyntaxMSG(playerid, "/y [Pos Y]");
	PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid)+y, PlayerPosZ(playerid));
	return 1;
}

CMD:z(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_4)) return NotAuthMSG(playerid);
	new Float:z;
	if(sscanf(params,"f", z)) return SyntaxMSG(playerid, "/z [Pos Z]");
	PutPlayer(playerid, PlayerPosX(playerid), PlayerPosY(playerid), PlayerPosZ(playerid)+z);
	return 1;
}

CMD:settime(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return NotAuthMSG(playerid);
    new hour;
    if(sscanf(params, "d", hour)) return SyntaxMSG(playerid, "/settime [hour]");
    SetWorldTime(hour);
    format(msg, sizeof(msg), "AdmCmd: %s was changed the World Time to %d.", GetNameEx(playerid), hour);
    AMSG(COLOR_LIGHTRED, msg);
    return 1;
}